{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"hackettyu ¶ - [2019-11-13]:[send to kindle] - [2019-11-13]:[OGP plugin] - [2019-11-13]:[support markdown emoji] + [2019-12-05]:[add google analytics] - [2020-03-17]:[del some articles] + [2020-06-16]:[add material-mkdocs] Wine List 苦精酒 Absinth 威士忌 百灵坛 波本 君度力娇酒 马天尼 三得利威士 三子猴子 麦卡伦 12 雪梨 杰克丹尼 单桶 单一麦芽 乐加维林 卡比利特 Coffee List 也门玛塔里 牙买加蓝山一号 瑰夏 哥斯达黎加 莫加特 也门 乌黛妮 云南 繁云 Beer List 树屋 Podcast List FLOWCoffee 枫言枫语 随机波动 疯投圈 Teahour weak self 捕蛇者说 Book List 2020 香港第一课 2020-02-02 编程珠玑-续 2020-03-02 Effective Java 中文版第二版 2020-03-12 数据密集型应用系统设计 2020-03-15 奈飞文化手册 2020-03-20 只是为了好玩 2020-04-10 原子习惯 2020-04-16 子弹笔记 2020-06-18 大教堂与集市 2020-08-02 永久档案 SICP Python 实现 SRE: Google 运维解密 混乱的猴子 Pro-Git 数据库系统内幕 Cpython internal 软件设计的哲学 了不起的我 黑客与画家 纸知识 Just List + 酒吧长谈 + 巴黎烧了吗 + 统计陷阱 + Erlang 程序设计 + 英语在用--剑桥初级英语语法（英文版） + 流式系统 + 递归与函数式的奥妙 + 计算机程序设计艺术 + 九号梦 + 翻译研究 + 陶哲轩教你学数学 + 共同的底线 + 日本色气 + RUST 权威指南 + 数据库系统内幕 + 把自己作为方法 + 重做 English + Software Engineering at Google: Lessons Learned from Programming Over Time + Chaos Engineering + The New Hacker's Dictionary + Remote + IF THEN","text_tokens":["程序设计","16","瑰","03","杰克","第一课","函数","英语语法","第一","中文","del","software","beer","式","语语","数据库","java","权威","初级","麦卡伦","画家","艺术","续","语法","self","密集","长谈","一号","日本","波动","13","[","--","¶","教堂","英语","weak","指南","文化","纸","乐加维林","ogp","永久","知识","程序","集市","git","send","单桶","mkdocs","list","得利","哲学"," ","笔记","2020","02","重做","捕蛇者","莫","枫言枫语","研究","密集型","为了","奈飞","投圈","wine","数据","dictionary","卡比","乌黛妮","google","蓝山","我","香港","只是","流式","plugin","add","time","10","奥妙","系统","lessons","kindle","递归","chaos","玛塔","单一","树屋","坛","大","2019","数据库系统","丹尼","'","共同","云南","作为","数学","剑桥","中文版","雪梨","then","特","夏","podcast","analytics","方法","繁云","teahour","the","12","flowcoffee","实现","support","if","猴子","emoji","巴黎","在","17","运维","英文","第二","英文版","底线","的","sre","黑客","威士","08","了","娇酒","coffee","解密","陶哲轩","from","你","s","internal","]","-","to","九号","百灵","君度力","06","18","梦","engineering","麦芽","hacker","hackettyu","里","据库","sicp","just","erlang","new","烧","15","04","自己","吗","+","book","计算","加特",":","三子","苦精酒","effective","设计","计算机","learned","比利","用","翻译","原子","内幕","版","python","珠玑","markdown","好玩","文版","应用","cpython","absinth","编程","pro","20","随机","把","remote","手册","（","三","some","色气","子弹","与","马天尼","教","软件设计","programming","了不起","哥斯达黎加","学","）","疯","说","混乱","牙买加","软件","11","卡比利","波本","rust","english","at","material","articles","over","档案","算机","习惯","统计","也门","酒吧","陷阱","05","威士忌"],"title":"Home","title_tokens":["home"]},{"location":"#hackettyu","text":"- [2019-11-13]:[send to kindle] - [2019-11-13]:[OGP plugin] - [2019-11-13]:[support markdown emoji] + [2019-12-05]:[add google analytics] - [2020-03-17]:[del some articles] + [2020-06-16]:[add material-mkdocs] Wine List 苦精酒 Absinth 威士忌 百灵坛 波本 君度力娇酒 马天尼 三得利威士 三子猴子 麦卡伦 12 雪梨 杰克丹尼 单桶 单一麦芽 乐加维林 卡比利特 Coffee List 也门玛塔里 牙买加蓝山一号 瑰夏 哥斯达黎加 莫加特 也门 乌黛妮 云南 繁云 Beer List 树屋 Podcast List FLOWCoffee 枫言枫语 随机波动 疯投圈 Teahour weak self 捕蛇者说 Book List 2020 香港第一课 2020-02-02 编程珠玑-续 2020-03-02 Effective Java 中文版第二版 2020-03-12 数据密集型应用系统设计 2020-03-15 奈飞文化手册 2020-03-20 只是为了好玩 2020-04-10 原子习惯 2020-04-16 子弹笔记 2020-06-18 大教堂与集市 2020-08-02 永久档案 SICP Python 实现 SRE: Google 运维解密 混乱的猴子 Pro-Git 数据库系统内幕 Cpython internal 软件设计的哲学 了不起的我 黑客与画家 纸知识 Just List + 酒吧长谈 + 巴黎烧了吗 + 统计陷阱 + Erlang 程序设计 + 英语在用--剑桥初级英语语法（英文版） + 流式系统 + 递归与函数式的奥妙 + 计算机程序设计艺术 + 九号梦 + 翻译研究 + 陶哲轩教你学数学 + 共同的底线 + 日本色气 + RUST 权威指南 + 数据库系统内幕 + 把自己作为方法 + 重做 English + Software Engineering at Google: Lessons Learned from Programming Over Time + Chaos Engineering + The New Hacker's Dictionary + Remote + IF THEN","text_tokens":["程序设计","16","瑰","03","杰克","第一课","函数","英语语法","第一","中文","del","software","beer","式","语语","数据库","java","权威","初级","麦卡伦","画家","艺术","续","语法","self","密集","长谈","一号","日本","波动","13","[","--","教堂","英语","weak","指南","文化","纸","乐加维林","ogp","永久","知识","程序","集市","git","send","单桶","mkdocs","list","得利","哲学"," ","笔记","2020","02","重做","捕蛇者","莫","枫言枫语","研究","密集型","为了","奈飞","投圈","wine","数据","dictionary","卡比","乌黛妮","google","蓝山","我","香港","只是","流式","plugin","add","time","10","奥妙","系统","lessons","kindle","递归","chaos","玛塔","单一","树屋","坛","大","2019","数据库系统","丹尼","'","共同","云南","作为","数学","剑桥","中文版","雪梨","then","特","夏","podcast","analytics","方法","繁云","teahour","the","12","flowcoffee","实现","support","if","猴子","emoji","巴黎","在","17","运维","英文","第二","英文版","底线","的","sre","黑客","威士","08","了","娇酒","coffee","解密","陶哲轩","from","你","s","internal","]","-","to","九号","百灵","君度力","06","18","梦","engineering","麦芽","hacker","里","据库","sicp","just","erlang","new","烧","15","04","自己","吗","+","book","计算","加特",":","三子","苦精酒","effective","设计","计算机","learned","比利","用","翻译","原子","内幕","版","python","珠玑","markdown","好玩","文版","应用","cpython","absinth","编程","pro","20","随机","把","remote","手册","（","三","some","色气","子弹","与","马天尼","教","软件设计","programming","了不起","哥斯达黎加","学","）","疯","说","混乱","牙买加","软件","11","卡比利","波本","rust","english","at","material","articles","over","档案","算机","习惯","统计","也门","酒吧","陷阱","05","威士忌"],"title":"hackettyu","title_tokens":["hackettyu"]},{"location":"cheatsheet/","text":"Cheetsheet ¶ Golang ¶ goproxy.io/zh/ Github ¶ Release、Code(ZIP) 文件加速： gh.con.sh | 美国 gh.api.99988866.xyz | 美国 download.fastgit.org | 日本东京 pd.zwc365.com | 中国香港 （相对下面的宽带更大一点 g.ioiox.com | 中国香港 （10M 宽带但稳定，不会动不动下载中断，算是备用 git.yumenaka.net | 美国洛杉矶（晚上时比前面两个美国的更快 Git Clone 加速： hub.fastgit.org | 中国香港 gitclone.com | 中国浙江杭州 github.com.cnpmjs.org | 新加坡 Raw 文件加速： cdn.jsdelivr.net | 中国国内 raw.fastgit.org | 中国香港 git.yumenaka.net | 美国洛杉矶","text_tokens":["东京","zip","一点","更大","算是","golang","zh","中国","raw","io","org","日本","动不动","¶","gitclone","jsdelivr","相对","，","git","国内"," ","ioiox","下面",".","时比","晚上","前面","两个","浙江",")","(","香港","10m","下载","con","快","cheetsheet","加速","code","com","但","download","goproxy","/","更","cnpmjs","github","clone","fastgit","|","备用","不会","的","中国香港","宽带","：","文件","新加坡","美国","sh","api.99988866","cdn","杭州","hub","zwc365","xyz","不动","g","net","gh","、","中断","（","yumenaka","pd","洛杉矶","稳定","release"],"title":"Cheetsheet","title_tokens":["cheetsheet"]},{"location":"cheatsheet/#cheetsheet","text":"","text_tokens":[],"title":"Cheetsheet","title_tokens":["cheetsheet"]},{"location":"cheatsheet/#golang","text":"goproxy.io/zh/","text_tokens":["zh","goproxy","/",".","io"],"title":"Golang","title_tokens":["golang"]},{"location":"cheatsheet/#github","text":"Release、Code(ZIP) 文件加速： gh.con.sh | 美国 gh.api.99988866.xyz | 美国 download.fastgit.org | 日本东京 pd.zwc365.com | 中国香港 （相对下面的宽带更大一点 g.ioiox.com | 中国香港 （10M 宽带但稳定，不会动不动下载中断，算是备用 git.yumenaka.net | 美国洛杉矶（晚上时比前面两个美国的更快 Git Clone 加速： hub.fastgit.org | 中国香港 gitclone.com | 中国浙江杭州 github.com.cnpmjs.org | 新加坡 Raw 文件加速： cdn.jsdelivr.net | 中国国内 raw.fastgit.org | 中国香港 git.yumenaka.net | 美国洛杉矶","text_tokens":["fastgit","zwc365","东京","zip","xyz","一点","g","更大","不动","算是","晚上","net","前面","gh","|","备用","两个","浙江",")","不会","(","的","香港","、","中国","raw","10m","中断","中国香港","con","（","下载","快","宽带","：","cdn","org","yumenaka","日本","加速","code","动不动","文件","pd","洛杉矶","gitclone","jsdelivr","相对","com","但","新加坡","，","稳定","git","download","release","美国","sh"," ","ioiox","国内","下面","api.99988866","更","cnpmjs",".","杭州","hub","github","时比","clone"],"title":"Github","title_tokens":["github"]},{"location":"newsletter/","text":"Newsletter ¶ hackettyu.substack.com","text_tokens":[" ","newsletter","¶",".","com","substack","hackettyu"],"title":"Newsletter","title_tokens":["newsletter"]},{"location":"newsletter/#newsletter","text":"hackettyu.substack.com","text_tokens":["com","substack",".","hackettyu"],"title":"Newsletter","title_tokens":["newsletter"]},{"location":"rss/","text":"RSS ¶ hackettyu.com/feed_rss_created.xml hackettyu.com/feed_rss_updated.xml","text_tokens":["xml","created","updated"," ","/","rss","feed",".","¶","_","com","hackettyu"],"title":"RSS","title_tokens":["rss"]},{"location":"rss/#rss","text":"hackettyu.com/feed_rss_created.xml hackettyu.com/feed_rss_updated.xml","text_tokens":["xml","created","updated"," ","/","rss",".","feed","_","com","hackettyu"],"title":"RSS","title_tokens":["rss"]},{"location":"todo/","text":"Todo ¶ Newsletter Reading expvar - 公共变量的标准化接口 IT 术语小词典 Aticles pingcap weekly rfc2616 数据库内核月报 pingcap university Done Web Worker 文献综述 Inbox Tools figma redash netlify gtmhub Documents Princeple 混沌工程原则 12-factors Course 计算机教育中缺失的一课 JavaScript开发现代Web应用程序 Algorithms cp-algorithms 小浩算法 Series Pro git 软件设计的哲学 ===5.1=== 2020-2021 设计趋势ISUX报告 · 运营篇 React 学习之道 kubernetes by example Side Project 一个浏览器桌面通知 npm 包 notification-Koro1 homebridge Golang go-sword","text_tokens":["2021","aticles","小浩","报告","开发","小","rfc2616","文献","混沌","golang","数据库","sword","·","redash","expvar","算法","kubernetes","教育","¶","=","程序","git","哲学","月"," ","by","2020","todo","done","接口","react","原则","reading","gtmhub","篇","桌面","数据","weekly","内核","浏览","university","worker","标准","inbox","计算机教育","报","koro1","go","it","newsletter","的","princeple","一课","cp","factors","project","现代","algorithms","学习","-","通知","包","浏览器","中","变量","据库","notification","标准化","example","javascript","应用程序","计算","词典","计算机","设计","documents","pingcap","应用","netlify","pro","homebridge","工程","isux","软件设计","术语","tools","缺失","figma","之道","运营","course","一个","软件","5.1","趋势","side","公共","算机","npm","综述","series","12","web"],"title":"Todo","title_tokens":["todo"]},{"location":"todo/#todo","text":"Newsletter Reading expvar - 公共变量的标准化接口 IT 术语小词典 Aticles pingcap weekly rfc2616 数据库内核月报 pingcap university Done Web Worker 文献综述 Inbox Tools figma redash netlify gtmhub Documents Princeple 混沌工程原则 12-factors Course 计算机教育中缺失的一课 JavaScript开发现代Web应用程序 Algorithms cp-algorithms 小浩算法 Series Pro git 软件设计的哲学 ===5.1=== 2020-2021 设计趋势ISUX报告 · 运营篇 React 学习之道 kubernetes by example Side Project 一个浏览器桌面通知 npm 包 notification-Koro1 homebridge Golang go-sword","text_tokens":["2021","aticles","小浩","报告","开发","小","rfc2616","文献","混沌","golang","数据库","sword","·","redash","expvar","算法","kubernetes","教育","=","程序","git","哲学","月"," ","by","2020","done","接口","react","原则","reading","gtmhub","篇","桌面","数据","weekly","内核","浏览","university","worker","标准","inbox","计算机教育","报","koro1","go","it","newsletter","的","princeple","一课","cp","factors","project","现代","algorithms","学习","-","通知","包","浏览器","中","变量","据库","notification","标准化","example","javascript","应用程序","计算","词典","计算机","设计","documents","pingcap","应用","netlify","pro","homebridge","工程","isux","软件设计","术语","tools","缺失","figma","之道","运营","course","一个","软件","5.1","趋势","side","公共","算机","npm","综述","series","12","web"],"title":"Todo","title_tokens":["todo"]},{"location":"what-i-use/","text":"What I use ¶ Coding Software ¶ Visual Studio Code Chrome Edge Gear ¶ Flico minimal 61 Logic MX Master 2S Bose QC 30 Extentions ¶ send to kindle: pushtokindle.fivefilters.org/send.php?url=hackettyu.com","text_tokens":["61","pushtokindle","visual","?","coding","gear","qc","use","studio","software","2s","i","master","kindle","php","org","url","fivefilters","bose","to","edge","code","mx","minimal","30","¶","what","logic","=","chrome","com","hackettyu","extentions","send"," ","/",".","flico",":"],"title":"What I use","title_tokens":["what","use","i"," "]},{"location":"what-i-use/#what-i-use","text":"","text_tokens":[],"title":"What I use","title_tokens":["what","use","i"," "]},{"location":"what-i-use/#coding-software","text":"Visual Studio Code Chrome Edge","text_tokens":["studio","visual","edge","code"," ","chrome"],"title":"Coding Software","title_tokens":["coding","software"," "]},{"location":"what-i-use/#gear","text":"Flico minimal 61 Logic MX Master 2S Bose QC 30","text_tokens":["61","bose","2s"," ","mx","minimal","30","qc","flico","master","logic"],"title":"Gear","title_tokens":["gear"]},{"location":"what-i-use/#extentions","text":"send to kindle: pushtokindle.fivefilters.org/send.php?url=hackettyu.com","text_tokens":["org","url","fivefilters","pushtokindle","?","send","to"," ","/",".","kindle","=","com",":","php","hackettyu"],"title":"Extentions","title_tokens":["extentions"]},{"location":"words/","text":"Words ¶ duration 持续时间 Side Effect 副作用 axis 轴 枢纽 conflict 冲突 operand 操作数","text_tokens":["时间","操作","words","effect","duration","操作数","axis","conflict","轴","operand","枢纽","side","¶","冲突","持续时间","持续","作用","作数"," ","副作用"],"title":"Words","title_tokens":["words"]},{"location":"words/#words","text":"duration 持续时间 Side Effect 副作用 axis 轴 枢纽 conflict 冲突 operand 操作数","text_tokens":["时间","操作数","轴","操作","作用","axis","作数","operand"," ","枢纽","副作用","持续","side","effect","duration","冲突","持续时间","conflict"],"title":"Words","title_tokens":["words"]},{"location":"2018/0913/ubuntu-board/","text":"快速入门 ¶ 使用 syndaemon 程序 ¶ 名称：syndaemon - 一个程序，用于监视键盘活动并在使用键盘时禁用触摸板。 概要：syndaemon [ -i idle-time ] [ -m poll-inverval ] [ -d ] [ -p pid-file ] [ -t ] [ -k ] [ -K ] [ -R ] 描述：键入时禁用触摸板可避免不必要的指针移动，从而导致焦点偏向错误的窗口。 选项 参数 说明 -i < 空闲时间 > 在启用触摸板之前最后一次按键后等待的秒数。（默认为2.0秒） -m < poll-interval > 在两个轮询间隔之间等待多少毫秒。如果此值太低，将导致不必要的唤醒。如果该值太高，则可能不会注意到某些按键（在两个间隔之间发生按下和释放）。使用-R运行时，此开关无效。默认值为200毫秒 -d 从守护进程开始，即在后台运行 -p < pid-file > 创建具有指定文件名的pid文件。只有在守护程序模式下启动程序时才会创建pid文件 -t 仅响应键盘活动，禁用点击和滚动，而不禁用鼠标移动 -k 监视键盘活动时忽略修饰键 -K 像-k一样，但也忽略了Modifier + Key组合 -R 使用XRecord扩展来检测键盘活动，而不是轮询键盘状态 使用 syndaemon # syndaemon 可以监控键盘活动并在打字时禁用触摸板，有多个选项可以控制禁用条件。可以通过下面命令查看帮助： $ syndaemon -h # 例如要在打字 0.5 秒后禁用点击和滚动，忽略 Ctrl 等修饰键，使用 $ syndaemon -i 0 .5 -t -K -R 设置开机启动脚本（利用 rc.local） ¶ www.linuxidc.com/Linux/2017-09/147166.htm rc.local脚本是一个Ubuntu开机后会自动执行的脚本，我们可以在该脚本内添加命令行指令。该脚本位于/etc/路径下，需要root权限才能修改。 该脚本具体格式如下： #!/bin/sh -e # # rc.local # # This script is executed at the end of each multiuser runlevel. # Make sure that the script will \"exit 0\" on success or any other # value on error. # # In order to enable or disable this script just change the execution # bits. # # By default this script does nothing. exit 0 在 exit 0 前添加如下代码： syndaemon -i 1 -t -K -R 注意: 一定要将命令添加在exit 0之前。里面可以直接写命令或者执行Shell脚本文件sh 参考 ¶ 在打字时禁用触摸板 syndaemon(1) - Linux man page","text_tokens":["will","直接","如下","不是","该","则","利用","具体","到",">","$","活动","多少","pid","太低","移动","从而","间隔","守护","发生","make","也","order","打字","查看","添加","this","最后","入门","ctrl","修改","模式","必要","按下","启动","www","syndaemon","后台","does","为","bits","[","other","¶","时","指令","#","execution","程序","释放","，","设置","0","键入","该值","d"," ","any","下面","等","位于","导致","change",".","by","1","即","太高","下","success","禁用","modifier","是","p","multiuser","某些","2.0","唤醒","in","root","控制","触摸板","两个","shell",")","\"","each","(","default","xrecord","executed","is","快速","无效","而","例如","interval","来","。","idle","time","焦点","窗口","如果","命令","帮助","man","可","状态","像","开机","说明","格式","或者","linuxidc","enable","error","com","但","秒数","避免","条件","要","滚动","etc","时才","使用","不必","rc","t","/","命令行","响应","从","具有","通过","多个","the","disable","自动","扩展","前","200","修饰","执行","一样","检测","偏向","local","可以","在","不会","按键","概要","的","内","bin","文件名","exit","inverval","可能","i","会","启用","了","09","键","linux","权限","里面","script","：","组合","]","不必要","-","用于","和","忽略","on","默认值","to","文件","nothing","<","点击","0.5","代码","value","触摸","写","k","仅","开关","poll","!","just","key","路径","后","sh","选项","创建","秒","不禁","指定","+","之前","that",":","等待","时间","ubuntu","end","e","将","file","此","用","sure","之间","空闲","监视","指针","一定","错误","我们","进程","5","注意","需要","只有","并","开始","默认","（","鼠标","htm","脚本","才能","runlevel","h","监控","描述","）","运行","r","一个","at","键盘","毫秒","or","m","147166","of","有","2017","参考","参数","一次","轮询","名称","此值","page"],"title":"解决 Ubuntu 16.04 没有 「在打字时停用触摸板」选项","title_tokens":["触摸","ubuntu","解决","「","打字"," ","」","选项","触摸板","没有","时","在","16.04","停用"]},{"location":"2018/0913/ubuntu-board/#_1","text":"","text_tokens":[],"title":"快速入门","title_tokens":["快速","入门"]},{"location":"2018/0913/ubuntu-board/#syndaemon","text":"名称：syndaemon - 一个程序，用于监视键盘活动并在使用键盘时禁用触摸板。 概要：syndaemon [ -i idle-time ] [ -m poll-inverval ] [ -d ] [ -p pid-file ] [ -t ] [ -k ] [ -K ] [ -R ] 描述：键入时禁用触摸板可避免不必要的指针移动，从而导致焦点偏向错误的窗口。 选项 参数 说明 -i < 空闲时间 > 在启用触摸板之前最后一次按键后等待的秒数。（默认为2.0秒） -m < poll-interval > 在两个轮询间隔之间等待多少毫秒。如果此值太低，将导致不必要的唤醒。如果该值太高，则可能不会注意到某些按键（在两个间隔之间发生按下和释放）。使用-R运行时，此开关无效。默认值为200毫秒 -d 从守护进程开始，即在后台运行 -p < pid-file > 创建具有指定文件名的pid文件。只有在守护程序模式下启动程序时才会创建pid文件 -t 仅响应键盘活动，禁用点击和滚动，而不禁用鼠标移动 -k 监视键盘活动时忽略修饰键 -K 像-k一样，但也忽略了Modifier + Key组合 -R 使用XRecord扩展来检测键盘活动，而不是轮询键盘状态 使用 syndaemon # syndaemon 可以监控键盘活动并在打字时禁用触摸板，有多个选项可以控制禁用条件。可以通过下面命令查看帮助： $ syndaemon -h # 例如要在打字 0.5 秒后禁用点击和滚动，忽略 Ctrl 等修饰键，使用 $ syndaemon -i 0 .5 -t -K -R","text_tokens":["不是","则","到",">","$","活动","多少","pid","太低","移动","从而","间隔","守护","发生","也","打字","查看","最后","ctrl","模式","必要","按下","启动","syndaemon","后台","为","[","时","#","程序","释放","，","0","键入","该值","d"," ","下面","等","导致",".","即","太高","下","禁用","modifier","p","某些","2.0","唤醒","控制","触摸板","两个","xrecord","无效","而","例如","interval","来","。","idle","time","焦点","窗口","如果","命令","帮助","可","状态","像","说明","但","秒数","避免","条件","要","滚动","时才","使用","不必","t","响应","从","具有","通过","多个","扩展","200","修饰","一样","检测","偏向","可以","在","不会","按键","概要","的","文件名","inverval","可能","i","会","启用","了","键","：","组合","]","不必要","-","用于","和","忽略","默认值","文件","<","点击","0.5","触摸","k","仅","开关","poll","key","后","选项","创建","秒","不禁","指定","+","之前","等待","时间","将","file","此","用","之间","空闲","监视","指针","错误","进程","5","注意","只有","并","开始","默认","（","鼠标","h","监控","描述","）","运行","r","一个","键盘","毫秒","m","有","参数","一次","轮询","名称","此值"],"title":"使用 syndaemon 程序","title_tokens":["使用","程序"," ","syndaemon"]},{"location":"2018/0913/ubuntu-board/#rclocal","text":"www.linuxidc.com/Linux/2017-09/147166.htm rc.local脚本是一个Ubuntu开机后会自动执行的脚本，我们可以在该脚本内添加命令行指令。该脚本位于/etc/路径下，需要root权限才能修改。 该脚本具体格式如下： #!/bin/sh -e # # rc.local # # This script is executed at the end of each multiuser runlevel. # Make sure that the script will \"exit 0\" on success or any other # value on error. # # In order to enable or disable this script just change the execution # bits. # # By default this script does nothing. exit 0 在 exit 0 前添加如下代码： syndaemon -i 1 -t -K -R 注意: 一定要将命令添加在exit 0之前。里面可以直接写命令或者执行Shell脚本文件sh","text_tokens":["will","直接","如下","该","具体","make","order","添加","this","修改","www","syndaemon","does","bits","other","指令","execution","#","，","0"," ","any","by","位于","change",".","1","下","success","是","multiuser","in","root","shell","\"","each","default","executed","is","runlevel","命令","。","开机","格式","或者","linuxidc","enable","error","com","要","etc","rc","/","命令行","t","the","disable","自动","前","执行","可以","在","的","内","bin","exit","会","i","09","linux","里面","权限","script","：","on","-","to","nothing","文件","代码","value","写","k","just","!","路径","后","sh","that","之前",":","ubuntu","end","e","sure","将","一定","我们","注意","需要","htm","脚本","才能","r","一个","at","or","147166","of","2017","local"],"title":"设置开机启动脚本（利用 rc.local）","title_tokens":["开机","启动","设置","）","利用"," ","rc","（",".","local","脚本"]},{"location":"2018/0913/ubuntu-board/#_2","text":"在打字时禁用触摸板 syndaemon(1) - Linux man page","text_tokens":["触摸","禁用","syndaemon","-","打字"," ","触摸板","man","时","1","在","linux",")","page","("],"title":"参考","title_tokens":["参考"]},{"location":"2018/0927/code-cloc/","text":"Why use cloc ¶ Why Use cloc? cloc has many features that make it easy to use, thorough, extensible, and portable: Exists as a single, self-contained file that requires minimal installation effort---just download the file and run it. Can read language comment definitions from a file and thus potentially work with computer languages that do not yet exist. Allows results from multiple runs to be summed together by language and by project. Can produce results in a variety of formats: plain text, SQL, XML, YAML, comma separated values. Can count code within compressed archives (tar balls, Zip files, Java .ear files). Has numerous troubleshooting options. Handles file and directory names with spaces and other unusual characters. Has no dependencies outside the standard Perl distribution. Runs on Linux, FreeBSD, NetBSD, OpenBSD, Mac OS X, AIX, HP-UX, Solaris, IRIX, and z/OS systems that have Perl 5.6 or higher. The source version runs on Windows with either ActiveState Perl, Strawberry Perl, Cygwin, or MobaXTerm+Perl plugin. Alternatively on Windows one can run the Windows binary which has no dependencies. cloc quick-start ¶ cloc | quick-start $ cloc cloc/ 465 text files. 427 unique files. 251 files ignored. http://cloc.sourceforge.net v 1 .64 T = 1 .72 s ( 240 .3 files/s, 16069 .0 lines/s ) ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- Java 234 2277 1889 10399 Javascript 9 122 175 2756 JSP 33 176 65 2313 HTML 18 164 24 2001 Python 57 441 712 1468 C++ 12 14 15 984 XML 39 109 75 801 Bourne Shell 2 42 44 258 DOS Batch 4 51 4 134 CSS 2 20 31 59 JSON 2 0 0 22 Groovy 2 7 15 20 ------------------------------------------------------------------------------- SUM: 414 3423 3049 21215 ------------------------------------------------------------------------------- 参考 ¶ cloc | github releases cloc | sourceforge","text_tokens":["groovy","zip","unique","?","options","22","standard","$","higher","distribution","be","2277","do","exists","count","run","make","ear","many","---","java","files","64",",","75","c++","self","netbsd","extensible","427","text","effort","7","164","lines","minimal","potentially","yaml","other","perl","¶","alternatively","175","with","=","801","json","releases","read","has","0","portable","240","why"," ","bourne","by","variety","separated","42","version",".","1","yet","712","59","ux","blank","in","directory","72","quick","definitions","shell","values","one",")","1468","sum","(","either","122","3423","sourceforge","features","plugin","easy","exist","source","44","single","-------------------------------------------------------------------------------","109","openbsd","together","code","14","65","thus","414","10399","characters","html","39","251","3049","spaces","v","2756","download","within","balls","16069","mac","/","t","134","cloc","windows","github","the","which","984","archives","tar","31","it","hp","2001","css","|","use","can","activestate","24","51","project","1889","strawberry","have","start","languages","as","linux","from","comma","sql","s","batch","multiple","on","cygwin","to","-","no","allows","441","258","handles","language","and","18","runs","3","compressed","dos","x","troubleshooting","just","a","freebsd","15","176","javascript","+","that","irix",":","file","summed","contained","net","aix","python","jsp","os","20","produce","465","234","thorough","9","numerous","names","unusual","dependencies","comment","5.6","installation","plain","21215","solaris","computer","or","z","mobaxterm","ignored","xml","of","http","work","57","systems","33","参考","results","requires","formats","2","outside","not","binary","12","4","2313"],"title":"用命令行工具 cloc 做代码行统计","title_tokens":["工具","统计","用","做"," ","命令行","命令","行","cloc","代码"]},{"location":"2018/0927/code-cloc/#why-use-cloc","text":"Why Use cloc? cloc has many features that make it easy to use, thorough, extensible, and portable: Exists as a single, self-contained file that requires minimal installation effort---just download the file and run it. Can read language comment definitions from a file and thus potentially work with computer languages that do not yet exist. Allows results from multiple runs to be summed together by language and by project. Can produce results in a variety of formats: plain text, SQL, XML, YAML, comma separated values. Can count code within compressed archives (tar balls, Zip files, Java .ear files). Has numerous troubleshooting options. Handles file and directory names with spaces and other unusual characters. Has no dependencies outside the standard Perl distribution. Runs on Linux, FreeBSD, NetBSD, OpenBSD, Mac OS X, AIX, HP-UX, Solaris, IRIX, and z/OS systems that have Perl 5.6 or higher. The source version runs on Windows with either ActiveState Perl, Strawberry Perl, Cygwin, or MobaXTerm+Perl plugin. Alternatively on Windows one can run the Windows binary which has no dependencies.","text_tokens":["zip","?","options","standard","higher","distribution","be","do","exists","count","run","make","ear","many","---","java","files",",","self","netbsd","extensible","text","effort","minimal","potentially","yaml","other","perl","alternatively","with","read","has","portable","why"," ","by","variety","separated","version",".","yet","ux","in","directory","definitions","values","one",")","(","either","features","plugin","easy","exist","source","single","openbsd","together","code","thus","characters","spaces","download","within","balls","mac","/","cloc","windows","the","which","archives","tar","it","hp","use","can","activestate","project","strawberry","have","languages","as","linux","from","comma","sql","multiple","on","cygwin","to","-","no","allows","handles","language","and","runs","compressed","x","troubleshooting","just","a","freebsd","+","that","irix",":","file","summed","contained","aix","os","produce","thorough","numerous","names","unusual","dependencies","comment","5.6","installation","plain","solaris","computer","or","z","mobaxterm","xml","of","work","systems","results","requires","formats","outside","not","binary"],"title":"Why use cloc","title_tokens":["use","why"," ","cloc"]},{"location":"2018/0927/code-cloc/#cloc-quick-start","text":"cloc | quick-start $ cloc cloc/ 465 text files. 427 unique files. 251 files ignored. http://cloc.sourceforge.net v 1 .64 T = 1 .72 s ( 240 .3 files/s, 16069 .0 lines/s ) ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- Java 234 2277 1889 10399 Javascript 9 122 175 2756 JSP 33 176 65 2313 HTML 18 164 24 2001 Python 57 441 712 1468 C++ 12 14 15 984 XML 39 109 75 801 Bourne Shell 2 42 44 258 DOS Batch 4 51 4 134 CSS 2 20 31 59 JSON 2 0 0 22 Groovy 2 7 15 20 ------------------------------------------------------------------------------- SUM: 414 3423 3049 21215 -------------------------------------------------------------------------------","text_tokens":["unique","22","$","2277","java","64","files",",","75","c++","427","7","text","164","lines","groovy","175","=","801","json","0","240"," ","bourne","42",".","1","712","59","blank","72","quick","shell",")","1468","sum","(","122","3423","sourceforge","44","-------------------------------------------------------------------------------","109","code","14","65","414","10399","html","39","251","3049","v","2756","16069","134","/","t","cloc","984","31","2001","css","|","24","51","1889","start","s","batch","258","-","441","language","18","3","dos","15","176","javascript",":","net","python","jsp","20","465","234","9","comment","21215","ignored","xml","http","57","33","2","12","4","2313"],"title":"cloc quick-start","title_tokens":["-","start"," ","quick","cloc"]},{"location":"2018/0927/code-cloc/#_1","text":"cloc | github releases cloc | sourceforge","text_tokens":["releases","cloc","sourceforge"," ","|","github"],"title":"参考","title_tokens":["参考"]},{"location":"2018/1001/chromium-google-api/","text":"管理员命令运行： setx GOOGLE_API_KEY “AIzaSyAUoSnO_8k-3D4-fOp-CFopA_NQAkoVCLw” setx GOOGLE_DEFAULT_CLIENT_ID “6307505647-6knmr84r2pj2leudg3pp1j0h1licd6b9.apps.googleusercontent.com” setx GOOGLE_DEFAULT_CLIENT_SECRET “rbeWhXTLgU8oLiUeefPsEL9c” 这三行分别是：API密钥、客户端ID、客户端密钥","text_tokens":["是","googleusercontent","三行","nqakovclw","管理","google","id","default","aizasyauosno","rbewhxtlgu8oliueefpsel9c","、","3d4","密钥","这","命令","client","apps","：","cfopa","客户","客户端","运行","-","api","6knmr84r2pj2leudg3pp1j0h1licd6b9","setx","8k","_","”","com","“","分别","管理员","key"," ","6307505647","secret",".","fop"],"title":"解决 chromium 缺少 google api 密钥无法登录问题","title_tokens":["登录","解决","密钥","api","无法","缺少"," ","chromium","问题","google"]},{"location":"2018/1004/command-close-nvida/","text":"简介 ¶ 环境：WIN10 寻找一种命令行开关驱动的方式以及关闭独显省电。 快速入门 ¶ 软件安装 ¶ 安装 devcon : docs.microsoft.com/zh-cn/windows-hardware/drivers/download-the-wdk 使用 ¶ 管理员运行，进入你的安装路径（ C:\\Program Files (x86)\\Windows Kits\\10\\Tools\\x64> 这是 64 位的）下： devcon find * > driver . txt 例如要关闭 NVIDIA 显卡： PCI\\VEN_10DE&DEV_139B&SUBSYS_01521558&REV_A2\\4&BED9AB3&0&0008: NVIDIA GeForce GTX 960M 截取一段编号查询并查询到唯一驱动： devcon find * VEN_10DE 运行： // 关闭 devcon disacble * VEN_10DE // 打开 // devcon enable * VEN_10DE 附录 ¶ 查询服务的命令 sc : // New-Alias -Name Run-SC -Value 'C:\\Windows\\System32\\sc.exe' // Run-SC query ALG sc query type = driver | findstr NVIDIA 打开图形驱动管理界面： start devmgmt . msc","text_tokens":["devmgmt","环境","x86",">","到","139b","安装","以及","drivers","run","zh","这是","64","files","入门","编号","microsoft","01521558","docs","dev","¶","c","=","system32","10de","管理员","，","geforce","0","&"," ",".","query","下","find","驱动","alias","cn","服务","简介",")","(","findstr","type","附录","查询","win10","快速","例如","wdk","命令","。","10","nvidia","\\","方式","位","enable","'","_","com","name","要","download","bed9ab3","使用","rev","命令行","/","windows","独显","the","exe","0008","alg","|","管理","ven","program","的","start","显卡","唯一","hardware","：","你","-","subsys","960m","打开","value","界面","new","开关","省电","路径","kits","寻找","进入",":","devcon","截取","图形","一种","x64","并","（","gtx","一段","txt","tools","pci","）","运行","软件","sc","*","disacble","a2","driver","msc","关闭","4"],"title":"用命令行操作 window 显卡","title_tokens":["操作","用"," ","显卡","命令行","命令","window"]},{"location":"2018/1004/command-close-nvida/#_1","text":"环境：WIN10 寻找一种命令行开关驱动的方式以及关闭独显省电。","text_tokens":["独显","的","开关","省电","win10","环境"," ","方式","命令行","驱动","寻找","命令","。","一种","以及","关闭","："],"title":"简介","title_tokens":["简介"]},{"location":"2018/1004/command-close-nvida/#_2","text":"","text_tokens":[],"title":"快速入门","title_tokens":["快速","入门"]},{"location":"2018/1004/command-close-nvida/#_3","text":"安装 devcon : docs.microsoft.com/zh-cn/windows-hardware/drivers/download-the-wdk","text_tokens":["the","drivers","download","-","zh","docs","hardware"," ","/","wdk","cn","安装",".","windows","microsoft","com",":","devcon"],"title":"软件安装","title_tokens":["软件","安装"]},{"location":"2018/1004/command-close-nvida/#_4","text":"管理员运行，进入你的安装路径（ C:\\Program Files (x86)\\Windows Kits\\10\\Tools\\x64> 这是 64 位的）下： devcon find * > driver . txt 例如要关闭 NVIDIA 显卡： PCI\\VEN_10DE&DEV_139B&SUBSYS_01521558&REV_A2\\4&BED9AB3&0&0008: NVIDIA GeForce GTX 960M 截取一段编号查询并查询到唯一驱动： devcon find * VEN_10DE 运行： // 关闭 devcon disacble * VEN_10DE // 打开 // devcon enable * VEN_10DE","text_tokens":["0008","find","到","x86",">","139b","4","驱动","安装","管理",")","ven","program","(","的","这是","查询","x64","64","files","例如","显卡","（","10","nvidia","并","gtx","编号","一段","：","你","txt","tools","pci","01521558","\\","）","运行","位","dev","subsys","960m","c","打开","enable","*","_","10de","disacble","管理员","，","要","a2","0","driver","&","bed9ab3","geforce","rev","路径"," ","kits","唯一","/","进入",".","windows","下","关闭",":","devcon","截取"],"title":"使用","title_tokens":["使用"]},{"location":"2018/1004/command-close-nvida/#_5","text":"查询服务的命令 sc : // New-Alias -Name Run-SC -Value 'C:\\Windows\\System32\\sc.exe' // Run-SC query ALG sc query type = driver | findstr NVIDIA 打开图形驱动管理界面： start devmgmt . msc","text_tokens":["exe","图形","devmgmt","alg","alias","驱动","服务","|","管理","findstr","的","type","run","查询","start","命令","nvidia","：","\\","-","sc","打开","c","'","=","value","system32","界面","name","new","driver"," ","/",".","windows","query","msc",":"],"title":"附录","title_tokens":["附录"]},{"location":"2018/1004/powershell-upper/","text":"简介 ¶ windows 下每次打开一个普通 cli 后发现要按 [win + X + A] 组合键才能打开管理员 cli ，感觉很麻烦，然后在网速查到了这个方法。 快速上手 ¶ 在普通 powershell 下输入下面的命令即可提权： Start-Process -verb runas \"C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\Powershell.exe\" 后面的路径根据实际的路径修改，最好用任务管理器查看系统使用的那个，系统内可能有几个 powershell 程序。 入门篇 ¶ powershell/module/microsoft.powershell.utility/new-alias?view=powershell-6 powershell/module/microsoft.powershell.core/about/about_functions?view=powershell-6 其实这样输入有点麻烦，bash 有 alias 这样的命令的给命令起别名， cmd 有doskey 这样的命令，而 powershell 的是 Set-Alias 。 下面的命令分别是添加、获取和删除别名： Set-Alias { $alias } { $command } Get-Alias | findstr { $alias } Remove-Item alias : { $alias } 用 Set-Alias 找不到能传参的方式，用了函数的方式，用法如下： Function FuncName （ args [] ） { code ; } 实际命令如下： Function fuck { Start-Process -verb runas \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Powershell.exe\" } Set-Alias sudo fuck 删除函数如下： del Function : { $your function } 进阶篇 ¶ about_Execution_Policies 上面的方法可以使用但是，关闭程序后旧失效了，找了一种方法把脚本写入全局。 找到全局设置文件 Microsoft.PowerShell_profile.ps1 ： Get-Variable profile | Format-List 如果没有自己创建一个，写入下面的代码： Function fuck { Start-Process -verb runas \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Powershell.exe\" } Set-Alias sudo fuck 保存后发现无法加载，因为默认不加载外部脚本，管理员权限下 powershell 运行： set-ExecutionPolicy RemoteSigned REMOTESIGNED 脚本可以运行。这是 Windows Server 2012 R2 中的默认执行策略。 要求从 Internet 下载的脚本和配置文件（包括电子邮件和即时消息程序）具有受信任的发布者的数字签名。 不要求你在本地计算机上编写的脚本（不是从 Internet 下载的）具有数字签名。 如果脚本已被取消阻止（比如通过使用 Unblock-File cmdlet），则运行从 Internet 下载但未签名的脚本。 存在运行来自 Internet 之外的源的未签名脚本和已签名但却是恶意的脚本的风险。 附录 ¶ cmd 提权： runas /user:hackett_yu@outlook.com cmd doskey sudo=runas /user:{$username} cmd","text_tokens":["如下","找到","bash","但是","?","不是","则","理器","用法","数字签名","sudo","your","$","每次","函数","上面","写入","del","这个","外部","这样","这是","查看","添加","入门","感觉","修改","utility","microsoft","失效","username","最好","get","[","信任","¶","c","execution","=","那个","win","程序","remove","item","管理员","，","system32","提权","关闭","设置","executionpolicy","list","比如","unblock","无法"," ","下面","有点","手","却是",".","6","后旧","下","}","是","已","funcname","源","v1.0","windowspowershell","core","alias","发布者","yu","给","简介","\"","findstr","about","function","电子邮件","outlook","附录","快速","而","要求","。","命令","下载","如果","系统","server","\\","能","user","{","code","方式","取消","入门篇","发布","全局","配置","_","com","但","要","doskey","即时","使用","签名","恶意","/","传参","从","方法","没有","具有","windows","通过","包括","编写","保存","上","exe","即可",";","syswow64","执行","发现","按","电子","|","管理","在","可以","加载","即时消息","的","内","不到","start","可能","args","了","权限","：","组合","你","]","和","很","-","cmd","set","powershell","internet","受","麻烦","文件","获取","配置文件","打开","别名","代码","中","profile","风险","x","几个","new","存在","a","路径","后","view","创建","消息","自己","ps1","+","计算",":","计算机","删除","后面","variable","用","根据","file","cmdlet","policies","起","进阶","因为","一种","本地","数字","module","策略","fuck","之外","实际","、","format","把","默认","（","functions","2012","@","hackett","脚本","才能","其实","普通","remotesigned","查到","）","组合键","运行","任务","进阶篇","一个","r2","来自","被","process","输入","分别","command","算机","runas","网速","关闭程序","有","未","然后","管理器","cli","不","邮件","找","verb","阻止"],"title":"命令行下 powershell 提权","title_tokens":["提权","powershell"," ","命令行","命令","下"]},{"location":"2018/1004/powershell-upper/#_1","text":"windows 下每次打开一个普通 cli 后发现要按 [win + X + A] 组合键才能打开管理员 cli ，感觉很麻烦，然后在网速查到了这个方法。","text_tokens":["发现","按","每次","管理","在","这个","。","了","感觉","才能","组合","普通","]","查到","很","组合键","一个","windows","麻烦","[","打开","win","管理员","要","，","x","网速","a","后"," ","然后","cli","方法","+","下"],"title":"简介","title_tokens":["简介"]},{"location":"2018/1004/powershell-upper/#_2","text":"在普通 powershell 下输入下面的命令即可提权： Start-Process -verb runas \"C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\Powershell.exe\" 后面的路径根据实际的路径修改，最好用任务管理器查看系统使用的那个，系统内可能有几个 powershell 程序。","text_tokens":["exe","即可","后面","syswow64","用","根据","v1.0","理器","windowspowershell","在","管理","\"","的","内","实际","start","查看","可能","命令","。","修改","系统","：","普通","\\","-","powershell","最好","任务","c","process","输入","那个","程序","，","runas","提权","几个","有","使用","路径"," ","管理器","下面",".","windows","下","verb",":"],"title":"快速上手","title_tokens":["手","快速","上"]},{"location":"2018/1004/powershell-upper/#_3","text":"powershell/module/microsoft.powershell.utility/new-alias?view=powershell-6 powershell/module/microsoft.powershell.core/about/about_functions?view=powershell-6 其实这样输入有点麻烦，bash 有 alias 这样的命令的给命令起别名， cmd 有doskey 这样的命令，而 powershell 的是 Set-Alias 。 下面的命令分别是添加、获取和删除别名： Set-Alias { $alias } { $command } Get-Alias | findstr { $alias } Remove-Item alias : { $alias } 用 Set-Alias 找不到能传参的方式，用了函数的方式，用法如下： Function FuncName （ args [] ） { code ; } 实际命令如下： Function fuck { Start-Process -verb runas \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Powershell.exe\" } Set-Alias sudo fuck 删除函数如下： del Function : { $your function }","text_tokens":["如下","bash","?","用法","sudo","your","$","函数","del","这样","添加","utility","microsoft","get","[","c","=","item","system32","remove","，"," ","有点","下面",".","6","}","是","funcname","v1.0","windowspowershell","core","alias","给","\"","findstr","about","function","而","命令","。","\\","能","{","code","方式","_","doskey","/","传参","windows","exe",";","|","的","不到","start","args","了","：","和","]","-","cmd","set","powershell","麻烦","获取","别名","new","view",":","删除","用","起","module","fuck","、","实际","（","functions","其实","）","process","输入","分别","command","runas","有","找","verb"],"title":"入门篇","title_tokens":["入门篇","入门"]},{"location":"2018/1004/powershell-upper/#_4","text":"about_Execution_Policies 上面的方法可以使用但是，关闭程序后旧失效了，找了一种方法把脚本写入全局。 找到全局设置文件 Microsoft.PowerShell_profile.ps1 ： Get-Variable profile | Format-List 如果没有自己创建一个，写入下面的代码： Function fuck { Start-Process -verb runas \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Powershell.exe\" } Set-Alias sudo fuck 保存后发现无法加载，因为默认不加载外部脚本，管理员权限下 powershell 运行： set-ExecutionPolicy RemoteSigned REMOTESIGNED 脚本可以运行。这是 Windows Server 2012 R2 中的默认执行策略。 要求从 Internet 下载的脚本和配置文件（包括电子邮件和即时消息程序）具有受信任的发布者的数字签名。 不要求你在本地计算机上编写的脚本（不是从 Internet 下载的）具有数字签名。 如果脚本已被取消阻止（比如通过使用 Unblock-File cmdlet），则运行从 Internet 下载但未签名的脚本。 存在运行来自 Internet 之外的源的未签名脚本和已签名但却是恶意的脚本的风险。","text_tokens":["找到","但是","不是","则","数字签名","sudo","上面","写入","外部","这是","microsoft","失效","get","信任","c","execution","程序","system32","关闭","executionpolicy","，","管理员","设置","list","比如","unblock","无法"," ","下面","却是",".","后旧","下","}","已","源","v1.0","windowspowershell","alias","发布者","\"","about","function","电子邮件","要求","。","下载","如果","server","\\","{","取消","发布","全局","配置","_","但","即时","使用","签名","恶意","从","方法","没有","具有","windows","通过","包括","编写","保存","上","exe","执行","发现","电子","可以","|","加载","管理","即时消息","在","的","start","了","权限","：","你","和","internet","-","set","powershell","受","文件","配置文件","代码","中","profile","风险","存在","后","创建","消息","自己","ps1","计算",":","计算机","variable","file","cmdlet","policies","因为","一种","本地","数字","策略","fuck","之外","format","把","默认","（","2012","脚本","remotesigned","）","运行","一个","r2","来自","被","process","算机","runas","关闭程序","未","不","邮件","找","verb","阻止"],"title":"进阶篇","title_tokens":["进阶","进阶篇"]},{"location":"2018/1004/powershell-upper/#_5","text":"cmd 提权： runas /user:hackett_yu@outlook.com cmd doskey sudo=runas /user:{$username} cmd","text_tokens":["}","sudo","$","yu","outlook","@","hackett","：","username","user","cmd","{","=","_","com","runas","提权","doskey"," ","/",".",":"],"title":"附录","title_tokens":["附录"]},{"location":"2018/1006/linux-ln/","text":"简介 ¶ 本来像利用 link 一个 cheat 文件在 /user 下发现 cat 后时乱码 发现 windows 下直接创建 link 会怎样 快速上手 ¶ wangchujiang.com/linux-command/c/ln.html 利用 bash 的 ln 命令： ln { $filename1 } { $$ filename2 } cat { $filename2 } 附录 ¶ www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/index.html 硬链接 建立硬链接时，在另外的目录或本目录中增加目标文件的一个目录项，这样，一个文件就登记在多个目录中。如图所示的m2.c文件就在目录mub1和liu中都建立了目录项。 创建硬链接后，己经存在的文件的I节点号（Inode）会被多个目录文件项使用。一个文件的硬链接数可以在目录的长列表格式的第二列中看到，无额外链接的文件的链接数为l。 在默认情况下，ln命令创建硬链接。ln命令会增加链接数，rm命令会减少链接数。一个文件除非链接数为0，否则不会从文件系统中被物理地删除。 对硬链接有如下限制： 不能对目录文件做硬链接。 不能在不同的文件系统之间做硬链接。就是说，链接文件和被链接文件必须位于同一个文件系统中。 符号连接 符号链接也称为软链接，是将一个路径名链接到一个文件。这些文件是一种特别类型的文件。事实上，它只是一个文本文件（如图中的abc文件），其中包含它提供链接的另一个文件的路径名，如图中虚线箭头所示。另一个文件是实际包含所有数据的文件。所有读、写文件内容的命令被用于符号链接时，将着链接方向前进来访问实际的文件。 与硬链接不同的是，符号链接确实是一个新文件，当然它具有不同的I节点号；而硬链接并没有建立新文件。 符号链接没有硬链接的限制，可以对目录文件做符号链接，也可以在不同文件系统之间做符号链接。 用ln -s命令建立符号链接时，源文件最好用绝对路径名。这样可以在任何工作目录下进行符号链接。而当源文件用相对路径时，如果当前的工作路径与要创建的符号链接文件所在路径不同，就不能进行链接。 符号链接保持了链接与源文件或目录之间的区别： 删除源文件或目录，只删除了数据，不会删除链接。一旦以同样文件名创建了源文件，链接将继续指向该文件的新数据。 在目录长列表中，符号链接作为一种特殊的文件类型显示出来，其第一个字母是l。符号链接的大小是其链接文件的路径名中的字节数。 当用ln -s命令列出文件时，可以看到符号链接名后有一个箭头指向源文件或目录，例如lrwxrwxrwx … 14 jun 20 10:20 /etc/motd->/original_file其中，表示“文件大小”的数字“14”恰好说明源文件名original_file由14个字符构成。 软连接不会更新文件，尽量写绝对路径。","text_tokens":["直接","如下","bash","就是","该","利用","到",">","前进","目录","$","情况","后时","尽量","确实","怎样","减少","区别","cat","第一","绝对路径","列出","箭头","继续","指向","以","这样","二列","做","也","建立","就是说","访问","link","长","方向","大小","；","original","增加","项","保持","或本","它","文本","当","www","文件系统","另","本来","号","最好","¶","c","时","lrwxrwxrwx","相对","，","0","相对路径","限制"," ","表示","位于","手","字节",".","rm","下","另外","更新","}","是","恰好","源","l","ibm","cn","构成","数据","简介","如图","目标","事实","只是","wangchujiang","附录","快速","而","第一个","例如","来","命令","。","10","如果","文件大小","系统","必须","连接","由","名","像","路径名","user","这些","说明","格式","当前","{","14","links","html","文本文件","绝对","com","_","事实上","任何","作为","filename1","其中","要","出来","“","etc","使用","物理","/","不同","mub1","从","具有","否则","windows","没有","上","多个","类型","显示","当用","节数","称为","发现","不能","可以","在","不会","特殊","第二","其","就","的","inode","无","同一","abc","文件名","motd","hardandsymb","链接","会","i","符号","了","linux","：","同一个","s","如图所示","和","特别","-","ln","filename2","用于","包含","developerworks","文件","乱码","数","中","”","写","存在","所示","都","后","路径","本文","提供","所在","创建","一旦","m2","个字符","地","jun",":","文件类型","额外","删除","或","字母","列表","将","虚线","用","file","名后","进行","看到","之间","一种","数字","…","数为","源文件","对","20","实际","、","己经","并","默认","（","所有","同样","与","）","内容","着","cheat","一个","字符","字节数","被","第二列","读","index","command","只","登记","有","liu","硬","工作","当然","除非","新","软","节点"],"title":"linux ln 命令之硬链接和软连接","title_tokens":["和","ln","链接"," ","硬","命令","linux","之","软","连接"]},{"location":"2018/1006/linux-ln/#_1","text":"本来像利用 link 一个 cheat 文件在 /user 下发现 cat 后时乱码 发现 windows 下直接创建 link 会怎样","text_tokens":["直接","利用","发现","后时","在","怎样","cat","会","link","像","user","本来","cheat","一个","文件","乱码"," ","/","创建","windows","下"],"title":"简介","title_tokens":["简介"]},{"location":"2018/1006/linux-ln/#_2","text":"wangchujiang.com/linux-command/c/ln.html 利用 bash 的 ln 命令： ln { $filename1 } { $$ filename2 } cat { $filename2 }","text_tokens":["}","bash","利用","$","cat","的","wangchujiang","命令","linux","：","-","ln","filename2","{","c","html","com","command","filename1"," ","/","."],"title":"快速上手","title_tokens":["手","快速","上"]},{"location":"2018/1006/linux-ln/#_3","text":"www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/index.html 硬链接 建立硬链接时，在另外的目录或本目录中增加目标文件的一个目录项，这样，一个文件就登记在多个目录中。如图所示的m2.c文件就在目录mub1和liu中都建立了目录项。 创建硬链接后，己经存在的文件的I节点号（Inode）会被多个目录文件项使用。一个文件的硬链接数可以在目录的长列表格式的第二列中看到，无额外链接的文件的链接数为l。 在默认情况下，ln命令创建硬链接。ln命令会增加链接数，rm命令会减少链接数。一个文件除非链接数为0，否则不会从文件系统中被物理地删除。 对硬链接有如下限制： 不能对目录文件做硬链接。 不能在不同的文件系统之间做硬链接。就是说，链接文件和被链接文件必须位于同一个文件系统中。 符号连接 符号链接也称为软链接，是将一个路径名链接到一个文件。这些文件是一种特别类型的文件。事实上，它只是一个文本文件（如图中的abc文件），其中包含它提供链接的另一个文件的路径名，如图中虚线箭头所示。另一个文件是实际包含所有数据的文件。所有读、写文件内容的命令被用于符号链接时，将着链接方向前进来访问实际的文件。 与硬链接不同的是，符号链接确实是一个新文件，当然它具有不同的I节点号；而硬链接并没有建立新文件。 符号链接没有硬链接的限制，可以对目录文件做符号链接，也可以在不同文件系统之间做符号链接。 用ln -s命令建立符号链接时，源文件最好用绝对路径名。这样可以在任何工作目录下进行符号链接。而当源文件用相对路径时，如果当前的工作路径与要创建的符号链接文件所在路径不同，就不能进行链接。 符号链接保持了链接与源文件或目录之间的区别： 删除源文件或目录，只删除了数据，不会删除链接。一旦以同样文件名创建了源文件，链接将继续指向该文件的新数据。 在目录长列表中，符号链接作为一种特殊的文件类型显示出来，其第一个字母是l。符号链接的大小是其链接文件的路径名中的字节数。 当用ln -s命令列出文件时，可以看到符号链接名后有一个箭头指向源文件或目录，例如lrwxrwxrwx … 14 jun 20 10:20 /etc/motd->/original_file其中，表示“文件大小”的数字“14”恰好说明源文件名original_file由14个字符构成。 软连接不会更新文件，尽量写绝对路径。","text_tokens":["如下","就是","该","到",">","前进","目录","情况","尽量","确实","列出","减少","区别","第一","绝对路径","箭头","继续","指向","以","这样","二列","做","也","建立","就是说","访问","长","方向","大小","；","original","增加","项","保持","或本","它","文本","当","www","文件系统","另","号","最好","时","c","lrwxrwxrwx","相对","，","0","相对路径","限制"," ","表示","位于","字节",".","rm","下","另外","更新","是","恰好","源","l","ibm","cn","构成","数据","如图","目标","事实","只是","而","第一个","例如","来","。","命令","10","如果","文件大小","系统","必须","连接","由","名","路径名","这些","说明","格式","当前","14","links","html","文本文件","绝对","com","_","事实上","任何","作为","“","其中","要","出来","etc","使用","物理","/","不同","mub1","从","具有","否则","没有","多个","类型","显示","当用","节数","称为","不能","可以","在","不会","特殊","第二","其","就","的","inode","无","同一","abc","文件名","motd","hardandsymb","链接","i","会","符号","了","linux","：","同一个","s","如图所示","和","特别","-","ln","用于","包含","developerworks","文件","数","中","”","写","存在","所示","都","后","路径","本文","提供","所在","创建","一旦","m2","个字符","地","jun",":","文件类型","额外","删除","或","字母","列表","将","虚线","用","file","名后","进行","看到","之间","一种","数字","…","数为","源文件","对","20","实际","、","己经","并","默认","（","所有","同样","与","）","内容","着","一个","字符","字节数","被","第二列","读","index","只","登记","有","liu","硬","工作","当然","除非","新","软","节点"],"title":"附录","title_tokens":["附录"]},{"location":"2018/1008/windows-media-play/","text":"简介 ¶ 因为电脑缺少 windows media play 无法安装 windows 版本的 icloud 尝试在功能上打开失败，尝试用 dism 打开失败，尝试官网安装包安装 快速入门 ¶ 直接在可选功能里安装，因为之前自己卸载了","text_tokens":["直接","官网","功能","用","缺少","电脑","安装","因为","版本","在","简介","卸载","的","快速","可选","icloud","尝试","入门","了","安装包","dism","失败","打开","¶","里","，","play","无法"," ","media","自己","windows","之前","上"],"title":"因为电脑缺少 windows media play 无法安装 windows 版本的 icloud","title_tokens":["的","play","无法"," ","缺少","电脑","media","icloud","安装","因为","版本","windows"]},{"location":"2018/1008/windows-media-play/#_1","text":"因为电脑缺少 windows media play 无法安装 windows 版本的 icloud 尝试在功能上打开失败，尝试用 dism 打开失败，尝试官网安装包安装","text_tokens":["官网","功能","用","缺少","电脑","安装","因为","版本","在","的","icloud","尝试","安装包","dism","失败","打开","，","play","无法"," ","media","windows","上"],"title":"简介","title_tokens":["简介"]},{"location":"2018/1008/windows-media-play/#_2","text":"直接在可选功能里安装，因为之前自己卸载了","text_tokens":["里","直接","，","功能","可选","自己","安装","因为","了","在","之前","卸载"],"title":"快速入门","title_tokens":["快速","入门"]},{"location":"2018/1010/windows-delete-icon/","text":"快速入门 ¶ 在注册表里打开下面两个路径看除了默认是否还有其它的，网上的方法只有第一条： HKEY_LOCAL_MACHINE \\S OFTWARE \\M icrosoft \\W indows \\C urrentVersion \\E xplorer \\M yComputer \\N ameSpace HKEY_CURRENT_USER \\S oftware \\M icrosoft \\W indows \\C urrentVersion \\E xplorer \\M yComputer \\N ameSpace 附录 ¶ 第一条是系统的。 第二条是用户的。","text_tokens":["urrentversion","current","网上","是","e","n","w","是否","其它","两个","在","icrosoft","除了","第一条","第一","第二","ycomputer","machine","的","二条","附录","快速","只有","默认","。","入门","系统","还有","：","s","oftware","\\","xplorer","user","第二条","打开","¶","indows","c","amespace","看","_","里","，","m","一条","注册","路径"," ","用户","下面","注册表","方法","local","hkey"],"title":"删除 Windows 下磁盘多余的图标","title_tokens":["删除","磁盘","的"," ","图标","windows","多余","下"]},{"location":"2018/1010/windows-delete-icon/#_1","text":"在注册表里打开下面两个路径看除了默认是否还有其它的，网上的方法只有第一条： HKEY_LOCAL_MACHINE \\S OFTWARE \\M icrosoft \\W indows \\C urrentVersion \\E xplorer \\M yComputer \\N ameSpace HKEY_CURRENT_USER \\S oftware \\M icrosoft \\W indows \\C urrentVersion \\E xplorer \\M yComputer \\N ameSpace","text_tokens":["urrentversion","current","网上","e","n","w","是否","其它","两个","在","icrosoft","除了","第一条","第一","ycomputer","machine","的","只有","默认","还有","：","s","oftware","\\","xplorer","user","打开","indows","c","amespace","看","_","里","，","m","一条","注册","路径"," ","下面","注册表","方法","local","hkey"],"title":"快速入门","title_tokens":["快速","入门"]},{"location":"2018/1010/windows-delete-icon/#_2","text":"第一条是系统的。 第二条是用户的。","text_tokens":["是","的","一条","二条","第二条"," ","用户","。","第二","系统","第一条","第一"],"title":"附录","title_tokens":["附录"]},{"location":"2018/1018/java-swap-function/","text":"简介 ¶ 在写算法的时候，书本里使用的 c 语言里的 swap 函数，头一热就在 java 里写了一个。 public void swap ( int a , int b ) { int temp = a ; a = b ; b = temp ; } 美滋滋运行自己的排序算法，居然原样输出，后来发现 java 里没有引用这个概念，自己写的函数不能真正的交换。 快速入门 ¶ 这样写： public static int swap ( int itself , int dummy ) { return itself ; } public static void main ( String [] args ) { int a = 10 ; int b = 20 ; a = swap ( b , b = a ); } 还可以这样： class MyInteger { private int x ; // single data member public MyInteger ( int xIn ) { x = xIn ; } // constructor public int getValue () { return x ; } // retrieve value public void insertValue ( int xIn ) { x = xIn ;} // insert } public class Swapping { // swap: pass references to objects static void swap ( MyInteger rWrap , MyInteger sWrap ) { // interchange values inside objects int t = rWrap . getValue (); rWrap . insertValue ( sWrap . getValue ()); sWrap . insertValue ( t ); } public static void main ( String [] args ) { int a = 23 , b = 47 ; System . out . println ( \"Before. a:\" + a + \", b: \" + b ); MyInteger aWrap = new MyInteger ( a ); MyInteger bWrap = new MyInteger ( b ); swap ( aWrap , bWrap ); a = aWrap . getValue (); b = bWrap . getValue (); System . out . println ( \"After. a:\" + a + \", b: \" + b ); } } 附录 ¶ 是不是三行代码的方式更简单 ~","text_tokens":["三行","不是","println","member","头","void","排序","函数","还","这个","交换","这样","awrap","java","after","入门",",","算法","[","¶","c","=","before","，","insert","private","string"," ","时候",".","getvalue","引用","}","概念","values","简介",")","swapping","\"","(","class","附录","interchange","快速","。","b","10","single","一热","main","data","{","方式","语言","int","使用","滋滋","/","t","更","static","是不是","没有","后来","bwrap",";","发现","objects","不能","可以","在","美滋滋","就","的","~","args","了","insertvalue","：","swap","public","]","原样","to","居然","代码","value","system","里","写","x","new","xin","a","temp","retrieve","输出","out","自己","constructor","+",":","pass","书本","itself","return","dummy","23","inside","myinteger","20","简单","真正","rwrap","references","运行","47","一个","swrap"],"title":"一个 java swap 函数关于值传递与引用","title_tokens":["引用","swap","传递","java"," ","一个","值","与","函数","关于"]},{"location":"2018/1018/java-swap-function/#_1","text":"在写算法的时候，书本里使用的 c 语言里的 swap 函数，头一热就在 java 里写了一个。 public void swap ( int a , int b ) { int temp = a ; a = b ; b = temp ; } 美滋滋运行自己的排序算法，居然原样输出，后来发现 java 里没有引用这个概念，自己写的函数不能真正的交换。","text_tokens":["引用","}","书本","概念",";","发现","头","void","不能","在","排序","美滋滋",")","函数","(","就","的","这个","交换","java","。","b","了",",","真正","一热","swap","public","原样","运行","{","算法","一个","语言","居然","c","=","int","里","写","，","a","使用","滋滋","temp","时候"," ","输出","自己","没有","后来"],"title":"简介","title_tokens":["简介"]},{"location":"2018/1018/java-swap-function/#_2","text":"这样写： public static int swap ( int itself , int dummy ) { return itself ; } public static void main ( String [] args ) { int a = 10 ; int b = 20 ; a = swap ( b , b = a ); } 还可以这样： class MyInteger { private int x ; // single data member public MyInteger ( int xIn ) { x = xIn ; } // constructor public int getValue () { return x ; } // retrieve value public void insertValue ( int xIn ) { x = xIn ;} // insert } public class Swapping { // swap: pass references to objects static void swap ( MyInteger rWrap , MyInteger sWrap ) { // interchange values inside objects int t = rWrap . getValue (); rWrap . insertValue ( sWrap . getValue ()); sWrap . insertValue ( t ); } public static void main ( String [] args ) { int a = 23 , b = 47 ; System . out . println ( \"Before. a:\" + a + \", b: \" + b ); MyInteger aWrap = new MyInteger ( a ); MyInteger bWrap = new MyInteger ( b ); swap ( aWrap , bWrap ); a = aWrap . getValue (); b = bWrap . getValue (); System . out . println ( \"After. a:\" + a + \", b: \" + b ); } }","text_tokens":["}",";","itself","return","println","member","objects","void","可以","dummy","values",")","inside","swapping","23","(","还","myinteger","\"","class","20","这样","interchange","awrap","after","args","10","b",",","insertvalue","single","：","main","rwrap","swap","public","]","references","data","to","{","47","[","=","value","int","before","system","写","insert","x","new","xin","a","private","swrap","string","retrieve"," ","/","t","out","static",".","constructor","+","bwrap","getvalue",":","pass"],"title":"快速入门","title_tokens":["快速","入门"]},{"location":"2018/1018/java-swap-function/#_3","text":"是不是三行代码的方式更简单 ~","text_tokens":["简单","的","三行","不是","~","方式"," ","更","是不是","代码"],"title":"附录","title_tokens":["附录"]},{"location":"2018/1025/firewall-cmd/","text":"简介 ¶ centos 7 和 centos 6 有不同的防火墙命令，centos 7 的是 firewall-cmd，如果没安装，安装方法如下： yum install firewalld 开启防火墙 systemctl start firewalld.service 关闭防火墙 systemctl stop firewalld.service 开机自动启动 systemctl enable firewalld.service 关闭开机制动启动 systemctl disable firewalld.service 快速入门 ¶ 基本的添加端口： firewall-cmd --zone = public --add-port = 9001 /tcp --permanent firewall-cmd --zone = public --add-port = 9001 /udp --permanent firewall-cmd --reload 查看： firewall-cmd --list-all 进阶篇 ¶ firewall-cmd --zone = public --add-service = https //临时 firewall-cmd --zone = public --add-port = 8080 -8081/tcp //临时 firewall-cmd --permanent --zone = public --add-service = https //永久 firewall-cmd --permanent --zone = public --add-port = 8080 -8081/tcp //永久 删除 firewall-cmd --permanent --zone = public --remove-rich-rule = \"rule family=\" ipv4 \" source address=\" 192 .168.1.1 \" 查询 firewall-cmd --query-service ftp yes firewall-cmd --query-service ssh yes firewall-cmd --query-service samba no firewall-cmd --query-service http no","text_tokens":["如下","机制","开启","安装","rich","9001","防火墙","all","查看","添加","reload","入门","stop","ssh","启动","7","动","--","¶","开","=","remove","永久","，","list"," ","6",".","168.1","1","query","是","tcp","ipv4","yum","简介","\"","install","firewalld","查询","快速","ftp","family","add","命令","如果","rule","source","开机","enable","/","不同","方法","disable","自动","的","start","service","：","public","和","-","cmd","no","zone","火墙","8081","udp","删除","没","防火","进阶","https","systemctl","centos","基本","samba","进阶篇","yes","port","permanent","192","端口","http","有","address","8080","临时","关闭","firewall"],"title":"centos 7 防火墙命令 firewall-cmd","title_tokens":["7","-","cmd","防火"," ","centos","火墙","firewall","命令","防火墙"]},{"location":"2018/1025/firewall-cmd/#_1","text":"centos 7 和 centos 6 有不同的防火墙命令，centos 7 的是 firewall-cmd，如果没安装，安装方法如下： yum install firewalld 开启防火墙 systemctl start firewalld.service 关闭防火墙 systemctl stop firewalld.service 开机自动启动 systemctl enable firewalld.service 关闭开机制动启动 systemctl disable firewalld.service","text_tokens":["disable","如下","是","自动","机制","没","防火","开启","安装","yum","防火墙","的","install","systemctl","firewalld","start","centos","service","命令","如果","：","stop","开机","启动","7","和","-","cmd","动","enable","开","，","有"," ","火墙","不同","方法","6",".","关闭","firewall"],"title":"简介","title_tokens":["简介"]},{"location":"2018/1025/firewall-cmd/#_2","text":"基本的添加端口： firewall-cmd --zone = public --add-port = 9001 /tcp --permanent firewall-cmd --zone = public --add-port = 9001 /udp --permanent firewall-cmd --reload 查看： firewall-cmd --list-all","text_tokens":["tcp","9001","的","all","添加","查看","基本","reload","add","：","public","-","cmd","--","port","=","permanent","端口","zone","list"," ","/","udp","firewall"],"title":"快速入门","title_tokens":["快速","入门"]},{"location":"2018/1025/firewall-cmd/#_3","text":"firewall-cmd --zone = public --add-service = https //临时 firewall-cmd --zone = public --add-port = 8080 -8081/tcp //临时 firewall-cmd --permanent --zone = public --add-service = https //永久 firewall-cmd --permanent --zone = public --add-port = 8080 -8081/tcp //永久 删除 firewall-cmd --permanent --zone = public --remove-rich-rule = \"rule family=\" ipv4 \" source address=\" 192 .168.1.1 \" 查询 firewall-cmd --query-service ftp yes firewall-cmd --query-service ssh yes firewall-cmd --query-service samba no firewall-cmd --query-service http no","text_tokens":["删除","tcp","ipv4","rich","\"","https","查询","ftp","family","add","service","rule","source","samba","ssh","public","-","cmd","no","--","yes","port","=","remove","永久","permanent","192","zone","http"," ","address","/","query","8080","8081",".","1","168.1","临时","firewall"],"title":"进阶篇","title_tokens":["进阶","进阶篇"]},{"location":"2018/1025/hexo-dns/","text":"简介 ¶ hexo 同时部署在 coding page 和 github page 后，在域名服务器设置 dns 分流后发现 coding 一直无法申请 ssl。 快速入门 ¶ 网上说的把 dns 设置境外线路和国内线路让 dns 分流让国内访问 coding 国外访问 github 加速网页加载，不过分流要看用户配置的 dns 不是看 ip。 这导致 我的 coding ssl 证书 申请不成功 因为域名验证成功的必要条件还是要让证书服务提供方能读取到申请者（即 Coding Pages 服务器）所提供的验证信息 所以要先暂停境外的分流再申请 coding 的 ssl。 附录 ¶ 我一直找不到问题的原因是我使用的 dns 是 1.1.1.1 ，这是国外的 dns，导致我一直使用的是 github page，没有加载到 coding page。","text_tokens":["不是","到","访问","这是","这","入门","必要","¶","ip","，","设置","所以","国内","无法"," ","pages","导致",".","即","是","不过","coding","域名","服务","简介","申请","成功","我","附录","快速","再","。","暂停","必要条件","方","国外","证书","加速","能","部署","配置","所","hexo","要","条件","使用","验证","没有","申请者","github","网上","还是","发现","加载","在","问题","的","分流","不到","dns","先","服务器","和","务器","同时","让","一直","读取","后","提供","用户","境外","网页","线路","因为","原因","把","（","）","说","看","1.1","不","ssl","找","信息","page"],"title":"hexo 配置 dns 分流的问题处理","title_tokens":["的","分流"," ","处理","dns","问题","配置","hexo"]},{"location":"2018/1025/hexo-dns/#_1","text":"hexo 同时部署在 coding page 和 github page 后，在域名服务器设置 dns 分流后发现 coding 一直无法申请 ssl。","text_tokens":["coding","域名","发现","服务","在","申请","分流","dns","。","服务器","和","部署","务器","hexo","，","设置","同时","一直","后","无法"," ","ssl","github","page"],"title":"简介","title_tokens":["简介"]},{"location":"2018/1025/hexo-dns/#_2","text":"网上说的把 dns 设置境外线路和国内线路让 dns 分流让国内访问 coding 国外访问 github 加速网页加载，不过分流要看用户配置的 dns 不是看 ip。 这导致 我的 coding ssl 证书 申请不成功 因为域名验证成功的必要条件还是要让证书服务提供方能读取到申请者（即 Coding Pages 服务器）所提供的验证信息 所以要先暂停境外的分流再申请 coding 的 ssl。","text_tokens":["境外","网上","不过","不是","网页","coding","到","域名","还是","线路","信息","服务","因为","加载","申请","成功","我","的","分流","访问","把","这","再","dns","。","（","暂停","必要条件","先","方","服务器","必要","国外","和","加速","证书","说","能","）","配置","所","看","ip","务器","，","要","设置","条件","所以","让","验证","国内","提供"," ","读取","用户","pages","不","ssl","导致","申请者","github","即"],"title":"快速入门","title_tokens":["快速","入门"]},{"location":"2018/1025/hexo-dns/#_3","text":"我一直找不到问题的原因是我使用的 dns 是 1.1.1.1 ，这是国外的 dns，导致我一直使用的是 github page，没有加载到 coding page。","text_tokens":["是","coding","到","原因","问题","加载","我","的","不到","这是","dns","。","国外","1.1","，","一直","使用"," ","导致",".","没有","找","github","page"],"title":"附录","title_tokens":["附录"]},{"location":"2018/1113/ssh-login/","text":"简介 ¶ ssh 登录时出现如下错误：Disconnected:No supported authentication methods 原因：PasswordAuthentication 的默认值为 yes，SSH服务将其值置为 no 以禁用密码验证登录，导致此类故障。需要修改 PasswordAuthentication 配置解决此问题。 快速入门 ¶ vim /etc/ssh/sshd_config PasswordAuthentication yes # 修改这个 附录 ¶ 重启 sshd systemctl restart sshd","text_tokens":["如下","禁用","出现","将","此","服务","原因","问题","其值","简介","错误","authentication","的","这个","systemctl","登录","以","附录","methods","需要","快速","重启","此类","默认","。","密码","入门","修改","：","ssh","故障","no","默认值","置","为","config","disconnected","¶","时","yes","配置","#","_","，","supported","解决","etc","passwordauthentication","验证","sshd"," ","/","restart","导致","vim",":"],"title":"SSH 登录时出现如下错误：Disconnected:No supported authentication methods available","title_tokens":["如下","supported","出现","authentication","登录","no","methods"," ","available","disconnected","时","错误",":","：","ssh"]},{"location":"2018/1113/ssh-login/#_1","text":"ssh 登录时出现如下错误：Disconnected:No supported authentication methods 原因：PasswordAuthentication 的默认值为 yes，SSH服务将其值置为 no 以禁用密码验证登录，导致此类故障。需要修改 PasswordAuthentication 配置解决此问题。","text_tokens":["如下","禁用","出现","将","此","服务","原因","问题","其值","错误","authentication","的","登录","以","methods","需要","此类","默认","。","密码","修改","：","ssh","故障","no","默认值","置","为","disconnected","时","yes","配置","，","supported","解决","passwordauthentication","验证"," ","导致",":"],"title":"简介","title_tokens":["简介"]},{"location":"2018/1113/ssh-login/#_2","text":"vim /etc/ssh/sshd_config PasswordAuthentication yes # 修改这个","text_tokens":["修改","这个","etc","passwordauthentication","sshd"," ","config","/","yes","#","_","vim","ssh"],"title":"快速入门","title_tokens":["快速","入门"]},{"location":"2018/1113/ssh-login/#_3","text":"重启 sshd systemctl restart sshd","text_tokens":["systemctl","sshd"," ","重启","restart"],"title":"附录","title_tokens":["附录"]},{"location":"2018/1202/windows-git-bash/","text":"简介 ¶ 在使用 git 配置时点击了颜色配置工具跳转到了一个 github page 里，发现是一个可视化配置的工具，它可以生成多种终端的颜色主题文件。 快速入门 ¶ windows 下的 git bash 的响应配置文件是 c/${username}/.minttyrc 或者 ~\\.minttyrc ，所以你现在项目导出的文件类型也应该是 mintty 的，不过好像要右键打开新的链接，自身不会跳转（主要是浏览器会拦截 data:// 这种 URL ）。 附录 ¶ 下面是我的配置文件，导出的文件是下半部分，上半部是其它配置。 BoldAsFont = -1 Locale = zh_CN Charset = UTF -8 Language = zh_CN FontHeight = 12 Font = Consolas BackgroundColour = 10 , 20 , 30 ForegroundColour = 166 , 196 , 225 CursorColour = 166 , 196 , 225 Black = 61 , 61 , 61 BoldBlack = 83 , 83 , 83 Red = 210 , 63 , 105 BoldRed = 229 , 144 , 168 Green = 105 , 210 , 63 BoldGreen = 168 , 229 , 144 Yellow = 210 , 168 , 63 BoldYellow = 229 , 205 , 144 Blue = 63 , 105 , 210 BoldBlue = 144 , 168 , 229 Magenta = 168 , 63 , 210 BoldMagenta = 205 , 144 , 229 Cyan = 63 , 210 , 168 BoldCyan = 144 , 229 , 205 White = 233 , 233 , 233 BoldWhite = 255 , 255 , 255","text_tokens":["61","bash","233","到","boldgreen","$","205","半","zh","也","上半部","boldcyan","入门",",","105","utf","username","它","url","minttyrc","主题","¶","时","c","=","，","git","项目","所以"," ","下面","跳转","主要",".","1","下","225","white","}","是","blue","不过","部分","cn","fontheight","简介","168","我","83","附录","导出","快速","好像","。","浏览","10","255","这种","上半","8","boldblack","\\","data","210","{","font","或者","配置","_","应该","要","boldyellow","使用","/","响应","mintty","windows","github","cyan","类型","magenta","charset","166","发现","black","可以","在","不会","foregroundcolour","的","工具","~","链接","会","拦截","生成","了","red","你","-","文件","配置文件","language","浏览器","打开","green","点击","颜色","现在","里","consolas","boldasfont","backgroundcolour","boldwhite","boldmagenta","cursorcolour",":","文件类型","yellow","boldred","boldblue","144","其它","20","196","（","多种","locale","229","右键","终端","）","一个","30","可视化","自身","可视","12","新","半部","page","63"],"title":"windows git bash 配置终端主题","title_tokens":["git","bash","终端"," ","主题","windows","配置"]},{"location":"2018/1202/windows-git-bash/#_1","text":"在使用 git 配置时点击了颜色配置工具跳转到了一个 github page 里，发现是一个可视化配置的工具，它可以生成多种终端的颜色主题文件。","text_tokens":["是","到","发现","可以","在","的","工具","生成","。","了","它","多种","终端","一个","文件","主题","时","点击","配置","颜色","里","，","可视化","git","使用"," ","跳转","可视","github","page"],"title":"简介","title_tokens":["简介"]},{"location":"2018/1202/windows-git-bash/#_2","text":"windows 下的 git bash 的响应配置文件是 c/${username}/.minttyrc 或者 ~\\.minttyrc ，所以你现在项目导出的文件类型也应该是 mintty 的，不过好像要右键打开新的链接，自身不会跳转（主要是浏览器会拦截 data:// 这种 URL ）。","text_tokens":["文件类型","}","类型","是","bash","不过","$","不会","的","也","~","导出","好像","链接","会","拦截","（","浏览","。","主要","这种","username","你","url","\\","右键","data","）","{","minttyrc","或者","文件","配置文件","浏览器","打开","c","配置","现在","应该","，","要","git","项目","所以"," ","自身","/","响应","mintty",".","跳转","windows","下","新",":"],"title":"快速入门","title_tokens":["快速","入门"]},{"location":"2018/1202/windows-git-bash/#_3","text":"下面是我的配置文件，导出的文件是下半部分，上半部是其它配置。 BoldAsFont = -1 Locale = zh_CN Charset = UTF -8 Language = zh_CN FontHeight = 12 Font = Consolas BackgroundColour = 10 , 20 , 30 ForegroundColour = 166 , 196 , 225 CursorColour = 166 , 196 , 225 Black = 61 , 61 , 61 BoldBlack = 83 , 83 , 83 Red = 210 , 63 , 105 BoldRed = 229 , 144 , 168 Green = 105 , 210 , 63 BoldGreen = 168 , 229 , 144 Yellow = 210 , 168 , 63 BoldYellow = 229 , 205 , 144 Blue = 63 , 105 , 210 BoldBlue = 144 , 168 , 229 Magenta = 168 , 63 , 210 BoldMagenta = 205 , 144 , 229 Cyan = 63 , 210 , 168 BoldCyan = 144 , 229 , 205 White = 233 , 233 , 233 BoldWhite = 255 , 255 , 255","text_tokens":["12","是","61","blue","yellow","boldred","magenta","cyan","charset","boldgreen","144","boldblue","166","233","black","部分","cn","205","fontheight","其它","半","168","foregroundcolour","我","的","83","20","zh","导出","上半部","196","boldcyan","。","10",",","105","255","red","上半","utf","locale","8","boldblack","229","-","210","font","文件","配置文件","language","30","green","配置","cursorcolour","=","_","，","boldyellow","consolas","boldasfont"," ","backgroundcolour","下面","boldwhite","1","boldmagenta","下","225","半部","white","63"],"title":"附录","title_tokens":["附录"]},{"location":"2018/1215/switch-eclipse-version/","text":"简介 ¶ 导入其它编译器或别人的项目的时候，有时候 jre 会不一样 快速上手 ¶ 查看你的工程编译版本： 命令行： javap -verbose src/source.class 可以直接看前面显示的 version eclipse 打开 src/*.class 对应信息： 版本号 对应十进制 jdk 版本号 2E 46 1.2 2F 47 1.3 30 48 1.4 31 49 1.5 32 50 1.6 33 51 1.7 34 52 1.8 切换 eclipse 编译版本 全局 Preferences-->Java-->Compiler->Compiler compliance level 局部 工程右键-->属性-->Java Compiler 附录 ¶ blog.csdn.net/gnail_oug/article/details/47145047","text_tokens":["直接","十进制",">","编译","查看","java","javap","preferences","--","2e","¶","1.6","gnail","属性","，","项目"," ","时候","手","version",".","版本号","article","导入","前面","版本","简介","1.5","对应","oug","class","1.2","附录","compliance","快速","csdn","命令","source","34","details","level","全局","1.4","_","52","命令行","/","1.3","2f","上","显示","blog","31","一样","可以","51","的","会","jre","：","你","-","打开","verbose","进制","编译器","别人","src","或","compiler","49","net","有时","其它","eclipse","1.8","局部","50","1.7","32","47145047","工程","jdk","右键","47","有时候","30","48","看","*","33","46","不","切换","信息"],"title":"切换 eclipse 编译 Java 版本","title_tokens":["编译","java"," ","版本","切换","eclipse"]},{"location":"2018/1215/switch-eclipse-version/#_1","text":"导入其它编译器或别人的项目的时候，有时候 jre 会不一样","text_tokens":["别人","，","的","编译","或","项目","会","时候"," ","导入","有时候","不","一样","有时","其它","编译器","jre"],"title":"简介","title_tokens":["简介"]},{"location":"2018/1215/switch-eclipse-version/#_2","text":"查看你的工程编译版本： 命令行： javap -verbose src/source.class 可以直接看前面显示的 version eclipse 打开 src/*.class 对应信息： 版本号 对应十进制 jdk 版本号 2E 46 1.2 2F 47 1.3 30 48 1.4 31 49 1.5 32 50 1.6 33 51 1.7 34 52 1.8 切换 eclipse 编译版本 全局 Preferences-->Java-->Compiler->Compiler compliance level 局部 工程右键-->属性-->Java Compiler","text_tokens":["src","直接","显示","compiler","49","31","十进制",">","前面","版本","可以","eclipse","51","1.5","对应","的","编译","class","1.8","局部","1.2","50","1.7","1.3","compliance","查看","32","java","命令","工程","javap","preferences","source","：","你","jdk","右键","-","34","47","30","--","2e","打开","48","1.6","全局","1.4","看","*","level","属性","verbose","33","52"," ","46","命令行","/","version","进制",".","版本号","切换","信息","2f"],"title":"快速上手","title_tokens":["手","快速","上"]},{"location":"2018/1215/switch-eclipse-version/#_3","text":"blog.csdn.net/gnail_oug/article/details/47145047","text_tokens":["oug","blog","details","article","net","47145047","csdn","/",".","gnail","_"],"title":"附录","title_tokens":["附录"]},{"location":"2018/1215/wtf/","text":"简介 ¶ 打开 mssqlserver manager 时提示 Cannot find one or more componets. Please reinstall the application 快速上手 ¶ 这个原因是系统找不到你的 vs shell 位置，原因可能是： - 没安装 - 没安装正确 从这里下载好 vs shell 安装前删除注册表： 计算机\\HKEY_CURRENT_USER\\Software\\Microsoft\\SQL Server Management Studio\\14.0_Remote FAQ ¶ hy 没安装是因为 hy 把 vs shell 位置移动了，但注册表没改变，更惨的是卸载后重新安装时因为 hy 之前的 d 盘符不用了了，安装程序又不能换安装位置却一直提示 invail drive ，hy 打算删除错误注册表...... 放弃:)","text_tokens":["安装","componets","移动","这里","这个","software","重新安装","management","microsoft","更惨","¶","时","程序","，","注册","d"," ","手",".","正确","重新","current","提示","是","find","more","shell","one","manager","简介","位置",")","卸载","drive","好","盘符","快速","下载","系统","放弃","user","\\","server","_","但","vs","从","上","the","前","faq","不能","studio","的","不到","可能","了","却","：","你","sql","安装程序","please","-","......","invail","打开","换","hy","一直","后","注册表","计算","之前","hkey",":","计算机","14.0","cannot","删除","新安","没","原因","因为","错误","reinstall","remote","把","application","mssqlserver","改变","又","or","算机","打算","不用","找","是因为"],"title":"Cannot find one or more componets. Please reinstall the application","title_tokens":["the","reinstall","please","find"," ","application","more",".","componets","one","or","cannot"]},{"location":"2018/1215/wtf/#_1","text":"打开 mssqlserver manager 时提示 Cannot find one or more componets. Please reinstall the application","text_tokens":["the","提示","reinstall","please","find"," ","application","mssqlserver","one","more","打开","时","componets",".","manager","or","cannot"],"title":"简介","title_tokens":["简介"]},{"location":"2018/1215/wtf/#_2","text":"这个原因是系统找不到你的 vs shell 位置，原因可能是： - 没安装 - 没安装正确 从这里下载好 vs shell 安装前删除注册表： 计算机\\HKEY_CURRENT_USER\\Software\\Microsoft\\SQL Server Management Studio\\14.0_Remote","text_tokens":["current","14.0","是","删除","前","没","安装","原因","位置","shell","studio","的","这里","这个","software","好","不到","可能","management","remote","下载","计算","系统","microsoft","：","你","sql","user","\\","server","-","_","算机","，","注册","vs"," ","注册表","从","找","正确","hkey","计算机"],"title":"快速上手","title_tokens":["手","快速","上"]},{"location":"2018/1215/wtf/#faq","text":"hy 没安装是因为 hy 把 vs shell 位置移动了，但注册表没改变，更惨的是卸载后重新安装时因为 hy 之前的 d 盘符不用了了，安装程序又不能换安装位置却一直提示 invail drive ，hy 打算删除错误注册表...... 放弃:)","text_tokens":["提示","是","删除","新安","没","安装","因为","不能","位置","shell","移动","错误",")","卸载","的","drive","重新安装","盘符","把","了","却","更惨",":","放弃","改变","安装程序","......","invail","之前","时","又","程序","但","，","换","hy","注册","一直","vs","后","d"," ","打算","注册表","不用","重新","是因为"],"title":"FAQ","title_tokens":["faq"]},{"location":"2019/0102/javascript-use/","text":"简介 ¶ //block console . log ( \"foo() --------------------------------------------------\" ) var a = 1 ; function foo () { var a = 2 ; console . log ( a ); } foo (); // 2 console . log ( a ); // 1 console . log ( \"bar() --------------------------------------------------\" ) // function block var b ; function bar () { var b = 1 ; if ( true ) { var b = 2 ; // same variable! console . log ( b ); // 2 } console . log ( b ); // 2 } bar (); console . log ( \"foobar() --------------------------------------------------\" ) var c ; function foobar () { var c = 1 ; if ( true ) { let c = 2 ; // console . log ( c ); // 2 } console . log ( c ); // 1 } foobar (); ¶ 问题 ¶ - 语句作用域与函数作用域的区别？ ¶ 思考 ¶ 同是 var 定义 foo(){} 外的 a 不等价于 foo(){} 里的 a(function 外的代码块) boo()->if{} 里的 a 等价于 boo()->if{} 外的 a 一个是 var 定义，另一个是 let 定义 foo(){} 外的 a 不等价于 foo(){} 里的 a(function 外的代码块) boo()->if{} 里的 a 不等价于 boo()->if{} 外的 a","text_tokens":["}","思考","是",";","variable","console","if","同",">","定义","--------------------------------------------------","问题",")","简介","\"","函数","(","区别","function","的","不等价","same","foo","外","等价","b","let","与","语句","-","boo","另","{","一个","block","？","¶","c","=","代码","log","于","里","，","bar","作用","!","a","不等","foobar"," ","块","/","2",".","1","var","作用域","true"],"title":"JavaScript 作用域问题","title_tokens":["作用"," ","javascript","问题","作用域"]},{"location":"2019/0102/javascript-use/#_1","text":"","text_tokens":[],"title":"简介","title_tokens":["简介"]},{"location":"2019/0102/javascript-use/#block-consolelogfoo-var-a-1-function-foo-var-a-2-consoleloga-foo-2-consoleloga-1-consolelogbar-function-block-var-b-function-bar-var-b-1-if-true-var-b-2-same-variable-consolelogb-2-consolelogb-2-bar-consolelogfoobar-var-c-function-foobar-var-c-1-if-true-let-c-2-consolelogc-2-consolelogc-1-foobar","text":"","text_tokens":[],"title":"//block\nconsole.log(&quot;foo() --------------------------------------------------&quot;)\n\nvar a = 1;\nfunction foo() {\n    var a = 2;\n    console.log(a);\n}\nfoo();  // 2\nconsole.log(a); // 1 \n\nconsole.log(&quot;bar() --------------------------------------------------&quot;)\n\n// function block\nvar b;\nfunction bar() {\n    var b = 1;\n    if (true) {\n      var b = 2;  // same variable!\n      console.log(b);  // 2\n    }\n    console.log(b);  // 2\n}\nbar();\n\nconsole.log(&quot;foobar() --------------------------------------------------&quot;)\n\nvar c;\nfunction foobar() {\n    var c = 1;\n    if (true) {\n      let c = 2;  // \n      console.log(c);  // 2\n    }\n    console.log(c);  // 1\n}\nfoobar();\n","title_tokens":["}",";","variable","console","if",")","(","function","blockconsole","same","foo","2console","b","let","quot","{","blockvar","c","=","log","--------------------------------------------------&","bar","&","!","a","foobar"," ","/","2",".","1","var","true"]},{"location":"2019/0102/javascript-use/#_2","text":"","text_tokens":[],"title":"问题","title_tokens":["问题"]},{"location":"2019/0102/javascript-use/#-","text":"","text_tokens":[],"title":"- 语句作用域与函数作用域的区别？","title_tokens":["区别","的","作用","语句","-"," ","？","作用域","与","函数"]},{"location":"2019/0102/javascript-use/#_3","text":"同是 var 定义 foo(){} 外的 a 不等价于 foo(){} 里的 a(function 外的代码块) boo()->if{} 里的 a 等价于 boo()->if{} 外的 a 一个是 var 定义，另一个是 let 定义 foo(){} 外的 a 不等价于 foo(){} 里的 a(function 外的代码块) boo()->if{} 里的 a 不等价于 boo()->if{} 外的 a","text_tokens":["}","是","同",">","if","定义",")","(","的","function","不等价","foo","外","等价","let","另","boo","-","{","一个","代码","于","里","，","不等","a"," ","块","var"],"title":"思考","title_tokens":["思考"]},{"location":"2019/0216/javascript-error-msg/","text":"简介 ¶ JavaScript 错误参考 错误 ¶ Error: Permission denied to access property \"x\" 没有权限访问 x 属性 尝试访问无权访问的对象。这很可能出现在使用 iframe 元素时加载了一个不同域名下的页面，这在访问子页面时会违背同源策略。 内部错误 ¶ InternalError: too much recursion 递归太深 一个调用自身的函数被称作递归函数。一些情况下，递归函数类似于一个循环，都重复地执行一个代码段许多次，都需要一个条件（用于避免无尽循环或此处的无尽递归）。当出现过于深层的递归或无尽递归时，JavaScript将会抛出此错误。 范围错误 ¶ RangeError: argument is not a valid code point 参数不是一个有效的代码点 String.fromCodePoint() 这个方法只能接受有效的码位（code point） 。 码位（ code point）是组成码空间（或代码页）的数值，范围是 0 到 0x10FFFF。 NaN，负整数（-1），非整数（3.14），或编号大于0x10FFFF (1114111) 的字符，无法使该方法。 RangeError: invalid array length 无效的数组长度 无效的数组错误长度通常会在以下情形中出现： 当创建一个长度为负数或者长度大于等于232 的 Array 或者 ArrayBuffer 时。 当设置 Array.length 属性为负数或者长度大于等于232 时。 为什么 Array（数组） 和 ArrayBuffer（数组缓冲区） 的长度会受到限制？ - 因为 Array 和 ArrayBuffer 的 length（长度） 属性被定义为一个32位无符号整形（unsigned 32-bit integer）的值，所以它只能存储 0 - 232-1 之间的数。 - 当你使用构造函数来创建一个数组的时候，你可能想使用字面值的形式，第一个参数会被解释为数组的长度。 或者说，你想要在设置数组之前确定它的长度，或把它作为一个构造函数的参数。 RangeError: invalid date 非法数据 为 Date 或 Date.parse() 提供了一个会导致无效日期的字符串。 RangeError: precision is out of range 精度越界 以下的某个方法传入了一个超出精度范围的参数： Number.prototype.toExponential() Number.prototype.toFixed() Number.prototype.toPrecision() 通常这些方法允许的参数范围介于0和20（或21）之间。需要注意的是，ECMAScript标准是允许扩展这个范围的。 Method Firefox (SpiderMonkey) Chrome, Opera (V8) Number.prototype.toExponential() 0 to 100 0 to 20 Number.prototype.toFixed() -20 to 100 0 to 20 Number.prototype.toPrecision() 1 to 100 1 to 21 RangeError: radix must be an integer 基数必须是一个整数 在使用Number.prototype.toString()方法时使用了可选的基数参数，参数应该为一个2到36之间的整型(数字)，返回对应数字的转换为字符串时表示的该进制对应的数字量。 为什么小于36呢？因为一个大于(包含等于)10的基数在使用时需要用一个字母表字符来代替。不能超过36是因为拉丁字母表中只有26个字符。 RangeError: repeat count must be less than infinity 重复数必须小于无穷 代码中使用了 String.prototype.repeat()方法。它有一个计数参数，表示重复该字符串的次数。该参数必须在 0 及正 Infinity 之间，且不能为负数。该值的合法范围可以这样表示： [0, +∞)。 其结果字符串也不能长于最大字符串，不同 JavaScript 引擎中可能有所不同。 在 Firefox (SpiderMonkey) 里最大字符串大小为 228 -1 (0xFFFFFFF)。 RangeError: repeat count must be non-negative 重复计数必须是非负数 代码中使用了 String.prototype.repeat()方法。它有一个计数参数，表示重复该字符串的次数。该参数必须在 0 及正 Infinity 之间，且不能为负数。该值的合法范围可以这样表示： [0, +∞)。 错误类型 ¶ ReferenceError: \"x\" is not defined x 没有定义 在某些地方引用一个不存的的变量的时候。当你使用变量的时候，这个变量必须是已经被声明的，或者你可以确保它在你当前的脚本或作用域 (scope) 中可用。 ReferenceError: assignment to undeclared variable \"x\" 分配了未声明的 x 在代码里赋值了一个未声明的变量。换句话说，有处没有带着 var 关键字的赋值。事实上已声明的和未声明的变量之间有一些差异，这可能会导致意想不到的结果，这就是为什么 JavaScript 在严格模式打印出这种错误。 关于已声明和未声明的变量，其有三个注意事项： 已声明的变量被约束在其执行上下文中。未声明的变量总是全局的。 已声明的变量在执行任何代码之前就创建了。未声明的变量则不存在，直到执行相关的代码。 已声明的变量是其执行上下文（函数或全局）的不可配置属性。而未声明的变量是可配置的（例如可以删除）。 更多信息及例子，请参考 var 页面。 关于未声明变量的赋值的错误仅在严格模式里出现。在非严格模式中，这些将被忽略。 ReferenceError: can't access lexical declaration X' before initialization 不能再定义前初始化` 词法变量在初始化之前被访问。该错误可以发生于任何语句块中，当使用 let 或 const 修饰的变量在初始化之前被访问的时候。 ReferenceError: deprecated caller or arguments usage 弃用调用者或参数使用 在 strict mode 中，Function.caller 和 Function.arguments 属性是不该使用的。它们都是已经被废弃的了，因为这两者泄露了函数的调用者，是不标准的，难于优化和有这潜在的性能问题。 ReferenceError: invalid assignment left-hand side 左手边任务无效 在 strict mode 中，Function.caller 和 Function.arguments 属性是不该使用的。它们都是已经被废弃的了，因为这两者泄露了函数的调用者，是不标准的，难于优化和有这潜在的性能问题。 ReferenceError: reference to undefined property \"x\" 引用未定义的属性x 脚本尝试去访问一个不存在的对象属性。property accessors 页面描述了两种访问属性的方法。 引用未定义属性的错误仅出现在 strict mode 代码中。在非严格代码中，对不存在的属性的访问将被忽略。 语法错误 ¶ SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated “0” - 前缀八进制文字和八进制转义序列号。不推荐使用 SyntaxError: \"use strict\" not allowed in function with non-simple parameters 在非简单参数的函数中不允许使用“use strict” SyntaxError: \"x\" is a reserved identifier “x”是保留标识符 SyntaxError: \"x\" is not a legal ECMA-262 octal constant “x”不是合法的ECMA-262八进制常量 SyntaxError: JSON.parse: bad parsing JSON.parse：解析错误 SyntaxError: Malformed formal parameter 格式错误的形式参数 SyntaxError: Unexpected token 意外的令牌 SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead 不建议使用// @来表示sourceURL pragma。使用//＃代替 SyntaxError: a declaration in the head of a for-of loop can't have an initializer for-of循环头部的声明不能有初始化器 SyntaxError: applying the 'delete' operator to an unqualified name is deprecated 不建议将'delete'运算符应用于非限定名称 SyntaxError: for-in loop head declarations may not have initializers for-in循环头声明可能没有初始值设定项 SyntaxError: function statement requires a name 函数语句需要一个名称 SyntaxError: identifier starts immediately after numeric literal 标识符在数字文字后立即开始 SyntaxError: illegal character 非法字符 SyntaxError: invalid regular expression flag \"x\" 无效的正则表达式标志“x” 语法错误-缺失 ¶ SyntaxError: missing ) after argument list 参数列表后面 SyntaxError: missing ) after condition 条件之后 SyntaxError: missing : after property id id 属性之后 SyntaxError: missing ; before statement 在声明之前 SyntaxError: missing = in const declaration const 声明中的 SyntaxError: missing ] after element list 元素列表后面的 SyntaxError: missing formal parameter 缺少形式参数 SyntaxError: missing name after . operator 之后缺少名称。操作者 SyntaxError: missing variable name 缺少变量名 SyntaxError: missing } after function body 函数主体后缺失 } SyntaxError: missing } after property list 属性键与属性值后缺失 } 语法错误 ¶ SyntaxError: redeclaration of formal parameter \"x\" 重复声明参数 某个变量名称已经作为函数参数出现了，但是又使用了 let 在函数体里重声明了。在JavaScript 中不允许使用let在相同的函数或块范围内重新声明相同的变量。 SyntaxError: return not in function 不是在函数里返回 return 返回的或者 yield 语句在函数 function 外被调用. 或许是少了一个花括号， return 返回的和 yield 语句必须是在一个函数里，因为它们会停止（暂停或恢复）函数的继续执行，然后返回。 SyntaxError: test for equality (==) mistyped as assignment (=)? 赋值符号出现在错误的位置 在通常期望进行相等判定（==）的地方出现了赋值（=）。 为了帮助调试，JavaScript（在开启严格模式的情况下）会对这种情况进行警告。 SyntaxError: unterminated string literal 未结束的字符串 类型错误 ¶ TypeError: \"x\" has no properties null 和 undefined中，没有你需要的属性。 TypeError: \"x\" is (not) \"y\" 出现了与期望不符的类型。 这个错误常常由 undefined 或 null 值引起。 此外，某些方法，例如 Object.create() 或 Symbol.keyFor()， 要求必须提供特定类型的参数。 TypeError: \"x\" is not a constructor 是因为尝试将不是构造器的对象或者变量来作为构造器使用。参考 constructor 或者 new operator 来了解什么是构造器。 有很多的全局对象比如 String、Array 等等都是可以使用 new 操作符的构造器。但是有一些全局对象并不是，且其属性和方法都是静态的。下面的 JavaScript 标准内置对象都不是构造器：Math，JSON，Symbol，Reflect，Intl，SIMD，Atomics。 Generator functions 也不能作为构造器来使用。 TypeError: \"x\" is not a function 问题出在你试图去调用一个像函数一样的值，但是该值实际上不是函数，有时候你的代码需要调用一些函数，但是那种值并不能当作函数来被调用。 也许函数名称上有错别字？ 也许你正在调用Object对象没有这个方法？ 例如，在JavaScript中单纯的对象(Object)没有map函数，但是JavaScript数组(Array)对象却有这个函数。 TypeError: \"x\" is not a non-null object 在期待出现对象类型的值的地方而没有提供。null 不是对象类型，因此不起作用。必须在给定的场景下提供一个合适的对象。 TypeError: \"x\" is read-only 全局变量或对象属性被设置为只读 (专业点讲，就是这条数据属性禁止写入.) 这条错误值发生在strict mode code(俗称严格模式). 正常情况下，是没有报错的。 TypeError: 'x' is not iterable 这个值作为 for…of 的表达式右值，或者作为一个函数的参数，如 Promise.all 或者 TypedArray.from, 不是一个 可迭代对象. 一个可迭代对象可以是一个内置可迭代类型，如Array, String 或 Map, 一个 generator 生成结果, 或者一个实现了 可迭代协议 的对象 TypeError: More arguments needed 调用函数的时候出现了错误。需要提供更多的参数。 TypeError: can't access dead object 为了提高内存使用效率以及防止内存泄露，Firefox 浏览器不允许插件在 DOM 所在的父页面被销毁后对 DOM 对象保持强引用。死对象指的是在 DOM 被销毁后依然持有对 DOM 元素的强引用(处于活跃状态)。为了避免这样的问题，对处于外部文档中的 DOM 节点的引用应该被存储于一个专属于那个文档的对象当中，并且在文档卸载的时候将其清理，或者使用弱引用方式进行存储。 TypeError: can't define property \"x\": \"obj\" is not extensible 通常情况下，对象是可以进行扩展的，即可以向其添加新的属性。然而当使用 Object.preventExtensions() 将一个对象标记为不再可以扩展的情况下，就无法对该对象添加在其被标记为不可扩展之前所拥有的属性之外的新属性了。 TypeError: can't delete non-configurable array element 这个错误提示发生于当试图缩短一个数组的长度的时候，其中有元素是不可配置的（non-configurable）。正常情况下，缩短数组的长度，则超出限度的元素会被删除，而这里指的是这种操作失效的情况。 configurable 特性控制着属性是否可以从对象中删除，以及它的特性（除了 writable 之外）是否可以发生改变。 通常，使用数组初始化语句创建的对象是可配置的，而通过 Object.defineProperty() 创建的属性，默认则是不可配置的。 TypeError: can't redefine non-configurable property \"x\" 这种错误的起因在于试图给对象重新定义一个属性，但是该属性是不可配置的。 configurable 特性控制着该属性是否可以从对象中删除，以及它的各个特性（除 writable 之外）是否可以修改。通常使用对象初始化语句定义的对象属性是可配置的。而使用 Object.defineProperty() 定义的属性则默认不可配置。 TypeError: cyclic object value 当调用 JSON.stringify() 方法时，循环对象引用结构不能被转换为字符串。 TypeError: invalid 'in' operand \"x\" in 操作符只可以用来检测对象中是否存在某个属性，而不能用来在字符串、数字或者其他基本类型的数据中进行检索。 TypeError: invalid 'instanceof' operand 'x' instanceof 操作符 希望右边的操作数为一个构造对象，即一个有 prototype 属性且可以调用的对象。 TypeError: invalid Array.prototype.sort argument Array.prototype.sort() 的参数预期为 undefined 或者是一个比较操作数的函数。 TypeError: invalid arguments 无效的参数 TypeError: invalid assignment to const \"x\" 对 const “x” 的赋值无效 TypeError: property \"x\" is non-configurable and can't be deleted 属性 “x” 不可配置且无法删除 TypeError: setting getter-only property \"x\" 设置 getter-only 属性 “x” TypeError: variable \"x\" redeclares argument 变量 x 重复声明参数 路径错误 ¶ URIError: malformed URI sequence 格式错误的 URI 序列 警告 ¶ Warning: -file- is being assigned a //# sourceMappingURL, but already has one -file-正被分配//＃sourceMappingURL，但已经有一个 Warning: Date.prototype.toLocaleFormat is deprecated 不推荐使用 Date.prototype.toLocaleFormat Warning: JavaScript 1.6's for-each-in loops are deprecated 不推荐使用 JavaScript 1.6 for-each-in 循环 Warning: String.x is deprecated; use String.prototype.x instead 不推荐使用 String.x;请改用 String.prototype.x Warning: expression closures are deprecated 不推荐使用表达式闭包 Warning: unreachable code after return statement 返回语句后无法访问代码 X.prototype.y called on incompatible type X.prototype.y调用了不兼容的类型","text_tokens":["称作","重复","不是","非","该","则","到","typeerror","换句话说","算符","开启","销毁","设定","be","它们","提高","分配","写入","all","这里","兼容","发生","外部","访问","non","这","字母表","编号","死","失效","用者","初始","typedarray","atomics","3.14","1.6","总是","escape","那个","关键字","before","identifier","少","想要","标识","needed","插件","map"," ","时候","导致","prefixed","1","232","即","重新","字","}","已","立即","26","equality","为了","控制","简介","instead","卸载","关于","有效","function","受到限制","create","要求","例如","尝试","10","浏览","暂停","解释","这种","器","标志","这些","格式","code","方式","位","两种","全局","俗称","配置","标识符","合适","math","cyclic","“","违背","以下","标记","结果","手边","作数","property","t","从","优化","通过","tofixed","ecmascript","上","类型","处于","null","实现","因此","warning","一样","效率","强","注意事项","无穷","可以","sequence","返回","缓冲区","applying","其","调用者","无","configurable","意想不到","numeric","assigned","相等","会","可选","have","only","delete","了","三个","from","直到","iterable","precision","很","recursion","getter","浏览器","中","点","new","a","提供","后","262","表达","valid","allowed","比较","继续执行","constructor","作用域","试图","依然",":","数组","0x10ffff","调用函数","或","此","0xfffffff","indicate","有时","引起","对","之外","不该","数值","32","只有","推荐","（","精度","其有","@","未定","parsing","nan","最大","闭包","除","arguments","然而","组成","字符串","mistyped","有时候","head","被","例子","or","缓冲","toexponential","未","called","iframe","自身","reserved","requires","date","传入","much","深层","但是","?","转换","referenceerror","缺少","泄露","情况","头","第一","持有","这个","count","有所","strict","initializer","也","继续","类似","define","after","大小","外","being","literals","单纯",",","令牌","未声明","模式","项","保持","当","语句","octal","constant","不起作用","属于","时","出","#","空间","属性","那种","设置","0","lexical","internalerror","所以","may","该值","表示","ecma",".","urierror","弱","事项","不可","引用","存储","generator","报错","码位","给","one","firefox","argument","(","有处","潜在","unexpected","操作者","事实","特定","允许","is","too","第一个","method","运算符","帮助","计数","const","expression","递归","可","形式参数","由","像","越界","infinity","mode","或者","或许","合法","illegal","指","上下","v8","＃","应该","期待","避免","丁字","unqualified","rangeerror","块","already","更","but","preventextensions","超过","保留","递归函数","执行","修饰","操作符","元素","simple","不能","加载","can","许多","场景","操作数","的","内","不到","代码段","右边","seq","deprecated","键","权限","declaration","syntaxerror","formal","sourcemappingurl","负数","之后","和","]","忽略","多次","且","radix","fromcodepoint","带","专业","仅","都","路径","undeclared","out","uri","废弃","左手边","当中","删除","字母","迭代","36","point","弃用","element","进行","之间","大于","因为","∞","reference","应用","redeclares","多","策略","或者说","access","properties","stringify","、","实际","介于","并","基本","简单","hand","simd","常量","希望","initialization","）","关键","起因","must","一个","正在","太深","side","又","parameters","换句话","parse","只","of","预期","什么","然后","accessors","名称","var","整数","新","是因为","如","出现","就是","特性","writable","函数参数","负","很多","defineproperty","防止","以及","yield","dom","id","closures","前缀","缩短","228","拉丁字母","flag","检索","range","token","引擎","左手","接受","并且","语法","它","extensible","体里重","调试","已经","loop","defined","？","[","character","结构","，","has","量","及","词法","list","相同","无法","静态","内部","表达式","差异","转义","码","21","当作","某些","打印","incompatible","位置",")","\"","未定义","each","确定","usage","变量名","而","来","停止","arraybuffer","判定","dead","在于","状态","length","unterminated","当前","页面","undefined","语法错误","值","范围","其他","事实上","opera","任何","name","条件","loops","难于","/","toprecision","100","构造","次数","前","整形",";","为什么","文字","构造函数","less","operator","问题","在","denied","use","八进制","超出","就","改用","恢复","此处","可能","malformed","符号","生成","被称作","as","正常","s","全局变量","to","用于","只能","-","no","非法","and","对象","常常","redefine","bit","数","错别字","scope","正","变量","有所不同","各个","negative","序列","父","sourceurl","无权","进制","+","地","不再","之前","unreachable","操作","pragmas","将","file","number","小于","用来","left","是否","数字","活跃","错误","赋值","需要","statement","literal","文档","上下文","开始","默认","invalid","与","声明","缺失","改变","描述","着","starts","unsigned","chrome","地方","参数","结束","表中","2","不","转义序列","信息","器来","caller","object","than","repeat","不符","意想","不存","内存","确保","定义","正则表达式","是非","deleted","函数","形式","循环","运算","这样","for","整型","body","添加","prototype","修改","解析","向","协议","同源","condition","情形","号","实际上","等等","子","为","¶","assignment","with","受到","=","bad","json","日期","pragma","read","作用","调用","严格","string","比如","限制","下面","限定","immediately","y","下","sort","提示","是","时会","主体","an","域名","一些","in","more","数据","obj","tolocaleformat","无法访问","对应","type","无效","再","相关","或块","。","某个","`","let","建议","必须","test","许多次","面值","keyfor","限度","约束","下文","通常","redeclaration","are","基数","抛出","标准","'","所","error","可用","但","作为","了解","只读","其中","使用","代替","期望","instanceof","不同","方法","没有","declarations","也许","条","the","扩展","请","symbol","reflect","检测","初始化","使该","值后","正则","讲","长度","想不到","array","却","拥有","intl","：","你","括号","性能","on","包含","setting","代码","”","别字","value","去","里","x","存在","意外","作者","头部","创建","将会","missing","所在","promise","javascript","个字符","等于","两者","花","parameter","列表","variable","用","后面","初始值","return","右值","legal","此外","initializers","除了","…","1114111","无尽","注意","拉丁","20","内置","把","警告","permission","换句","functions","脚本","清理","呢","给定","spidermonkey","禁止","页","达式","任务","operand","using","字符","过于","长于","integer","tostring","于","专","有","想","参考","not","regular","节点"],"title":"JavaScript 错误参考","title_tokens":[" ","错误","参考","javascript"]},{"location":"2019/0216/javascript-error-msg/#_1","text":"JavaScript 错误参考","text_tokens":[" ","错误","参考","javascript"],"title":"简介","title_tokens":["简介"]},{"location":"2019/0216/javascript-error-msg/#_2","text":"Error: Permission denied to access property \"x\" 没有权限访问 x 属性 尝试访问无权访问的对象。这很可能出现在使用 iframe 元素时加载了一个不同域名下的页面，这在访问子页面时会违背同源策略。","text_tokens":["出现","时会","域名","元素","加载","在","denied","\"","策略","的","access","访问","这","可能","尝试","permission","。","了","权限","同源","to","很","页面","子","一个","对象","时","error","属性","违背","，","x","使用","property"," ","iframe","不同","无权","没有","下",":"],"title":"错误","title_tokens":["错误"]},{"location":"2019/0216/javascript-error-msg/#_3","text":"InternalError: too much recursion 递归太深 一个调用自身的函数被称作递归函数。一些情况下，递归函数类似于一个循环，都重复地执行一个代码段许多次，都需要一个条件（用于避免无尽循环或此处的无尽递归）。当出现过于深层的递归或无尽递归时，JavaScript将会抛出此错误。","text_tokens":["称作","重复","深层","出现","或","递归函数","此","执行","一些","情况","下","错误","函数","许多","循环","的","无尽","此处","too","类似","代码段","需要","被称作","。","（","递归","许多次","当","）","用于","recursion","多次","一个","太深","过于","抛出","时","代码","于","，","避免","条件","internalerror","调用","都"," ","自身","将会","javascript","地","much",":"],"title":"内部错误","title_tokens":["错误","内部"]},{"location":"2019/0216/javascript-error-msg/#_4","text":"RangeError: argument is not a valid code point 参数不是一个有效的代码点 String.fromCodePoint() 这个方法只能接受有效的码位（code point） 。 码位（ code point）是组成码空间（或代码页）的数值，范围是 0 到 0x10FFFF。 NaN，负整数（-1），非整数（3.14），或编号大于0x10FFFF (1114111) 的字符，无法使该方法。 RangeError: invalid array length 无效的数组长度 无效的数组错误长度通常会在以下情形中出现： 当创建一个长度为负数或者长度大于等于232 的 Array 或者 ArrayBuffer 时。 当设置 Array.length 属性为负数或者长度大于等于232 时。 为什么 Array（数组） 和 ArrayBuffer（数组缓冲区） 的长度会受到限制？ - 因为 Array 和 ArrayBuffer 的 length（长度） 属性被定义为一个32位无符号整形（unsigned 32-bit integer）的值，所以它只能存储 0 - 232-1 之间的数。 - 当你使用构造函数来创建一个数组的时候，你可能想使用字面值的形式，第一个参数会被解释为数组的长度。 或者说，你想要在设置数组之前确定它的长度，或把它作为一个构造函数的参数。 RangeError: invalid date 非法数据 为 Date 或 Date.parse() 提供了一个会导致无效日期的字符串。 RangeError: precision is out of range 精度越界 以下的某个方法传入了一个超出精度范围的参数： Number.prototype.toExponential() Number.prototype.toFixed() Number.prototype.toPrecision() 通常这些方法允许的参数范围介于0和20（或21）之间。需要注意的是，ECMAScript标准是允许扩展这个范围的。 Method Firefox (SpiderMonkey) Chrome, Opera (V8) Number.prototype.toExponential() 0 to 100 0 to 20 Number.prototype.toFixed() -20 to 100 0 to 20 Number.prototype.toPrecision() 1 to 100 1 to 21 RangeError: radix must be an integer 基数必须是一个整数 在使用Number.prototype.toString()方法时使用了可选的基数参数，参数应该为一个2到36之间的整型(数字)，返回对应数字的转换为字符串时表示的该进制对应的数字量。 为什么小于36呢？因为一个大于(包含等于)10的基数在使用时需要用一个字母表字符来代替。不能超过36是因为拉丁字母表中只有26个字符。 RangeError: repeat count must be less than infinity 重复数必须小于无穷 代码中使用了 String.prototype.repeat()方法。它有一个计数参数，表示重复该字符串的次数。该参数必须在 0 及正 Infinity 之间，且不能为负数。该值的合法范围可以这样表示： [0, +∞)。 其结果字符串也不能长于最大字符串，不同 JavaScript 引擎中可能有所不同。 在 Firefox (SpiderMonkey) 里最大字符串大小为 228 -1 (0xFFFFFFF)。 RangeError: repeat count must be non-negative 重复计数必须是非负数 代码中使用了 String.prototype.repeat()方法。它有一个计数参数，表示重复该字符串的次数。该参数必须在 0 及正 Infinity 之间，且不能为负数。该值的合法范围可以这样表示： [0, +∞)。","text_tokens":["repeat","重复","出现","不是","非","该","转换","到","负","定义","是非","be","函数","形式","第一","这个","count","有所","228","拉丁字母","这样","也","non","整型","range","大小","引擎","prototype",",","字母表","编号","接受","当","它","情形","为","？","[","3.14","时","受到","空间","属性","，","日期","设置","0","量","所以","想要","及","string","该值","无法"," ","限制","时候","表示","导致",".","1","232","字","码","21","存储","是","26","an","码位","数据",")","firefox","argument","(","有效","确定","对应","允许","is","无效","受到限制","第一个","method","来","计数","。","10","arraybuffer","某个","解释","必须","面值","这些","length","越界","infinity","code","通常","或者","位","合法","基数","值","标准","范围","v8","作为","以下","opera","应该","结果","丁字","使用","代替","rangeerror","toprecision","100","不同","方法","超过","构造","tofixed","ecmascript","扩展","次数","整形","为什么","构造函数","less","不能","无穷","使该","在","返回","可以","缓冲区","其","超出","的","无","可能","长度","会","符号","可选","array","了","：","你","负数","precision","和","只能","-","to","包含","非法","且","bit","数","代码","中","点","正","radix","fromcodepoint","里","a","有所不同","提供","negative","创建","out","valid","进制","个字符","javascript","等于","+","之前",":","数组","0x10ffff","或","字母","number","point","36","用","0xfffffff","小于","之间","大于","因为","∞","数字","错误","1114111","或者说","注意","拉丁","20","数值","把","32","介于","需要","只有","（","invalid","精度","nan","呢","最大","spidermonkey","）","页","组成","must","一个","字符串","字符","unsigned","长于","被","integer","chrome","tostring","缓冲","parse","of","toexponential","有","想","什么","参数","表中","2","date","not","传入","整数","是因为","than"],"title":"范围错误","title_tokens":["范围","错误"]},{"location":"2019/0216/javascript-error-msg/#_5","text":"ReferenceError: \"x\" is not defined x 没有定义 在某些地方引用一个不存的的变量的时候。当你使用变量的时候，这个变量必须是已经被声明的，或者你可以确保它在你当前的脚本或作用域 (scope) 中可用。 ReferenceError: assignment to undeclared variable \"x\" 分配了未声明的 x 在代码里赋值了一个未声明的变量。换句话说，有处没有带着 var 关键字的赋值。事实上已声明的和未声明的变量之间有一些差异，这可能会导致意想不到的结果，这就是为什么 JavaScript 在严格模式打印出这种错误。 关于已声明和未声明的变量，其有三个注意事项： 已声明的变量被约束在其执行上下文中。未声明的变量总是全局的。 已声明的变量在执行任何代码之前就创建了。未声明的变量则不存在，直到执行相关的代码。 已声明的变量是其执行上下文（函数或全局）的不可配置属性。而未声明的变量是可配置的（例如可以删除）。 更多信息及例子，请参考 var 页面。 关于未声明变量的赋值的错误仅在严格模式里出现。在非严格模式中，这些将被忽略。 ReferenceError: can't access lexical declaration X' before initialization 不能再定义前初始化` 词法变量在初始化之前被访问。该错误可以发生于任何语句块中，当使用 let 或 const 修饰的变量在初始化之前被访问的时候。 ReferenceError: deprecated caller or arguments usage 弃用调用者或参数使用 在 strict mode 中，Function.caller 和 Function.arguments 属性是不该使用的。它们都是已经被废弃的了，因为这两者泄露了函数的调用者，是不标准的，难于优化和有这潜在的性能问题。 ReferenceError: invalid assignment left-hand side 左手边任务无效 在 strict mode 中，Function.caller 和 Function.arguments 属性是不该使用的。它们都是已经被废弃的了，因为这两者泄露了函数的调用者，是不标准的，难于优化和有这潜在的性能问题。 ReferenceError: reference to undefined property \"x\" 引用未定义的属性x 脚本尝试去访问一个不存在的对象属性。property accessors 页面描述了两种访问属性的方法。 引用未定义属性的错误仅出现在 strict mode 代码中。在非严格代码中，对不存在的属性的访问将被忽略。","text_tokens":["出现","意想","不存","就是","则","非","referenceerror","该","换句话说","确保","泄露","定义","函数","它们","分配","这个","strict","发生","访问","这","左手","未声明","模式","当","它","用者","初始","语句","已经","defined","出","assignment","总是","关键字","before","属性","，","作用","lexical","严格","及","词法","调用"," ","时候","导致",".","差异","事项","不可","引用","是","已","某些","打印","一些",")","\"","未定义","(","有处","关于","潜在","usage","function","事实","is","无效","再","相关","而","例如","。","const","let","`","尝试","必须","这种","可","这些","约束","mode","当前","下文","页面","或者","undefined","上下","全局","'","配置","标准","两种","可用","事实上","任何","结果","手边","使用","难于","property","块","t","更","优化","没有","方法","前","请","为什么","执行","修饰","初始化","注意事项","不能","可以","在","问题","can","其","就","的","调用者","意想不到","不到","可能","会","想不到","了","deprecated","三个","declaration","：","你","直到","性能","和","to","忽略","-","对象","中","代码","去","scope","里","变量","带","x","仅","存在","都","undeclared","创建","javascript","废弃","作用域","之前","两者",":","左手边","删除","或","将","variable","弃用","之间","left","因为","reference","错误","赋值","多","access","注意","对","不该","上下文","（","换句","其有","invalid","未定","脚本","hand","声明","initialization","）","关键","arguments","描述","着","任务","一个","side","被","例子","or","于","换句话","地方","有","参考","什么","参数","不","accessors","not","var","信息","caller"],"title":"错误类型","title_tokens":["类型","错误"]},{"location":"2019/0216/javascript-error-msg/#_6","text":"SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated “0” - 前缀八进制文字和八进制转义序列号。不推荐使用 SyntaxError: \"use strict\" not allowed in function with non-simple parameters 在非简单参数的函数中不允许使用“use strict” SyntaxError: \"x\" is a reserved identifier “x”是保留标识符 SyntaxError: \"x\" is not a legal ECMA-262 octal constant “x”不是合法的ECMA-262八进制常量 SyntaxError: JSON.parse: bad parsing JSON.parse：解析错误 SyntaxError: Malformed formal parameter 格式错误的形式参数 SyntaxError: Unexpected token 意外的令牌 SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead 不建议使用// @来表示sourceURL pragma。使用//＃代替 SyntaxError: a declaration in the head of a for-of loop can't have an initializer for-of循环头部的声明不能有初始化器 SyntaxError: applying the 'delete' operator to an unqualified name is deprecated 不建议将'delete'运算符应用于非限定名称 SyntaxError: for-in loop head declarations may not have initializers for-in循环头声明可能没有初始值设定项 SyntaxError: function statement requires a name 函数语句需要一个名称 SyntaxError: identifier starts immediately after numeric literal 标识符在数字文字后立即开始 SyntaxError: illegal character 非法字符 SyntaxError: invalid regular expression flag \"x\" 无效的正则表达式标志“x”","text_tokens":["非","不是","算符","头","正则表达式","设定","函数","形式","循环","前缀","运算","initializer","strict","flag","non","for","after","literals","token","令牌","解析","项","初始","语句","号","octal","constant","loop","character","with","escape","#","bad","json","pragma","identifier","0","标识","may"," ","表示","ecma","prefixed",".","限定","immediately","表达式","转义","是","立即","an","in","\"","instead","unexpected","function","允许","is","无效","运算符","来","。","建议","expression","形式参数","器","标志","格式","are","合法","illegal","'","标识符","“","＃","name","unqualified","使用","代替","/","t","没有","declarations","保留","the","文字","simple","operator","初始化","不能","在","use","can","applying","八进制","的","numeric","正则","malformed","have","可能","delete","seq","deprecated","syntaxerror","formal","：","declaration","和","-","to","非法","and","”","中","x","a","意外","序列","262","后","表达","头部","allowed","进制","sourceurl",":","parameter","pragmas","将","初始值","indicate","legal","应用","initializers","数字","错误","statement","需要","literal","推荐","开始","@","invalid","简单","parsing","常量","声明","达式","一个","using","starts","字符","head","parameters","于","parse","of","有","参数","reserved","requires","不","not","转义序列","名称","regular"],"title":"语法错误","title_tokens":["语法错误","错误","语法"]},{"location":"2019/0216/javascript-error-msg/#-","text":"SyntaxError: missing ) after argument list 参数列表后面 SyntaxError: missing ) after condition 条件之后 SyntaxError: missing : after property id id 属性之后 SyntaxError: missing ; before statement 在声明之前 SyntaxError: missing = in const declaration const 声明中的 SyntaxError: missing ] after element list 元素列表后面的 SyntaxError: missing formal parameter 缺少形式参数 SyntaxError: missing name after . operator 之后缺少名称。操作者 SyntaxError: missing variable name 缺少变量名 SyntaxError: missing } after function body 函数主体后缺失 } SyntaxError: missing } after property list 属性键与属性值后缺失 }","text_tokens":["parameter","}","操作","主体","列表","后面",";","variable","element","in","缺少","元素","operator","在",")","形式","argument","函数","id","的","操作者","function","值后","statement","after","变量名","body","const","。","键","与","syntaxerror","declaration","formal","形式参数","声明","缺失","condition","之后","]","=","中","before","属性","name","变量","条件","list","作者","后","property"," ","参数","missing",".","名称","之前",":"],"title":"语法错误-缺失","title_tokens":["缺失","-","语法错误","错误","语法"]},{"location":"2019/0216/javascript-error-msg/#_7","text":"SyntaxError: redeclaration of formal parameter \"x\" 重复声明参数 某个变量名称已经作为函数参数出现了，但是又使用了 let 在函数体里重声明了。在JavaScript 中不允许使用let在相同的函数或块范围内重新声明相同的变量。 SyntaxError: return not in function 不是在函数里返回 return 返回的或者 yield 语句在函数 function 外被调用. 或许是少了一个花括号， return 返回的和 yield 语句必须是在一个函数里，因为它们会停止（暂停或恢复）函数的继续执行，然后返回。 SyntaxError: test for equality (==) mistyped as assignment (=)? 赋值符号出现在错误的位置 在通常期望进行相等判定（==）的地方出现了赋值（=）。 为了帮助调试，JavaScript（在开启严格模式的情况下）会对这种情况进行警告。 SyntaxError: unterminated string literal 未结束的字符串","text_tokens":["重复","出现","但是","不是","?","函数参数","开启","情况","yield","函数","它们","继续","for","外","模式","语句","体里重","调试","已经","assignment","=","，","少","调用","严格","相同","string"," ",".","下","重新","是","equality","为了","in","位置",")","\"","(","function","允许","或块","帮助","。","停止","某个","let","暂停","判定","test","必须","这种","unterminated","通常","redeclaration","或者","或许","范围","作为","使用","期望","执行","在","返回","的","内","恢复","相等","会","符号","as","了","syntaxerror","formal","括号","和","中","里","变量","x","javascript","继续执行","花",":","parameter","或","return","进行","因为","错误","赋值","对","警告","literal","（","声明","）","一个","字符串","mistyped","字符","又","被","地方","of","未","参数","然后","结束","不","not","名称"],"title":"语法错误","title_tokens":["语法错误","错误","语法"]},{"location":"2019/0216/javascript-error-msg/#_8","text":"TypeError: \"x\" has no properties null 和 undefined中，没有你需要的属性。 TypeError: \"x\" is (not) \"y\" 出现了与期望不符的类型。 这个错误常常由 undefined 或 null 值引起。 此外，某些方法，例如 Object.create() 或 Symbol.keyFor()， 要求必须提供特定类型的参数。 TypeError: \"x\" is not a constructor 是因为尝试将不是构造器的对象或者变量来作为构造器使用。参考 constructor 或者 new operator 来了解什么是构造器。 有很多的全局对象比如 String、Array 等等都是可以使用 new 操作符的构造器。但是有一些全局对象并不是，且其属性和方法都是静态的。下面的 JavaScript 标准内置对象都不是构造器：Math，JSON，Symbol，Reflect，Intl，SIMD，Atomics。 Generator functions 也不能作为构造器来使用。 TypeError: \"x\" is not a function 问题出在你试图去调用一个像函数一样的值，但是该值实际上不是函数，有时候你的代码需要调用一些函数，但是那种值并不能当作函数来被调用。 也许函数名称上有错别字？ 也许你正在调用Object对象没有这个方法？ 例如，在JavaScript中单纯的对象(Object)没有map函数，但是JavaScript数组(Array)对象却有这个函数。 TypeError: \"x\" is not a non-null object 在期待出现对象类型的值的地方而没有提供。null 不是对象类型，因此不起作用。必须在给定的场景下提供一个合适的对象。 TypeError: \"x\" is read-only 全局变量或对象属性被设置为只读 (专业点讲，就是这条数据属性禁止写入.) 这条错误值发生在strict mode code(俗称严格模式). 正常情况下，是没有报错的。 TypeError: 'x' is not iterable 这个值作为 for…of 的表达式右值，或者作为一个函数的参数，如 Promise.all 或者 TypedArray.from, 不是一个 可迭代对象. 一个可迭代对象可以是一个内置可迭代类型，如Array, String 或 Map, 一个 generator 生成结果, 或者一个实现了 可迭代协议 的对象 TypeError: More arguments needed 调用函数的时候出现了错误。需要提供更多的参数。 TypeError: can't access dead object 为了提高内存使用效率以及防止内存泄露，Firefox 浏览器不允许插件在 DOM 所在的父页面被销毁后对 DOM 对象保持强引用。死对象指的是在 DOM 被销毁后依然持有对 DOM 元素的强引用(处于活跃状态)。为了避免这样的问题，对处于外部文档中的 DOM 节点的引用应该被存储于一个专属于那个文档的对象当中，并且在文档卸载的时候将其清理，或者使用弱引用方式进行存储。 TypeError: can't define property \"x\": \"obj\" is not extensible 通常情况下，对象是可以进行扩展的，即可以向其添加新的属性。然而当使用 Object.preventExtensions() 将一个对象标记为不再可以扩展的情况下，就无法对该对象添加在其被标记为不可扩展之前所拥有的属性之外的新属性了。 TypeError: can't delete non-configurable array element 这个错误提示发生于当试图缩短一个数组的长度的时候，其中有元素是不可配置的（non-configurable）。正常情况下，缩短数组的长度，则超出限度的元素会被删除，而这里指的是这种操作失效的情况。 configurable 特性控制着属性是否可以从对象中删除，以及它的特性（除了 writable 之外）是否可以发生改变。 通常，使用数组初始化语句创建的对象是可配置的，而通过 Object.defineProperty() 创建的属性，默认则是不可配置的。 TypeError: can't redefine non-configurable property \"x\" 这种错误的起因在于试图给对象重新定义一个属性，但是该属性是不可配置的。 configurable 特性控制着该属性是否可以从对象中删除，以及它的各个特性（除 writable 之外）是否可以修改。通常使用对象初始化语句定义的对象属性是可配置的。而使用 Object.defineProperty() 定义的属性则默认不可配置。 TypeError: cyclic object value 当调用 JSON.stringify() 方法时，循环对象引用结构不能被转换为字符串。 TypeError: invalid 'in' operand \"x\" in 操作符只可以用来检测对象中是否存在某个属性，而不能用来在字符串、数字或者其他基本类型的数据中进行检索。 TypeError: invalid 'instanceof' operand 'x' instanceof 操作符 希望右边的操作数为一个构造对象，即一个有 prototype 属性且可以调用的对象。 TypeError: invalid Array.prototype.sort argument Array.prototype.sort() 的参数预期为 undefined 或者是一个比较操作数的函数。 TypeError: invalid arguments 无效的参数 TypeError: invalid assignment to const \"x\" 对 const “x” 的赋值无效 TypeError: property \"x\" is non-configurable and can't be deleted 属性 “x” 不可配置且无法删除 TypeError: setting getter-only property \"x\" 设置 getter-only 属性 “x” TypeError: variable \"x\" redeclares argument 变量 x 重复声明参数","text_tokens":["重复","不是","该","则","typeerror","销毁","be","提高","写入","all","这里","发生","外部","non","这","死","失效","初始","typedarray","atomics","那个","插件","needed","map"," ","时候","即","重新","为了","控制","卸载","function","create","要求","例如","尝试","浏览","这种","器","code","方式","俗称","全局","cyclic","配置","合适","math","“","标记","结果","作数","property","t","从","通过","上","类型","处于","null","实现","因此","一样","效率","强","可以","其","configurable","only","会","delete","了","from","iterable","getter","浏览器","中","点","new","a","提供","表达","后","比较","constructor","试图","依然",":","数组","调用函数","或","有时","引起","对","之外","（","除","arguments","然而","有时候","字符串","被","但是","转换","泄露","情况","持有","这个","define","strict","也","单纯",",","模式","保持","当","语句","不起作用","属于","出","时","属性","那种","设置","该值",".","弱","不可","引用","存储","generator","报错","给","firefox","argument","(","特定","允许","is","const","由","可","像","mode","或者","指","应该","期待","避免","更","preventextensions","操作符","元素","不能","can","场景","操作数","的","右边","和","且","专业","都","当中","删除","迭代","element","进行","因为","redeclares","多","access","properties","stringify","、","实际","并","基本","simd","希望","）","起因","一个","正在","只","of","预期","什么","名称","新","是因为","如","出现","就是","特性","writable","很多","defineproperty","防止","以及","dom","缩短","检索","并且","它","extensible","？","结构","，","has","无法","静态","表达式","当作","某些",")","\"","而","来","在于","dead","状态","页面","undefined","值","其他","构造","operator","问题","在","就","超出","生成","正常","全局变量","-","no","to","redefine","常常","对象","and","错别字","变量","各个","父","不再","之前","操作","将","用来","是否","活跃","数字","错误","赋值","需要","文档","默认","invalid","与","声明","改变","着","地方","参数","不","器来","object","不符","内存","定义","deleted","函数","循环","for","这样","添加","prototype","修改","向","协议","实际上","等等","为","assignment","json","read","作用","调用","严格","比如","string","下面","y","下","sort","提示","是","一些","in","more","数据","obj","无效","。","某个","必须","keyfor","限度","通常","标准","'","所","作为","了解","只读","其中","使用","期望","instanceof","方法","没有","也许","条","扩展","symbol","reflect","检测","初始化","讲","长度","array","却","拥有","intl","：","你","setting","代码","别字","value","”","去","x","存在","所在","创建","promise","javascript","variable","右值","此外","除了","…","内置","functions","清理","给定","禁止","达式","operand","字符","于","专","有","参考","not","节点"],"title":"类型错误","title_tokens":["类型","错误"]},{"location":"2019/0216/javascript-error-msg/#_9","text":"URIError: malformed URI sequence 格式错误的 URI 序列","text_tokens":["的","格式","malformed","序列"," ","sequence","urierror","uri","错误",":"],"title":"路径错误","title_tokens":["路径","错误"]},{"location":"2019/0216/javascript-error-msg/#_10","text":"Warning: -file- is being assigned a //# sourceMappingURL, but already has one -file-正被分配//＃sourceMappingURL，但已经有一个 Warning: Date.prototype.toLocaleFormat is deprecated 不推荐使用 Date.prototype.toLocaleFormat Warning: JavaScript 1.6's for-each-in loops are deprecated 不推荐使用 JavaScript 1.6 for-each-in 循环 Warning: String.x is deprecated; use String.prototype.x instead 不推荐使用 String.x;请改用 String.prototype.x Warning: expression closures are deprecated 不推荐使用表达式闭包 Warning: unreachable code after return statement 返回语句后无法访问代码 X.prototype.y called on incompatible type X.prototype.y调用了不兼容的类型","text_tokens":["分配","循环","closures","兼容","being","for","访问","after","prototype",",","语句","已经","1.6","#","，","has","调用","string","无法"," ","表达式",".","y","in","incompatible","one","each","instead","无法访问","tolocaleformat","type","is","expression","code","are","'","但","＃","loops","使用","already","/","but","类型",";","请","warning","返回","use","改用","的","assigned","了","deprecated","sourcemappingurl","s","on","-","代码","正","x","a","表达","后","javascript","unreachable",":","file","return","statement","推荐","闭包","达式","一个","被","有","called","不","date"],"title":"警告","title_tokens":["警告"]},{"location":"2019/0413/spring-framework-version/","text":"简介 ¶ spring framework 更新后都会有新的特性, 而且 spring framework 是在 github 上开源的, github 上也会有相应的版本更新日志, 所以我采用 github api 可以获取其日志内容, 当然你可以在页面上看, 不过我想要的是所有的信息 快速上手 ¶ github 获取的对应仓库的链接 https://api.github.com/repos/spring-projects/spring-framework/releases 入门篇 ¶ 直接贴代码 < script src = \"https://cdn.staticfile.org/jquery/2.1.2/jquery.min.js\" ></ script > < script src = \"https://cdn.staticfile.org/marked/0.6.2/marked.min.js\" ></ script > < script src = \"https://cdn.staticfile.org/highlight.js/9.15.6/highlight.min.js\" ></ script > < body > < div id = \"list\" ></ div > < script > $ ( function () { marked . setOptions ({ renderer : new marked . Renderer (), gfm : true , tables : true , breaks : false , pedantic : false , sanitize : false , smartLists : true , smartypants : false , highlight : function ( code , lang ) { //使用 highlight 插件解析文档中代码部分 return hljs . highlightAuto ( code , [ lang ]). value ; } }); let html = \"\" ; $ . ajax ({ type : \"get\" , url : \"https://api.github.com/repos/spring-projects/spring-framework/releases\" , // 路径 data : { }, dataType : \"json\" , async : false , success : function ( data ) { $ . each ( data , function ( index , value ) { // console.log(value['url']); // console.log(value['assets_url']); // console.log(value['upload_url']); console . log ( value [ 'html_url' ]); // console.log(value['id']); console . log ( value [ 'tag_name' ]); // console.log(value['target_commitish']); // console.log(value['name']); // console.log(value['draft']); // console.log(value['author']['login']); // console.log(value['author']['id']); // console.log(value['author']['node_id']); // console.log(value['author']['avatar_url']); // console.log(value['author']['gravatar_id']); // console.log(value['author']['url']); console . log ( value [ 'author' ][ 'html_url' ]); // console.log(value['author']['followers_url']); // console.log(value['author']['following_url']); // console.log(value['author']['gists_url']); // console.log(value['author']['starred_url']); // console.log(value['author']['subscripttions_url']); // console.log(value['author']['organizations_url']); // console.log(value['author']['repos_url']); // console.log(value['author']['events_url']); // console.log(value['author']['received_events_url']); // console.log(value['author']['type']); // console.log(value['author']['site_admin']); // console.log(value['prerelease']); // console.log(value['created_at']); // console.log(value['published_at']); // console.log(value['assets']); // console.log(value['tarball_url']) // console.log(value['zipball_url']) console . log ( value [ 'body' ]) html += `<a href=' ${ value [ 'html_url' ] } '> ${ value [ 'tag_name' ] } </a><p> ${ value [ 'author' ][ 'html_url' ] } </p> ${ marked ( value [ 'body' ]) } <hr>` ; }); } }) $ ( \"#list\" ). html ( html ); }); </ script > </ body > 附录 ¶ github 对应的 api https://api.github.com/repos/${github name}/${repo name}/releases github api v4","text_tokens":["直接","js","特性","breaks",">","$","repo","spring","admin","id","也","body","events","0.6","入门","tarball",",","projects","解析","org","url","avatar","zipball","datatype","get","[","¶","#","=","renderer","json","releases","所以","想要","插件","created","list","organizations"," ","手",".","6","log","success","更新","开源","}","是","p","不过","sanitize","部分","received","版本","简介","repos","\"",")","(","each","site","我","对应","function","draft","type","附录","快速","日志","let","`","highlightauto","starred","following","highlight","data","gravatar","{","code","页面","入门篇","published","'","html","gfm","_","com","framework","name","pedantic","使用","/","lang","github","上",";","而且","console","可以","在","marked","2.1","其","的","链接","会","false","setoptions","v4","tables","script","你","]","-","api","jquery","prerelease","获取","<","hr","代码","中","value","node","new","仓库","a","author","都","路径","后","smartlists","assets","cdn","+",":","true","src","9.15","return","贴","followers","hljs","href","https","采用","ajax","login","文档","min","所有","smartypants","commitish","staticfile","div","subscripttions","内容","at","target","看","index","async","tag","upload","有","相应","2","当然","gists","信息","新"],"title":"利用 Github API 获取 spring-framework 所有版本更新信息","title_tokens":["framework","-","利用","api"," ","所有","获取","版本","github","信息","spring","更新"]},{"location":"2019/0413/spring-framework-version/#_1","text":"spring framework 更新后都会有新的特性, 而且 spring framework 是在 github 上开源的, github 上也会有相应的版本更新日志, 所以我采用 github api 可以获取其日志内容, 当然你可以在页面上看, 不过我想要的是所有的信息","text_tokens":["开源","是","不过","而且","特性","版本","可以","在","spring","采用","其","我","的","也","会","日志","所有",",","更新","你","内容","api","页面","获取","看","framework","所以","想要","有","都","后"," ","相应","当然","github","信息","新","上"],"title":"简介","title_tokens":["简介"]},{"location":"2019/0413/spring-framework-version/#_2","text":"github 获取的对应仓库的链接 https://api.github.com/repos/spring-projects/spring-framework/releases","text_tokens":["spring","repos","https","对应","的","链接","projects","-","api","获取","com","framework","releases","仓库"," ","/",".","github",":"],"title":"快速上手","title_tokens":["手","快速","上"]},{"location":"2019/0413/spring-framework-version/#_3","text":"直接贴代码 < script src = \"https://cdn.staticfile.org/jquery/2.1.2/jquery.min.js\" ></ script > < script src = \"https://cdn.staticfile.org/marked/0.6.2/marked.min.js\" ></ script > < script src = \"https://cdn.staticfile.org/highlight.js/9.15.6/highlight.min.js\" ></ script > < body > < div id = \"list\" ></ div > < script > $ ( function () { marked . setOptions ({ renderer : new marked . Renderer (), gfm : true , tables : true , breaks : false , pedantic : false , sanitize : false , smartLists : true , smartypants : false , highlight : function ( code , lang ) { //使用 highlight 插件解析文档中代码部分 return hljs . highlightAuto ( code , [ lang ]). value ; } }); let html = \"\" ; $ . ajax ({ type : \"get\" , url : \"https://api.github.com/repos/spring-projects/spring-framework/releases\" , // 路径 data : { }, dataType : \"json\" , async : false , success : function ( data ) { $ . each ( data , function ( index , value ) { // console.log(value['url']); // console.log(value['assets_url']); // console.log(value['upload_url']); console . log ( value [ 'html_url' ]); // console.log(value['id']); console . log ( value [ 'tag_name' ]); // console.log(value['target_commitish']); // console.log(value['name']); // console.log(value['draft']); // console.log(value['author']['login']); // console.log(value['author']['id']); // console.log(value['author']['node_id']); // console.log(value['author']['avatar_url']); // console.log(value['author']['gravatar_id']); // console.log(value['author']['url']); console . log ( value [ 'author' ][ 'html_url' ]); // console.log(value['author']['followers_url']); // console.log(value['author']['following_url']); // console.log(value['author']['gists_url']); // console.log(value['author']['starred_url']); // console.log(value['author']['subscripttions_url']); // console.log(value['author']['organizations_url']); // console.log(value['author']['repos_url']); // console.log(value['author']['events_url']); // console.log(value['author']['received_events_url']); // console.log(value['author']['type']); // console.log(value['author']['site_admin']); // console.log(value['prerelease']); // console.log(value['created_at']); // console.log(value['published_at']); // console.log(value['assets']); // console.log(value['tarball_url']) // console.log(value['zipball_url']) console . log ( value [ 'body' ]) html += `<a href=' ${ value [ 'html_url' ] } '> ${ value [ 'tag_name' ] } </a><p> ${ value [ 'author' ][ 'html_url' ] } </p> ${ marked ( value [ 'body' ]) } <hr>` ; }); } }) $ ( \"#list\" ). html ( html ); }); </ script > </ body >","text_tokens":["直接","js","breaks",">","$","spring","admin","id","body","events","0.6","tarball",",","解析","projects","org","url","avatar","zipball","datatype","get","[","#","=","renderer","json","releases","插件","created","list","organizations"," ",".","6","log","success","}","p","sanitize","部分","received",")","\"","repos","each","(","site","function","draft","type","let","`","highlightauto","starred","following","highlight","data","gravatar","{","code","published","'","html","gfm","_","com","framework","name","pedantic","使用","/","lang","github",";","console","marked","2.1","false","setoptions","tables","script","]","-","api","jquery","prerelease","<","hr","代码","中","value","node","new","a","author","路径","smartlists","assets","cdn","+","true",":","src","9.15","return","贴","followers","hljs","href","https","ajax","login","文档","min","smartypants","commitish","staticfile","div","subscripttions","at","target","index","async","tag","upload","2","gists"],"title":"入门篇","title_tokens":["入门篇","入门"]},{"location":"2019/0413/spring-framework-version/#_4","text":"github 对应的 api https://api.github.com/repos/${github name}/${repo name}/releases github api v4","text_tokens":[":","name","对应","的","}","releases","api","{"," ","/","$","repo",".","v4","github","repos","com","https"],"title":"附录","title_tokens":["附录"]},{"location":"2019/0414/tomcat-deploy-web/","text":"简介 ¶ 今天尝试用 Tomcat8 + maven 部署一下 web 工程, 然后我开始疯狂踩坑 快速上手 ¶ 网上一查如何用 Tomcat8 + maven 部署一般都是这样的教程 在 maven 工程下的 pom.xml 加入配置如下: <!-- Tomcat plugin --> <plugin> <groupId> org.apache.tomcat.maven </groupId> <!-- Tomcat8 一样可用--> <artifactId> tomcat7-maven-plugin </artifactId> <version> 2.2 </version> <configuration> <!-- tomcat 管理员地址,有的教程是 `http://localhost:8080/manager/`, 我是用 下面这种--> <url> http://localhost:8080/manager/text </url> <server> TomcatServer </server> <!-- *(From maven > settings.xml)* '${}' 号内的内容要与环境变量下 maven 路 下的 setting.xml 文件里配置的密码和用户名一致--> <username> ${admin} </username> <password> ${password} </password> </configuration> </plugin> tomcat8 安装目录下 conf/tomcat-users.xml 加入配置如下(配置好环境变量): <tomcat-users> <!-- 注意这是 users 不是 user 所以只要加入下面的内容即可, ps: 这是我最后踩的坑 --> <role rolename= \"manager-gui\" /> <role rolename= \"manager-script\" /> <!-- 下面的 roles 与上面匹配 --> <!-- 匹配内容 --> <user username= \"${admin}\" password= \"${password}\" roles= \"manager-gui,manager-script\" /> </tomcat-users> maven 安装目录下 conf/settings.xml 加入配置如下(配置好环境变量): <servers> <server> <!-- 匹配内容 --> <id> TomcatServer </id> <username> ${admin} </username> <password> ${password} </password> </server> </servers> 运行 tomcat 8 (运行 Tomcat 7 就是用 7 部署) 这个一定要运行不然会报 404 部署命令 # 都是 tocmat7 不是 `tomcat8 or tomcat` mvn tomcat7:deploy # mvn tomcat7:redeploy 入门篇 ¶ 测试环境: Tomcat 8.0.5 JDK 1.8 Window 10 X64 Maven 3.6.0 FAQ ¶ 报 404: 先开启服务器 报 403: 无法进入 manager 页面 打开 http://localhost:8080/manager/html 能否用配置好的账号登录 ${Tomcat8_HOME_PATH}/webapps 下有 manager 文件, 如果之前删过, 拷贝一份回来 确认 username 和 password 正确 报 401: [ERROR] Tomcat return http status error: 401, Reason Phrase: Unauthorized [ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin:2.2:deploy (default-cli) on project test-mybatis: Tomcat return http status error: 401, Reason Phrase: Unauthorized 就是账号没配置好, 回去确认 附录 ¶ Java 8的Tomcat Maven插件 - 代码日志 Maven部署项目到Tomcat7出现403 Access Deny. - Josh_Persistence - ITeye博客 使用tomcat7插件将项目一键部署到远程tomcat服务器-热部署 - 王西文 stackoverflow tomcat8 maven 401 403 404","text_tokens":["如下","出现","不是","就是","home","环境",">","用户名","目录","到","$","开启","一般","安装","一下","admin","上面","404","id","phrase","这个","地址","这样","这是","这","java","stackoverflow","settings","最后","密码","redeploy",",","入门","tocmat7","今天","username","3.6","org","url","7","text","maven","号","execute","configuration","一致","--","[","¶","#","=","groupid","管理员","环境变量","0","项目","所以","插件","tomcatserver","conf","无法"," ","下面","failed","手","version",".","下","正确","测试环境","}","是","apache","服务","manager","简介",")","\"","(","回去","persistence","我","default","好","附录","快速","plugin","日志","尝试","命令","10","`","如果","test","这种","删过","8","server","user","iteye","踩","{","部署","页面","入门篇","'","配置","html","可用","_","error","mvn","远程","要","报","使用","能否","/","教程","josh","上","网上","即可","坑","unauthorized","一样","faq","在","pom","一查","管理","只要","403","回来","不然","roles","tomcat","的","内","登录","加入","project","servers","会","8.0","role","password","ps","web","热","from","先","服务器","script","goal","和","]","-","gui","to","on","setting","账号","文件","打开","<","匹配","artifactid","代码","2.2","务器","里","reason","变量","王","status","!","mybatis","都","rolename","用户","进入","path","+","window","之前",":","将","用","return","没","deny","一定","deploy","注意","户名","5","疯狂","1.8","webapps","access","x64","一份","开始","工程","拷贝","users","测试","与","博客","环境变","jdk","内容","运行","确认","路","西文","*","or","xml","如何","http","有","401","localhost","然后","tomcat7","8080","cli","一键","tomcat8"],"title":"利用 Tomcat8/maven 部署 web 工程","title_tokens":["利用","maven","部署"," ","/","工程","web","tomcat8"]},{"location":"2019/0414/tomcat-deploy-web/#_1","text":"今天尝试用 Tomcat8 + maven 部署一下 web 工程, 然后我开始疯狂踩坑","text_tokens":["我","坑","疯狂","用","maven","踩","部署"," ","然后","开始","一下","尝试","工程","web",",","+","今天","tomcat8"],"title":"简介","title_tokens":["简介"]},{"location":"2019/0414/tomcat-deploy-web/#_2","text":"网上一查如何用 Tomcat8 + maven 部署一般都是这样的教程 在 maven 工程下的 pom.xml 加入配置如下: <!-- Tomcat plugin --> <plugin> <groupId> org.apache.tomcat.maven </groupId> <!-- Tomcat8 一样可用--> <artifactId> tomcat7-maven-plugin </artifactId> <version> 2.2 </version> <configuration> <!-- tomcat 管理员地址,有的教程是 `http://localhost:8080/manager/`, 我是用 下面这种--> <url> http://localhost:8080/manager/text </url> <server> TomcatServer </server> <!-- *(From maven > settings.xml)* '${}' 号内的内容要与环境变量下 maven 路 下的 setting.xml 文件里配置的密码和用户名一致--> <username> ${admin} </username> <password> ${password} </password> </configuration> </plugin> tomcat8 安装目录下 conf/tomcat-users.xml 加入配置如下(配置好环境变量): <tomcat-users> <!-- 注意这是 users 不是 user 所以只要加入下面的内容即可, ps: 这是我最后踩的坑 --> <role rolename= \"manager-gui\" /> <role rolename= \"manager-script\" /> <!-- 下面的 roles 与上面匹配 --> <!-- 匹配内容 --> <user username= \"${admin}\" password= \"${password}\" roles= \"manager-gui,manager-script\" /> </tomcat-users> maven 安装目录下 conf/settings.xml 加入配置如下(配置好环境变量): <servers> <server> <!-- 匹配内容 --> <id> TomcatServer </id> <username> ${admin} </username> <password> ${password} </password> </server> </servers> 运行 tomcat 8 (运行 Tomcat 7 就是用 7 部署) 这个一定要运行不然会报 404 部署命令 # 都是 tocmat7 不是 `tomcat8 or tomcat` mvn tomcat7:deploy # mvn tomcat7:redeploy","text_tokens":["如下","不是","就是","环境",">","用户名","目录","$","一般","安装","上面","admin","404","id","这个","地址","这样","这是","这","settings","最后","密码","redeploy",",","tocmat7","username","org","url","7","text","maven","号","configuration","一致","--","#","=","groupid","管理员","环境变量","所以","tomcatserver","conf"," ","下面","version",".","下","}","是","apache","manager",")","\"","(","我","好","plugin","命令","`","这种","8","server","user","{","踩","部署","'","配置","可用","mvn","要","报","/","教程","网上","即可","坑","一样","在","pom","一查","管理","只要","不然","roles","tomcat","的","内","加入","servers","会","role","password","ps","from","script","和","-","gui","setting","文件","<","匹配","artifactid","2.2","里","变量","!","都","rolename","用户","+",":","用","一定","deploy","注意","户名","工程","users","与","环境变","内容","运行","路","*","or","xml","如何","http","有","localhost","tomcat7","8080","tomcat8"],"title":"快速上手","title_tokens":["手","快速","上"]},{"location":"2019/0414/tomcat-deploy-web/#_3","text":"测试环境: Tomcat 8.0.5 JDK 1.8 Window 10 X64 Maven 3.6.0","text_tokens":["3.6","tomcat","5","0","1.8","jdk","maven","环境"," ","8.0","x64","10",".","测试","window",":","测试环境"],"title":"入门篇","title_tokens":["入门篇","入门"]},{"location":"2019/0414/tomcat-deploy-web/#faq","text":"报 404: 先开启服务器 报 403: 无法进入 manager 页面 打开 http://localhost:8080/manager/html 能否用配置好的账号登录 ${Tomcat8_HOME_PATH}/webapps 下有 manager 文件, 如果之前删过, 拷贝一份回来 确认 username 和 password 正确 报 401: [ERROR] Tomcat return http status error: 401, Reason Phrase: Unauthorized [ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin:2.2:deploy (default-cli) on project test-mybatis: Tomcat return http status error: 401, Reason Phrase: Unauthorized 就是账号没配置好, 回去确认","text_tokens":["就是","home","开启","$","phrase","404",",","username","org","maven","execute","[","无法"," ","failed",".","正确","下","}","apache","服务","manager",")","(","回去","default","好","plugin","如果","test","删过","{","页面","配置","html","_","error","报","能否","/","unauthorized","403","回来","tomcat","的","登录","project","password","先","服务器","goal","和","]","to","-","on","账号","文件","打开","2.2","务器","reason","status","mybatis","进入","path","之前",":","用","return","没","deploy","webapps","一份","拷贝","确认","http","有","401","localhost","tomcat7","8080","cli","tomcat8"],"title":"FAQ","title_tokens":["faq"]},{"location":"2019/0414/tomcat-deploy-web/#_4","text":"Java 8的Tomcat Maven插件 - 代码日志 Maven部署项目到Tomcat7出现403 Access Deny. - Josh_Persistence - ITeye博客 使用tomcat7插件将项目一键部署到远程tomcat服务器-热部署 - 王西文 stackoverflow tomcat8 maven 401 403 404","text_tokens":["出现","将","到","服务","deny","403","persistence","404","tomcat","的","access","java","stackoverflow","日志","热","博客","服务器","8","-","maven","iteye","部署","西文","代码","_","远程","务器","王","项目","插件","使用","401"," ","tomcat7","一键",".","josh","tomcat8"],"title":"附录","title_tokens":["附录"]},{"location":"2019/0916/chrome-extention/","text":"简介 ¶ Chrome 在后面新的版本不支持第三方扩展了，这使得我自己去下载一些开发者的扩展安装时有点感到不方便， 百度经验 上到多数都是用开发者模式的方法安装，其实最完美的方法是 policy whitelist 快速上手 ¶ windows 添加 policy ¶ 使用注册表添加的方式（懒得写了） mac 命令行添加 policy ¶ # add defaults write com.google.Chrome ExtensionInstallWhitelist -array { id } # delete defaults delete com.google.Chrome ExtensionInstallWhitelist 进阶篇 ¶ 利用链接下载 Chrome extension # example # wget https://chrome.google.com/webstore/detail/cookies/{id}?hl=en wegt https://chrome.google.com/webstore/detail/cookies/iphcomljdfghbkdcfndaijbokpgddeno?hl = en ``` - 查看 policy 是否添加 ``` bash start chrome://policy/ 附录 ¶ Policy List chromium mac-quick-start","text_tokens":["bash","?","支持","利用","wget","到","三方","安装","开发","id","extensioninstallwhitelist","这","添加","查看","最","模式","webstore","第三","¶","时","#","=","，","注册","list","extension"," ","有点","手",".","wegt","使得","}","write","是","iphcomljdfghbkdcfndaijbokpgddeno","一些","quick","版本","whitelist","简介","google","我","附录","快速","add","下载","命令","policy","`","懒得","{","方式","com","使用","mac","命令行","/","方法","windows","多数","方便","上","第三方","扩展","defaults","cookies","hl","在","感到","的","链接","start","delete","array","了","-","去","写","都","example","注册表","自己",":","经验","开发者","后面","用","进阶","是否","https","百度","（","其实","）","进阶篇","chromium","detail","chrome","en","不","新","完美"],"title":"解决 Chrome 第三方扩展安装的问题","title_tokens":["的","扩展","解决","三方"," ","第三","安装","问题","chrome","第三方"]},{"location":"2019/0916/chrome-extention/#_1","text":"Chrome 在后面新的版本不支持第三方扩展了，这使得我自己去下载一些开发者的扩展安装时有点感到不方便， 百度经验 上到多数都是用开发者模式的方法安装，其实最完美的方法是 policy whitelist","text_tokens":["上","是","开发者","扩展","后面","支持","用","到","三方","一些","安装","版本","whitelist","在","感到","开发","百度","我","的","这","第三方","下载","了","最","policy","模式","其实","第三","时","chrome","去","，","都","完美"," ","多数","有点","不","自己","方法","方便","新","经验","使得"],"title":"简介","title_tokens":["简介"]},{"location":"2019/0916/chrome-extention/#_2","text":"","text_tokens":[],"title":"快速上手","title_tokens":["手","快速","上"]},{"location":"2019/0916/chrome-extention/#windows-policy","text":"使用注册表添加的方式（懒得写了）","text_tokens":["写","的","）","注册","使用","添加","方式","注册表","（","了","懒得"],"title":"windows 添加 policy","title_tokens":["windows","添加"," ","policy"]},{"location":"2019/0916/chrome-extention/#mac-policy","text":"# add defaults write com.google.Chrome ExtensionInstallWhitelist -array { id } # delete defaults delete com.google.Chrome ExtensionInstallWhitelist","text_tokens":["id","write","}","extensioninstallwhitelist","-","defaults","{"," ","add","delete","array",".","#","chrome","com","google"],"title":"mac 命令行添加 policy","title_tokens":["添加"," ","mac","命令行","命令","policy"]},{"location":"2019/0916/chrome-extention/#_3","text":"利用链接下载 Chrome extension # example # wget https://chrome.google.com/webstore/detail/cookies/{id}?hl=en wegt https://chrome.google.com/webstore/detail/cookies/iphcomljdfghbkdcfndaijbokpgddeno?hl = en ``` - 查看 policy 是否添加 ``` bash start chrome://policy/","text_tokens":["}","bash","?","iphcomljdfghbkdcfndaijbokpgddeno","利用","wget","cookies","hl","是否","https","google","id","链接","start","查看","添加","下载","policy","`","webstore","-","{","detail","#","=","chrome","com","en","extension","example"," ","/",".","wegt",":"],"title":"进阶篇","title_tokens":["进阶","进阶篇"]},{"location":"2019/0916/chrome-extention/#_4","text":"Policy List chromium mac-quick-start","text_tokens":["-","list","start"," ","mac","chromium","quick","policy"],"title":"附录","title_tokens":["附录"]},{"location":"2019/1030/hexo-ogp/","text":"简介 ¶ 最近了解到有一种预览网址的协议叫 OGP ，想在 hexo 博客里添加，找到了这个 插件 安装 ¶ yarn add hexo-tag-link-preview # usage 在文章中添加 \\{\\% linkPreview https://www.amazon.com/ _blank nofollow \\%\\} 预览 ¶ 想要好看的预览需要如下的标签 Title 最长 65 个字符，否则 Google 结果就会被截断 Meta description 最好小于 155 字符 og:title 最好不超过 35 个字符，否则预览会截断 og:description 65 字符 og:url 页面 url og: image JPG 或者 PNG，最小分辨率 300 × 200 像素 favicon 网站 logo， 32 × 32 像素 上面的网站目前支持很多聊天工具，比如 WhatsApp, Telegram, Skype ，还有社交网站 Facebook，Twitter 等等。 # 可以用下面的代码内嵌到 hexo 的文章中 { % linkPreview https://www.amazon.com/ _blank nofollow % } { % linkPreview https://hackettyu.com/ _blank nofollow % } { % linkPreview https://baidu.com/ _blank nofollow % } 在 .\\themes\\next\\layout\\_partials\\head.swig 下添加了下面代码 < meta property = \"og:title\" content = \"hackettyu.com\" /> < meta property = \"og:description\" content = \"OGP\" /> < meta property = \"og:url\" content = \"http://hackettyu.com/\" /> < meta property = \"og:image\" content = \"http://richpreview.com/richpreview.jpg\" /> < link rel = \"shortcut icon\" href = \"https://hy-picgo.oss-cn-shenzhen.aliyuncs.com/img/blog-hackettyu-com/weekly_01_falling_through_code.gif\" type = \"image/x-icon\" /> 感觉没用 使用 hexo 自带的 open graph 参数 ¶ 插入 open graph 资源。 <%- open_graph([options]) %> + {{ open_graph([options]) %> }} - <%- open_graph([options]) %> 参数 描述 默认值 title 页面标题 (og:title) page.title type 页面类型 (og:type) blog url 页面网址 (og:url) url image 页面图片 (og:image) 内容中的图片 site_name 网站名称 (og:site_name) config.title description 页面描述 (og:description) 内容摘要或前 200 字 twitter_card Twitter 卡片类型 (twitter:card) summary twitter_id Twitter ID (twitter:creator) twitter_site Twitter 网站 (twitter:site google_plus Google+ 个人资料链接 fb_admins Facebook 管理者 ID fb_app_id Facebook 应用程序 ID 附录 ¶ OGP 简介 hexo open graph hexo-tag-link-preview 让网站在分享时预览更美观 hexo 加上 Open Graph","text_tokens":["最小","找到","如下","支持","options","到",">","很多","安装","插入","上面","twitter","好看","telegram","id","这个","预览","添加","link","card",",","og","感觉","协议","url","www","yarn","最好","等等","icon","partials","内容摘要","资料","[","next","¶","300","时","#","=","程序","网址","ogp","，","jpg","插件","想要","比如"," ","个人","网站","社交","下面","themes","聊天工具",".","下","35","字","}","description","内嵌","blank","cn","through","×","美观","简介","分辨率","skype","\"","google","weekly","(",")","usage","site","type","附录","add","。","png","最近","%","logo","还有","facebook","shenzhen","gif","title","个人资料","%-","\\","没用","{","img","页面","或者","code","graph","聊天","65","图片","截断","image","_","com","加上","hexo","了解","name","结果","使用","property","/","目前","更","否则","天工","超过","叫","rel","资源","类型","标题","blog","favicon","或前","200","admins","whatsapp","可以","在","卡片","管理","open","就","的","工具","01","链接","会","最长","标签","分辨","了","摘要","文章","155","像素","aliyuncs","]","-","layout","默认值","creator","<","中","代码","falling","hackettyu","里","meta","x","hy","preview","让","个字符","+","应用程序",":","linkpreview","fb","用","plus","管理者","小于","一种","href","应用","https","content","nofollow","需要","32","summary","默认","辨率","博客","amazon","描述","内容","picgo","config","字符","shortcut","head","被","app","richpreview","oss","tag","baidu","http","自带","有","swig","想","参数","分享","不","名称","page"],"title":"给 hexo 博客添加 OGP 支持","title_tokens":["支持","添加"," ","给","博客","ogp","hexo"]},{"location":"2019/1030/hexo-ogp/#_1","text":"最近了解到有一种预览网址的协议叫 OGP ，想在 hexo 博客里添加，找到了这个 插件","text_tokens":["找到","到","一种","在","的","这个","预览","添加","了","最近","博客","协议","网址","hexo","了解","，","里","ogp","插件","有","想"," ","叫"],"title":"简介","title_tokens":["简介"]},{"location":"2019/1030/hexo-ogp/#_2","text":"yarn add hexo-tag-link-preview # usage 在文章中添加 \\{\\% linkPreview https://www.amazon.com/ _blank nofollow \\%\\}","text_tokens":["}","linkpreview","blank","在","https","usage","nofollow","添加","add","link","%","文章","www","yarn","\\","amazon","-","{","#","中","_","com","hexo","tag","preview"," ","/",".",":"],"title":"安装","title_tokens":["安装"]},{"location":"2019/1030/hexo-ogp/#_3","text":"想要好看的预览需要如下的标签 Title 最长 65 个字符，否则 Google 结果就会被截断 Meta description 最好小于 155 字符 og:title 最好不超过 35 个字符，否则预览会截断 og:description 65 字符 og:url 页面 url og: image JPG 或者 PNG，最小分辨率 300 × 200 像素 favicon 网站 logo， 32 × 32 像素 上面的网站目前支持很多聊天工具，比如 WhatsApp, Telegram, Skype ，还有社交网站 Facebook，Twitter 等等。 # 可以用下面的代码内嵌到 hexo 的文章中 { % linkPreview https://www.amazon.com/ _blank nofollow % } { % linkPreview https://hackettyu.com/ _blank nofollow % } { % linkPreview https://baidu.com/ _blank nofollow % } 在 .\\themes\\next\\layout\\_partials\\head.swig 下添加了下面代码 < meta property = \"og:title\" content = \"hackettyu.com\" /> < meta property = \"og:description\" content = \"OGP\" /> < meta property = \"og:url\" content = \"http://hackettyu.com/\" /> < meta property = \"og:image\" content = \"http://richpreview.com/richpreview.jpg\" /> < link rel = \"shortcut icon\" href = \"https://hy-picgo.oss-cn-shenzhen.aliyuncs.com/img/blog-hackettyu-com/weekly_01_falling_through_code.gif\" type = \"image/x-icon\" /> 感觉没用","text_tokens":["最小","如下","支持","到",">","很多","上面","twitter","好看","telegram","预览","添加","link",",","og","感觉","url","www","最好","等等","icon","partials","next","300","#","=","ogp","，","jpg","想要","比如"," ","网站","社交","下面","themes","聊天工具",".","下","35","description","内嵌","}","blank","cn","through","×","分辨率","skype","\"","weekly","google","type","。","png","%","logo","还有","facebook","shenzhen","gif","title","\\","没用","{","img","页面","或者","code","聊天","65","截断","image","_","com","hexo","结果","property","目前","/","天工","否则","超过","rel","blog","favicon","200","whatsapp","可以","在","就","的","工具","01","会","最长","标签","分辨","了","文章","155","像素","aliyuncs","-","layout","<","代码","中","falling","hackettyu","meta","x","hy","个字符",":","linkpreview","用","小于","href","https","content","nofollow","需要","32","辨率","amazon","picgo","字符","shortcut","head","被","richpreview","oss","baidu","http","swig","不"],"title":"预览","title_tokens":["预览"]},{"location":"2019/1030/hexo-ogp/#hexo-open-graph","text":"插入 open graph 资源。 <%- open_graph([options]) %> + {{ open_graph([options]) %> }} - <%- open_graph([options]) %> 参数 描述 默认值 title 页面标题 (og:title) page.title type 页面类型 (og:type) blog url 页面网址 (og:url) url image 页面图片 (og:image) 内容中的图片 site_name 网站名称 (og:site_name) config.title description 页面描述 (og:description) 内容摘要或前 200 字 twitter_card Twitter 卡片类型 (twitter:card) summary twitter_id Twitter ID (twitter:creator) twitter_site Twitter 网站 (twitter:site google_plus Google+ 个人资料链接 fb_admins Facebook 管理者 ID fb_app_id Facebook 应用程序 ID","text_tokens":["资源","}","类型","标题","blog","description","options","fb","或前","plus","200",">","admins","管理者","卡片","管理","应用",")","open","插入","(","site","twitter","id","的","google","type","链接","summary","默认","。","card","摘要","og","%","facebook","url","title","个人资料","应用程序","%-","]","描述","-","内容","{","graph","默认值","页面","config","内容摘要","图片","[","creator","image","资料","<","中","_","app","程序","网址","name"," ","参数","个人","网站",".","名称","+","字",":","page"],"title":"使用 hexo 自带的 open graph 参数","title_tokens":["的","自带","使用","graph"," ","参数","open","hexo"]},{"location":"2019/1030/hexo-ogp/#_4","text":"OGP 简介 hexo open graph hexo-tag-link-preview 让网站在分享时预览更美观 hexo 加上 Open Graph","text_tokens":["在","美观","简介","open","预览","link","-","graph","时","加上","ogp","hexo","tag","preview","让"," ","分享","网站","更"],"title":"附录","title_tokens":["附录"]},{"location":"2019/1104/hexo-kindle/","text":"简介 ¶ 看到一个 博客 里面有一个添加了 send to kindle 链接，准备在自己 hexo 博客中也搞一个 找到文件 theme\\next\\layout\\_macro\\post.swig 找到一个你想添加的位置 + <a href=\"https://pushtokindle.fivefilters.org/send.php?url=&#123&#123 page.permalink &#125&#125\">send to kindle</a> 注意一下文档里变量赋值是 &#123%- %&#125 ,我的版本是是用 &#123&#123&#125&#125 作为操作符 还有不要 &#123&#123 page.permalink | json &#125&#125 这样写，这样写会多一对引号 请忽略 \\ 附录 ¶ hexo 变量 寻找最快的 GitHub IP - 依云's Blog Hexo 特殊符号的转义问题","text_tokens":["找到","?",">","theme","一下","也","这样","添加","依云",",","org","url","next","¶","准备","=","ip","json","，","send","125"," ","引号",".","转义","是","pushtokindle","版本","位置","简介","\"","%&#","我","附录","还有","kindle","\\","最快","'","_","hexo","作为","一对","/","&#","github","blog","请","操作符","|","在","问题","特殊","的","链接","符号","了","里面","php","你","s","fivefilters","to","-","忽略","layout","文件","<","中","里","写","变量","搞","a","寻找","自己","+","post","123","macro",":","操作","用","看到","href","https","赋值","多","注意","文档","写会","博客","特殊符号","不要","一个","123%","有","swig","想","permalink","page"],"title":"给 hexo 添加 send to kindle 链接","title_tokens":["send","to","链接","添加"," ","给","kindle","hexo"]},{"location":"2019/1104/hexo-kindle/#_1","text":"看到一个 博客 里面有一个添加了 send to kindle 链接，准备在自己 hexo 博客中也搞一个 找到文件 theme\\next\\layout\\_macro\\post.swig 找到一个你想添加的位置 + <a href=\"https://pushtokindle.fivefilters.org/send.php?url=&#123&#123 page.permalink &#125&#125\">send to kindle</a> 注意一下文档里变量赋值是 &#123%- %&#125 ,我的版本是是用 &#123&#123&#125&#125 作为操作符 还有不要 &#123&#123 page.permalink | json &#125&#125 这样写，这样写会多一对引号 请忽略 \\","text_tokens":["找到","?",">","theme","一下","也","这样","添加",",","org","url","next","准备","=","json","，","send","125"," ","引号",".","是","pushtokindle","版本","位置","\"","%&#","我","还有","kindle","\\","_","hexo","作为","一对","/","&#","请","操作符","|","在","的","链接","了","里面","php","你","fivefilters","to","-","忽略","layout","文件","<","中","里","写","变量","搞","a","自己","+","post","123","macro",":","操作","用","看到","href","https","赋值","多","注意","文档","写会","博客","不要","一个","123%","有","swig","想","permalink","page"],"title":"简介","title_tokens":["简介"]},{"location":"2019/1104/hexo-kindle/#_2","text":"hexo 变量 寻找最快的 GitHub IP - 依云's Blog Hexo 特殊符号的转义问题","text_tokens":["s","变量","的","blog","特殊符号","-","转义"," ","符号","最快","寻找","依云","'","github","ip","问题","特殊","hexo"],"title":"附录","title_tokens":["附录"]},{"location":"2020/0320/vscode-diff/","text":"环境：WIN10 VSCode 的命令行方式 ¶ 配置环境变量： %LOCALAPPDATA%\\Programs\\Microsoft VS Code\\code.exe code 命令： # 新建一个文件 code README.md # 新建两个文件 code foo.md bar.md # 编辑一个已存在的文件 code foo.md # diff 比较两个文件 code -d foo.md bar.md code --diff foo.md bar.md # 新打开一个窗口 code -n 修改 VSCode 为 git 默认 diff tool ¶ # 修改 VSCode 为 git 默认 diff git config --global diff.tool vscode git config --global difftool.vscode.cmd \"code --wait --diff $LOCAL $REMOTE \" # 修改 git 默认编辑器 git config --global core.editor \"code --wait\" 参考 ¶ Comparing files using Visual Studio Code code --help HY $code --help Visual Studio Code 1 .43.1 Usage: code.exe [ options ][ paths... ] To read output from another program, append '-' ( e.g. 'echo Hello World | code.exe -' ) Options -d --diff <file> <file> Compare two files with each other. -a --add <folder> Add folder ( s ) to the last active window. -g --goto <file:line [ :character ] > Open a file at the path on the specified line and character position. -n --new-window Force to open a new window. -r --reuse-window Force to open a file or folder in an already opened window. -w --wait Wait for the files to be closed before returning. --locale <locale> The locale to use ( e.g. en-US or zh-TW ) . --user-data-dir <dir> Specifies the directory that user data is kept in. Can be used to open multiple distinct instances of Code. -v --version Print version. -h --help Print usage. --telemetry Shows all telemetry events which VS code collects. --folder-uri <uri> Opens a window with given folder uri ( s ) --file-uri <uri> Opens a window with given file uri ( s ) Extensions Management --extensions-dir <dir> Set the root path for extensions. --list-extensions List the installed extensions. --show-versions Show versions of installed extensions, when using --list-extension. --category Filters installed extensions by provided category, when using --list-extension. --install-extension <extension-id | path-to-vsix> Installs or updates the extension. Use ` --force ` argument to avoid prompts. --uninstall-extension <extension-id> Uninstalls an extension. --enable-proposed-api <extension-id> Enables proposed API features for extensions. Can receive one or more extension IDs to enable individually. Troubleshooting --verbose Print verbose output ( implies --wait ) . --log <level> Log level to use. Default is 'info' . Allowed values are 'critical' , 'error' , 'warn' , 'info' , 'debug' , 'trace' , 'off' . -s --status Print process usage and diagnostics information. --prof-startup Run CPU profiler during startup --disable-extensions Disable all installed extensions. --disable-extension <extension-id> Disable an extension. --inspect-extensions <port> Allow debugging and profiling of extensions. Check the developer tools for the connection URI. --inspect-brk-extensions <port> Allow debugging and profiling of extensions with the extension host being paused after start. Check the developer tools for the connection URI. --disable-gpu Disable GPU hardware acceleration. --max-memory Max memory size for a window ( in Mbytes ) .","text_tokens":["info","visual","options","show","paused","环境",">","w","telemetry","off","$","developer","category","startup","be","新建","id","all","run","zh","for","being","management","events","after","files","paths","修改",",","microsoft","append","acceleration","为","--","[","other","¶","character","#","with","shows","enables","before","debugging","read","环境变量","md","git","wait","allow","mbytes","line","extensions","list","d"," ","when","extension","by","print","version",".","1","log","trace","diagnostics","已","used","an","in","core","directory","root","more","size","两个","collects","one","values",")","\"","echo","each","(","argument","default","usage","install","world","foo","is","win10","versions","compare","features","add","dir","命令","窗口","tw","`","%","localappdata%","output","implies","user","\\","two","data","specifies","memory","code","方式","are","host","level","'","配置","enable","ids","instances","error","inspect","installs","prompts","v","specified","vs","during","already","命令行","uninstalls","opened","us","profiling","force","exe","the","returning","which","disable","n","folder","max","|","open","another","use","can","program","profiler","studio","的","individually","start","comparing","brk","connection","43.1","hello","from","hardware","：","s","multiple","warn","]","on","-","cmd","to","set","vscode","vsix","api","uninstall","check","文件","active","and","distinct","打开","<","编辑","closed","difftool","变量","verbose","critical","bar","存在","hy","diff","help","a","new","provided","updates","troubleshooting","status","allowed","比较","path","uri","window","that","readme",":","editor","e","g","file","goto","receive","cpu","...","opens","avoid","remote","默认","gpu","kept","环境变","h","prof","locale","tools","r","一个","config","using","at","installed","port","process","filters","or","global","given","programs","proposed","reuse","information","position","of","last","en","debug","参考","编辑器","local","新","tool"],"title":"命令行下打开 Visual Studio Code","title_tokens":["studio","visual","code"," ","命令行","命令","打开","下"]},{"location":"2020/0320/vscode-diff/#vscode","text":"配置环境变量： %LOCALAPPDATA%\\Programs\\Microsoft VS Code\\code.exe code 命令： # 新建一个文件 code README.md # 新建两个文件 code foo.md bar.md # 编辑一个已存在的文件 code foo.md # diff 比较两个文件 code -d foo.md bar.md code --diff foo.md bar.md # 新打开一个窗口 code -n","text_tokens":["exe","已","n","环境","两个","新建","的","foo","命令","窗口","%","localappdata%","microsoft","环境变","：","\\","-","code","一个","文件","--","打开","配置","#","编辑","programs","变量","环境变量","md","bar","存在","diff","vs","d"," ",".","比较","新","readme"],"title":"VSCode 的命令行方式","title_tokens":["的","vscode"," ","方式","命令行","命令"]},{"location":"2020/0320/vscode-diff/#vscode-git-diff-tool","text":"# 修改 VSCode 为 git 默认 diff git config --global diff.tool vscode git config --global difftool.vscode.cmd \"code --wait --diff $LOCAL $REMOTE \" # 修改 git 默认编辑器 git config --global core.editor \"code --wait\"","text_tokens":["editor","core","$","\"","remote","默认","修改","cmd","code","vscode","为","config","--","编辑","#","difftool","global","git","wait","diff"," ",".","local","编辑器","tool"],"title":"修改 VSCode 为 git 默认 diff tool","title_tokens":["git","diff","vscode"," ","为","默认","修改","tool"]},{"location":"2020/0320/vscode-diff/#_1","text":"Comparing files using Visual Studio Code code --help HY $code --help Visual Studio Code 1 .43.1 Usage: code.exe [ options ][ paths... ] To read output from another program, append '-' ( e.g. 'echo Hello World | code.exe -' ) Options -d --diff <file> <file> Compare two files with each other. -a --add <folder> Add folder ( s ) to the last active window. -g --goto <file:line [ :character ] > Open a file at the path on the specified line and character position. -n --new-window Force to open a new window. -r --reuse-window Force to open a file or folder in an already opened window. -w --wait Wait for the files to be closed before returning. --locale <locale> The locale to use ( e.g. en-US or zh-TW ) . --user-data-dir <dir> Specifies the directory that user data is kept in. Can be used to open multiple distinct instances of Code. -v --version Print version. -h --help Print usage. --telemetry Shows all telemetry events which VS code collects. --folder-uri <uri> Opens a window with given folder uri ( s ) --file-uri <uri> Opens a window with given file uri ( s ) Extensions Management --extensions-dir <dir> Set the root path for extensions. --list-extensions List the installed extensions. --show-versions Show versions of installed extensions, when using --list-extension. --category Filters installed extensions by provided category, when using --list-extension. --install-extension <extension-id | path-to-vsix> Installs or updates the extension. Use ` --force ` argument to avoid prompts. --uninstall-extension <extension-id> Uninstalls an extension. --enable-proposed-api <extension-id> Enables proposed API features for extensions. Can receive one or more extension IDs to enable individually. Troubleshooting --verbose Print verbose output ( implies --wait ) . --log <level> Log level to use. Default is 'info' . Allowed values are 'critical' , 'error' , 'warn' , 'info' , 'debug' , 'trace' , 'off' . -s --status Print process usage and diagnostics information. --prof-startup Run CPU profiler during startup --disable-extensions Disable all installed extensions. --disable-extension <extension-id> Disable an extension. --inspect-extensions <port> Allow debugging and profiling of extensions. Check the developer tools for the connection URI. --inspect-brk-extensions <port> Allow debugging and profiling of extensions with the extension host being paused after start. Check the developer tools for the connection URI. --disable-gpu Disable GPU hardware acceleration. --max-memory Max memory size for a window ( in Mbytes ) .","text_tokens":["info","visual","options","show","paused",">","w","telemetry","off","$","developer","category","startup","be","id","all","run","zh","for","being","management","events","after","files","paths",",","append","acceleration","--","[","other","character","with","shows","enables","debugging","before","read","wait","allow","mbytes","line","extensions","list","d"," ","when","extension","by","print","version","1",".","log","trace","diagnostics","used","an","in","directory","root","more","size","collects","one","values",")","echo","each","(","argument","default","usage","install","world","is","versions","compare","features","add","dir","tw","`","output","implies","user","two","data","specifies","memory","code","host","are","level","'","enable","ids","instances","error","inspect","installs","prompts","v","specified","vs","during","already","uninstalls","opened","us","profiling","force","exe","the","returning","which","disable","folder","n","max","|","open","another","use","can","program","profiler","studio","individually","start","comparing","brk","connection","43.1","hello","from","hardware","s","multiple","warn","]","on","to","-","api","set","vsix","check","uninstall","active","and","distinct","<","closed","critical","verbose","new","troubleshooting","hy","diff","help","a","provided","updates","status","allowed","path","uri","window","that",":","e","g","file","goto","receive","cpu","...","opens","avoid","gpu","kept","h","prof","locale","tools","r","using","at","installed","port","process","filters","or","given","proposed","reuse","information","position","of","last","en","debug"],"title":"参考","title_tokens":["参考"]},{"location":"2020/0507/windows-scoop/","text":"环境: WIN10 Pro 工具: powershell(version > 3)/scoop scoop 使用 ¶ scoop 安装 ¶ 安装 scoop 前提 Permalink 版本大于等于 3 的 powershell $psversiontable.psversion.**major** 5 确保您已允许 PowerShell 执行本地脚本 set-executionpolicy remotesigned -scope currentuser 安装 scoop Set-ExecutionPolicy RemoteSigned -scope CurrentUser Invoke-Expression ( New-Object System . Net . WebClient ). DownloadString ( 'https://get.scoop.sh' ) # or shorter iwr -useb get . scoop . sh | iex scoop 添加 bucket ¶ 安装 git 后可以添加 bucket # scoop insatll git # 查看官方支持的 bucket scoop bucket known # main # extras # versions # nightlies # nirsoft # php # nerd-fonts # nonportable # java # games # jetbrains # 查看帮助 scoop bucket help # scoop bucket: cmd 'help' not supported # Usage: scoop bucket add|list|known|rm [<args>] # 添加 bucket scoop bucket add extras scoop bucket add java scoop 常用命令使用 ¶ #查看某软件执行命令位置 # scoop which {{name}} #搜索某软件 # scoop search {{name}} #打开某软件官网 # scoop home {{name}} # 检查潜在的问题 # scoop checkup # 查看状态 # scoop status scoop 安装我在使用的软件 ¶ 安装前可以考虑使用 aria2 加速下载，不过由于 HTTPS 可能会导致下载失败，具体参考 scoop aria2 使用 安装前可以考虑使用 proxy 加速下载，具体参考 scoop 添加 http 代理 # 启用 aria2c 加速下载，不过可能会导致下载失败 # 建议先安装 scoop install innounp scoop install extras / vcredist2010 # erroor: missing MSVCR100.dll scoop install extras / vcredist2015 # dev env scoop install git scoop install openssh # because: https://stackoverflow.com/questions/49926386/openssh-windows-bad-owner-or-permissions scoop install nodejs # test: node npm scoop install yarn # depend on npm scoop install python # test: python pip scoop install go # java # scoop bucket add java # install java lastest openjdk scoop install openjdk # 如果你想使用 jdk8 你可以使用 openjdk 的发行版本 # scoop install adopt8-upstream # 切换到 jk8, 默认只会使用最后一次安装的版本 # scoop reset adopt8-upstream java -version # 目前在 scoop java bucket 里的 jdk 版本 chrome https : // github . com / ScoopInstaller / Java / tree / master / bucket # dev tools scoop install vscode-portable # vscode 便携版 scoop install postman scoop install soapui # jdk 1.8 if jdk >= 1.8 you can try to readyapi scoop install devdocs scoop install windows-terminal # CLI tools scoop install wget scoop install ffmpeg scoop install aria2 scoop install youtube-dl scoop install vim scoop install zip scoop install jq scoop install latex scoop install pandoc scoop install hugo scoop install phantomjs # apps im scoop install telegram # apps tools scoop install googlechrome # Chrome scoop install everything # 文件搜索 scoop install 7zip # 压缩 scoop install vlc # vedio scoop install dismplusplus # dism++ scoop install calibre # 书籍管理 scoop install ccleaner # 清理工具 scoop install copyq # 剪切板工具 scoop install snipaste # 截图工具 scoop install libreoffice-stable # office scoop-aria2-使用 ¶ aria2-enabled false true scoop config aria2-enabled false scoop config proxy 127.0.0.1:{{port}} # 启用 http 代理参考 windows 代理设置里写的端口与 sock5 端口不一样 scoop-添加-http-代理 ¶ # add # 端口在 win10 设置里的代理设置 # 好像不支持 sock5 scoop config proxy 127 . 0 . 0 . 1 : {{ port }} # delete scoop config rm proxy scoop 常见问题处理 ¶ 下载错误建议关闭 aria2 scoop config aria2-enabled false # scoop config aria2-enabled true PS C : \\ WINDOWS \\ system32 > scoop install vscode-portable WARN Scoop uses 'aria2c' for multi-connection downloads . WARN Should it cause issues , run 'scoop config aria2-enabled false' to disable it . Installing 'vscode-portable' ( 1 . 44 . 2 ) [ 64bit ] Loading dl . 7z from cache . Starting download with aria2 ... Download : 05 / 04 11 : 56 : 18 [ERROR] CUID #8 - Download aborted. URI=https://raw.githubusercontent.com/lukesampson/scoop-extras/master/scripts/vscode-install-context.reg Download : Exception : [ HttpConnection . cc : 156 ] errorCode = 1 Got EOF from the server . Download : 05 / 04 11 : 56 : 18 [ERROR] CUID #9 - Download aborted. URI=https://raw.githubusercontent.com/lukesampson/scoop-extras/master/scripts/vscode-uninstall-context.reg Download : Exception : [ HttpConnection . cc : 156 ] errorCode = 1 Got EOF from the server . Download : Download Results : Download : gid | stat | avg speed | path / URI Download : ======+====+===========+======================================================= Download : 9274bd | ERR | 0B / s | C : / Users / hasee / scoop / cache / vscode-portable #1.44.2#https_raw.githubusercontent.com_lukesampson_scoop-extras_master_scripts_vscode-install-context.reg Download : da621c | ERR | 0B / s | C : / Users / hasee / scoop / cache / vscode-portable #1.44.2#https_raw.githubusercontent.com_lukesampson_scoop-extras_master_scripts_vscode-uninstall-context.reg Download : Status Legend : Download : ( ERR ) : error occurred . Download : aria2 will resume download if the transfer is restarted . Download : If there are any errors , then see the log file . See '-l' option in help / man page for details . ERROR Download failed ! ( Error 1 ) An unknown error occurred ERROR https : // raw . githubusercontent . com / lukesampson / scoop-extras / master / scripts / vscode-install-context . reg referer = https : // raw . githubusercontent . com / lukesampson / scoop-extras / master / scripts / dir = C : \\ Users \\ hasee \\ scoop \\ cache out = vscode-portable #1.44.2#https_raw.githubusercontent.com_lukesampson_scoop-extras_master_scripts_vscode-install-context.reg https : // raw . githubusercontent . com / lukesampson / scoop-extras / master / scripts / vscode-uninstall-context . reg referer = https : // raw . githubusercontent . com / lukesampson / scoop-extras / master / scripts / dir = C : \\ Users \\ hasee \\ scoop \\ cache out = vscode-portable #1.44.2#https_raw.githubusercontent.com_lukesampson_scoop-extras_master_scripts_vscode-uninstall-context.reg ERROR & 'C:\\Users\\hasee\\scoop\\apps\\aria2\\current\\aria2c.exe' - -input -file = 'C:\\Users\\hasee\\scoop\\cache\\vscode-portable.txt' - -user-agent = 'Scoop/1.0 (+http://scoop.sh/) PowerShell/5.1 (Windows NT 10.0; Win64; x64; Desktop)' - -allow-overwrite = true - -auto -file -renaming = false - -retry-wait = 2 - -split = 5 - -max-connection-per-server = 5 - -min-split-size = 5M - -console-log-level = warn - -enable-color = false - -no-conf = true - -follow-metalink = true - -metalink-preferred-protocol = https - -min-tls-version = TLSv1 . 2 - -stop-with-process = 12884 - -continue - -all-proxy = '127.0.0.1:1080' Please try again or create a new issue by using the following link and paste your console output : https : // github . com / lukesampson / scoop-extras / issues / new ? title = vscode-portable % 401 . 44 . 2 % 3a + download + via + aria2 + failed 使用 scoop checkup 命令检查 PS C : \\ WINDOWS \\ system32 > scoop checkup WARN Windows Defender may slow down or disrupt installs with realtime scanning . Consider running : sudo Add-MpPreference -ExclusionPath 'C:\\Users\\hasee\\scoop' ( Requires 'sudo' command . Run 'scoop install sudo' if you don 't have it.) WARN Windows Defender may slow down or disrupt installs with realtime scanning. Consider running: sudo Add-MpPreference -ExclusionPath ' C : \\ ProgramData \\ scoop ' (Requires ' sudo ' command. Run ' scoop install sudo ' if you don' t have it .) WARN LongPaths support is not enabled . You can enable it with running : Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem' -Name 'LongPathsEnabled' -Value 1 ERROR 'Inno Setup Unpacker' is not installed ! It 's required for unpacking InnoSetup files. Please run ' scoop install innounp ' . WARN Found 4 potential problems . 如果你想安装微信或者网易云 scoop bucket add dodorz https : // github . com / dodorz / scoop-bucket scoop install dodorz / NeteaseMusic scoop install dodorz / wechat wechat.json { \"homepage\" : \"https://weixin.qq.com/\" , \"description\" : \"Free messaging and calling app.\" , \"version\" : \"2.9.0\" , \"license\" : { \"identifier\" : \"EULA\" , \"url\" : \"https://weixin.qq.com/cgi-bin/readtemplate?lang=zh_CN&t=weixin_agreement&s=default\" }, \"url\" : \"https://dldir1.qq.com/weixin/Windows/WeChatSetup.exe#/dl.7z\" , \"shortcuts\" : [ [ \"wechat.exe\" , \"WeChat\" ] ], \"post_install\" : [ \"Remove-Item \\\"$dir\\\\`$PLUGINSDIR\\\" -Force -Recurse\" , \"Remove-Item \\\"$dir\\\\`$_15_\\\" -Force -Recurse\" , \"Remove-Item \\\"$dir\\\\`$R5\\\" -Force -Recurse\" ], \"checkver\" : \"微信 ([\\\\d.]+) for Windows 发布\" , \"notes\" : \"We don't persist your WeChat data, they are still storaged in '%APPDATA%\\\\Tencent\\\\WeChat'.\" } neteasemusic.json { \"homepage\" : \"https://music.163.com/\" , \"description\" : \"The official NetEase Cloud Music client.\" , \"version\" : \"2.7.1.198242\" , \"license\" : { \"identifier\" : \"EULA\" , \"url\" : \"https://music.163.com/html/web2/service.html\" }, \"url\" : \"https://d1.music.126.net/dmusic/obj/w5zCg8OCw6fCn2vDicOl/809710492/7805/2019112318441/cloudmusicsetup2.7.1.198242.exe#/dl.7z\" , \"hash\" : \"md5:991ae324e2ff261295f5fb4caeff55d9\" , \"post_install\" : \"Remove-Item \\\"$dir\\\\`$PLUGINSDIR\\\" -Force -Recurse\" , \"bin\" : \"cloudmusic.exe\" , \"shortcuts\" : [ [ \"cloudmusic.exe\" , \"Netease Cloud Music\" ] ], \"checkver\" : { \"url\" : \"https://h404bi.azurewebsites.net/ncmversion.php\" , \"jp\" : \"$.updateFiles[0].url\" , \"regex\" : \"https://d1.music.126.net/dmusic/cloudmusicsetup([\\\\d.]+)\\\\.exe\" }, \"autoupdate\" : { \"url\" : \"https://d1.music.126.net/dmusic/cloudmusicsetup$version.exe#/dl.7z\" , \"hash\" : { \"url\" : \"https://h404bi.azurewebsites.net/ncmversion.php\" , \"jp\" : \"$.updateFiles[0].hash\" } }, \"notes\" : \"We don't persist your CloudMusic data, they are still storaged in '%LOCALAPPDATA%\\\\Netease\\\\CloudMusic'.\" } 使用 DISM++ 检查 WIN10 环境 ¶ # 扫描全部系统文件并和官方系统文件对比，扫描计算机中的不一致情况 Dism / Online / Cleanup-Image / ScanHealth # 这条命令必须在前一条命令执行完以后，发现系统文件有损坏时使用 Dism / Online / Cleanup-Image / CheckHealth # 不同的系统文件还原成官方系统源文件 DISM / Online / Cleanup-image / RestoreHealth # 完成重启后 sfc / SCANNOW PWA ¶ NOTION ROAM Todolist VSCode extensions ¶ # scoop install vscode code - -extensions-dir < dir > Set the root path for extensions . code - -list-extensions List the installed extensions . code - -show-versions Show versions of installed extensions , when using - -list-extension . code - -install-extension (< extension-id > | < extension-vsix-path >) Installs an extension . code - -uninstall-extension (< extension-id > | < extension-vsix-path >) Uninstalls an extension . code - -enable-proposed-api (< extension-id >) Enables proposed API features for extensions . Can receive one or more extension IDs to enable individually . 安装我使用的 VSCode extentions code - -list-extensions # dbaeumer.vscode-eslint # eamodio.gitlens # MS-CEINTL.vscode-language-pack-zh-hans # ms-python.python # ms-vscode-remote.remote-wsl # yzhang.markdown-all-in-one # code --install-extension {{extension-id}} Where are extensions installed?# Extensions are installed in a per user extensions folder. Depending on your platform, the location is in the following folder: Windows %USERPROFILE%.vscode\\extensions macOS ~/.vscode/extensions Linux ~/.vscode/extensions Chrome extensions ¶ /TODO download ¶ edge wechat 坚果云 windows app store ¶ spotify Trello ubunto wsl yarn ¶ yarn add hexo pip ¶ /TODO npm ¶ /TODO 安装 WSl ¶ dism . exe / online / enable-feature / featurename : Microsoft-Windows-Subsystem-Linux / all / norestart dism . exe / online / enable-feature / featurename : VirtualMachinePlatform / all / norestart 个性化设置 ¶ 为 windows 添加 open here REFERENCE ¶ scoop java ¶ Java · lukesampson/scoop Wiki Java/bucket at master · ScoopInstaller/Java VSCode ¶ Managing Extensions in Visual Studio Code Others ¶ scoop-homepage scoop 的使用","text_tokens":["enabled","will","multi","aria2","常见问题","overwrite","到","sudo","损坏","unknown","useb","ccleaner","all","run","dodorz","这","查看","stackoverflow","最后","hugo","由于","yzhang","考虑","userprofile%","youtube","others","一致","2.7","enables","calibre","restorehealth","messaging","system32","remove","identifier","&","allow","psversion","conf","when","d"," ","2019112318441","version","导致","1","cloudmusic","log","tencent","}","description","1.198242","已","don","不过","down","root","size","stat","对比","dbaeumer","我","downloadstring","好像","create","2.9","%","8","dism","user","data","qq","code","还原","image","enable","确保您","renaming","installs","aria2c","download","目前","t","个性化","jk8","lang","homepage","vim","disable","go","cache","folder","console","一样","压缩","max","scannow","可以","管理","unpacker","wsl","individually","office","~","会","have","delete","args","apps","stable","connection","client","ncmversion","from","7z","warn","referer","currentcontrolset","pluginsdir","微信","api","pwa","should","regex","中","system","music.126","写","starting","new","postman","a","dismplusplus","required","后","managing","tlsv1","lukesampson","pandoc","path","known","platform",":","receive","official","...","r5","occurred","store","latex","官方","pro","1.8","color","errors","cloud","x64","githubusercontent","jq","filesystem","config","全部","at","installed","5.1","*","or","uses","protocol","command","z","npm","scripts","10.0","results","requires","eula","hash","programdata","try","?","支持","具体","see","$","情况","安装","installing","1080","music","zh","raw","files","完","以后",",","master","·","stop","url","still","扫描","get","vcredist2015","dev","--","时","#","executionpolicy","slow","found","设置","0","wait","may","extension","any","by","failed","appdata%",".","follow","readtemplate","current","libreoffice","版本","innosetup","sfc","one","(","潜在","只会","default","允许","is","speed","cloudmusicsetup","innounp","jetbrains","帮助","everything","add","nodejs","dir","5m","cc","expression","following","title","server","搜索","\\","127.0","{","或者","feature","level","常用命令","ids","_","hexo","they","nt","发行","paste","ceintl","github","exe","continue","执行","if","copyq","12884","open","can","的","工具","exception","again","先","cuid","cause","defender","网易","soapui","]","please","和","完成","常用","pip","todolist","d1","you","vcredist2010","3a","一条","extentions","weixin","desktop","便携","04","out","uri","计算","post","计算机","tls","music.163","azurewebsites","per","insatll","大于","nirsoft","本地","reference","https","源文件","云","并","9","7zip","search","txt","storaged","nonportable","port","process","permissions","web2","算机","erroor","of","http","401","4","page","991ae324e2ff261295f5fb4caeff55d9","upstream","7805","httpconnection","home",">","downloads","处理","your","longpaths","notion","++","某","wiki","id","issue","games","issues","前提","link","jdk8","剪切板","autoupdate","cleanup","w5zcg8ocw6fcn2vdicol","[","invoke","item","win64","，","vlc","scanhealth","portable","unpacking","list","agreement","rm","here","代理","pack","还原成","iwr","online","位置","iex",")","ffmpeg","vedio","\"","dmusic","usage","errorcode","mppreference","versions","ubunto","scoop","重启","下载","man","msvcr100","如果","系统","localappdata%","output","where","tree","main","状态","googlechrome","加速","details","edge","inno","156","com","name","depending","im","then","consider","/","cloudmusicsetup2.7","input","1.44","809710492","64bit","which","disrupt","前",";","support","because","发现","|","问题","在","h404bi","可能","wechat","启用","hklm","service","notes","linux","php","s","-","cmd","to","sock5","powershell","vscode","no","vsix","virtualmachineplatform","文件","18","and","打开","loading","realtime","scope","da621c","cgi","status","trello","help","127","15","0.1","+","true","官网","file","hasee","net","subsystem","questions","版","剪切","markdown","错误","5","reg","截图","默认","aborted","与","jdk","tools","openjdk","0b","itemproperty","lastest","软件","preferred","chrome","md5","proposed","hans","permalink","书籍","owner","一次","snipaste","不","2","切换","关闭","object","currentuser","zip","visual","show","wget","dll","环境","确保","ms","spotify","fonts","telegram","agent","nightlies","split","for","readyapi","9274bd","添加","java","gid","control","neteasemusic","microsoft","context","yarn","legend","shortcuts","nerd","失败","为","reset","¶","env","c","with","=","bad","json","calling","resume","macos","git","persist","depend","extensions","eamodio","option","todo","proxy","scanning","dl","an","l","in","cn","more","56","retry","dldir1","obj","install","err","win10","extras","features","命令","roam","`","建议","test","44","license","系统文件","必须","via","phantomjs","are","发布","adopt8","openssh","'","html","error","restarted","supported","使用","free","eslint","uninstalls","不同","windows","常见","avg","checkver","force","条","the","we","坚果","scoopinstaller","1.0","it","featurename","studio","bin","wechatsetup","netease","updatefiles","checkhealth","norestart","false","ps","个性","transfer","jp","你","on","dl.7","set","uninstall","language","<","3","node","value","检查","里","!","got","major","sh","执行命令","metalink","checkup","missing","recurse","psversiontable","等于","shorter","location","gitlens","python","potential","remote","min","setup","users","exclusionpath","脚本","eof","there","清理","remotesigned","longpathsenabled","devdocs","using","webclient","11","problems","49926386","auto","app","bucket","端口","running","有","想","参考","terminal","cli","05","not"],"title":"Windows 下使用 Scoop 安装环境以及各种软件","title_tokens":["使用","环境"," ","scoop","软件","安装","windows","以及","下","各种"]},{"location":"2020/0507/windows-scoop/#scoop","text":"","text_tokens":[],"title":"scoop 使用","title_tokens":["使用"," ","scoop"]},{"location":"2020/0507/windows-scoop/#scoop_1","text":"安装 scoop 前提 Permalink 版本大于等于 3 的 powershell $psversiontable.psversion.**major** 5 确保您已允许 PowerShell 执行本地脚本 set-executionpolicy remotesigned -scope currentuser 安装 scoop Set-ExecutionPolicy RemoteSigned -scope CurrentUser Invoke-Expression ( New-Object System . Net . WebClient ). DownloadString ( 'https://get.scoop.sh' ) # or shorter iwr -useb get . scoop . sh | iex","text_tokens":["currentuser","已","执行","net","$","确保","大于","安装","版本","本地","iwr","useb","|",")","iex","https","(","的","5","downloadstring","允许","scoop","前提","脚本","expression","remotesigned","-","set","powershell","get","webclient","invoke","'","确保您","#","*","3","or","executionpolicy","scope","system","new","permalink","psversion","major","sh"," ","/",".","psversiontable","等于",":","object","shorter"],"title":"scoop 安装","title_tokens":["安装"," ","scoop"]},{"location":"2020/0507/windows-scoop/#scoop-bucket","text":"安装 git 后可以添加 bucket # scoop insatll git # 查看官方支持的 bucket scoop bucket known # main # extras # versions # nightlies # nirsoft # php # nerd-fonts # nonportable # java # games # jetbrains # 查看帮助 scoop bucket help # scoop bucket: cmd 'help' not supported # Usage: scoop bucket add|list|known|rm [<args>] # 添加 bucket scoop bucket add extras scoop bucket add java","text_tokens":["支持",">","insatll","安装","可以","nirsoft","|","官方","fonts","的","usage","nightlies","games","versions","添加","查看","scoop","extras","java","jetbrains","帮助","add","args","rm","php","main","]","nerd","-","nonportable","cmd","[","'","<","#","bucket","supported","git","help","list","后"," ","not","known",":"],"title":"scoop 添加 bucket","title_tokens":["bucket","添加"," ","scoop"]},{"location":"2020/0507/windows-scoop/#scoop_2","text":"#查看某软件执行命令位置 # scoop which {{name}} #搜索某软件 # scoop search {{name}} #打开某软件官网 # scoop home {{name}} # 检查潜在的问题 # scoop checkup # 查看状态 # scoop status","text_tokens":["}","which","官网","home","执行","问题","位置","某","潜在","的","查看","scoop","命令","search","状态","搜索","{","软件","打开","#","name","检查","status"," ","执行命令","checkup"],"title":"scoop 常用命令使用","title_tokens":["使用","常用"," ","scoop","命令","常用命令"]},{"location":"2020/0507/windows-scoop/#scoop_3","text":"安装前可以考虑使用 aria2 加速下载，不过由于 HTTPS 可能会导致下载失败，具体参考 scoop aria2 使用 安装前可以考虑使用 proxy 加速下载，具体参考 scoop 添加 http 代理 # 启用 aria2c 加速下载，不过可能会导致下载失败 # 建议先安装 scoop install innounp scoop install extras / vcredist2010 # erroor: missing MSVCR100.dll scoop install extras / vcredist2015 # dev env scoop install git scoop install openssh # because: https://stackoverflow.com/questions/49926386/openssh-windows-bad-owner-or-permissions scoop install nodejs # test: node npm scoop install yarn # depend on npm scoop install python # test: python pip scoop install go # java # scoop bucket add java # install java lastest openjdk scoop install openjdk # 如果你想使用 jdk8 你可以使用 openjdk 的发行版本 # scoop install adopt8-upstream # 切换到 jk8, 默认只会使用最后一次安装的版本 # scoop reset adopt8-upstream java -version # 目前在 scoop java bucket 里的 jdk 版本 chrome https : // github . com / ScoopInstaller / Java / tree / master / bucket # dev tools scoop install vscode-portable # vscode 便携版 scoop install postman scoop install soapui # jdk 1.8 if jdk >= 1.8 you can try to readyapi scoop install devdocs scoop install windows-terminal # CLI tools scoop install wget scoop install ffmpeg scoop install aria2 scoop install youtube-dl scoop install vim scoop install zip scoop install jq scoop install latex scoop install pandoc scoop install hugo scoop install phantomjs # apps im scoop install telegram # apps tools scoop install googlechrome # Chrome scoop install everything # 文件搜索 scoop install 7zip # 压缩 scoop install vlc # vedio scoop install dismplusplus # dism++ scoop install calibre # 书籍管理 scoop install ccleaner # 清理工具 scoop install copyq # 剪切板工具 scoop install snipaste # 截图工具 scoop install libreoffice-stable # office","text_tokens":["upstream","zip","aria2","具体","wget","dll","到",">","安装","++","ccleaner","telegram","readyapi","添加","java","stackoverflow","最后","hugo","由于","jdk8",",","剪切板","master","yarn","考虑","youtube","失败","vcredist2015","dev","reset","env","#","=","calibre","bad","，","vlc","git","portable","depend"," ","导致","version",".","proxy","不过","libreoffice","dl","代理","版本","ffmpeg","vedio","只会","install","scoop","innounp","extras","add","下载","nodejs","everything","msvcr100","如果","建议","test","tree","googlechrome","dism","搜索","加速","phantomjs","adopt8","openssh","com","aria2c","使用","发行","im","/","目前","jk8","windows","github","vim","go","前","scoopinstaller","because","copyq","if","压缩","可以","在","管理","can","的","工具","office","可能","会","启用","apps","stable","先","你","soapui","on","-","to","vscode","文件","pip","node","you","vcredist2010","里","postman","dismplusplus","便携","missing","pandoc",":","questions","版","python","剪切","latex","https","1.8","截图","默认","7zip","jq","清理","jdk","tools","openjdk","lastest","devdocs","49926386","permissions","or","chrome","erroor","bucket","http","npm","想","书籍","参考","owner","一次","terminal","snipaste","cli","切换","try"],"title":"scoop 安装我在使用的软件","title_tokens":["我","的","使用"," ","scoop","软件","安装","在"]},{"location":"2020/0507/windows-scoop/#scoop-aria2-","text":"aria2-enabled false true scoop config aria2-enabled false scoop config proxy 127.0.0.1:{{port}} # 启用 http 代理参考 windows 代理设置里写的端口与 sock5 端口不一样","text_tokens":["enabled","}","proxy","aria2","代理","一样","true","的","scoop","false","启用","与","-","127.0","sock5","{","config","port","#","里","写","设置","端口","http","参考"," ","不","0.1",".","windows",":"],"title":"scoop-aria2-使用","title_tokens":["-","使用","aria2","scoop"]},{"location":"2020/0507/windows-scoop/#scoop-http-","text":"# add # 端口在 win10 设置里的代理设置 # 好像不支持 sock5 scoop config proxy 127 . 0 . 0 . 1 : {{ port }} # delete scoop config rm proxy","text_tokens":["}","proxy","支持","代理","在","的","好像","win10","scoop","add","delete","sock5","{","config","port","#","里","设置","端口","0","127"," ","不",".","1","rm",":"],"title":"scoop-添加-http-代理","title_tokens":["http","-","代理","添加","scoop"]},{"location":"2020/0507/windows-scoop/#scoop_4","text":"下载错误建议关闭 aria2 scoop config aria2-enabled false # scoop config aria2-enabled true PS C : \\ WINDOWS \\ system32 > scoop install vscode-portable WARN Scoop uses 'aria2c' for multi-connection downloads . WARN Should it cause issues , run 'scoop config aria2-enabled false' to disable it . Installing 'vscode-portable' ( 1 . 44 . 2 ) [ 64bit ] Loading dl . 7z from cache . Starting download with aria2 ... Download : 05 / 04 11 : 56 : 18 [ERROR] CUID #8 - Download aborted. URI=https://raw.githubusercontent.com/lukesampson/scoop-extras/master/scripts/vscode-install-context.reg Download : Exception : [ HttpConnection . cc : 156 ] errorCode = 1 Got EOF from the server . Download : 05 / 04 11 : 56 : 18 [ERROR] CUID #9 - Download aborted. URI=https://raw.githubusercontent.com/lukesampson/scoop-extras/master/scripts/vscode-uninstall-context.reg Download : Exception : [ HttpConnection . cc : 156 ] errorCode = 1 Got EOF from the server . Download : Download Results : Download : gid | stat | avg speed | path / URI Download : ======+====+===========+======================================================= Download : 9274bd | ERR | 0B / s | C : / Users / hasee / scoop / cache / vscode-portable #1.44.2#https_raw.githubusercontent.com_lukesampson_scoop-extras_master_scripts_vscode-install-context.reg Download : da621c | ERR | 0B / s | C : / Users / hasee / scoop / cache / vscode-portable #1.44.2#https_raw.githubusercontent.com_lukesampson_scoop-extras_master_scripts_vscode-uninstall-context.reg Download : Status Legend : Download : ( ERR ) : error occurred . Download : aria2 will resume download if the transfer is restarted . Download : If there are any errors , then see the log file . See '-l' option in help / man page for details . ERROR Download failed ! ( Error 1 ) An unknown error occurred ERROR https : // raw . githubusercontent . com / lukesampson / scoop-extras / master / scripts / vscode-install-context . reg referer = https : // raw . githubusercontent . com / lukesampson / scoop-extras / master / scripts / dir = C : \\ Users \\ hasee \\ scoop \\ cache out = vscode-portable #1.44.2#https_raw.githubusercontent.com_lukesampson_scoop-extras_master_scripts_vscode-install-context.reg https : // raw . githubusercontent . com / lukesampson / scoop-extras / master / scripts / vscode-uninstall-context . reg referer = https : // raw . githubusercontent . com / lukesampson / scoop-extras / master / scripts / dir = C : \\ Users \\ hasee \\ scoop \\ cache out = vscode-portable #1.44.2#https_raw.githubusercontent.com_lukesampson_scoop-extras_master_scripts_vscode-uninstall-context.reg ERROR & 'C:\\Users\\hasee\\scoop\\apps\\aria2\\current\\aria2c.exe' - -input -file = 'C:\\Users\\hasee\\scoop\\cache\\vscode-portable.txt' - -user-agent = 'Scoop/1.0 (+http://scoop.sh/) PowerShell/5.1 (Windows NT 10.0; Win64; x64; Desktop)' - -allow-overwrite = true - -auto -file -renaming = false - -retry-wait = 2 - -split = 5 - -max-connection-per-server = 5 - -min-split-size = 5M - -console-log-level = warn - -enable-color = false - -no-conf = true - -follow-metalink = true - -metalink-preferred-protocol = https - -min-tls-version = TLSv1 . 2 - -stop-with-process = 12884 - -continue - -all-proxy = '127.0.0.1:1080' Please try again or create a new issue by using the following link and paste your console output : https : // github . com / lukesampson / scoop-extras / issues / new ? title = vscode-portable % 401 . 44 . 2 % 3a + download + via + aria2 + failed 使用 scoop checkup 命令检查 PS C : \\ WINDOWS \\ system32 > scoop checkup WARN Windows Defender may slow down or disrupt installs with realtime scanning . Consider running : sudo Add-MpPreference -ExclusionPath 'C:\\Users\\hasee\\scoop' ( Requires 'sudo' command . Run 'scoop install sudo' if you don 't have it.) WARN Windows Defender may slow down or disrupt installs with realtime scanning. Consider running: sudo Add-MpPreference -ExclusionPath ' C : \\ ProgramData \\ scoop ' (Requires ' sudo ' command. Run ' scoop install sudo ' if you don' t have it .) WARN LongPaths support is not enabled . You can enable it with running : Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem' -Name 'LongPathsEnabled' -Value 1 ERROR 'Inno Setup Unpacker' is not installed ! It 's required for unpacking InnoSetup files. Please run ' scoop install innounp ' . WARN Found 4 potential problems . 如果你想安装微信或者网易云 scoop bucket add dodorz https : // github . com / dodorz / scoop-bucket scoop install dodorz / NeteaseMusic scoop install dodorz / wechat wechat.json { \"homepage\" : \"https://weixin.qq.com/\" , \"description\" : \"Free messaging and calling app.\" , \"version\" : \"2.9.0\" , \"license\" : { \"identifier\" : \"EULA\" , \"url\" : \"https://weixin.qq.com/cgi-bin/readtemplate?lang=zh_CN&t=weixin_agreement&s=default\" }, \"url\" : \"https://dldir1.qq.com/weixin/Windows/WeChatSetup.exe#/dl.7z\" , \"shortcuts\" : [ [ \"wechat.exe\" , \"WeChat\" ] ], \"post_install\" : [ \"Remove-Item \\\"$dir\\\\`$PLUGINSDIR\\\" -Force -Recurse\" , \"Remove-Item \\\"$dir\\\\`$_15_\\\" -Force -Recurse\" , \"Remove-Item \\\"$dir\\\\`$R5\\\" -Force -Recurse\" ], \"checkver\" : \"微信 ([\\\\d.]+) for Windows 发布\" , \"notes\" : \"We don't persist your WeChat data, they are still storaged in '%APPDATA%\\\\Tencent\\\\WeChat'.\" } neteasemusic.json { \"homepage\" : \"https://music.163.com/\" , \"description\" : \"The official NetEase Cloud Music client.\" , \"version\" : \"2.7.1.198242\" , \"license\" : { \"identifier\" : \"EULA\" , \"url\" : \"https://music.163.com/html/web2/service.html\" }, \"url\" : \"https://d1.music.126.net/dmusic/obj/w5zCg8OCw6fCn2vDicOl/809710492/7805/2019112318441/cloudmusicsetup2.7.1.198242.exe#/dl.7z\" , \"hash\" : \"md5:991ae324e2ff261295f5fb4caeff55d9\" , \"post_install\" : \"Remove-Item \\\"$dir\\\\`$PLUGINSDIR\\\" -Force -Recurse\" , \"bin\" : \"cloudmusic.exe\" , \"shortcuts\" : [ [ \"cloudmusic.exe\" , \"Netease Cloud Music\" ] ], \"checkver\" : { \"url\" : \"https://h404bi.azurewebsites.net/ncmversion.php\" , \"jp\" : \"$.updateFiles[0].url\" , \"regex\" : \"https://d1.music.126.net/dmusic/cloudmusicsetup([\\\\d.]+)\\\\.exe\" }, \"autoupdate\" : { \"url\" : \"https://d1.music.126.net/dmusic/cloudmusicsetup$version.exe#/dl.7z\" , \"hash\" : { \"url\" : \"https://h404bi.azurewebsites.net/ncmversion.php\" , \"jp\" : \"$.updateFiles[0].hash\" } }, \"notes\" : \"We don't persist your CloudMusic data, they are still storaged in '%LOCALAPPDATA%\\\\Netease\\\\CloudMusic'.\" }","text_tokens":["enabled","will","multi","aria2","overwrite","sudo","unknown","all","run","dodorz","2.7","messaging","system32","remove","identifier","&","allow","conf","d"," ","2019112318441","version","cloudmusic","1","log","tencent","description","}","1.198242","don","down","size","stat","create","2.9","%","8","user","data","qq","enable","renaming","installs","aria2c","download","t","lang","homepage","disable","cache","console","max","unpacker","have","connection","apps","client","ncmversion","from","7z","warn","referer","currentcontrolset","pluginsdir","微信","should","regex","system","music.126","starting","new","a","required","tlsv1","lukesampson","path",":","official","...","r5","occurred","color","errors","cloud","x64","githubusercontent","filesystem","config","installed","5.1","protocol","uses","or","command","z","10.0","scripts","results","requires","eula","hash","programdata","try","?","see","$","安装","installing","1080","music","zh","raw","files",",","master","stop","url","still","#","slow","found","wait","0","may","any","by","failed","appdata%",".","follow","readtemplate","current","innosetup","(","default","is","speed","cloudmusicsetup","innounp","5m","add","dir","cc","following","title","server","\\","127.0","{","或者","level","_","they","nt","paste","github","exe","continue","if","12884","can","exception","again","cuid","cause","defender","网易","]","please","d1","you","3a","weixin","desktop","04","out","uri","post","tls","music.163","azurewebsites","per","https","云","9","txt","storaged","process","web2","http","401","4","page","991ae324e2ff261295f5fb4caeff55d9","7805","httpconnection",">","downloads","your","longpaths","issue","issues","link","autoupdate","w5zcg8ocw6fcn2vdicol","[","item","win64","portable","unpacking","agreement",")","\"","dmusic","errorcode","mppreference","scoop","下载","man","如果","localappdata%","output","details","inno","156","com","name","consider","then","/","cloudmusicsetup2.7","input","1.44","809710492","64bit","disrupt",";","support","|","h404bi","wechat","hklm","service","notes","php","s","-","to","no","vscode","powershell","18","and","loading","realtime","da621c","cgi","status","help","15","0.1","+","true","file","hasee","net","错误","5","reg","aborted","0b","itemproperty","preferred","md5","2","关闭","split","agent","for","9274bd","gid","control","neteasemusic","context","shortcuts","legend","c","with","=","json","calling","resume","persist","option","proxy","scanning","dl","an","l","in","cn","56","retry","dldir1","obj","install","err","extras","命令","`","建议","44","license","via","are","发布","'","html","error","restarted","使用","free","windows","avg","checkver","force","the","we","1.0","it","bin","wechatsetup","netease","updatefiles","false","ps","transfer","jp","你","dl.7","set","uninstall","value","检查","!","got","sh","metalink","checkup","recurse","potential","min","setup","users","exclusionpath","eof","there","longpathsenabled","using","11","problems","auto","app","bucket","running","想","05","not"],"title":"scoop 常见问题处理","title_tokens":["常见问题"," ","scoop","处理","问题","常见"]},{"location":"2020/0507/windows-scoop/#dism-win10","text":"# 扫描全部系统文件并和官方系统文件对比，扫描计算机中的不一致情况 Dism / Online / Cleanup-Image / ScanHealth # 这条命令必须在前一条命令执行完以后，发现系统文件有损坏时使用 Dism / Online / Cleanup-Image / CheckHealth # 不同的系统文件还原成官方系统源文件 DISM / Online / Cleanup-image / RestoreHealth # 完成重启后 sfc / SCANNOW","text_tokens":["条","前","执行","发现","情况","损坏","还原成","sfc","online","在","scannow","对比","官方","的","源文件","checkhealth","这","并","完","以后","重启","命令","系统","必须","cleanup","系统文件","dism","和","-","完成","扫描","全部","文件","一致","还原","image","时","#","中","restorehealth","算机","，","scanhealth","一条","有","使用","后"," ","/","不","不同","计算","计算机"],"title":"使用 DISM++ 检查 WIN10 环境","title_tokens":["检查","dism","使用","win10","环境"," ","++"]},{"location":"2020/0507/windows-scoop/#pwa","text":"NOTION ROAM Todolist","text_tokens":["notion","todolist","roam"," "],"title":"PWA","title_tokens":["pwa"]},{"location":"2020/0507/windows-scoop/#vscode-extensions","text":"# scoop install vscode code - -extensions-dir < dir > Set the root path for extensions . code - -list-extensions List the installed extensions . code - -show-versions Show versions of installed extensions , when using - -list-extension . code - -install-extension (< extension-id > | < extension-vsix-path >) Installs an extension . code - -uninstall-extension (< extension-id > | < extension-vsix-path >) Uninstalls an extension . code - -enable-proposed-api (< extension-id >) Enables proposed API features for extensions . Can receive one or more extension IDs to enable individually . 安装我使用的 VSCode extentions code - -list-extensions # dbaeumer.vscode-eslint # eamodio.gitlens # MS-CEINTL.vscode-language-pack-zh-hans # ms-python.python # ms-vscode-remote.remote-wsl # yzhang.markdown-all-in-one # code --install-extension {{extension-id}} Where are extensions installed?# Extensions are installed in a per user extensions folder. Depending on your platform, the location is in the following folder: Windows %USERPROFILE%.vscode\\extensions macOS ~/.vscode/extensions Linux ~/.vscode/extensions","text_tokens":["?","show",">","your","ms","安装","id","all","zh","for","yzhang",",","userprofile%","--","#","enables","macos","list","extensions","when","extension"," ","eamodio",".","}","an","in","root","more","pack","one",")","(","dbaeumer","我","install","versions","is","scoop","features","dir","where","%","following","user","\\","code","{","are","enable","ids","installs","depending","使用","eslint","uninstalls","/","ceintl","windows","the","folder","|","can","wsl","individually","的","~","linux","on","-","to","api","set","vscode","vsix","uninstall","language","<","extentions","a","path","platform",":","location","gitlens","receive","per","python","markdown","remote","using","installed","or","proposed","hans","of"],"title":"VSCode extensions","title_tokens":["extensions","vscode"," "]},{"location":"2020/0507/windows-scoop/#chrome-extensions","text":"/TODO","text_tokens":["/","todo"],"title":"Chrome extensions","title_tokens":["chrome","extensions"," "]},{"location":"2020/0507/windows-scoop/#download","text":"edge wechat 坚果云","text_tokens":["坚果","云","edge","wechat"," "],"title":"download","title_tokens":["download"]},{"location":"2020/0507/windows-scoop/#windows-app-store","text":"spotify Trello ubunto wsl","text_tokens":["wsl","trello","ubunto"," ","spotify"],"title":"windows app store","title_tokens":["windows","app"," ","store"]},{"location":"2020/0507/windows-scoop/#yarn","text":"yarn add hexo","text_tokens":["add","yarn"," ","hexo"],"title":"yarn","title_tokens":["yarn"]},{"location":"2020/0507/windows-scoop/#pip","text":"/TODO","text_tokens":["/","todo"],"title":"pip","title_tokens":["pip"]},{"location":"2020/0507/windows-scoop/#npm","text":"/TODO","text_tokens":["/","todo"],"title":"npm","title_tokens":["npm"]},{"location":"2020/0507/windows-scoop/#wsl","text":"dism . exe / online / enable-feature / featurename : Microsoft-Windows-Subsystem-Linux / all / norestart dism . exe / online / enable-feature / featurename : VirtualMachinePlatform / all / norestart","text_tokens":["exe","all","dism","-","virtualmachineplatform","norestart"," ","subsystem","/","feature","microsoft",".","online","windows","linux","enable",":","featurename"],"title":"安装 WSl","title_tokens":["wsl","安装"," "]},{"location":"2020/0507/windows-scoop/#_1","text":"为 windows 添加 open here","text_tokens":["添加"," ","为","windows","open","here"],"title":"个性化设置","title_tokens":["个性","个性化","设置"]},{"location":"2020/0507/windows-scoop/#reference","text":"","text_tokens":[],"title":"REFERENCE","title_tokens":["reference"]},{"location":"2020/0507/windows-scoop/#scoop-java","text":"Java · lukesampson/scoop Wiki Java/bucket at master · ScoopInstaller/Java","text_tokens":["bucket","scoopinstaller"," ","java","/","lukesampson","scoop","at","master","·","wiki"],"title":"scoop java","title_tokens":["java"," ","scoop"]},{"location":"2020/0507/windows-scoop/#vscode","text":"Managing Extensions in Visual Studio Code","text_tokens":["studio","visual","extensions","code","managing"," ","in"],"title":"VSCode","title_tokens":["vscode"]},{"location":"2020/0507/windows-scoop/#others","text":"scoop-homepage scoop 的使用","text_tokens":["的","-","使用"," ","scoop","homepage"],"title":"Others","title_tokens":["others"]},{"location":"2020/0617/mkdocs-material-turtorial/","text":"Mkdocs 搭建博客指北 ¶ 最近在看 fastAPI 的文档，无意中发现许多 Python 的库的官方文档都是用的 Mkdocs-Materials 什么是 Mkdocs ¶ MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Start by reading the introduction below, then check the User Guide for more info. Mkdocs-Materials ¶ Create a branded static site from a set of Markdown files to host the documentation of your Open Source or commercial project – customizable, searchable, mobile-friendly, 40+ languages. Set up in 5 minutes. Quick Start ¶ # 安装 pip install mkdocs-material # 新建项目 mkdocs new project-doc # 将 markdown 文件放入 doc 文件夹 # 构建 mkdocs build # 生成 html # 本地服务 mkdocs serve # 打开 start 127 .0.0.1:8000 使用 ¶ 官方参考 mkdocs.yml ¶ # Project information site_name : Material for MkDocs site_url : https://squidfunk.github.io/mkdocs-material/ site_author : Martin Donath site_description : >- Create a branded static site from a set of Markdown files to host the documentation of your Open Source or commercial project – customizable, searchable, mobile-friendly, 40+ languages # Repository repo_name : squidfunk/mkdocs-material repo_url : https://github.com/squidfunk/mkdocs-material edit_uri : \"\" # Copyright copyright : Copyright &copy; 2016 - 2020 Martin Donath # Configuration theme : name : null custom_dir : material # 404 page static_templates : - 404.html # Don't include MkDocs' JavaScript include_search_page : false search_index_only : true # Default values, taken from mkdocs_theme.yml language : en features : - tabs #- instant palette : scheme : default primary : indigo accent : indigo font : text : Roboto code : Roboto Mono icon : logo : logo favicon : assets/favicon.png # Plugins plugins : - search - minify : minify_html : true # Customization extra : social : - icon : fontawesome/brands/github link : https://github.com/squidfunk - icon : fontawesome/brands/gitter link : https://gitter.im/squidfunk/mkdocs-material - icon : fontawesome/brands/docker link : https://hub.docker.com/r/squidfunk/mkdocs-material/ - icon : fontawesome/brands/twitter link : https://twitter.com/squidfunk - icon : fontawesome/brands/linkedin link : https://linkedin.com/in/squidfunk/ - icon : fontawesome/brands/instagram link : https://instagram.com/squidfunk # Extensions markdown_extensions : - markdown.extensions.admonition - markdown.extensions.attr_list - markdown.extensions.codehilite : guess_lang : false - markdown.extensions.def_list - markdown.extensions.footnotes - markdown.extensions.meta - markdown.extensions.toc : permalink : true - pymdownx.arithmatex - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg # - pymdownx.highlight: # linenums_style: pymdownx-inline - pymdownx.inlinehilite - pymdownx.keys - pymdownx.magiclink : repo_url_shorthand : true user : squidfunk repo : mkdocs-material - pymdownx.mark - pymdownx.smartsymbols - pymdownx.snippets : check_paths : true - pymdownx.superfences - pymdownx.tabbed - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde # Page tree nav : - Home : index.md - Getting started : getting-started.md - Extensions : - Admonition : extensions/admonition.md - CodeHilite : extensions/codehilite.md - Footnotes : extensions/footnotes.md - Metadata : extensions/metadata.md - Permalinks : extensions/permalinks.md - PyMdown : extensions/pymdown.md - Plugins : - Search : plugins/search.md - Minification : plugins/minification.md - Revision date : plugins/revision-date.md - Awesome pages : plugins/awesome-pages.md - Releases : - Upgrading to 5.x : releases/5.md - Upgrading to 4.x : releases/4.md - Changelog : releases/changelog.md - Customization : customization.md - Data privacy : data-privacy.md - Contributing : contributing.md - License : license.md # Google Analytics google_analytics : - !!python/object/apply:os.getenv [ \"GOOGLE_ANALYTICS_KEY\" ] - auto 使用 Mkdocs Materials 全文搜索 ¶ 因为 Mkdocs 自带的全文搜索是使用 lunr.js 写的，所以===2020-06-17===前还不支持中文 我是了下网上说的设置为日文，反正在我的版本也不行 而且 Mkdocs-Material 主题没有用 Mkdocs 自带的实现，要记得设置 search_index_only: true 部署 Github pages ¶ 每次 gh-deploy 后生成的文件会被 push 到 gh-pages 分支，尽量不要修改 site 文件夹里的内容，修改了就要 git pull 刚开始我没有在 site 文件夹里写 CNAME 导致每次部署后都刷新了 pages 的自定义域名，当然如果你用仓库的域名就另说了 PyMdown 扩展 ¶ 添加配置 markdown_extensions : - pymdownx.arithmatex - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist : custom_checkbox : true - pymdownx.tabbed - pymdownx.tilde Details ¶ ??? success Content. ??? warning classes Content. MagicLink ¶ 自动链接 ¶ Output Just paste links directly in the document like this: google.com . Or even an email address: fake.email@email.com . Markdown - Just paste links directly in the document like this: https://google.com. - Or even an email address: fake.email@email.com. 短链接 ¶ Output @facelessuser Markdown @facelessuser 支持的 provider { \"bitbucket\" : [ 'dashboard' , 'account' , 'plans' , 'support' , 'repo' ], \"github\" : [ 'marketeplace' , 'notifications' , 'issues' , 'pull' , 'sponsors' , 'settings' , 'support' ], \"gitlab\" : [ 'dashboard' , '-' , 'explore' , 'help' , 'projects' ], \"twitter\" : [ 'i' , 'messages' , 'bookmarks' , 'home' ] } 模板 ¶ ===--8<--=== filename filename2 ===--8<--=== 代码 ¶ ```Bash tab= !/bin/bash ¶ STR=\"Hello World!\" echo $STR ```C tab= #include int main(void) { printf(\"hello, world\\n\"); } ```C++ tab= include ¶ int main() { std::cout << \"Hello, world!\\n\"; return 0; } ```C# tab= using System; class Program { static void Main(string[] args) { Console.WriteLine(\"Hello, world!\"); } } 表格 ¶ === \"Tab 1\" Markdown **content**. Multiple paragraphs. === \"Tab 2\" More Markdown **content**. - list item a - list item b ===! \"Tab A\" Different tab set. === \"Tab B\" ``` More content. 待办 ¶ Output item 1 item A item B more text item a item b item c item C item 2 item 3 Markdown - [X] item 1 * [X] item A * [ ] item B more text + [x] item a + [ ] item b + [x] item c * [X] item C - [ ] item 2 - [ ] item 3 启用 Admonitionn ¶ markdown_extensions : - admontion 用法 !!! note this is a note 效果 Note this is a note Support Types: Note Abstract Info Tip Success Question Warning Failure Danger Bug Example Quote Plugins ¶ rss: https://guts.github.io/mkdocs-rss-plugin/ 引用 ¶ MkDocs Project documentation with Markdown Material for MkDocs pymdown extensions document github.com/squidfunk/mkdocs-material/blob/master/mkdocs.yml","text_tokens":["info","bash","到","repo","void","刷新","theme","还","all","build","this","文件夹","paths","svg","projects","c++","fontawesome","facelessuser","2016","include","&","pages"," ","导致","1","lunr","success","description","}","quote","friendly","don","def","plugins","8000","copy","admonition","arithmatex","site","我","guts","create","pymdownx","permalinks","png","最近","source","gorgeous","8","user","danger","data","code","enable","配置","要","构建","模板","t","analytics","lang","up","null","实现","自动","console","warning","social","only","footnotes","会","args","了","from","style","filename2","check","like","中","upgrading","system","tasklist","写","new","a","后",":","palette","官方","os","abstract","inlinehilite","@","roboto","自定义","material","被","*","or","index","mobile","scheme","address","introduction","date","当然","materials","towards","不行","?","支持","customization","$","每次","安装","也","privacy","files",",","指北","master","checkbox","url","cname","c#","记得","库","--","就要","minutes","#","待办","md","设置","0","所以","repository","minify","by",".","searchable","引用","generator","inline","quick","版本","values","echo","(","default","class","world","is","writeline","dir","b","edit","自定","logo","single","搜索","\\","highlight","{","font","host","gitter","表格","_","magiclink","int","paste","critic","static","github","而且","n","plans","simple","open","许多","的","building","guide","project","链接","i","0.0","multiple","]","pip","无意","tabs","都","blob","uri","hub","日文","that","betterem","martin","templates","caret","fastapi","因为","本地","https","smartsymbols","博客","search","changelog","不要","r","printf","of","什么","paragraphs","pymdown","push","4","page","accent","home","用法",">","your","dashboard","commercial","issues","link","io","text","icon","account","yaml","[","note","directly","item","，","docker","configured","mkdocs","list","even","types","服务",")","\"","instagram","如果","output","tree","main","donath","codehilite","started","details","document","links","com","name","copyright","contributing","im","then","/","serve","getting","网上","favicon",";","前","support","发现","emoji","std","在","17","program","就","反正","documentation","bug","生成","启用","getenv","hello","s","twemoji","-","to","文件","and","打开","刚","meta","just","author","127","help","example","rss","assets","mono","+","extra","true","instant","classes","将","file","downright","markdown","gh","sponsors","nav","5","geared","文档","开始","failure","内容","短","看","explore","全文","information","自带","permalink","en","不","2","object","below","shorthand","toc","js","定义","尽量","provider","keys","404","indigo","新建","brands","twitter","中文","for","添加","settings","email","修改","messages","另","revision","为","configuration","主题","taken","¶","c","written","with","=","releases","git","项目","admontion","extensions","string","tab","2020","linkedin","different","下","yml","materialx","是","linenums","an","域名","in","reading","more","bitbucket","doc","str","branded","google","pull","fake","install","放入","features","plugin","`","license","gitlab","部署","are","'","html","admonitionn","notifications","filename","使用","mark","cout","没有","customizable","the","扩展","marketeplace","attr","guess","question","效果","bin","snippets","start","#-","tip","languages","false","bookmarks","tabbed","你","set","06","language","<","代码","3","里","metadata","x","!","仓库","key","javascript","primary","awesome","用","return","custom","apply","python","fast","分支","件夹","deploy","40","content","–","说","minification","using","auto","superfences","smart","搭建","参考","squidfunk","tilde"],"title":"Mkdocs 搭建博客指北","title_tokens":["mkdocs","搭建"," ","指北","博客"]},{"location":"2020/0617/mkdocs-material-turtorial/#mkdocs","text":"最近在看 fastAPI 的文档，无意中发现许多 Python 的库的官方文档都是用的 Mkdocs-Materials","text_tokens":["是","用","fastapi","发现","python","在","官方","许多","的","文档","最近","-","库","无意","中","看","，","都","mkdocs"," ","materials"],"title":"Mkdocs 搭建博客指北","title_tokens":["mkdocs","搭建"," ","指北","博客"]},{"location":"2020/0617/mkdocs-material-turtorial/#mkdocs_1","text":"MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Start by reading the introduction below, then check the User Guide for more info.","text_tokens":["the","below","info","generator","file","in","simple","reading","fast","downright","markdown","more","site","building","documentation","geared","project","is","start","guide","for","files",",","source","single","s","gorgeous","user","check","are","configuration","and","yaml","'","written","with","configured","a","mkdocs"," ","then","by","introduction","static",".","towards","that"],"title":"什么是 Mkdocs","title_tokens":["mkdocs"," ","是","什么"]},{"location":"2020/0617/mkdocs-material-turtorial/#mkdocs-materials","text":"Create a branded static site from a set of Markdown files to host the documentation of your Open Source or commercial project – customizable, searchable, mobile-friendly, 40+ languages. Set up in 5 minutes.","text_tokens":["the","friendly","in","your","markdown","branded","open","site","commercial","5","documentation","40","project","create","–","files","languages",",","source","from","+","to","-","set","host","minutes","or","of","mobile","a"," ","static",".","searchable","customizable","up"],"title":"Mkdocs-Materials","title_tokens":["-","mkdocs","materials"]},{"location":"2020/0617/mkdocs-material-turtorial/#quick-start","text":"# 安装 pip install mkdocs-material # 新建项目 mkdocs new project-doc # 将 markdown 文件放入 doc 文件夹 # 构建 mkdocs build # 生成 html # 本地服务 mkdocs serve # 打开 start 127 .0.0.1:8000","text_tokens":["将","服务","安装","doc","markdown","本地","8000","新建","件夹","install","build","project","start","放入","生成","文件夹","0.0","-","文件","pip","打开","material","#","html","项目","new","构建","mkdocs","127"," ",".","1","serve",":"],"title":"Quick Start","title_tokens":["quick","start"," "]},{"location":"2020/0617/mkdocs-material-turtorial/#_1","text":"","text_tokens":[],"title":"使用","title_tokens":["使用"]},{"location":"2020/0617/mkdocs-material-turtorial/#mkdocsyml","text":"# Project information site_name : Material for MkDocs site_url : https://squidfunk.github.io/mkdocs-material/ site_author : Martin Donath site_description : >- Create a branded static site from a set of Markdown files to host the documentation of your Open Source or commercial project – customizable, searchable, mobile-friendly, 40+ languages # Repository repo_name : squidfunk/mkdocs-material repo_url : https://github.com/squidfunk/mkdocs-material edit_uri : \"\" # Copyright copyright : Copyright &copy; 2016 - 2020 Martin Donath # Configuration theme : name : null custom_dir : material # 404 page static_templates : - 404.html # Don't include MkDocs' JavaScript include_search_page : false search_index_only : true # Default values, taken from mkdocs_theme.yml language : en features : - tabs #- instant palette : scheme : default primary : indigo accent : indigo font : text : Roboto code : Roboto Mono icon : logo : logo favicon : assets/favicon.png # Plugins plugins : - search - minify : minify_html : true # Customization extra : social : - icon : fontawesome/brands/github link : https://github.com/squidfunk - icon : fontawesome/brands/gitter link : https://gitter.im/squidfunk/mkdocs-material - icon : fontawesome/brands/docker link : https://hub.docker.com/r/squidfunk/mkdocs-material/ - icon : fontawesome/brands/twitter link : https://twitter.com/squidfunk - icon : fontawesome/brands/linkedin link : https://linkedin.com/in/squidfunk/ - icon : fontawesome/brands/instagram link : https://instagram.com/squidfunk # Extensions markdown_extensions : - markdown.extensions.admonition - markdown.extensions.attr_list - markdown.extensions.codehilite : guess_lang : false - markdown.extensions.def_list - markdown.extensions.footnotes - markdown.extensions.meta - markdown.extensions.toc : permalink : true - pymdownx.arithmatex - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg # - pymdownx.highlight: # linenums_style: pymdownx-inline - pymdownx.inlinehilite - pymdownx.keys - pymdownx.magiclink : repo_url_shorthand : true user : squidfunk repo : mkdocs-material - pymdownx.mark - pymdownx.smartsymbols - pymdownx.snippets : check_paths : true - pymdownx.superfences - pymdownx.tabbed - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde # Page tree nav : - Home : index.md - Getting started : getting-started.md - Extensions : - Admonition : extensions/admonition.md - CodeHilite : extensions/codehilite.md - Footnotes : extensions/footnotes.md - Metadata : extensions/metadata.md - Permalinks : extensions/permalinks.md - PyMdown : extensions/pymdown.md - Plugins : - Search : plugins/search.md - Minification : plugins/minification.md - Revision date : plugins/revision-date.md - Awesome pages : plugins/awesome-pages.md - Releases : - Upgrading to 5.x : releases/5.md - Upgrading to 4.x : releases/4.md - Changelog : releases/changelog.md - Customization : customization.md - Data privacy : data-privacy.md - Contributing : contributing.md - License : license.md # Google Analytics google_analytics : - !!python/object/apply:os.getenv [ \"GOOGLE_ANALYTICS_KEY\" ] - auto","text_tokens":["accent","shorthand","toc","home","customization",">","your","repo","keys","theme","404","indigo","twitter","commercial","brands","all","for","privacy","files","link",",","paths","svg","io","checkbox","url","text","revision","icon","configuration","fontawesome","[","taken","#","releases","docker","2016","include","md","&","repository","mkdocs","minify","extensions","list"," ","pages","2020","linkedin",".","searchable","yml","materialx","description","friendly","don","generator","def","linenums","inline","plugins","in","copy","branded","values","admonition","\"","arithmatex","google","site","default","create","pymdownx","permalinks","features","dir","instagram","edit","png","source","logo","license","tree","user","donath","codehilite","highlight","details","started","code","font","data","host","gitter","'","enable","html","_","com","magiclink","name","copyright","contributing","im","mark","/","t","critic","static","analytics","lang","customizable","github","getting","the","null","favicon",";","emoji","open","social","attr","guess","snippets","documentation","project","only","#-","footnotes","languages","false","getenv","from","tabbed","twemoji","]","-","to","style","set","check","language","upgrading","tabs","meta","tasklist","metadata","x","!","a","author","key","assets","mono","javascript","uri","+","hub","primary","extra",":","true","betterem","martin","templates","caret","instant","awesome","custom","apply","python","markdown","https","palette","smartsymbols","os","nav","5","object","40","–","inlinehilite","search","roboto","changelog","r","minification","auto","material","or","index","superfences","information","of","mobile","smart","permalink","en","scheme","squidfunk","date","pymdown","tilde","4","page"],"title":"官方参考 mkdocs.yml","title_tokens":["mkdocs","参考"," ",".","yml","官方"]},{"location":"2020/0617/mkdocs-material-turtorial/#mkdocs-materials_1","text":"因为 Mkdocs 自带的全文搜索是使用 lunr.js 写的，所以===2020-06-17===前还不支持中文 我是了下网上说的设置为日文，反正在我的版本也不行 而且 Mkdocs-Material 主题没有用 Mkdocs 自带的实现，要记得设置 search_index_only: true","text_tokens":["是","网上","前","支持","而且","用","js","实现","因为","版本","在","17","true","还","中文","的","我","反正","也","only","了","search","日文","搜索","记得","-","说","为","06","主题","material","=","_","index","全文","写","，","设置","要","自带","所以","mkdocs","使用"," ","不","2020","不行",".","没有","lunr","下",":"],"title":"使用 Mkdocs Materials 全文搜索","title_tokens":["全文","搜索","mkdocs","使用"," ","materials"]},{"location":"2020/0617/mkdocs-material-turtorial/#github-pages","text":"每次 gh-deploy 后生成的文件会被 push 到 gh-pages 分支，尽量不要修改 site 文件夹里的内容，修改了就要 git pull 刚开始我没有在 site 文件夹里写 CNAME 导致每次部署后都刷新了 pages 的自定义域名，当然如果你用仓库的域名就另说了","text_tokens":["用","到","域名","每次","定义","gh","尽量","分支","在","刷新","site","件夹","pull","的","deploy","我","就","会","生成","开始","文件夹","了","如果","修改","自定","你","cname","另","-","不要","内容","说","部署","文件","自定义","就要","被","刚","里","，","写","git","仓库","都","后","pages"," ","导致","当然","没有","push"],"title":"部署 Github pages","title_tokens":["github","pages","部署"," "]},{"location":"2020/0617/mkdocs-material-turtorial/#pymdown","text":"添加配置 markdown_extensions : - pymdownx.arithmatex - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist : custom_checkbox : true - pymdownx.tabbed - pymdownx.tilde","text_tokens":["caret","generator","custom","python","emoji","markdown","arithmatex","smartsymbols","true","all","pymdownx","添加","inlinehilite","svg","tabbed","checkbox","twemoji","-","details","to","enable","配置","_","index","magiclink","superfences","name","tasklist","!","smart","extensions"," ","mark","/","critic",".","tilde","materialx",":","betterem"],"title":"PyMdown 扩展","title_tokens":[" ","pymdown","扩展"]},{"location":"2020/0617/mkdocs-material-turtorial/#details","text":"??? success Content. ??? warning classes Content.","text_tokens":["?","classes","content","warning"," ",".","success"],"title":"Details","title_tokens":["details"]},{"location":"2020/0617/mkdocs-material-turtorial/#magiclink","text":"","text_tokens":[],"title":"MagicLink","title_tokens":["magiclink"]},{"location":"2020/0617/mkdocs-material-turtorial/#_2","text":"Output Just paste links directly in the document like this: google.com . Or even an email address: fake.email@email.com . Markdown - Just paste links directly in the document like this: https://google.com. - Or even an email address: fake.email@email.com.","text_tokens":["the","an","in","markdown","https","google","fake","this","email","@","output","-","document","links","like","directly","or","com","just","paste"," ","even","address","/",".",":"],"title":"自动链接","title_tokens":["链接","自动"]},{"location":"2020/0617/mkdocs-material-turtorial/#_3","text":"Output @facelessuser Markdown @facelessuser 支持的 provider { \"bitbucket\" : [ 'dashboard' , 'account' , 'plans' , 'support' , 'repo' ], \"github\" : [ 'marketeplace' , 'notifications' , 'issues' , 'pull' , 'sponsors' , 'settings' , 'support' ], \"gitlab\" : [ 'dashboard' , '-' , 'explore' , 'help' , 'projects' ], \"twitter\" : [ 'i' , 'messages' , 'bookmarks' , 'home' ] }","text_tokens":["}","支持","support","home","plans","repo","bitbucket","marketeplace","markdown","provider","sponsors","\"","dashboard","twitter","pull","的","issues","i","settings",",","@","projects","bookmarks","output","messages","gitlab","]","-","{","account","[","'","facelessuser","explore","notifications","help"," ","github",":"],"title":"短链接","title_tokens":["链接","短"]},{"location":"2020/0617/mkdocs-material-turtorial/#_4","text":"===--8<--=== filename filename2 ===--8<--===","text_tokens":["8","filename","filename2"," ","--","<","="],"title":"模板","title_tokens":["模板"]},{"location":"2020/0617/mkdocs-material-turtorial/#_5","text":"```Bash tab=","text_tokens":["bash","tab"," ","`","="],"title":"代码","title_tokens":["代码"]},{"location":"2020/0617/mkdocs-material-turtorial/#binbash","text":"STR=\"Hello World!\" echo $STR ```C tab= #include int main(void) { printf(\"hello, world\\n\"); } ```C++ tab=","text_tokens":["}",";","n","$","void","str",")","\"","echo","(","world","hello","`",",","c++","main","\\","{","c","#","=","printf","int","include","!"," ","tab"],"title":"!/bin/bash","title_tokens":["/","bin","bash","!"]},{"location":"2020/0617/mkdocs-material-turtorial/#include","text":"int main() { std::cout << \"Hello, world!\\n\"; return 0; } ```C# tab= using System; class Program { static void Main(string[] args) { Console.WriteLine(\"Hello, world!\"); } }","text_tokens":["}",";","return","n","console","std","void",")","\"","(","program","class","world","writeline","args","hello",",","`","main","c#","\\","]","{","using","[","<","=","int","system","0","!","string"," ","cout","tab","static",".",":"],"title":"include ","title_tokens":["include"," "]},{"location":"2020/0617/mkdocs-material-turtorial/#_6","text":"=== \"Tab 1\" Markdown **content**. Multiple paragraphs. === \"Tab 2\" More Markdown **content**. - list item a - list item b ===! \"Tab A\" Different tab set. === \"Tab B\" ``` More content.","text_tokens":["more","markdown","\"","content","b","`","multiple","-","set","=","*","item","!","a","list","tab"," ","paragraphs","2","1",".","different"],"title":"表格","title_tokens":["表格"]},{"location":"2020/0617/mkdocs-material-turtorial/#_7","text":"Output item 1 item A item B more text item a item b item c item C item 2 item 3 Markdown - [X] item 1 * [X] item A * [ ] item B more text + [x] item a + [ ] item b + [x] item c * [X] item C - [ ] item 2 - [ ] item 3","text_tokens":["x","+","]","text","a","-"," ","2","b","more","markdown","1","c","[","*","output","3","item"],"title":"待办","title_tokens":["待办"]},{"location":"2020/0617/mkdocs-material-turtorial/#admonitionn","text":"markdown_extensions : - admontion 用法 !!! note this is a note 效果 Note this is a note Support Types: Note Abstract Info Tip Success Question Warning Failure Danger Bug Example Quote","text_tokens":["quote","info","support","用法","warning","types","markdown","question","效果","bug","is","tip","this","abstract","failure","danger","-","note","_","!","admontion","a","extensions","example"," ","success",":"],"title":"启用 Admonitionn","title_tokens":["启用","admonitionn"," "]},{"location":"2020/0617/mkdocs-material-turtorial/#plugins","text":"rss: https://guts.github.io/mkdocs-rss-plugin/","text_tokens":["guts","-","mkdocs"," ","https","/","rss","plugin","io",".","github",":"],"title":"Plugins","title_tokens":["plugins"]},{"location":"2020/0617/mkdocs-material-turtorial/#_8","text":"MkDocs Project documentation with Markdown Material for MkDocs pymdown extensions document github.com/squidfunk/mkdocs-material/blob/master/mkdocs.yml","text_tokens":["markdown","documentation","project","for","master","-","document","material","with","com","mkdocs","extensions"," ","/","blob","squidfunk","pymdown",".","github","yml"],"title":"引用","title_tokens":["引用"]},{"location":"2020/0820/ABAP-code-indent/","text":"ABAP code indentation ¶ 1. Introduction ¶ ABAP 的代码缩进不同于许多其它语言，因为语法的原因可能导致一行代码超级长，也可能是因为缩进的原因导致排版不一致 建议写 ABAP 的时候用两个空格缩进而不是 TAB Example + xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = xxxxx( + xxx = xxx + xxxx = xxxx + ). - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = - xxxxx( - xxx = xxx - xxxx = xxxx ). 如果换行，缩进在参数的下方 + DATA(sum) = add_two_numbers( + value_1 = 5 + value_2 = 6 ). + DATA(result) = merge_structures( a = VALUE #( field_1 = 'X' + field_2 = 'A' ) + b = NEW /clean/structure_type( field_3 = 'C' + field_4 = 'D' ) ). - DATA(sum) = add_two_numbers( - value_1 = 5 - value_2 = 6 ). 关键字用两个空格缩进，参数用四个空格 + DATA(sum) = add_two_numbers( + EXPORTING + value_1 = 5 + value_2 = 6 + CHANGING + errors = errors ). - DATA(sum) = add_two_numbers( - EXPORTING - value_1 = 5 - value_2 = 6 - CHANGING - errors = errors ). 2. Statements ¶ 2.1 TYPE Statement ¶ 变量定义不必对齐 TYPE 关键字 + DATA name TYPE seoclsname. + DATA reader TYPE REF TO /clean/reader. - DATA name TYPE seoclsname. - DATA reader TYPE REF TO /clean/reader. DATA(ptab) = VALUE abap_parmbind_tab( ( name = 'USERNAME' kind = cl_abap_objectdescr=>exporting value = REF #( sy-uname ) ) ( name = 'RESULT' kind = cl_abap_objectdescr=>returning value = REF #( <profiles> ) ) ). 2.2 IF Statement ¶ + IF X EQ 1 + AND X NE 2. + ... + ENDIF. - IF X EQ 1 AND X NE 2. - ... - ENDIF. IF result IS INITIAL. result = config ELSEIF result-prio = config-prio AND result-threshold GE config-threshold. result = config ELSEIF result-threshold LE config-threshold AND ( ( result-prio = 'W' AND config-prio = 'E' ) OR ( result-prio = 'N' AND config-prio = 'E' ) OR ( result-prio = 'N' AND config-prio = 'W' ) ). result = config. ENDIF. 2.3 LOOP Statement ¶ + LOOP itab INTO DATA(line) + WHERE field NE `name`. + ... + ENDLOOP. - LOOP itab INTO DATA(line) WHERE field NE `name`. - ... - ENDLOOP. 2.4 TRY Statement ¶ # should TRY . ... CATCH. ... ENDTRY. 常见转换异常 Exeception Description CX_SY_CONVERSION_CODEPAGE System exception in character set conversion CX_SY_CONVERSION_CODEPAGE_EX System exception in character set conversion CX_SY_CONVERSION_DATA_LOSS Exception for Conversions Where Data Is Lost CX_SY_CONVERSION_ERROR System exception in conversion errors CX_SY_CONVERSION_EXACT_NOT_SUP Forbidden Type/Length Combination for MOVE EXACT CX_SY_CONVERSION_INEXACT_FLTP For Type F Only Integers of up to 15 Digits Allowed CX_SY_CONVERSION_LOST_DECIMALS Exception for Conversions with Loss of Decimal Places CX_SY_CONVERSION_NO_BOOLEAN System Exception for Conversion Error in xsd:boolean CX_SY_CONVERSION_NO_DATE System Exception when Changing a Date CX_SY_CONVERSION_NO_DATE_TIME System Exception for Data and Time Conversions CX_SY_CONVERSION_NO_ENUM_VALUE System exception in transformation of an enumeration val CX_SY_CONVERSION_NO_NUMBER System exception in transformation to a number CX_SY_CONVERSION_NO_QNAME CX_SY_CONVERSION_NO_RAW System exception for overflow in conversion CX_SY_CONVERSION_NO_TIME System Exception when Changing a Time CX_SY_CONVERSION_NO_UUID System Exception for UUID Conversions CX_SY_CONVERSION_OVERFLOW System exception for overflow in conversion CX_SY_CONVERSION_ROUNDING Rounding Necessary CX_SY_CONVERSION_SRC_TOO_SHORT Source Data too short for MOVE EXACT CX_SY_CONVERSION_UNKNOWN_CURR Conversion error in currency unit CX_SY_CONVERSION_UNKNOWN_LANGU Conversion Error at Language Key CX_SY_CONVERSION_UNKNOWN_UNIT Conversion error in unit of measurement 2.5 INSERT Statement ¶ + INSERT VALUE #( char = value + elem = me ) INTO TABLE char_tab. - INSERT VALUE #( char = value elem = me ) INTO TABLE char_tab. - INSERT VALUE #( char = value - elem = me ) - INTO TABLE char_tab. 2.6 CASE Statement ¶ CASE option . WHEN A . ... WHEN B . ... WHEN C . ... ENDCASE . 2.7 TYPES Statement ¶ + TYPES: + BEGIN OF t_point, + x TYPE i, + y TYPE i, + END OF t_point, + t_points TYPE STANDARD TABLE OF t_point WITH DEFAULT KEY. - TYPES: BEGIN OF ts_fullpath, - title TYPE string, - name TYPE string, - ext TYPE string, - path TYPE string, - filter TYPE string, - END OF ts_fullpath. 2.8 SELECT Statement ¶ SELECT SINGLE * FROM ztable INNER JOIN bkpf ON ztable~bukrs EQ bkpf~bukrs AND ztable~belnr EQ bkpf~belnr AND ztable~gjahr EQ bkpf~gjahr WHERE ztable~bukrs EQ gt_help_tab - bukrs AND ztable~hkont EQ gt_help_tab - hkont AND ztable~dekont_no EQ u_out - dekont_no AND ztable~fiziksel_islem_tarihi EQ '01012018' AND ztable~gjahr EQ u_ut - year ( 4 ) AND ztable~stblg EQ '' INTO CORRESPONDING FIELDS OF ls_doc . 2.9 PERFORM Statement ¶ PERFORM get_type USING '1' '2' '3' TABLES it_table C lv_char . 3. References ¶ Issue SAP/styleguides#21 https://github.com/SAP/styleguides/issues/21#issuecomment-489989967 https://github.com/SAP/styleguides/blob/012d2e8bdc19de321ed51c1a2310dd07e4f87de3/clean-abap/CleanABAP.md","text_tokens":["case","012d2e8bdc19de321ed51c1a2310dd07e4f87de3","forbidden","不是","异常","转换","into",">","w","codepage","inexact","定义","standard","xxxxx","unknown","uname","boolean","同于","itab","issue","structure","elem","也","for","raw","不同于","issues","一行","长","loss",",","table","field","username","语法","perform","hkont","ge","exact","enum","loop","get","ne","一致","initial","xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx","character","¶","c","f","#","=","with","2.7","关键字","ztable","rounding","，","insert","elseif","ref","489989967","md","line","char","when","d"," ","时候","tab","string","导致","option","1",".","6","2.3","y","u","21","description","conversion","gjahr","fullpath","an","in","4","types","doc","两个","xxxx",")","sum","profiles","(","short","islem","default","缩进","type","parmbind","is","too","2.9","而","add","对齐","b","time","measurement","如果","`","where","建议","source","01012018","ls","single","necessary","fields","title","sap","length","two","data","inner","code","combination","四个","styleguides","fltp","语言","places","xxx","'","空格","fiziksel","ex","_","error","com","name","换行","kind","le","sy","超级","issuecomment","val","不必","/","t","不同","github","常见","up","result","begin","returning","cl","n","dekont","if","it","在","endcase","digits","overflow","ut","integers","许多","2.1","gt","的","merge","decimal","langu","eq","2.5","2.8","2.6","可能","only","i","~","exception","decimals","unit","conversions","join","from","tables","2.4","catch","on","indentation","-","clean","to","set","no","year","should","and","exeception","language","exporting","<","代码","3","value","下方","2.2","system","structures","写","变量","transformation","x","new","statements","reader","a","curr","move","sup","example","key","filter","15","help","blob","out","allowed","path","endtry","+","points","select",":","src","end","me","prio","e","ext","用","changing","number","uuid","point","...","因为","其它","原因","seoclsname","stblg","https","tarihi","5","lost","endloop","errors","statement","objectdescr","xsd","enumeration","lv","references","关键","排版","config","using","at","ptab","*","or","cleanabap","cx","of","belnr","ts","abap","numbers","参数","bukrs","threshold","introduction","不","2","not","date","qname","currency","corresponding","endif","try","是因为","bkpf"],"title":"ABAP code indentation","title_tokens":["indentation","abap","code"," "]},{"location":"2020/0820/ABAP-code-indent/#abap-code-indentation","text":"","text_tokens":[],"title":"ABAP code indentation","title_tokens":["indentation","abap","code"," "]},{"location":"2020/0820/ABAP-code-indent/#1-introduction","text":"ABAP 的代码缩进不同于许多其它语言，因为语法的原因可能导致一行代码超级长，也可能是因为缩进的原因导致排版不一致 建议写 ABAP 的时候用两个空格缩进而不是 TAB Example + xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = xxxxx( + xxx = xxx + xxxx = xxxx + ). - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = - xxxxx( - xxx = xxx - xxxx = xxxx ). 如果换行，缩进在参数的下方 + DATA(sum) = add_two_numbers( + value_1 = 5 + value_2 = 6 ). + DATA(result) = merge_structures( a = VALUE #( field_1 = 'X' + field_2 = 'A' ) + b = NEW /clean/structure_type( field_3 = 'C' + field_4 = 'D' ) ). - DATA(sum) = add_two_numbers( - value_1 = 5 - value_2 = 6 ). 关键字用两个空格缩进，参数用四个空格 + DATA(sum) = add_two_numbers( + EXPORTING + value_1 = 5 + value_2 = 6 + CHANGING + errors = errors ). - DATA(sum) = add_two_numbers( - EXPORTING - value_1 = 5 - value_2 = 6 - CHANGING - errors = errors ).","text_tokens":["不是","xxxxx","同于","structure","也","不同于","一行","长","field","语法","一致","xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx","c","#","=","关键字","，","d"," ","时候","tab","导致",".","1","6","4","两个","xxxx",")","sum","(","缩进","type","而","add","b","如果","建议","two","data","四个","语言","xxx","'","空格","_","换行","超级","/","不同","result","在","许多","的","merge","可能","-","clean","exporting","代码","3","value","下方","structures","写","x","new","a","example","+","用","changing","因为","其它","原因","5","errors","关键","排版","abap","numbers","参数","不","2","是因为"],"title":"1. Introduction","title_tokens":["introduction","."," ","1"]},{"location":"2020/0820/ABAP-code-indent/#2-statements","text":"","text_tokens":[],"title":"2. Statements","title_tokens":["2"," ","statements","."]},{"location":"2020/0820/ABAP-code-indent/#21-type-statement","text":"变量定义不必对齐 TYPE 关键字 + DATA name TYPE seoclsname. + DATA reader TYPE REF TO /clean/reader. - DATA name TYPE seoclsname. - DATA reader TYPE REF TO /clean/reader. DATA(ptab) = VALUE abap_parmbind_tab( ( name = 'USERNAME' kind = cl_abap_objectdescr=>exporting value = REF #( sy-uname ) ) ( name = 'RESULT' kind = cl_abap_objectdescr=>returning value = REF #( <profiles> ) ) ).","text_tokens":["result","returning","cl",">","定义","uname","seoclsname",")","profiles","(","type","parmbind","对齐","objectdescr","username","关键","data","to","clean","-","ptab","'","exporting","#","=","_","value","关键字","<","name","变量","ref","kind","reader","sy","abap"," ","不必","/","tab",".","+"],"title":"2.1 TYPE Statement","title_tokens":["2.1","statement"," ","type"]},{"location":"2020/0820/ABAP-code-indent/#22-if-statement","text":"+ IF X EQ 1 + AND X NE 2. + ... + ENDIF. - IF X EQ 1 AND X NE 2. - ... - ENDIF. IF result IS INITIAL. result = config ELSEIF result-prio = config-prio AND result-threshold GE config-threshold. result = config ELSEIF result-threshold LE config-threshold AND ( ( result-prio = 'W' AND config-prio = 'E' ) OR ( result-prio = 'N' AND config-prio = 'E' ) OR ( result-prio = 'N' AND config-prio = 'W' ) ). result = config. ENDIF.","text_tokens":["result","prio","e","n","if","w","...",")","(","eq","is","ge","-","config","ne","and","initial","'","=","or","elseif","x","le"," ","threshold","2","1",".","+","endif"],"title":"2.2 IF Statement","title_tokens":[" ","if","2.2","statement"]},{"location":"2020/0820/ABAP-code-indent/#23-loop-statement","text":"+ LOOP itab INTO DATA(line) + WHERE field NE `name`. + ... + ENDLOOP. - LOOP itab INTO DATA(line) WHERE field NE `name`. - ... - ENDLOOP.","text_tokens":["name","data","-","into","line",")","endloop"," ","loop","ne","...","`",".","+","itab","field","where","("],"title":"2.3 LOOP Statement","title_tokens":["2.3","statement"," ","loop"]},{"location":"2020/0820/ABAP-code-indent/#24-try-statement","text":"# should TRY . ... CATCH. ... ENDTRY. 常见转换异常 Exeception Description CX_SY_CONVERSION_CODEPAGE System exception in character set conversion CX_SY_CONVERSION_CODEPAGE_EX System exception in character set conversion CX_SY_CONVERSION_DATA_LOSS Exception for Conversions Where Data Is Lost CX_SY_CONVERSION_ERROR System exception in conversion errors CX_SY_CONVERSION_EXACT_NOT_SUP Forbidden Type/Length Combination for MOVE EXACT CX_SY_CONVERSION_INEXACT_FLTP For Type F Only Integers of up to 15 Digits Allowed CX_SY_CONVERSION_LOST_DECIMALS Exception for Conversions with Loss of Decimal Places CX_SY_CONVERSION_NO_BOOLEAN System Exception for Conversion Error in xsd:boolean CX_SY_CONVERSION_NO_DATE System Exception when Changing a Date CX_SY_CONVERSION_NO_DATE_TIME System Exception for Data and Time Conversions CX_SY_CONVERSION_NO_ENUM_VALUE System exception in transformation of an enumeration val CX_SY_CONVERSION_NO_NUMBER System exception in transformation to a number CX_SY_CONVERSION_NO_QNAME CX_SY_CONVERSION_NO_RAW System exception for overflow in conversion CX_SY_CONVERSION_NO_TIME System Exception when Changing a Time CX_SY_CONVERSION_NO_UUID System Exception for UUID Conversions CX_SY_CONVERSION_OVERFLOW System exception for overflow in conversion CX_SY_CONVERSION_ROUNDING Rounding Necessary CX_SY_CONVERSION_SRC_TOO_SHORT Source Data too short for MOVE EXACT CX_SY_CONVERSION_UNKNOWN_CURR Conversion error in currency unit CX_SY_CONVERSION_UNKNOWN_LANGU Conversion Error at Language Key CX_SY_CONVERSION_UNKNOWN_UNIT Conversion error in unit of measurement","text_tokens":["forbidden","异常","转换","codepage","inexact","unknown","boolean","for","raw","loss","exact","enum","character","f","#","with","rounding","when"," ",".","description","conversion","an","in","short","type","is","too","time","measurement","source","where","necessary","length","data","combination","fltp","places","ex","_","error","sy","val","/","常见","up","digits","overflow","integers","decimal","langu","only","exception","decimals","unit","conversions","catch","to","no","set","should","and","exeception","language","curr","value","transformation","system","a","move","sup","key","15","allowed","endtry",":","src","changing","number","uuid","...","lost","errors","xsd","enumeration","at","cx","of","date","currency","not","qname","try"],"title":"2.4 TRY Statement","title_tokens":["try","2.4","statement"," "]},{"location":"2020/0820/ABAP-code-indent/#25-insert-statement","text":"+ INSERT VALUE #( char = value + elem = me ) INTO TABLE char_tab. - INSERT VALUE #( char = value elem = me ) INTO TABLE char_tab. - INSERT VALUE #( char = value - elem = me ) - INTO TABLE char_tab.","text_tokens":["insert","elem","me","-","into"," ","tab","char","table",".","+","#","=",")","value","_","("],"title":"2.5 INSERT Statement","title_tokens":["insert"," ","statement","2.5"]},{"location":"2020/0820/ABAP-code-indent/#26-case-statement","text":"CASE option . WHEN A . ... WHEN B . ... WHEN C . ... ENDCASE .","text_tokens":["case","a","when"," ","b","option","...",".","c","endcase"],"title":"2.6 CASE Statement","title_tokens":["case","2.6","statement"," "]},{"location":"2020/0820/ABAP-code-indent/#27-types-statement","text":"+ TYPES: + BEGIN OF t_point, + x TYPE i, + y TYPE i, + END OF t_point, + t_points TYPE STANDARD TABLE OF t_point WITH DEFAULT KEY. - TYPES: BEGIN OF ts_fullpath, - title TYPE string, - name TYPE string, - ext TYPE string, - path TYPE string, - filter TYPE string, - END OF ts_fullpath.","text_tokens":["end","ext","fullpath","point","standard","types","default","type","i",",","table","title","-","with","_","name","begin","of","x","ts","key","string","filter"," ","t","y",".","path","+","points",":"],"title":"2.7 TYPES Statement","title_tokens":["types","2.7","statement"," "]},{"location":"2020/0820/ABAP-code-indent/#28-select-statement","text":"SELECT SINGLE * FROM ztable INNER JOIN bkpf ON ztable~bukrs EQ bkpf~bukrs AND ztable~belnr EQ bkpf~belnr AND ztable~gjahr EQ bkpf~gjahr WHERE ztable~bukrs EQ gt_help_tab - bukrs AND ztable~hkont EQ gt_help_tab - hkont AND ztable~dekont_no EQ u_out - dekont_no AND ztable~fiziksel_islem_tarihi EQ '01012018' AND ztable~gjahr EQ u_ut - year ( 4 ) AND ztable~stblg EQ '' INTO CORRESPONDING FIELDS OF ls_doc .","text_tokens":["gjahr","into","dekont","doc","stblg","ut",")","islem","tarihi","(","gt","eq","~","u","01012018","where","ls","from","single","fields","hkont","on","-","no","inner","year","join","and","fiziksel","'","ztable","*","_","belnr","of","help"," ","bukrs","tab","corresponding","out",".","select","4","bkpf"],"title":"2.8 SELECT Statement","title_tokens":["2.8","select","statement"," "]},{"location":"2020/0820/ABAP-code-indent/#29-perform-statement","text":"PERFORM get_type USING '1' '2' '3' TABLES it_table C lv_char .","text_tokens":["perform","3","lv","type","it"," ","get","using","char","2","table","1","'","c",".","tables","_"],"title":"2.9 PERFORM Statement","title_tokens":["perform","2.9","statement"," "]},{"location":"2020/0820/ABAP-code-indent/#3-references","text":"Issue SAP/styleguides#21 https://github.com/SAP/styleguides/issues/21#issuecomment-489989967 https://github.com/SAP/styleguides/blob/012d2e8bdc19de321ed51c1a2310dd07e4f87de3/clean-abap/CleanABAP.md","text_tokens":["21","012d2e8bdc19de321ed51c1a2310dd07e4f87de3","https","issue","issues","sap","-","clean","styleguides","#","com","489989967","cleanabap","md","issuecomment","abap"," ","/","blob",".","github",":"],"title":"3. References","title_tokens":[" ","3","references","."]},{"location":"2020/0909/lightproxy-unofficial-document/","text":"LightPorxy 非官方文档 ¶ LightProxy 是一款基于 whistle 的本地代理抓包软件 PS: 复制官方文档 [:doge:] 1. 安装 ¶ windwos Windows 用户的 Chrome 如果代理不生效，尝试重启下 Chrome Windows 用户如果出现证书错误，你可能需要右键 => 属性 => 以 管理员身份 运行，然后在 LightProxy 的菜单中使用 Help => Install Certificate & Helper 检查右下角是否启用了 LightProxy 系统代理 检查 window 代理服务器是否启用了 127.0.0.1:12888 设置 2. 如何和其他代理应用一起使用 ¶ 将其它代理设置为非系统代理后，将LightProxy 设置为系统代理 配置一条规则 /xxx/ socks5://127.0.0.1:1080 这样的方式指定满足匹配条件的页面通过 socks5://127.0.0.1:1080 的代理进行转发。 或者通过 /.*/ socks5://127.0.0.1:1080 的方式设置一个前置代理。 对于 HTTP 代理，使用 /.*/ proxy://127.0.0.1:1080 3. 规则 ¶ 3.1 JS Console 调试控制台（eruda） ¶ github . com / alibaba / lightproxy htmlPrepend : //` < script src = \"https://cdn.jsdelivr.net/npm/eruda\" >< /script> < script > eruda . init (); < /script> } ` 3.2 响应静态内容（可用于 mock） ¶ github . com / alibaba / lightproxy `resposne content multiple line ` 3.3 Mock 模拟 JSON ¶ github . com / alibaba / lightproxy `{ \"test\": \"value\", \"key\": 5 } ` resHeaders : //`{ \"Content-type\" : \"application/json\" } ` 3.4 增加 CORS 跨域头 ¶ github . com / alibaba / lightproxy resCors : // 3.5 通过通配符映射 URL ¶ ^ github . com / alibaba / lightproxy https : //g.alicdn.com/another-path/github.com/alibaba/lightproxy 3.6 延迟请求（resDelay） ¶ github . com / alibaba / lightproxy resDelay : // 3.7 用 Node.js 书写规则 ¶ 行内的写法，注意 ` 符号 github . com / alibaba / lightproxy scriptfile : //` exports . handleRequest = async ( ctx , next ) => { // do sth // ctx.fullUrl 可以获取请求url // ctx.headers 可以获取请求头 // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请设置的规则等 // ctx.method 获取和设置请求方法 // const reqBody = await ctx.getReqBody(); 获取请求 body 的 Buffer 数据，如果没有数据返回 null // const reqText = await ctx.getReqText(); 获取请求 body 的文本，如果没有返回'' // const formData = await ctx.getReqForm(); 获取表单对象，如果不是表单，返回空对象{} // ctx.req.body = String| Buffer | Stream | null，修改请求的内容 // next 方法可以设置 next({ host, port }); // 只有执行next方法后才可以把正常的请求发送出去 const { statusCode , headers } = await next (); // do sth // const resBody = yield ctx.getResBody(); // const resText = yield ctx.getResText(); // ctx.status = 404; 修改响应状态码 // ctx.set(headers); 批量修改响应头 // ctx.set('x-test', 'abc'); 修改响应头 // ctx.body = String| Buffer | Stream | null; 修改响应内容 ctx . body = 'test' ; }; ` 也可以直接指向一个文件 github.com/alibaba/lightproxy scriptfile:/path/to/file.js 4. 在命令行中使用 ¶ export https_proxy = http://127.0.0.1:12888 http_proxy = http://127.0.0.1:12888 all_proxy = socks5://127.0.0.1:12889 curl https://baidu.com -I Response HTTP/1.1 200 Connection Established Proxy-Agent: whistle HTTP/2 302 server: bfe/1.0.8.18 date: Fri, 19 Jun 2020 03 :36:36 GMT content-type: text/html content-length: 161 location: http://www.baidu.com/ __lightproxy-host-ip__: 127 .0.0.1 __lightproxy-rules__: none __lightproxy-real-url__: https://baidu.com/ __lightproxy-help__: See https://github.com/alibaba/lightproxy 5. 匹配规则 ¶ 5.1 域名匹配 ¶ # 上述匹配也可以限定域名的端口号 www.test.com:8888 operatorURI # 8888端口 www.test.com/ operatorURI # http为80端口，其它443端口 6. 参考 ¶ https://lightproxy.org/zh-CN https://lightproxy.org/zh-CN/rules/match#%E5%9F%9F%E5%90%8D%E5%8C%B9%E9%85%8D https://wproxy.org/whistle/pattern.html","text_tokens":["b9%","非","不是","reqbody","all","指向","增加","3.2","htmlprepend","文本","www","一起","身份","doge","3.1","&","非官方","line"," ","等","1","}","控制","lightproxy","stream","exports","尝试","证书","方式","pattern","配置","8.18","resbody","命令行","通过","statuscode","null","3.5","console","200","通配符","管理","可以","前置","返回","abc","connection","表单","了","服务器","script","getreqbody","获取","中","cors","后","#%","path","8d%","window",":","src","resdelay","才","resheaders","其它","官方","eruda","只有","（","运行","5.1","*","如何","export","npm","match","date","发送","wproxy","see","安装","头","do","161","1080","字段","zh","也","上述",",","3.6","url","代理服务器","next","#","jsdelivr","ip","属性","设置","复制",".","8888","下角","右下","模拟","sth","8d","端口号","scriptfile","(","established","socks5","method","^","const","可","server","rules","127.0","{","或者","host","headers","_","响应","github","延迟","执行","写法","抓包","another","的","i","fri","init","规则","operatoruri","里面","90%","0.0","multiple","]","和","rescors","务器","一条","指定","jun","额外","g","36","进行","本地","批量","应用","https","80","12888","）","getresbody","一个","port","如请","async","1.1","http","ctx","跨域","然后","302","4","直接","出现","options","certificate",">","控制台","yield","12889","映射","handlerequest","text","调试","[","getreqtext","await","，","管理员","头字段","mock","菜单","静态","6","码","real","代理","服务","443","response","fullurl",")","\"","重启","如果","系统","状态","length","页面","windwos","其他","com","条件","/","空",";","bfe","helper","|","在","右下角","gmt","请求","getreqform","可能","符号","启用","正常","出去","getrestext","用于","-","reqtext","3.7","to","文件","e9%","对象","status","help","127","用户","0.1","cdn","将","file","net","是否","alibaba","错误","5","文档","需要","内容","软件","chrome","分别","baidu","满足","lightporxy","不","2","信息","3.3","转发","js","03","404","书写","agent","以","这样","body","修改","org","为","e5%","9f%","¶","=","json","restext","生效","string","2020","限定","下","proxy","是","buffer","一些","__","域名","cn","数据","install","type","formdata","。","命令","`","test","curl","一款","8c%","resposne","xxx","'","html","85%","使用","req","方法","没有","口号","windows","1.0","特殊","ps","你","基于","whistle","set","包含","<","匹配","3","value","node","检查","19","x","key","location","用","3.4","注意","content","行内","把","application","对于","右键","none","端口","alicdn","参考"],"title":"LightPorxy 非官方文档","title_tokens":["非官方","文档"," ","lightporxy","官方"]},{"location":"2020/0909/lightproxy-unofficial-document/#lightporxy","text":"LightProxy 是一款基于 whistle 的本地代理抓包软件 PS: 复制官方文档 [:doge:]","text_tokens":["是","代理","抓包","lightproxy","本地","官方","的","文档","ps","基于","一款","]","whistle","软件","[","doge"," ","复制",":"],"title":"LightPorxy 非官方文档","title_tokens":["非官方","文档"," ","lightporxy","官方"]},{"location":"2020/0909/lightproxy-unofficial-document/#1","text":"windwos Windows 用户的 Chrome 如果代理不生效，尝试重启下 Chrome Windows 用户如果出现证书错误，你可能需要右键 => 属性 => 以 管理员身份 运行，然后在 LightProxy 的菜单中使用 Help => Install Certificate & Helper 检查右下角是否启用了 LightProxy 系统代理 检查 window 代理服务器是否启用了 127.0.0.1:12888 设置","text_tokens":["出现","下角","右下","certificate","代理",">","服务","是否","lightproxy","helper","管理","在","右下角","错误","的","install","以","可能","需要","window","重启","启用","尝试","了","如果","系统","服务器","你","12888","证书","右键","身份","运行","127.0","代理服务器","windwos","=","chrome","中","属性","检查","，","生效","管理员","务器","设置","&","菜单","使用","help"," ","然后","用户","不","0.1",".","windows","下",":"],"title":"1. 安装","title_tokens":["."," ","安装","1"]},{"location":"2020/0909/lightproxy-unofficial-document/#2","text":"将其它代理设置为非系统代理后，将LightProxy 设置为系统代理 配置一条规则 /xxx/ socks5://127.0.0.1:1080 这样的方式指定满足匹配条件的页面通过 socks5://127.0.0.1:1080 的代理进行转发。 或者通过 /.*/ socks5://127.0.0.1:1080 的方式设置一个前置代理。 对于 HTTP 代理，使用 /.*/ proxy://127.0.0.1:1080","text_tokens":["proxy","转发","非","将","代理","进行","lightproxy","其它","前置","1080","socks5","的","这样","。","规则","系统","对于","127.0","页面","方式","为","或者","一个","xxx","配置","匹配","*","，","设置","条件","一条","http","使用","后","满足"," ","/","0.1","指定",".","通过",":"],"title":"2. 如何和其他代理应用一起使用","title_tokens":["如何","和","一起","使用","代理"," ","2",".","应用","其他"]},{"location":"2020/0909/lightproxy-unofficial-document/#3","text":"","text_tokens":[],"title":"3. 规则","title_tokens":[" ","3","规则","."]},{"location":"2020/0909/lightproxy-unofficial-document/#31-js-console-eruda","text":"github . com / alibaba / lightproxy htmlPrepend : //` < script src = \"https://cdn.jsdelivr.net/npm/eruda\" >< /script> < script > eruda . init (); < /script> } `","text_tokens":["src","}",";","net",">","alibaba","lightproxy",")","\"","https","(","eruda","init","`","script","htmlprepend","<","=","jsdelivr","com","npm"," ","/",".","cdn","github",":"],"title":"3.1 JS Console 调试控制台（eruda）","title_tokens":["3.1","）","调试","js","console","eruda"," ","控制","控制台","（"]},{"location":"2020/0909/lightproxy-unofficial-document/#32-mock","text":"github . com / alibaba / lightproxy `resposne content multiple line `","text_tokens":["multiple","content","line"," ","/","resposne","alibaba",".","lightproxy","`","github","com"],"title":"3.2 响应静态内容（可用于 mock）","title_tokens":["mock","）","内容","用于"," ","响应","静态","（","3.2","可"]},{"location":"2020/0909/lightproxy-unofficial-document/#33-mock-json","text":"github . com / alibaba / lightproxy `{ \"test\": \"value\", \"key\": 5 } ` resHeaders : //`{ \"Content-type\" : \"application/json\" } `","text_tokens":["}","resheaders","alibaba","lightproxy","\"","5","type","content","application","`",",","test","-","{","value","com","json","key"," ","/",".","github",":"],"title":"3.3 Mock 模拟 JSON","title_tokens":["mock","模拟"," ","3.3","json"]},{"location":"2020/0909/lightproxy-unofficial-document/#34-cors","text":"github . com / alibaba / lightproxy resCors : //","text_tokens":[":"," ","/","alibaba",".","lightproxy","github","com","rescors"],"title":"3.4 增加 CORS 跨域头","title_tokens":["3.4","cors","跨域"," ","头","增加"]},{"location":"2020/0909/lightproxy-unofficial-document/#35-url","text":"^ github . com / alibaba / lightproxy https : //g.alicdn.com/another-path/github.com/alibaba/lightproxy","text_tokens":[":","another","g","-","alicdn"," ","/","^","alibaba",".","lightproxy","path","github","com","https"],"title":"3.5 通过通配符映射 URL","title_tokens":["url","3.5"," ","通过","通配符","映射"]},{"location":"2020/0909/lightproxy-unofficial-document/#36-resdelay","text":"github . com / alibaba / lightproxy resDelay : //","text_tokens":["resdelay"," ","/","alibaba",".","lightproxy","github","com",":"],"title":"3.6 延迟请求（resDelay）","title_tokens":["3.6","resdelay","）"," ","（","延迟","请求"]},{"location":"2020/0909/lightproxy-unofficial-document/#37-nodejs","text":"行内的写法，注意 ` 符号 github . com / alibaba / lightproxy scriptfile : //` exports . handleRequest = async ( ctx , next ) => { // do sth // ctx.fullUrl 可以获取请求url // ctx.headers 可以获取请求头 // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请设置的规则等 // ctx.method 获取和设置请求方法 // const reqBody = await ctx.getReqBody(); 获取请求 body 的 Buffer 数据，如果没有数据返回 null // const reqText = await ctx.getReqText(); 获取请求 body 的文本，如果没有返回'' // const formData = await ctx.getReqForm(); 获取表单对象，如果不是表单，返回空对象{} // ctx.req.body = String| Buffer | Stream | null，修改请求的内容 // next 方法可以设置 next({ host, port }); // 只有执行next方法后才可以把正常的请求发送出去 const { statusCode , headers } = await next (); // do sth // const resBody = yield ctx.getResBody(); // const resText = yield ctx.getResText(); // ctx.status = 404; 修改响应状态码 // ctx.set(headers); 批量修改响应头 // ctx.set('x-test', 'abc'); 修改响应头 // ctx.body = String| Buffer | Stream | null; 修改响应内容 ctx . body = 'test' ; }; ` 也可以直接指向一个文件 github.com/alibaba/lightproxy scriptfile:/path/to/file.js","text_tokens":["发送","直接","不是","options","js",">","reqbody","头","yield","do","404","字段","指向","也","body",",","修改","handlerequest","文本","url","next","getreqtext","=","await","restext","，","头字段","设置","string"," ","等",".","码","}","sth","buffer","一些","lightproxy","数据","fullurl","stream","scriptfile",")","(","formdata","method","exports","const","`","如果","test","状态","{","host","'","headers","com","req","/","resbody","响应","方法","没有","空","github","statuscode","null",";","执行","写法","可以","|","返回","请求","特殊","的","abc","getreqform","符号","规则","表单","里面","正常","出去","getreqbody","getrestext","和","-","reqtext","to","set","包含","文件","获取","对象","x","status","后","path",":","额外","才","file","alibaba","批量","注意","行内","把","只有","内容","getresbody","一个","port","分别","如请","async","ctx","信息"],"title":"3.7 用 Node.js 书写规则","title_tokens":["书写","用","js","3.7"," ","规则",".","node"]},{"location":"2020/0909/lightproxy-unofficial-document/#4","text":"export https_proxy = http://127.0.0.1:12888 http_proxy = http://127.0.0.1:12888 all_proxy = socks5://127.0.0.1:12889 curl https://baidu.com -I Response HTTP/1.1 200 Connection Established Proxy-Agent: whistle HTTP/2 302 server: bfe/1.0.8.18 date: Fri, 19 Jun 2020 03 :36:36 GMT content-type: text/html content-length: 161 location: http://www.baidu.com/ __lightproxy-host-ip__: 127 .0.0.1 __lightproxy-rules__: none __lightproxy-real-url__: https://baidu.com/ __lightproxy-help__: See https://github.com/alibaba/lightproxy","text_tokens":["proxy","location","1.0","real","36","see","200","bfe","__","03","alibaba","response","lightproxy","gmt","https","161","established","socks5","all","agent","type","12889","content","i","fri","connection",",","12888","curl","url","0.0","www","server","length","text","-","127.0","whistle","rules","host","none","html","=","_","com","8.18","ip","1.1","19","baidu","export","http","help","127"," ","/","2","0.1","date","2020",".","1","302","github","jun",":"],"title":"4. 在命令行中使用","title_tokens":["使用"," ","命令行","命令",".","在","中","4"]},{"location":"2020/0909/lightproxy-unofficial-document/#5","text":"","text_tokens":[],"title":"5. 匹配规则","title_tokens":["5"," ","规则",".","匹配"]},{"location":"2020/0909/lightproxy-unofficial-document/#51","text":"# 上述匹配也可以限定域名的端口号 www.test.com:8888 operatorURI # 8888端口 www.test.com/ operatorURI # http为80端口，其它443端口","text_tokens":["8888","域名","443","可以","其它","端口号","的","也","80","上述","operatoruri","test","www","为","#","匹配","com","，","端口","http"," ","/","限定",".","口号",":"],"title":"5.1 域名匹配","title_tokens":["匹配","域名","5.1"," "]},{"location":"2020/0909/lightproxy-unofficial-document/#6","text":"https://lightproxy.org/zh-CN https://lightproxy.org/zh-CN/rules/match#%E5%9F%9F%E5%90%8D%E5%8C%B9%E9%85%8D https://wproxy.org/whistle/pattern.html","text_tokens":["b9%","wproxy","8d","cn","lightproxy","https","zh","90%","org","rules","-","whistle","pattern","e5%","8c%","e9%","9f%","html","85%"," ","match","/","#%",".","8d%",":"],"title":"6. 参考","title_tokens":["."," ","参考","6"]},{"location":"2020/0914/awosome-command-line-slide/","text":"Awesome command line slide | 命令行介绍幻灯片 ¶ CLI => Command line interface => 命令行界面 Why command line ¶ What's wrong with GUI? GUI 与其他工具交互太难了，你不能像 shell 一样，将一个 GUI 程序的输出作为另一个程序的输入 鼠标操作太慢了 跨平台。我只用终端和浏览器，那么我的工具栈基本上都是跨平台的（跨平台的语言、换行符 服务器上，难以使用 GUI 程序 GUI 消耗资源太多了，尤其是越来越多的 Electron 应用 Unix 哲学 ¶ Mike Gancarz的《UNIX哲学》 The UNIX Philosophy 9条训格之言： 小即是美 让程序只做好一件事 尽可能早地创建原型 可移植性比效率更重要 数据应该保存为文本文件 尽可能地榨取软件的全部价值 使用 shell 脚本来提高效率和可移植性 避免使用可定制性低下的用户界面 所有程序都是数据的过滤器1. 小即是美 让程序只做好一件事 KISS 原则 KISS 原则是英语 Keep It Simple, Stupid 的首字母缩略字，是一种归纳过的经验原则9. 所有程序都是数据的过滤器 map filter reduce // https://twitter.com/steveluscher/status/741089564329054208 // Map/filter/reduce in a tweet: map ([ 🌽 , 🐮 , 🐔 ], cook ) => [ 🍿 , 🍔 , 🍳 ] filter ([ 🍿 , 🍔 , 🍳 ], isVegetarian ) => [ 🍿 , 🍳 ] reduce ([ 🍿 , 🍳 ], eat ) => 💩 如何开始使用一个新的命令行工具 ¶ install topics/cli Unix/Linux yum apt dnf homebrew... windoww scoop scoop.sh/ choco chocolatey.org/ ... Code pip cargo go ... yarn npm npx ... Document man help -h --help man bash mv --help Tl;Dr too long; didn't read https://tldr.linux.cn/ https://tldr.sh/ 参数 ¶ System Style Example Unix 风格参数，前面加单破折线 - BSD 风格参数，前面不加破折线 GNU 风格参数，前面加双破折线 java -v java --version java -version find ‘-r’ IN https://www.gnu.org/prep/standards/html_node/Option-Table.html#Option-Table ### 符号 ! > | ### Pipline 在类Unix操作系统（以及一些其他借用了这个设计的操作系统，如Windows）中，管道（英语：Pipeline）是一系列将标准输入输出链接起来的进程，其中每一个进程的输出被直接作为下一个进程的输入。 每一个链接都由匿名管道实现[来源请求]。管道中的组成元素也被称作过滤程序 这个概念是由道格拉斯·麦克罗伊为Unix 命令行发明的，因与物理上的管道相似而得名 Pipline Example 1 ls -l | less 在这个例子中，ls用于在Unix下列出目录内容，less是一个有搜索功能的交互式的文本分页器。这个管线使得用户可以在列出的目录内容比屏幕长时目录上下翻页 Pipline example 2 curl \"http://en.wikipedia.org/wiki/Pipeline_(Unix)\" | \\ sed 's/[^a-zA-Z ]/ /g' | \\ tr 'A-Z ' 'a-z\\n' | \\ grep '[a-z]' | \\ sort -u | \\ comm -23 - /usr/share/dict/words | \\ less curl 获取该网页的HTML内容（在有些系统上可以使用wget） sed 移除非空格的字符和网页内容的字母，并以空格取代之 tr 把大写字母改成小写字母，并把行列里的空格换成新行（每个词现在各占有独立的一行） grep 过滤得到那些至少有一个小写字母的行（删除空行） sort 将“单词”（也就是每一个行）按照字母顺序排序，并且通过命令行的-u参数来删除重复的行 comm 查找两个文件中的共同行，-23过滤掉只有第二个文件拥有的行、两个文件共有的行，仅仅留下只在第一个文件中有的行在文件名的位置上的-参数表示要求comm使用标准输入（在这个例子里，他的标准输入来自于管道上游的标准输出）作为输入，而不是以普通文件作为输入最终得到一串没有出现在/usr/share/dict/words之中的“单词”（也就是一行） less 允许用户翻页浏览结果 ! ¶ $ echo foo bar baz foo bar baz $ !! echo foo bar baz foo bar baz > ¶ echo 1 > 1 .txt # 将数字 1 写入文件 1.txt cat 1 .txt # 输出 1.txt 的内容 # 输出：1 echo 2 >> 1 .txt # 将数字 2 写入文件 1.txt 的末行 cat 1 .txt | clip.exe # 通过管道将文件 1.txt 的内容传输到 windows 的剪切板 shortcuts ¶ bash keyboard Command Editing Shortcuts CTRL+A CTRL+E Go to the start/end of the command line CTRL+R Search the history backwards CTRL+L Clear the screen CTRL+C Terminate the command - https://kapeli.com/cheat_sheets/Bash_Shortcuts.docset/Contents/Resources/Documents/index ¶ 有趣的命令行工具 ¶ 🚀jq 🚀cURL 🚀Httpie 🚀ffmpeg 🚀clip.exe 🚀code.exe 🦄 you-get soimort/you-get 🦄 aria2 aria2/aria2 jq Document: stedolan.github.io/jq/tutorial/ $ curl 'https://api.github.com/repos/stedolan/jq/commits?per_page=5' | jq '.' # formatter [ { \"sha\" : \"d25341478381063d1c76e81b3a52e0592a7c997f\" , \"commit\" : { \"author\" : { \"name\" : \"Stephen Dolan\" , \"email\" : \"mu@netsoc.tcd.ie\" , \"date\" : \"2013-06-22T16:30:59Z\" } , \"committer\" : { \"name\" : \"Stephen Dolan\" , \"email\" : \"mu@netsoc.tcd.ie\" , \"date\" : \"2013-06-22T16:30:59Z\" } , \"message\" : \"Merge pull request #162 from stedolan/utf8-fixes\\n\\nUtf8 fixes. Closes #161\" , \"tree\" : { \"sha\" : \"6ab697a8dfb5a96e124666bf6d6213822599fb40\" , \"url\" : \"https://api.github.com/repos/stedolan/jq/git/trees/6ab697a8dfb5a96e124666bf6d6213822599fb40\" } , \"url\" : \"https://api.github.com/repos/stedolan/jq/git/commits/d25341478381063d1c76e81b3a52e0592a7c997f\" , \"comment_count\" : 0 } , \"url\" : \"https://api.github.com/repos/stedolan/jq/commits/d25341478381063d1c76e81b3a52e0592a7c997f\" , \"html_url\" : \"https://github.com/stedolan/jq/commit/d25341478381063d1c76e81b3a52e0592a7c997f\" , \"comments_url\" : \"https://api.github.com/repos/stedolan/jq/commits/d25341478381063d1c76e81b3a52e0592a7c997f/comments\" , \"author\" : { \"login\" : \"stedolan\" , ... Httpie Pages: httpie.org/ http PUT httpbin.org/put X-API-Token:123 name = John # http [flags] [METHOD] URL [ITEM [ITEM]] code # 新建一个文件 code README.md # 新建两个文件 code foo.md bar.md # 编辑一个已存在的文件 code foo.md # diff 比较两个文件 code -d foo.md bar.md code --diff foo.md bar.md # 新打开一个窗口 code -n WSL ¶ WSL 的全称叫做：Windows Subsystem for Linux，即「适用于 Linux 的 Windows 子系统」。WSL 的诞生让 Windows 用户（开发人员）按原样运行 GNU/Linux 环境 —— 包括大多数命令行工具、实用工具和应用程序 —— 且不会产生虚拟机开销。 https://dowww.spencerwoo.com/ https://www.jenkins.io/zh/doc/pipeline/tour/hello-world/ Terminals ¶ Linux/Unix bash zsh ohmyz.sh/ fish fishshell.com/ windows windows Terminal microsoft/terminal WSL Terminal powershell cmd 编辑器 ¶ vim / emacs => vscode code --help Visual Studio Code 1 .43.1 Usage: code.exe [ options ][ paths... ] To read output from another program, append '-' ( e.g. 'echo Hello World | code.exe -' ) Options -d --diff <file> <file> Compare two files with each other. -a --add <folder> Add folder ( s ) to the last active window. -g --goto <file:line [ :character ] > Open a file at the path on the specified line and character position. -n --new-window Force to open a new window. -r --reuse-window Force to open a file or folder in an already opened window. -w --wait Wait for the files to be closed before returning. --locale <locale> The locale to use ( e.g. en-US or zh-TW ) . --user-data-dir <dir> Specifies the directory that user data is kept in. Can be used to open multiple distinct instances of Code. -v --version Print version. -h --help Print usage. --telemetry Shows all telemetry events which VS code collects. --folder-uri <uri> Opens a window with given folder uri ( s ) --file-uri <uri> Opens a window with given file uri ( s ) Extensions Management --extensions-dir <dir> Set the root path for extensions. --list-extensions List the installed extensions. --show-versions Show versions of installed extensions, when using --list-extension. --category Filters installed extensions by provided category, when using --list-extension. --install-extension <extension-id | path-to-vsix> Installs or updates the extension. Use ` --force ` argument to avoid prompts. --uninstall-extension <extension-id> Uninstalls an extension. --enable-proposed-api <extension-id> Enables proposed API features for extensions. Can receive one or more extension IDs to enable individually. Troubleshooting --verbose Print verbose output ( implies --wait ) . --log <level> Log level to use. Default is 'info' . Allowed values are 'critical' , 'error' , 'warn' , 'info' , 'debug' , 'trace' , 'off' . -s --status Print process usage and diagnostics information. --prof-startup Run CPU profiler during startup --disable-extensions Disable all installed extensions. --disable-extension <extension-id> Disable an extension. --inspect-extensions <port> Allow debugging and profiling of extensions. Check the developer tools for the connection URI. --inspect-brk-extensions <port> Allow debugging and profiling of extensions with the extension host being paused after start. Check the developer tools for the connection URI. --disable-gpu Disable GPU hardware acceleration. --max-memory Max memory size for a window ( in Mbytes ) . REPL ¶ 读取﹣求值﹣输出循环 ipython ipython.org/install.html import java.util.Scanner ; public class AiMain { public static void main ( String [] args ) { Scanner sc = new Scanner ( System . in ); String str ; while ( true ) { str = sc . next (); str = str . replace ( \"吗\" , \"\" ); str = str . replace ( \"?\" , \"!\" ); str = str . replace ( \"? \" , \"! \" ); System . out . println ( str ); } } } dbcli ¶ pgcli - Postgres Client with Auto-completion and Syntax Highlighting mycli - MySQL/MariaDB/Percona Client with Auto-completion and Syntax Highlighting litecli - SQLite Client with Auto-completion and Syntax Highlighting mssql-cli - Microsoft SQL Server Client with Auto-completion and Syntax Highlighting athenacli - AWS Athena Client with Auto-completion and Syntax Highlighting vcli - VerticaDB client iredis - Client for Redis with AutoCompletion and Syntax Highlighting### dotfile dotfiles 就是软件的配置文件。一般用于软件设置，可以通过备份 dotfiles 的方式，同步软件设置 同步原理 主要是应用了ln软连接的功能，命名格式如下: ln [ 参数 ][ 目标文件或目录 ] dotfile example .bash_profile .bash_prompt .bashrc .curlrc .curlrc: Add back connect-timeout .exports .exports: Hide zsh warning on macOS .gdbinit .gitattributes .gitattributes: Disable normalizing line endings globally .gitconfig .gitignore .gvimrc .hgignore .hushlogin .inputrc .macos .osx .screenrc .tmux.conf .vimrc .wgetrc https://leohxj.gitbooks.io/a-programmer-prepares/content/software/mac/dotfiles.html https://github.com/mathiasbynens/dotfiles blog.spencerwoo.com/2020/07/how-i-manage-my-dotfiles/### 如何写一个命令行 选择开发语言（eg: Python\\Rust\\Go...） 选择一个库 加点颜色> optparse: docs.python.org/zh-cn/3.8/library/optparse.html from optparse import OptionParser ... parser = OptionParser () parser . add_option ( \"-f\" , \"--file\" , dest = \"filename\" , help = \"write report to FILE\" , metavar = \"FILE\" ) parser . add_option ( \"-q\" , \"--quiet\" , action = \"store_false\" , dest = \"verbose\" , default = True , help = \"don't print status messages to stdout\" ) ( options , args ) = parser . parse_args () # With these few lines of code, users of your script can now do the \"usual thing\" on the command-line, for example: # <yourscript> --file=outfile -q python-prompt-toolkit prompt-toolkit/python-prompt-toolkit class FuzzCommand { public static void main ( String [] args ) { // do some stuffs System . out . print ( args [ 0 ] ) } // javac FuzzCommand.java // java FuzzCommand Fuzz color def enable (): HEADER = ' \\033 [95m' OKBLUE = ' \\033 [94m' OKGREEN = ' \\033 [92m' WARNING = ' \\033 [93m' FAIL = ' \\033 [91m' ENDC = ' \\033 [0m' BOLD = \" \\033 [1m\" def disable (): HEADER = '' OKBLUE = '' OKGREEN = '' WARNING = '' FAIL = '' ENDC = '' def infog ( msg ): print ( OKGREEN + msg + ENDC ) def info ( msg ): print ( OKBLUE + msg + ENDC ) def warn ( msg ): print ( WARNING + msg + ENDC ) def err ( msg ): print ( FAIL + msg + ENDC ) enable () 如何写一个脚本 ¶ 选择一门开发语言 Shell Bash Powershell Python Go Rust $profile # git function invoke-git { [ alias ( 'g' )] param ( [ parameter ( mandatory = $true , position = 0 )] [string] $cmd , [ parameter ( mandatory = $false , valuefromremainingarguments = $true )] [string[]] $params ) switch ( $cmd ) { # add 'a' { git add $params } # branch 'b' { git branch $params } # checkout 'c' { git checkout $params } # clone repo 'cl' { git clone $params } # commit 'co' { git commit $params } # fetch 'f' { git fetch $params } # init 'i' { git init $params } # log 'l' { git log $params } # pretty log 'll' { git log - -graph - -pretty = format : '%cred%h%creset -%c(yellow)%d%creset %s %cgreen(%cr) %c(bold blue)<%an>%creset' - -abbrev-commit } # merge 'm' { git merge $params } # pull 'pl' { git pull $params } # push 'ps' { git push $params } # rebase 'r' { git rebase $params } # reset changes 'rs' { git reset $params } # status 's' { git status $params } # tag 't' { git tag $params } # catchall default { git $cmd $params } } } Reference ¶ https://kapeli.com/cheat_sheets/Bash_Shortcuts.docset/Contents/Resources/Documents/index fliptheweb/bash-shortcuts-cheat-sheet https://github.com/laixintao/myslides/blob/master/awesome-commandline/awesome-commandline.md https://revealjs.com https://www.dbcli.com/about/ https://www.zhihu.com/question/267095526 https://www.gnu.org/prep/standards/html_node/Option-Table.html#Option-Table https://wiki.archlinux.org/index.php/Dotfiles https://zh.wikipedia.org/wiki/%E7%AE%A1%E9%81%93_(Unix)","text_tokens":["称作","重复","一系","bash","info","该","不是","aria2","定制","到","w","tl","okgreen","repo","developer","得到","void","be","提高","写入","all","🦄","emacs","run","kapeli","checkout","paths","ctrl","文本","usr","zhihu","www","发人","append","acceleration","docs","网页内容","lines","ohmyz","f","英语","enables","before","每","q","allow","介绍","line","重要","pages","map"," ","trees","d","when","mariadb","normalizing","version","1","log","即","u","字","verticadb","}","fuzz","catchall","已","don","1m","def","find","留下","directory","小即","root","size","alias","shell","得名","我","npx","目标","function","借用","要求","exports","浏览","ls","%","athena","pretty","器","》","john","user","data","格式","code","pgcli","graph","方式","mycli","中有","prompt","conf","enable","配置","revealjs","共同","“","installs","prompts","栈","结果","6ab697a8dfb5a96e124666bf6d6213822599fb40","jenkins","during","难以使用","命令行","t","写字","opened","求值","toolkit","通过","翻页","vim","上","备份","disable","aws","go","实现","功能","blog","okblue","folder","warning","comm","一样","效率","max","﹣","共有","可以","hushlogin","prepares","ie","wsl","profiler","individually","风格","归纳","connection","d25341478381063d1c76e81b3a52e0592a7c997f","了","格拉斯","args","client","95m","from","aimain","服务器","script","掉","warn","public","原样","style","ln","api","check","dowww","获取","浏览器","closed","中","system","写","critical","dbcli","new","让","a","读取","updates","移","allowed","比较","path","window","vcli","committer",":","osx","大写","或","switch","yellow","documents","tutorial","一系列","za","goto","receive","timeout","fetch","###","cpu","...","store","行列","23","history","request","越来","原理","进程","仅仅","httpie","color","avoid","只有","所有","（","keep","terminals","@","jq","033","h","highlighting","普通","comment","终端","运行","组成","cheat","全部","at","installed","美","被","例子","index","or","command","741089564329054208","z","resources","homebrew","占有","匿名","如何","given","npm","开销","叫做","date","3.8","22t16","162","?","these","valuefromremainingarguments","」","$","dotfiles","分页","import","高效率","outfile","161","do","第一","cat","这个","价值","count","尤其","zh","也","being","now","267095526","events","after","files","dest","cred%",",","至少","table","stedolan","·","master","url","可移植","单词","实用工具","didn","同步","get","库","--","other","next","出","dotfile","‘","#","原型","基本上","debugging","optionparser","md","0","wait","设置","哲学","extension","表示","by",".","trace","optparse","dnf","0m","terminate","原则","用户界面","how","editing","改成","stuffs","前面","message","scanner","两个","one","yum","values","echo","argument","(","closes","default","class","world","允许","is","too","第一个","clip","mu","^","method","add","tw","dir","92m","b","pipeline","implies","cook","可","由","fixes","全称","像","server","搜索","\\","实用","{","yourscript","管道","host","level","上下","dr","折线","按照","_","instances","ids","应该","避免","换行","redis","93m","因","specified","不加","standards","already","更","static","few","steveluscher","多数","github","之中","包括","最终","资源","exe","share","🚀","returning","completion","n","克罗","simple","元素","各","独立","rs","不能","换行符","another","open","can","第二","ae%","的","工具","merge","过","链接","library","顺序","i","init","backwards","brk","mysql","43.1","cr","产生","hardware","sql","移植","multiple","和","]","事","pip","且","克罗伊","界面","you","务器","cargo","repl","param","verbose","都","本文","输出","windoww","blob","out","尽可能","uri","用工","that","readme","spencerwoo","dict","util","之言","删除","字母","g","道格拉斯","per","《","一种","reference","应用","过滤器","🍳","https","多","’","clear","opens","、","mssql","fliptheweb","基本","并","鼠标","9","跨平台","search","💩","类","那些","txt","59z","）","r","interface","一个","虚拟机","port","process","大多","curlrc","parse","reuse","只","有些","http","of","position","sqlite","m","debug","laixintao","编辑器","除非","新","push","如","page","stupid","直接","如下","出现","就是","options","paused",">","telemetry","那么","your","co","gnu","比","startup","globally","prep","以及","尽可","nutf8","wiki","id","道格","榨取","software","report","91m","tmux","token","reduce","剪切板","发明","并且","过滤","io","endings","第二个","[","character","拉斯","percona","invoke","难以","适用","程序","baz","item","shows","fuzzcommand","，","bold","mbytes","list","vimrc","why","rebase","大写字母","a1%","主要","交互","diagnostics","connect","一件","write","blue","used","formatter","🐮","服务","collects","位置","usual","h%",")","\"","ffmpeg","each","usage","tcd","foo","versions","而","scoop","compare","来","eg","man","窗口","creset","幻灯","系统","每个","output","tree","小写","main","连接","性","while","two","平台","infog","document","语言","其他","com","传输","inspect","他","name","v","replace","vs","物理","fail","mac","/","us","profiling","netsoc","clone","choco","which","格拉",";","cl","太多","首字母","eat","sed","less","params","|","在","use","94m","请求","program","取代","ll","dolan","词","可能","符号","isvegetarian","移植性","被称作","syntax","hello","07","太慢","linux","php","grep","s","长时","末行","action","-","用于","to","「","powershell","cmd","早地","破","vscode","文件","and","distinct","vsix","打开","manage","e9%","what","mike","topics","颜色","现在","profile","bar","status","troubleshooting","diff","help","author","虚拟","filter","example","用户","吗","+","地","123","人员","应用程序","true","经验","tour","e7%","训格之言","设计","操作","end","首字","一门","将","file","autocompletion","加点","subsystem","剪切","myslides","数字","hgignore","login","5","小写字母","开始","93","some","与","麦","kept","81%","prof","tools","archlinux","内容","只用","大多数","软件","javac","rust","httpbin","long","wgetrc","proposed","information","contents","来源","pipline","en","换成","gancarz","加双破","参数","mathiasbynens","输入输出","2","sha","d%","🍔","软","tr","visual","cgreen","show","wget","2013","环境","println","以使","目录","off","bsd","category","一般","排序","高效","之","列出","twitter","新建","开发","循环","提高效率","bashrc","以","utf8","for","management","有趣","java","一行","commandline","email","ipython","tweet","🍿","加单","commit","microsoft","查找","messages","org","yarn","shortcuts","另","为","reset","athenacli","¶","c","fishshell","with","=","gitconfig","msg","read","macos","git","docset","低下","幻灯片","extensions","string","太难","行","option","commits","print","2020","philosophy","下","sort","使得","postgres","branch","是","概念","an","开发人员","l","in","一些","cn","more","doc","str","数据","repos","keyboard","tldr","hide","pull","诞生","about","install","err","sheets","stephen","parser","越来越","features","命令","。","gvimrc","`","programmer","abbrev","curl","chocolatey","specifies","memory","are","my","'","标准","文本文件","html","空格","error","gitattributes","thing","作为","其中","inputrc","filename","使用","screenrc","uninstalls","changes","没有","windows","保存","force","条","the","起来","metavar","mv","it","words","按","屏幕","不会","命名","sheet","操作系统","question","studio","文件名","做好","🌽","start","false","可移植性","ps","交互式","拥有","滤器","：","你","on","上游","gui","slide","kiss","set","quiet","系列","uninstall","06","配置文件","子系统","—","消耗","active","back","<","编辑","gitbooks","”","选择","node","endc","pl","里","x","存在","!","unix","provided","sh","创建","parameter","awesome","二个","e","网页","leohxj","apt","下列","python","zsh","content","format","把","缩略","mandatory","gpu","users","脚本","electron","locale","fish","litecli","stdout","🐔","管线","一串","screen","using","字符","30","-%","相似","sc","auto","来自","输入","comments","put","于","wrong","soimort","filters","gitignore","header","tag","空行","有","last","gdbinit","terminal","cli","wikipedia","flags","iredis"],"title":"Awesome command line slide | 命令行介绍幻灯片","title_tokens":["awesome","介绍","line","slide","幻灯片"," ","命令行","命令","|","幻灯","command"]},{"location":"2020/0914/awosome-command-line-slide/#awesome-command-line-slide","text":"CLI => Command line interface => 命令行界面","text_tokens":["line",">"," ","interface","命令行","cli","命令","=","界面","command"],"title":"Awesome command line slide | 命令行介绍幻灯片","title_tokens":["awesome","介绍","line","slide","幻灯片"," ","命令行","命令","|","幻灯","command"]},{"location":"2020/0914/awosome-command-line-slide/#why-command-line","text":"What's wrong with GUI? GUI 与其他工具交互太难了，你不能像 shell 一样，将一个 GUI 程序的输出作为另一个程序的输入 鼠标操作太慢了 跨平台。我只用终端和浏览器，那么我的工具栈基本上都是跨平台的（跨平台的语言、换行符 服务器上，难以使用 GUI 程序 GUI 消耗资源太多了，尤其是越来越多的 Electron 应用","text_tokens":["资源","操作","是","?","将","太多","那么","一样","以使","服务","不能","shell","应用","换行符","越来","多","我","的","工具","、","尤其","越来越","基本","鼠标","。","了","浏览","（","太慢","跨平台","与","服务器","你","s","electron","像","和","另","平台","gui","只用","终端","一个","浏览器","语言","消耗","'","what","with","难以","输入","其他","程序","基本上","wrong","作为","，","务器","栈","换行","都","使用","难以使用"," ","太难","输出","交互","上"],"title":"Why command line","title_tokens":["line","why"," ","command"]},{"location":"2020/0914/awosome-command-line-slide/#unix","text":"Mike Gancarz的《UNIX哲学》 The UNIX Philosophy 9条训格之言： 小即是美 让程序只做好一件事 尽可能早地创建原型 可移植性比效率更重要 数据应该保存为文本文件 尽可能地榨取软件的全部价值 使用 shell 脚本来提高效率和可移植性 避免使用可定制性低下的用户界面 所有程序都是数据的过滤器1. 小即是美 让程序只做好一件事 KISS 原则 KISS 原则是英语 Keep It Simple, Stupid 的首字母缩略字，是一种归纳过的经验原则9. 所有程序都是数据的过滤器 map filter reduce // https://twitter.com/steveluscher/status/741089564329054208 // Map/filter/reduce in a tweet: map ([ 🌽 , 🐮 , 🐔 ], cook ) => [ 🍿 , 🍔 , 🍳 ] filter ([ 🍿 , 🍔 , 🍳 ], isVegetarian ) => [ 🍿 , 🍳 ] reduce ([ 🍿 , 🍳 ], eat ) => 💩","text_tokens":["stupid","定制",">","比","尽可","高效率","高效","提高","twitter","提高效率","榨取","价值","reduce",",","tweet","🍿","文本","过滤","可移植","为","[","英语","=","原型","程序","，","哲学","低下","重要","map"," ","1",".","philosophy","字","一件","是","原则","用户界面","in","🐮","小即","数据","shell",")","(","来","cook","可","》","性","文本文件","com","应该","避免","使用","/","更","steveluscher","保存","条","the","it","首字母","simple","eat","效率","的","做好","归纳","过","可能","🌽","isvegetarian","移植性","可移植性","滤器","：","移植","和","]","kiss","早地","事","文件","mike","界面","status","unix","让","都","a","filter","本文","用户","创建","尽可能","地",":","经验","之言","训格之言","首字","字母","《","一种","过滤器","🍳","https","缩略","所有","keep","9","脚本","💩","🐔","软件","全部","美","741089564329054208","只","gancarz","🍔"],"title":"Unix 哲学","title_tokens":["unix","哲学"," "]},{"location":"2020/0914/awosome-command-line-slide/#_1","text":"install topics/cli Unix/Linux yum apt dnf homebrew... windoww scoop scoop.sh/ choco chocolatey.org/ ... Code pip cargo go ... yarn npm npx ... Document man help -h --help man bash mv --help Tl;Dr too long; didn't read https://tldr.linux.cn/ https://tldr.sh/","text_tokens":["choco","bash","go",";","mv","apt","tl","cn","...","yum","https","tldr","npx","install","too","scoop","man","linux","h","org","yarn","chocolatey","-","didn","code","document","pip","--","'","dr","long","topics","cargo","read","homebrew","unix","npm","help","sh"," ","/","windoww","cli","t",".",":","dnf"],"title":"如何开始使用一个新的命令行工具","title_tokens":["的","工具","如何","使用","一个","命令行","开始","命令","新"]},{"location":"2020/0914/awosome-command-line-slide/#_2","text":"System Style Example Unix 风格参数，前面加单破折线 - BSD 风格参数，前面不加破折线 GNU 风格参数，前面加双破折线 java -v java --version java -version find ‘-r’ IN https://www.gnu.org/prep/standards/html_node/Option-Table.html#Option-Table ### 符号 ! > | ### Pipline 在类Unix操作系统（以及一些其他借用了这个设计的操作系统，如Windows）中，管道（英语：Pipeline）是一系列将标准输入输出链接起来的进程，其中每一个进程的输出被直接作为下一个进程的输入。 每一个链接都由匿名管道实现[来源请求]。管道中的组成元素也被称作过滤程序 这个概念是由道格拉斯·麦克罗伊为Unix 命令行发明的，因与物理上的管道相似而得名 Pipline Example 1 ls -l | less 在这个例子中，ls用于在Unix下列出目录内容，less是一个有搜索功能的交互式的文本分页器。这个管线使得用户可以在列出的目录内容比屏幕长时目录上下翻页 Pipline example 2 curl \"http://en.wikipedia.org/wiki/Pipeline_(Unix)\" | \\ sed 's/[^a-zA-Z ]/ /g' | \\ tr 'A-Z ' 'a-z\\n' | \\ grep '[a-z]' | \\ sort -u | \\ comm -23 - /usr/share/dict/words | \\ less curl 获取该网页的HTML内容（在有些系统上可以使用wget） sed 移除非空格的字符和网页内容的字母，并以空格取代之 tr 把大写字母改成小写字母，并把行列里的空格换成新行（每个词现在各占有独立的一行） grep 过滤得到那些至少有一个小写字母的行（删除空行） sort 将“单词”（也就是每一个行）按照字母顺序排序，并且通过命令行的-u参数来删除重复的行 comm 查找两个文件中的共同行，-23过滤掉只有第二个文件拥有的行、两个文件共有的行，仅仅留下只在第一个文件中有的行在文件名的位置上的-参数表示要求comm使用标准输入（在这个例子里，他的标准输入来自于管道上游的标准输出）作为输入，而不是以普通文件作为输入最终得到一串没有出现在/usr/share/dict/words之中的“单词”（也就是一行） less 允许用户翻页浏览结果","text_tokens":["称作","直接","tr","一系","重复","出现","该","就是","不是","wget",">","目录","gnu","bsd","比","分页","得到","prep","以及","排序","之","列出","wiki","第一","道格","这个","以","也","java","一行","至少","加单","table","·","发明","并且","过滤","文本","org","usr","查找","www","单词","第二个","为","网页内容","--","[","拉斯","英语","出","‘","#","程序","每","，"," ","大写字母","表示","行","version","option",".","1","下","交互","u","sort","使得","是","概念","find","l","in","一些","改成","留下","前面","两个","位置","得名",")","\"","(","允许","借用","而","第一个","要求","^","来","。","命令","浏览","每个","系统","ls","pipeline","由","器","curl","小写","搜索","\\","管道","中有","上下","标准","折线","html","'","_","其他","空格","“","作为","按照","共同","其中","他","结果","v","因","使用","不加","standards","物理","/","命令行","写字","通过","没有","windows","翻页","之中","上","最终","起来","share","格拉","实现","功能","n","克罗","comm","words","元素","sed","各","less","独立","屏幕","|","在","可以","共有","请求","操作系统","第二","取代","的","风格","文件名","词","链接","顺序","符号","被称作","了","格拉斯","交互式","拥有","：","grep","s","长时","掉","]","和","style","-","用于","上游","破","系列","文件","获取","中","克罗伊","node","”","system","里","现在","!","unix","a","都","example","输出","用户","移",":","dict","设计","操作","大写","字母","删除","将","道格拉斯","g","网页","二个","一系列","za","下列","###","行列","23","’","https","进程","仅仅","、","小写字母","把","只有","并","（","麦","与","类","那些","普通","）","内容","r","组成","管线","一串","一个","字符","相似","只","来自","被","输入","例子","于","z","有些","匿名","http","占有","来源","pipline","有","en","换成","空行","加双破","参数","输入输出","2","wikipedia","除非","新","如"],"title":"参数","title_tokens":["参数"]},{"location":"2020/0914/awosome-command-line-slide/#_3","text":"$ echo foo bar baz foo bar baz $ !! echo foo bar baz foo bar baz","text_tokens":["bar","!","foo"," ","$","baz","echo"],"title":"!","title_tokens":["!"]},{"location":"2020/0914/awosome-command-line-slide/#_4","text":"echo 1 > 1 .txt # 将数字 1 写入文件 1.txt cat 1 .txt # 输出 1.txt 的内容 # 输出：1 echo 2 >> 1 .txt # 将数字 2 写入文件 1.txt 的末行 cat 1 .txt | clip.exe # 通过管道将文件 1.txt 的内容传输到 windows 的剪切板","text_tokens":["exe","将","到",">","剪切","|","数字","echo","cat","写入","的","clip","剪切板","：","txt","末行","内容","管道","windows","文件","#","传输"," ","输出","2",".","1","通过"],"title":"&gt;","title_tokens":["gt","&",";"]},{"location":"2020/0914/awosome-command-line-slide/#shortcuts","text":"bash keyboard Command Editing Shortcuts CTRL+A CTRL+E Go to the start/end of the command line CTRL+R Search the history backwards CTRL+L Clear the screen CTRL+C Terminate the command","text_tokens":["the","terminate","end","bash","e","go","editing","l","keyboard","history","clear","start","backwards","ctrl","search","shortcuts","to","r","screen","c","command","of","a","line"," ","/","+"],"title":"shortcuts","title_tokens":["shortcuts"]},{"location":"2020/0914/awosome-command-line-slide/#-httpskapelicomcheat_sheetsbash_shortcutsdocsetcontentsresourcesdocumentsindex","text":"","text_tokens":[],"title":"- https://kapeli.com/cheat_sheets/Bash_Shortcuts.docset/Contents/Resources/Documents/index","title_tokens":["resources","index","bash","shortcuts","docset","contents","-","sheets","documents","cheat","https"," ","/","kapeli",".","_","com",":"]},{"location":"2020/0914/awosome-command-line-slide/#_5","text":"🚀jq 🚀cURL 🚀Httpie 🚀ffmpeg 🚀clip.exe 🚀code.exe 🦄 you-get soimort/you-get 🦄 aria2 aria2/aria2 jq Document: stedolan.github.io/jq/tutorial/ $ curl 'https://api.github.com/repos/stedolan/jq/commits?per_page=5' | jq '.' # formatter [ { \"sha\" : \"d25341478381063d1c76e81b3a52e0592a7c997f\" , \"commit\" : { \"author\" : { \"name\" : \"Stephen Dolan\" , \"email\" : \"mu@netsoc.tcd.ie\" , \"date\" : \"2013-06-22T16:30:59Z\" } , \"committer\" : { \"name\" : \"Stephen Dolan\" , \"email\" : \"mu@netsoc.tcd.ie\" , \"date\" : \"2013-06-22T16:30:59Z\" } , \"message\" : \"Merge pull request #162 from stedolan/utf8-fixes\\n\\nUtf8 fixes. Closes #161\" , \"tree\" : { \"sha\" : \"6ab697a8dfb5a96e124666bf6d6213822599fb40\" , \"url\" : \"https://api.github.com/repos/stedolan/jq/git/trees/6ab697a8dfb5a96e124666bf6d6213822599fb40\" } , \"url\" : \"https://api.github.com/repos/stedolan/jq/git/commits/d25341478381063d1c76e81b3a52e0592a7c997f\" , \"comment_count\" : 0 } , \"url\" : \"https://api.github.com/repos/stedolan/jq/commits/d25341478381063d1c76e81b3a52e0592a7c997f\" , \"html_url\" : \"https://github.com/stedolan/jq/commit/d25341478381063d1c76e81b3a52e0592a7c997f\" , \"comments_url\" : \"https://api.github.com/repos/stedolan/jq/commits/d25341478381063d1c76e81b3a52e0592a7c997f/comments\" , \"author\" : { \"login\" : \"stedolan\" , ... Httpie Pages: httpie.org/ http PUT httpbin.org/put X-API-Token:123 name = John # http [flags] [METHOD] URL [ITEM [ITEM]] code # 新建一个文件 code README.md # 新建两个文件 code foo.md bar.md # 编辑一个已存在的文件 code foo.md # diff 比较两个文件 code -d foo.md bar.md code --diff foo.md bar.md # 新打开一个窗口 code -n","text_tokens":["162","?","aria2","新","2013","$","161","nutf8","新建","count","🦄","utf8","token","email",",","commit","stedolan","io","url","org","get","[","--","#","=","item","md","git","0","pages","d"," ","trees","commits",".","}","已","formatter","message","两个","repos","ffmpeg","\"","closes","pull","tcd","foo","stephen","clip","mu","method","窗口","fixes","tree","curl","john","\\","code","{","document","'","html","_","com","name","6ab697a8dfb5a96e124666bf6d6213822599fb40","/","github","netsoc","exe","🚀","n","|","ie","的","merge","dolan","d25341478381063d1c76e81b3a52e0592a7c997f","from","]","-","api","06","文件","打开","编辑","you","x","bar","存在","diff","author","比较","123","committer",":","readme","tutorial","per","...","request","https","login","httpie","5","@","jq","59z","comment","一个","30","httpbin","comments","put","soimort","http","sha","date","flags","22t16","page"],"title":"有趣的命令行工具","title_tokens":["的","工具","有趣","命令行","命令"]},{"location":"2020/0914/awosome-command-line-slide/#wsl","text":"WSL 的全称叫做：Windows Subsystem for Linux，即「适用于 Linux 的 Windows 子系统」。WSL 的诞生让 Windows 用户（开发人员）按原样运行 GNU/Linux 环境 —— 包括大多数命令行工具、实用工具和应用程序 —— 且不会产生虚拟机开销。 https://dowww.spencerwoo.com/ https://www.jenkins.io/zh/doc/pipeline/tour/hello-world/","text_tokens":["开发人员","环境","subsystem","」","按","gnu","doc","www","应用","不会","https","wsl","诞生","开发","的","工具","、","zh","for","world","。","（","命令","hello","系统","linux","产生","pipeline","io","：","用工","全称","包括","人员","应用程序","和","）","「","原样","发人","运行","实用","大多数","实用工具","dowww","-","子系统","—","且","虚拟机","适用","程序","大多","于","com","，","jenkins","让","虚拟","开销","叫做"," ","用户","/","多数","命令行",".","windows","即","spencerwoo",":","tour"],"title":"WSL","title_tokens":["wsl"]},{"location":"2020/0914/awosome-command-line-slide/#terminals","text":"Linux/Unix bash zsh ohmyz.sh/ fish fishshell.com/ windows windows Terminal microsoft/terminal WSL Terminal powershell cmd","text_tokens":["wsl","bash","fish","unix","cmd","powershell","sh"," ","/","ohmyz","windows","terminal",".","fishshell","linux","microsoft","zsh","com"],"title":"Terminals","title_tokens":["terminals"]},{"location":"2020/0914/awosome-command-line-slide/#_6","text":"vim / emacs => vscode code --help Visual Studio Code 1 .43.1 Usage: code.exe [ options ][ paths... ] To read output from another program, append '-' ( e.g. 'echo Hello World | code.exe -' ) Options -d --diff <file> <file> Compare two files with each other. -a --add <folder> Add folder ( s ) to the last active window. -g --goto <file:line [ :character ] > Open a file at the path on the specified line and character position. -n --new-window Force to open a new window. -r --reuse-window Force to open a file or folder in an already opened window. -w --wait Wait for the files to be closed before returning. --locale <locale> The locale to use ( e.g. en-US or zh-TW ) . --user-data-dir <dir> Specifies the directory that user data is kept in. Can be used to open multiple distinct instances of Code. -v --version Print version. -h --help Print usage. --telemetry Shows all telemetry events which VS code collects. --folder-uri <uri> Opens a window with given folder uri ( s ) --file-uri <uri> Opens a window with given file uri ( s ) Extensions Management --extensions-dir <dir> Set the root path for extensions. --list-extensions List the installed extensions. --show-versions Show versions of installed extensions, when using --list-extension. --category Filters installed extensions by provided category, when using --list-extension. --install-extension <extension-id | path-to-vsix> Installs or updates the extension. Use ` --force ` argument to avoid prompts. --uninstall-extension <extension-id> Uninstalls an extension. --enable-proposed-api <extension-id> Enables proposed API features for extensions. Can receive one or more extension IDs to enable individually. Troubleshooting --verbose Print verbose output ( implies --wait ) . --log <level> Log level to use. Default is 'info' . Allowed values are 'critical' , 'error' , 'warn' , 'info' , 'debug' , 'trace' , 'off' . -s --status Print process usage and diagnostics information. --prof-startup Run CPU profiler during startup --disable-extensions Disable all installed extensions. --disable-extension <extension-id> Disable an extension. --inspect-extensions <port> Allow debugging and profiling of extensions. Check the developer tools for the connection URI. --inspect-brk-extensions <port> Allow debugging and profiling of extensions with the extension host being paused after start. Check the developer tools for the connection URI. --disable-gpu Disable GPU hardware acceleration. --max-memory Max memory size for a window ( in Mbytes ) .","text_tokens":["info","visual","options","show","paused",">","w","telemetry","off","developer","category","startup","be","id","all","emacs","run","zh","for","being","management","events","after","files","paths",",","append","acceleration","--","[","other","character","with","=","shows","enables","before","debugging","read","wait","allow","mbytes","line","extensions","list","d"," ","when","extension","by","print","version","1",".","log","trace","diagnostics","used","an","in","directory","root","more","size","collects","one","values",")","echo","each","(","argument","default","usage","install","world","is","versions","compare","features","add","dir","tw","`","output","implies","user","two","data","specifies","memory","code","host","are","level","'","enable","ids","instances","error","inspect","installs","prompts","v","specified","vs","during","already","/","uninstalls","opened","us","profiling","vim","force","exe","the","returning","which","disable","folder","n","max","|","open","another","use","can","program","profiler","studio","individually","start","brk","connection","43.1","hello","from","hardware","s","multiple","warn","]","on","to","-","api","set","vscode","vsix","check","uninstall","active","and","distinct","<","closed","critical","verbose","new","troubleshooting","status","diff","help","a","provided","updates","allowed","path","uri","window","that",":","e","g","file","goto","receive","cpu","...","opens","avoid","gpu","kept","h","prof","locale","tools","r","using","at","installed","port","process","filters","or","given","proposed","reuse","information","position","of","last","en","debug"],"title":"编辑器","title_tokens":["编辑","编辑器"]},{"location":"2020/0914/awosome-command-line-slide/#repl","text":"读取﹣求值﹣输出循环 ipython ipython.org/install.html import java.util.Scanner ; public class AiMain { public static void main ( String [] args ) { Scanner sc = new Scanner ( System . in ); String str ; while ( true ) { str = sc . next (); str = str . replace ( \"吗\" , \"\" ); str = str . replace ( \"?\" , \"!\" ); str = str . replace ( \"? \" , \"! \" ); System . out . println ( str ); } } }","text_tokens":["}","?",";","println","in","﹣","scanner","void","str","import",")","\"","(","循环","install","class","java","args",",","ipython","aimain","org","main","public","]","while","{","[","sc","next","html","=","system","new","replace","!","读取","string"," ","输出","/","求值","out","static","吗",".","util","true"],"title":"REPL","title_tokens":["repl"]},{"location":"2020/0914/awosome-command-line-slide/#dbcli","text":"pgcli - Postgres Client with Auto-completion and Syntax Highlighting mycli - MySQL/MariaDB/Percona Client with Auto-completion and Syntax Highlighting litecli - SQLite Client with Auto-completion and Syntax Highlighting mssql-cli - Microsoft SQL Server Client with Auto-completion and Syntax Highlighting athenacli - AWS Athena Client with Auto-completion and Syntax Highlighting vcli - VerticaDB client iredis - Client for Redis with AutoCompletion and Syntax Highlighting### dotfile dotfiles 就是软件的配置文件。一般用于软件设置，可以通过备份 dotfiles 的方式，同步软件设置 同步原理 主要是应用了ln软连接的功能，命名格式如下: ln [ 参数 ][ 目标文件或目录 ] dotfile example .bash_profile .bash_prompt .bashrc .curlrc .curlrc: Add back connect-timeout .exports .exports: Hide zsh warning on macOS .gdbinit .gitattributes .gitattributes: Disable normalizing line endings globally .gitconfig .gitignore .gvimrc .hgignore .hushlogin .inputrc .macos .osx .screenrc .tmux.conf .vimrc .wgetrc https://leohxj.gitbooks.io/a-programmer-prepares/content/software/mac/dotfiles.html https://github.com/mathiasbynens/dotfiles blog.spencerwoo.com/2020/07/how-i-manage-my-dotfiles/### 如何写一个命令行 选择开发语言（eg: Python\\Rust\\Go...） 选择一个库 加点颜色> optparse: docs.python.org/zh-cn/3.8/library/optparse.html from optparse import OptionParser ... parser = OptionParser () parser . add_option ( \"-f\" , \"--file\" , dest = \"filename\" , help = \"write report to FILE\" , metavar = \"FILE\" ) parser . add_option ( \"-q\" , \"--quiet\" , action = \"store_false\" , dest = \"verbose\" , default = True , help = \"don't print status messages to stdout\" ) ( options , args ) = parser . parse_args () # With these few lines of code, users of your script can now do the \"usual thing\" on the command-line, for example: # <yourscript> --file=outfile -q python-prompt-toolkit prompt-toolkit/python-prompt-toolkit class FuzzCommand { public static void main ( String [] args ) { // do some stuffs System . out . print ( args [ 0 ] ) } // javac FuzzCommand.java // java FuzzCommand Fuzz color def enable (): HEADER = ' \\033 [95m' OKBLUE = ' \\033 [94m' OKGREEN = ' \\033 [92m' WARNING = ' \\033 [93m' FAIL = ' \\033 [91m' ENDC = ' \\033 [0m' BOLD = \" \\033 [1m\" def disable (): HEADER = '' OKBLUE = '' OKGREEN = '' WARNING = '' FAIL = '' ENDC = '' def infog ( msg ): print ( OKGREEN + msg + ENDC ) def info ( msg ): print ( OKBLUE + msg + ENDC ) def warn ( msg ): print ( WARNING + msg + ENDC ) def err ( msg ): print ( FAIL + msg + ENDC ) enable ()","text_tokens":["如下","info","bash","就是","options","these",">","目录","your","dotfiles","okgreen","一般","void","globally","import","outfile","do","开发","bashrc","software","report","91m","zh","for","now","java","tmux","dest",",","microsoft","messages","io","org","docs","endings","同步","库","lines","[","athenacli","dotfile","f","percona","--","with","gitconfig","=","#","fuzzcommand","optionparser","，","bold","设置","macos","q","0","msg","mariadb","line","conf","vimrc"," ","normalizing","string","2020","option","print",".","主要","optparse","postgres","verticadb","connect","write","是","}","don","fuzz","0m","def","1m","how","stuffs","cn","usual",")","\"","hide","(","default","目标","class","err","parser","exports","add","eg","。","gvimrc","programmer","命令","92m","athena","连接","main","server","\\","infog","格式","pgcli","code","yourscript","方式","mycli","{","prompt","语言","my","'","配置","gitattributes","html","_","com","thing","enable","inputrc","redis","filename","93m","screenrc","fail","mac","/","命令行","t","toolkit","static","few","通过","github","completion","备份","aws","disable","the","blog","go","功能","metavar","okblue","warning","可以","hushlogin","prepares","can","命名","94m","的","library","i","false","args","client","syntax","mysql","了","07","95m","from","script","sql","public","]","on","-","用于","ln","to","quiet","action","warn","manage","文件","and","配置文件","back","选择","<","endc","gitbooks","颜色","profile","system","写","verbose","status","a","help","example","out","+","vcli","osx",":","spencerwoo","true","或","file","autocompletion","leohxj","加点","timeout","###","python","...","store","应用","zsh","hgignore","https","原理","color","content","mssql","（","some","users","033","highlighting","litecli","）","stdout","一个","软件","javac","rust","auto","header","curlrc","gitignore","wgetrc","command","parse","sqlite","如何","of","gdbinit","mathiasbynens","参数","cli","3.8","iredis","软"],"title":"dbcli","title_tokens":["dbcli"]},{"location":"2020/0914/awosome-command-line-slide/#_7","text":"选择一门开发语言 Shell Bash Powershell Python Go Rust $profile # git function invoke-git { [ alias ( 'g' )] param ( [ parameter ( mandatory = $true , position = 0 )] [string] $cmd , [ parameter ( mandatory = $false , valuefromremainingarguments = $true )] [string[]] $params ) switch ( $cmd ) { # add 'a' { git add $params } # branch 'b' { git branch $params } # checkout 'c' { git checkout $params } # clone repo 'cl' { git clone $params } # commit 'co' { git commit $params } # fetch 'f' { git fetch $params } # init 'i' { git init $params } # log 'l' { git log $params } # pretty log 'll' { git log - -graph - -pretty = format : '%cred%h%creset -%c(yellow)%d%creset %s %cgreen(%cr) %c(bold blue)<%an>%creset' - -abbrev-commit } # merge 'm' { git merge $params } # pull 'pl' { git pull $params } # push 'ps' { git push $params } # rebase 'r' { git rebase $params } # reset changes 'rs' { git reset $params } # status 's' { git status $params } # tag 't' { git tag $params } # catchall default { git $cmd $params } } }","text_tokens":["bash","cgreen","valuefromremainingarguments","co",">","$","repo","开发","checkout","cred%",",","commit","reset","[","f","invoke","c","#","=","bold","git","0","string","rebase"," ","log","branch","}","catchall","blue","an","l","alias","h%","shell",")","(","pull","default","function","add","b","creset","%","abbrev","pretty","{","graph","语言","'","changes","t","clone","go","cl","rs","params","merge","ll","i","init","false","ps","cr","s","]","-","cmd","powershell","选择","<","pl","param","profile","status","a",":","true","parameter","一门","switch","yellow","g","fetch","python","format","mandatory","r","-%","rust","tag","m","position","d%","push"],"title":"如何写一个脚本","title_tokens":["写","脚本","如何","一个"]},{"location":"2020/0914/awosome-command-line-slide/#reference","text":"https://kapeli.com/cheat_sheets/Bash_Shortcuts.docset/Contents/Resources/Documents/index fliptheweb/bash-shortcuts-cheat-sheet https://github.com/laixintao/myslides/blob/master/awesome-commandline/awesome-commandline.md https://revealjs.com https://www.dbcli.com/about/ https://www.zhihu.com/question/267095526 https://www.gnu.org/prep/standards/html_node/Option-Table.html#Option-Table https://wiki.archlinux.org/index.php/Dotfiles https://zh.wikipedia.org/wiki/%E7%AE%A1%E9%81%93_(Unix)","text_tokens":["awesome","bash","documents","myslides","gnu","dotfiles","prep",")","sheet","https","question","wiki","(","about","ae%","267095526","sheets","zh","fliptheweb","commandline","93","kapeli","%","master","table","php","81%","org","zhihu","www","shortcuts","archlinux","-","e7%","cheat","e9%","html","revealjs","_","index","com","node","#","resources","md","dbcli","docset","contents","unix","standards"," ","/","laixintao","blob","option","a1%",".","wikipedia","github",":"],"title":"Reference","title_tokens":["reference"]},{"location":"2020/1102/python-enum/","text":"聊一聊 Python enum 的使用 ¶ Why ¶ 先看一下日常代码中用常量处理逻辑的代码写法 # Example 1 if index == 10 : dosomething () # Example 2 MAX_INDEX = 10 if index = MAX_INDEX : dosomething () # Example from enum import IntEnum class Index ( IntEnum ): MAX = 10 MIN = 0 if index = Index . MAX : dosomething () 如果你对你的 code 有一定的要求, 有时候你会用枚举类来替代一些数字字面量 Python Enum ¶ enum 是 Python 自 3.4 版本引入的内置模块 创建一个 Enum from enum import Enum class Color(Enum): RED = 1 GREEN = 2 BLUE = 3 使用 >>> Color . RED < Color . RED > >>> Color . RED . name Color >>> Color . RED . value 1 确保唯一的枚举值 使用装饰器 @enum .uniqu from enum import Enum , unique @unique class Mistake ( Enum ): ONE = 1 TWO = 2 THREE = 3 FOUR = 3 使用自动设置的值 from enum import Enum , auto class Color ( Enum ): RED = auto () BLUE = auto () GREEN = auto () list ( Color ) 使用 _generate_next_value_() 重载 auto() 赋值 class AutoName ( Enum ): def _generate_next_value_ ( name , start , count , last_values ): return name class Ordinal ( AutoName ): NORTH = auto () SOUTH = auto () EAST = auto () WEST = auto () list ( Ordinal ) References ¶ https://github.com/piglei/one-python-craftsman/blob/master/zh_CN/3-tips-on-numbers-and-strings.md https://docs.python.org/zh-cn/3/library/enum.html","text_tokens":["unique","重载",">","处理","确保","piglei","import","一下","count","zh","引入",",","模块","mistake","master","three","org","ordinal","docs","enum","strings","autoname","替代","next","¶","#","=","类来","craftsman","设置","0","量","md","list","why"," ","时候","1",".","是","blue","def","一些","装饰","intenum","cn","版本","one","values",")","(","class","要求","10","如果","枚举","generate","器","two","code","值","html","_","com","日常","name","west","使用","逻辑","/","github","你会用","自动","写法","if","east","max","的","library","start","唯一","from","red","你","会用","dosomething","on","-","and","green","<","中","代码","value","3","先看","north","example","创建","blob",":","用","return","python","有时","数字","一定","自","赋值","https","3.4","对","color","内置","uniqu","min","聊一聊","@","south","常量","references","four","一个","有时候","tips","auto","index","字面","有","last","numbers","2"],"title":"聊一聊 Python enum 的使用","title_tokens":["的","使用","enum"," ","python","聊一聊"]},{"location":"2020/1102/python-enum/#python-enum","text":"","text_tokens":[],"title":"聊一聊 Python enum 的使用","title_tokens":["的","使用","enum"," ","python","聊一聊"]},{"location":"2020/1102/python-enum/#why","text":"先看一下日常代码中用常量处理逻辑的代码写法 # Example 1 if index == 10 : dosomething () # Example 2 MAX_INDEX = 10 if index = MAX_INDEX : dosomething () # Example from enum import IntEnum class Index ( IntEnum ): MAX = 10 MIN = 0 if index = Index . MAX : dosomething () 如果你对你的 code 有一定的要求, 有时候你会用枚举类来替代一些数字字面量","text_tokens":["你会用","用","写法","if","处理","一些","max","intenum","有时","import","数字",")","一定","一下","(","的","class","对","要求","min","10","如果",",","枚举","from","你","会用","常量","dosomething","enum","code","有时候","替代","#","=","中","index","代码","日常","_","类来","字面","先看","0","量","有","example"," ","时候","逻辑","2","1",".",":"],"title":"Why","title_tokens":["why"]},{"location":"2020/1102/python-enum/#python-enum_1","text":"enum 是 Python 自 3.4 版本引入的内置模块 创建一个 Enum from enum import Enum class Color(Enum): RED = 1 GREEN = 2 BLUE = 3 使用 >>> Color . RED < Color . RED > >>> Color . RED . name Color >>> Color . RED . value 1 确保唯一的枚举值 使用装饰器 @enum .uniqu from enum import Enum , unique @unique class Mistake ( Enum ): ONE = 1 TWO = 2 THREE = 3 FOUR = 3 使用自动设置的值 from enum import Enum , auto class Color ( Enum ): RED = auto () BLUE = auto () GREEN = auto () list ( Color ) 使用 _generate_next_value_() 重载 auto() 赋值 class AutoName ( Enum ): def _generate_next_value_ ( name , start , count , last_values ): return name class Ordinal ( AutoName ): NORTH = auto () SOUTH = auto () EAST = auto () WEST = auto () list ( Ordinal )","text_tokens":["是","blue","unique","自动","重载","def","return",">","east","装饰","确保","python","版本","import","one",")","自","赋值","values","(","3.4","的","class","count","color","内置","start","uniqu","唯一","引入","模块","枚举","@",",","from","mistake","red","three","generate","器","south","two","four","ordinal","enum","一个","autoname","green","next","<","值","auto","=","3","value","_","name","设置","north","west","使用","list","last"," ","创建","2","1",".",":"],"title":"Python Enum","title_tokens":["enum","python"," "]},{"location":"2020/1102/python-enum/#references","text":"https://github.com/piglei/one-python-craftsman/blob/master/zh_CN/3-tips-on-numbers-and-strings.md https://docs.python.org/zh-cn/3/library/enum.html","text_tokens":["python","cn","piglei","one","https","zh","library","master","org","on","-","docs","enum","strings","tips","and","html","3","_","craftsman","com","md","numbers"," ","/","blob",".","github",":"],"title":"References","title_tokens":["references"]},{"location":"2020/1104/sap-mdg-api-example/","text":"SAP MDG API examples ¶ Document PDF: www.sdn.sap.com/irj/scn/index?rid=/library/uuid/70f3f3d3-86e5-3010-909d-9162368bfbec&overridelayout=true 1. Quick start ¶ 1.1 Code Example – Create Airline (with governance API) ¶ *&---------------------------------------------------------------------* *& Report zcreatecarr_sf *&---------------------------------------------------------------------* *& This example creates a new change request. Along with the change *& request, a new airline (carrier) is created. *& *& The exceptions raised by the governance API contain the error *& messages and some other attributes. Therefore, it is possible to react *& to the errors raised by the governance API. *&---------------------------------------------------------------------* REPORT zcreatecarr_sf . DATA : lo_gov_api TYPE REF TO if_usmd_gov_api , lv_crequest_id TYPE usmd_crequest , \"Change Request ID lr_carr_key_str TYPE REF TO data , \"Entity Carrier - key structure lr_carr_key_tab TYPE REF TO data , \"Entity Carrier - key table lr_carr_data_str TYPE REF TO data , \"Entity Carrier - data structure lr_carr_data_tab TYPE REF TO data , \"Entity Carrier - data table ls_entity TYPE usmd_gov_api_s_ent_tabl , lt_entity TYPE usmd_gov_api_ts_ent_tabl , lt_messages TYPE usmd_t_message . FIELD-SYMBOLS : <ls_carr_key> TYPE any , <lt_carr_key> TYPE ANY TABLE , <ls_carr_data> TYPE any , <lt_carr_data> TYPE ANY TABLE , <value> TYPE any . \"1st: Create an instance of the governance API TRY . lo_gov_api = cl_usmd_gov_api => get_instance ( iv_model_name = 'SF' ). CATCH cx_usmd_gov_api . EXIT . ENDTRY . \"2nd: Create all the data references needed to maintain the carrier entity \"Create a data reference of the key structure / table of entity CARR (Carrier) lo_gov_api -> create_data_reference ( EXPORTING iv_entity_name = 'CARR' iv_struct = lo_gov_api -> gc_struct_key IMPORTING er_structure = lr_carr_key_str er_table = lr_carr_key_tab ). \"Create a data reference of the key and attribute structure / table of \"entity CARR (Carrier) lo_gov_api -> create_data_reference ( EXPORTING iv_entity_name = 'CARR' iv_struct = lo_gov_api -> gc_struct_key_attr IMPORTING er_structure = lr_carr_data_str er_table = lr_carr_data_tab ). \"Assign the created data references for carrier key and carrier data \"to field symbols ASSIGN lr_carr_key_str->* TO <ls_carr_key> . ASSIGN lr_carr_key_tab->* TO <lt_carr_key> . ASSIGN lr_carr_data_str->* TO <ls_carr_data> . ASSIGN lr_carr_data_tab->* TO <lt_carr_data> . \"3rd: Fill the key and data structure with values to create a new carrier \"The entity CARR only has key field CARR. The new carrier ID should be 'YZ' ASSIGN COMPONENT 'CARR' OF STRUCTURE <ls_carr_key> TO <value> . IF sy - subrc = 0 . <value> = 'YZ' . INSERT <ls_carr_key> INTO TABLE <lt_carr_key> . ELSE . EXIT . \"Tough luck – unfortunately, this field name is not part of the key structure ENDIF . \"4th: Create a new change request using change request type and a \"description (required) TRY . lv_crequest_id = lo_gov_api -> create_crequest ( iv_crequest_type = 'SFC01' iv_description = 'Create new Carrier YZ' ). CATCH cx_usmd_gov_api . \"Something went wrong while creating the change request (e.g. model blocked \"or change request type unknown). EXIT . ENDTRY . \"5th: Before making changes to an object, the object needs to be enqueued \"even if this is a creation scenario TRY . lo_gov_api -> enqueue_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'CARR' it_data = <lt_carr_key> ). CATCH cx_usmd_gov_api_entity_lock cx_usmd_gov_api . EXIT . \"Tough luck – \"something went wrong while enqueueing the entity (it could be a \"technical reason, or maybe the carrier is already interlocked?! ENDTRY . \"6th: Provide some entity attributes (complete data structure) MOVE-CORRESPONDING <ls_carr_key> TO <ls_carr_data> . ASSIGN COMPONENT 'CARRNAME' OF STRUCTURE <ls_carr_data> TO <value> . <value> = 'Fantasy Flight Airlines' . ASSIGN COMPONENT 'CURRCODE' OF STRUCTURE <ls_carr_data> TO <value> . <value> = 'USD' . ASSIGN COMPONENT 'URL' OF STRUCTURE <ls_carr_data> TO <value> . <value> = 'http://www.fantasyflight.com' . INSERT <ls_carr_data> INTO TABLE <lt_carr_data> . \"7th: Write the entity data to the change request TRY . lo_gov_api -> write_entity ( EXPORTING iv_crequest_id = lv_crequest_i iv_entity_name = 'CARR' it_data = <lt_carr_data> ). CATCH cx_usmd_gov_api_entity_write . EXIT . \"Tough luck - might be that you have no authorization, or the entity is \"not enqueued or cannot be added to the object list of the change \"request ENDTRY . \"8th: optionally, the entity data is read again... just to make sure everything \"went right. TRY . lo_gov_api -> read_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'CARR' it_key = <lt_carr_key> IMPORTING et_data = <lt_carr_data> ). CATCH cx_usmd_gov_api_core_error cx_usmd_gov_api . EXIT . \"Adequate Exception handling ENDTRY . \"9th: The complete change request should be checked before it is saved TRY . lo_gov_api -> check_crequest_data ( iv_crequest_id = lv_crequest_id ). \"Collect the entities to be checked ls_entity - entity = 'CARR' . ls_entity - tabl = lr_carr_key_tab . INSERT ls_entity INTO TABLE lt_entity . \"check the entity lo_gov_api -> check_complete_data ( EXPORTING iv_crequest_id = lv_crequest_id it_key = lt_entity ). CATCH cx_usmd_gov_api_core_error cx_usmd_gov_api . \"Possibility to handle the erroneous data or go on. ENDTRY . \"10th: Save the change request (and the entity data of course) TRY . lo_gov_api -> save ( ). \"Save is done in draft mode by default so it is possible to \"save the change request even if change request data or \"entity data is not consistent. CATCH cx_usmd_gov_api_core_error . EXIT . \"Adequate Exception handling ENDTRY . \"11th: At the end, it is necessary to clean the house TRY . lo_gov_api -> dequeue_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'CARR' it_data = <lt_carr_key> ). lo_gov_api -> dequeue_crequest ( EXPORTING iv_crequest_id = lv_crequest_id ). CATCH cx_usmd_gov_api . \"Not a tragedy - maybe the workflow could not be processed properly after \"it was started ENDTRY . COMMIT WORK AND WAIT . \"12th: If everything is fine, the workflow can be started for \"the change request (this is like a 'submit') TRY . lo_gov_api -> start_workflow ( iv_crequest_id = lv_crequest_id ). CATCH cx_usmd_gov_api_core_error . \"Adequate Exception handling ENDTRY . \"Interested in the errors occured? lt_messages = lo_gov_api -> get_messages ( ). 1.2 Code Example – Change Flight Connection (with governance API) ¶ *&---------------------------------------------------------------------* *& Report ZCHANGEPFLI_SF *&---------------------------------------------------------------------* *& This example creates a new change request. Along with the change *& request, an existing flight connection is changed. Additionally, a *& dependent entity of type flight schedule is changed/created. *& *& The exceptions raised by the governance API contain the error *& messages and some other attributes. Therefore, it is possible to react *& to the errors raised by the governance API. *&---------------------------------------------------------------------* REPORT zchangepfli_sf . DATA : lo_gov_api TYPE REF TO if_usmd_gov_api , lv_crequest_id TYPE usmd_crequest , \"Change Request ID lr_pfli_key_str TYPE REF TO data , \"Entity Flight Connection - key structure lr_pfli_key_tab TYPE REF TO data , \"Entity Flight Connection - key table lr_pfli_data_str TYPE REF TO data , \"Entity Flight Connection - data structure lr_pfli_data_tab TYPE REF TO data , \"Entity Flight Connection - data table lr_flight_key_str TYPE REF TO data , \"Entity Flight - key structure lr_flight_key_tab TYPE REF TO data , \"Entity Flight - key table lr_flight_data_str TYPE REF TO data , \"Entity Flight - data structure lr_flight_data_tab TYPE REF TO data , \"Entity Flight - data table ls_entity TYPE usmd_gov_api_s_ent_tabl , lt_entity TYPE usmd_gov_api_ts_ent_tabl , lt_messages TYPE usmd_t_message . FIELD-SYMBOLS : <ls_pfli_key> TYPE any , <lt_pfli_key> TYPE INDEX TABLE , <ls_pfli_data> TYPE any , <lt_pfli_data> TYPE INDEX TABLE , <ls_flight_key> TYPE any , <lt_flight_key> TYPE INDEX TABLE , <ls_flight_data> TYPE any , <lt_flight_data> TYPE INDEX TABLE , <value> TYPE any . \"1: Create an instance of the governance API TRY . lo_gov_api = cl_usmd_gov_api => get_instance ( iv_model_name = 'SF' ). CATCH cx_usmd_gov_api . EXIT . ENDTRY . \"2: Create the data references needed to maintain the flight connection entity \"Create a data reference of the key structure/table of entity PFLI lo_gov_api -> create_data_reference ( EXPORTING iv_entity_name = 'PFLI' iv_struct = lo_gov_api -> gc_struct_key IMPORTING er_structure = lr_pfli_key_str er_table = lr_pfli_key_tab ). lo_gov_api -> create_data_reference ( EXPORTING iv_entity_name = 'PFLI' iv_struct = lo_gov_api -> gc_struct_key_attr IMPORTING er_structure = lr_pfli_data_str er_table = lr_pfli_data_tab ). \"Assign the created data references for the flight connection key to the field symbols ASSIGN lr_pfli_key_str->* TO <ls_pfli_key> . ASSIGN lr_pfli_key_tab->* TO <lt_pfli_key> . ASSIGN COMPONENT 'CARR' OF STRUCTURE <ls_pfli_key> TO <value> . <value> = 'LH' . ASSIGN COMPONENT 'PFLI' OF STRUCTURE <ls_pfli_key> TO <value> . <value> = '0401' . INSERT <ls_pfli_key> INTO TABLE <lt_pfli_key> . \"Assign the created data references for the flight connection data to the field symbols ASSIGN lr_pfli_data_str->* TO <ls_pfli_data> . ASSIGN lr_pfli_data_tab->* TO <lt_pfli_data> . \"3: Create a new change request using change request type and a description ( required ) TRY . lv_crequest_id = lo_gov_api -> create_crequest ( iv_crequest_type = 'SFP02' iv_description = 'Change Flight Connection LH 400' ). CATCH cx_usmd_gov_api . \"Something went wrong while creating the change request (e.g. data model blocked or change request type unknown). EXIT . ENDTRY . \"4: Before making changes to an object, the object needs to be enqueued. TRY . lo_gov_api -> enqueue_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'PFLI' it_data = <lt_pfli_key> ). CATCH cx_usmd_gov_api_entity_lock cx_usmd_gov_api . EXIT . ENDTRY . \"5: Read the flight connection data in order to do some changes TRY . lo_gov_api -> read_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'PFLI' it_key = <lt_pfli_key> IMPORTING et_data = <lt_pfli_data> ). CATCH cx_usmd_gov_api_core_error cx_usmd_gov_api . EXIT . ENDTRY . READ TABLE <lt_pfli_data> INDEX 1 INTO <ls_pfli_data> . CLEAR <lt_pfli_data> . ASSIGN COMPONENT 'ARRTIME' OF STRUCTURE <ls_pfli_data> TO <value> . <value> = '075500' . ASSIGN COMPONENT 'DEPTIME' OF STRUCTURE <ls_pfli_data> TO <value> . <value> = '184000' . INSERT <ls_pfli_data> INTO TABLE <lt_pfli_data> . \"6: Write the changes for the flight connection TRY . lo_gov_api -> write_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'PFLI' it_data = <lt_pfli_data> ). CATCH cx_usmd_gov_api_entity_write . EXIT . \"Do better next time! ENDTRY . \"7: Create all the data references needed to maintain the flight entity \"Create a data reference of the key structure/table of entity FLIGHT (Flight) lo_gov_api -> create_data_reference ( EXPORTING iv_entity_name = 'FLIGHT' iv_struct = lo_gov_api -> gc_struct_key IMPORTING er_structure = lr_flight_key_str er_table = lr_flight_key_tab ). lo_gov_api -> create_data_reference ( EXPORTING iv_entity_name = 'FLIGHT' iv_struct = lo_gov_api -> gc_struct_key_attr IMPORTING er_structure = lr_flight_data_str er_table = lr_flight_data_tab ). \"Assign the created data references for flight connection key to the field symbols ASSIGN lr_flight_key_str->* TO <ls_flight_key> . ASSIGN lr_flight_key_tab->* TO <lt_flight_key> . MOVE-CORRESPONDING <ls_pfli_key> TO <ls_flight_key> . INSERT <ls_flight_key> INTO TABLE <lt_flight_key> . ASSIGN lr_flight_data_str->* TO <ls_flight_data> . ASSIGN lr_flight_data_tab->* TO <lt_flight_data> . \"8: Read some flight data in order to do some changes TRY . lo_gov_api -> read_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'FLIGHT' it_key = <lt_flight_key> IMPORTING et_data = <lt_flight_data> ). CATCH cx_usmd_gov_api_core_error cx_usmd_gov_api . EXIT . ENDTRY . READ TABLE <lt_flight_data> INDEX 1 INTO <ls_flight_data> . CLEAR <lt_flight_data> . IF sy - subrc <> 0 . MOVE-CORRESPONDING <ls_flight_key> TO <ls_flight_data> . ASSIGN COMPONENT 'FLDATE' OF STRUCTURE <ls_flight_data> TO <value> . <value> = '31122013' . ENDIF . ASSIGN COMPONENT 'SEATSOCC' OF STRUCTURE <ls_flight_data> TO <value> . <value> = '209' . INSERT <ls_flight_data> INTO TABLE <lt_flight_data> . \"9: Write the changes for the flight TRY . lo_gov_api -> write_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'FLIGHT' it_data = <lt_flight_data> ). CATCH cx_usmd_gov_api_entity_write . EXIT . \"Do better next time! ENDTRY . \"10: The complete change request should be checked before it is saved TRY . lo_gov_api -> check_crequest_data ( iv_crequest_id = lv_crequest_id ). \"Collect the entities to be checked ls_entity - entity = 'PFLI' . ls_entity - tabl = lr_pfli_key_tab . INSERT ls_entity INTO TABLE lt_entity . \"Check the entity lo_gov_api -> check_complete_data ( EXPORTING iv_crequest_id = lv_crequest_id it_key = lt_entity ). CATCH cx_usmd_gov_api_core_error cx_usmd_gov_api . \"Handle the erroneous data or go on. ENDTRY . \"11: Save the change request (and the entity data, of course) TRY . lo_gov_api -> save ( ). \"Save is done in draft mode by default so it is possible to \"save the change request even if the change request data or \"the entity data is not consistent. CATCH cx_usmd_gov_api_core_error . EXIT . \"Adequate exception handling ENDTRY . \"12: At the end, it is necessary to clean the house TRY . lo_gov_api -> dequeue_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'PFLI' it_data = <lt_pfli_key> ). lo_gov_api -> dequeue_crequest ( EXPORTING iv_crequest_id = lv_crequest_id ). CATCH cx_usmd_gov_api . \"Adequate exception handling ENDTRY . COMMIT WORK AND WAIT . \"13: If everything is correct, the workflow can be started for the change request (this is like a 'submit') TRY . lo_gov_api -> start_workflow ( iv_crequest_id = lv_crequest_id ). CATCH cx_usmd_gov_api_core_error . \"Adequate exception handling ENDTRY . \"Interested in the messages occurred? lt_messages = lo_gov_api -> get_messages ( ). 1.3 What is the different between creating and changing? ¶ Notice: read_entity 创建的时候 read_entity 是可选的校验操作 修改的时候 read_entity 是需要从主数据中获取数据 2. MDG advanced usage ¶ 2.1 CL_USMD_GOV_API ¶ 2.1.0 IF_USMD_GOV_API_TRANS~SAVE Public ¶ 2.1.1 IF_USMD_GOV_API_TRANS~REFRESH_BUFFERS Public ¶ 2.1.2 IF_USMD_GOV_API_SERVICES~CHECK_USAGE_OF_ENTITY Public ¶ 2.1.3 IF_USMD_GOV_API_SERVICES~GET_ENTITY_USAGE Public ¶ 2.1.4 IF_USMD_GOV_API_SERVICES~DETERMINE_STEP_TYPE Public ¶ 2.1.5 IF_USMD_GOV_API_SERVICES~GET_ALLOWED_CHANGES Public ¶ 2.1.6 IF_USMD_GOV_API_SERVICES~GET_CREQUEST_TYPES_FOR_PROCESS Public ¶ 2.1.7 IF_USMD_GOV_API_SERVICES~GET_MAIN_ENTITIES_FROM_ENTITY Public ¶ 2.1.8 IF_USMD_GOV_API_SERVICES~GET_ENTITY_KEY_FIELDS Public ¶ 2.1.9 IF_USMD_GOV_API_SERVICES~GET_SUT1ENTITY_FROM_ENTITY Public ¶ 2.1.10 IF_USMD_GOV_API_SERVICES~GET_WORKITEMS_FOR_CREQUEST Public ¶ 2.1.11 IF_USMD_GOV_API_SERVICES~HAS_ENTITY_TYPE_EDITION Public ¶ 2.1.12 IF_USMD_GOV_API_SERVICES~IS_EDITION_CHANGEABLE Public ¶ 2.1.13 IF_USMD_GOV_API_SERVICES~IS_ENTITY_IN_CREQUEST Public ¶ 2.1.14 IF_USMD_GOV_API_SERVICES~RETRIEVE_BLOCKING_CR_BY_EN_KEY Public ¶ 2.1.15 IF_USMD_GOV_API_SERVICES~GET_FIELDNAME_OF_ENTITY Public ¶ 2.1.16 IF_USMD_GOV_API_SERVICES~RETRIEVE_CREQUEST_BY_ENTITY Public ¶ 2.1.17 IF_USMD_GOV_API_ENTITY~CHECK_ENTITY_AUTHORIZATION Public ¶ 2.1.18 IF_USMD_GOV_API_ENTITY~CHECK_ENTITY_DATA Public ¶ 2.1.19 IF_USMD_GOV_API_ENTITY~CHECK_ENTITY_LOCK_SINGLE Public ¶ 2.1.20 IF_USMD_GOV_API_ENTITY~CONFIRM_ENTITY_DATA Public ¶ 2.1.21 IF_USMD_GOV_API_ENTITY~COPY_ENTITY Public ¶ 2.1.22 IF_USMD_GOV_API_ENTITY~CREATE_DATA_REFERENCE Public ¶ 2.1.23 IF_USMD_GOV_API_ENTITY~CREATE_ENTITY_TMP_KEY Public ¶ 2.1.24 IF_USMD_GOV_API_ENTITY~DELETE_ENTITY Public ¶ 2.1.25 IF_USMD_GOV_API_ENTITY~DEQUEUE_ENTITY Public ¶ 2.1.26 IF_USMD_GOV_API_ENTITY~DEQUEUE_ENTITY_ALL Public ¶ 2.1.27 IF_USMD_GOV_API_ENTITY~ENQUEUE_ENTITY Public ¶ 2.1.28 IF_USMD_GOV_API_ENTITY~EXCHANGE_ENTITY_KEY Public ¶ 2.1.29 IF_USMD_GOV_API_ENTITY~GET_DERIVE_ENTITY_RESULT Public ¶ 2.1.30 IF_USMD_GOV_API_ENTITY~GET_ENTITY_FIELD_PROPERTIES Public ¶ 2.1.31 IF_USMD_GOV_API_ENTITY~IS_ENTITY_DELETED Public ¶ 2.1.32 IF_USMD_GOV_API_ENTITY~IS_NEW_ENTITY Public ¶ 2.1.33 IF_USMD_GOV_API_ENTITY~IS_TMP_KEY Public ¶ 2.1.34 IF_USMD_GOV_API_ENTITY~QUERY_ENTITY Public ¶ 2.1.35 IF_USMD_GOV_API_ENTITY~READ_ENTITY Public ¶ 2.1.36 IF_USMD_GOV_API_ENTITY~READ_OBSOLETE_ENTITY Public ¶ 2.1.37 IF_USMD_GOV_API_ENTITY~READ_SAVED_ENTITY Public ¶ 2.1.38 IF_USMD_GOV_API_ENTITY~RETRIEVE_ENTITY Public ¶ 2.1.39 IF_USMD_GOV_API_ENTITY~RETRIEVE_OBSOLETE_ENTITY Public ¶ 2.1.40 IF_USMD_GOV_API_ENTITY~WRITE_ENTITY Public ¶ IV_CREQUEST_ID Importing requeried USMD_CREQUEST Change Request IV_ENTITY_NAME Importing requeried USMD_ENTITY Entity Type IT_DATA Importing requeried ANY TABLE Entity Keys and Attributes IT_ATTRIBUTE Importing unrequeried USMD_TS_FIELDNAME List of Field Names with Changed Data 可以使用可选参数 IT_ATTRIBUTE 更新某一列数据 DATA lo_gov_api TYPE REF TO if_usmd_gov_api . DATA lt_attributes TYPE usmd_ts_fieldname . APPEND '{{fieldname_a}}' TO lt_attributes . APPEND '{{fieldname_b}}' TO lt_attributes . APPEND VALUE # ( key = '{{key}}' {{ fieldname_a } } = 'a' { { fieldname_b }} = 'b' ) TO lt_data . lo_gov_api -> write_entity ( EXPORTING iv_crequest_id = lv_crequest_id \" XXXX iv_entity_name = lc_entity \" EMPL it_data = <lfs_datas> \" lt_data it_attribute = lt_attributes 2.1.41 IF_USMD_GOV_API_CR_DATA~ADD_ATTACHMENT Public ¶ 2.1.42 IF_USMD_GOV_API_CR_DATA~ADD_TARGET_SYSTEMS Public ¶ 2.1.43 IF_USMD_GOV_API_CR_DATA~CHANGE_ATTACHMENT Public ¶ 2.1.44 IF_USMD_GOV_API_CR_DATA~CHANGE_NOTE Public ¶ 2.1.45 IF_USMD_GOV_API_CR_DATA~CHECK_CREQUEST_AUTHORIZATION Public ¶ 2.1.46 IF_USMD_GOV_API_CR_DATA~CHECK_CREQUEST_DATA Public ¶ 2.1.47 IF_USMD_GOV_API_CR_DATA~CREATE_CREQUEST Public ¶ 2.1.48 IF_USMD_GOV_API_CR_DATA~DELETE_ATTACHMENT Public ¶ 2.1.49 IF_USMD_GOV_API_CR_DATA~DELETE_NOTE Public ¶ 2.1.50 IF_USMD_GOV_API_CR_DATA~DELETE_TARGET_SYSTEMS Public ¶ 2.1.51 IF_USMD_GOV_API_CR_DATA~DEQUEUE_CREQUEST Public ¶ 2.1.52 IF_USMD_GOV_API_CR_DATA~ENQUEUE_CREQUEST Public ¶ 2.1.53 IF_USMD_GOV_API_CR_DATA~GET_ATTACHMENT_CONTENT Public ¶ 2.1.54 IF_USMD_GOV_API_CR_DATA~GET_ATTACHMENT_LIST Public ¶ 2.1.55 IF_USMD_GOV_API_CR_DATA~GET_CREQUEST_ATTRIBUTES Public ¶ 2.1.56 IF_USMD_GOV_API_CR_DATA~GET_CREQUEST_DATA Public ¶ 2.1.57 IF_USMD_GOV_API_CR_DATA~GET_CREQUEST_DRAFTS Public ¶ 2.1.58 IF_USMD_GOV_API_CR_DATA~GET_CREQUEST_STATUS Public ¶ 2.1.59 IF_USMD_GOV_API_CR_DATA~GET_NOTES Public ¶ 2.1.60 IF_USMD_GOV_API_CR_DATA~GET_HRY_OBJECT_LIST Public ¶ 2.1.61 IF_USMD_GOV_API_CR_DATA~GET_OBJECT_LIST Public ¶ 2.1.62 IF_USMD_GOV_API_CR_DATA~GET_TARGET_SYSTEMS Public ¶ 2.1.63 IF_USMD_GOV_API_CR_DATA~SET_CREQUEST_ATTRIBUTES Public ¶ 2.1.64 IF_USMD_GOV_API_CR_DATA~SET_CREQUEST_EDITION Public ¶ 2.1.65 IF_USMD_GOV_API_CR_DATA~SET_CREQUEST_STATUS Public ¶ 2.1.66 IF_USMD_GOV_API_CR_DATA~WRITE_NOTE Public ¶ 2.1.67 IF_USMD_GOV_API~GET_MESSAGES Public ¶ 2.1.68 IF_USMD_GOV_API~REMOVE_MESSAGES_FROM_MSG_CONT Public ¶ 2.1.69 IF_USMD_GOV_API~SET_MESSAGE_CONTAINER Public ¶ 2.1.70 IF_USMD_GOV_API_PROCESS~CHECK_COMPLETE_DATA Public ¶ 2.1.71 IF_USMD_GOV_API_PROCESS~DELETE_ENTITY_FROM_OBJECT_LIST Public ¶ 2.1.72 IF_USMD_GOV_API_PROCESS~FINALIZE_PROCESS_STEP Public ¶ 2.1.73 IF_USMD_GOV_API_PROCESS~GET_CR_VALIDATION_RESULT Public ¶ 2.1.74 IF_USMD_GOV_API_PROCESS~START_WORKFLOW Public ¶ 2.1.75 IF_USMD_GOV_API_PROCESS~VALIDATE_CREQUEST Public ¶ 2.1.76 IF_USMD_GOV_API_CR_ACTION~DELETE_DRAFT Public ¶ 2.1.77 IF_USMD_GOV_API_HRY~CHECK_ASSIGNMENT_AUTHORIZATION Public ¶ 2.1.78 IF_USMD_GOV_API_HRY~CHECK_HRY_AUTHORIZATION Public ¶ 2.1.79 IF_USMD_GOV_API_HRY~DELETE_ASSIGNMENT Public ¶ 2.1.80 IF_USMD_GOV_API_HRY~DEQUEUE_ASSIGNMENT Public ¶ 2.1.81 IF_USMD_GOV_API_HRY~ENQUEUE_ASSIGNMENT Public ¶ 2.1.82 IF_USMD_GOV_API_HRY~EXPAND_PLACEHOLDER Public ¶ 2.1.83 IF_USMD_GOV_API_HRY~FIND_POSITION Public ¶ 2.1.84 IF_USMD_GOV_API_HRY~GET_COMPLETE_HRY Public ¶ 2.1.85 IF_USMD_GOV_API_HRY~GET_DIRECT_CHILDREN Public ¶ 2.1.86 IF_USMD_GOV_API_HRY~READ_ASSIGNMENT Public ¶ 2.1.87 IF_USMD_GOV_API_HRY~RETRIEVE_CREQUEST_BY_ASSGNMNT Public ¶ 2.1.88 IF_USMD_GOV_API_HRY~WRITE_ASSIGNMENT Public ¶ 2.1.89 CHECK_INSTANCE_EXISTS Public ¶ 检查实例是否声明 实例声明的方式为 GET_INSTANCE 2.1.90 GET_INSTANCE Public ¶ lo_gov_api = cl_usmd_gov_api=>get_instance( iv_model_name = 'SF' ). 2.1.91 ADD_ENTITY_TO_CHANGE_LIST Protected ¶ 2.1.92 ADD_ENTITY_TO_OBJECT_LIST Protected ¶ 2.1.93 ADD_NODE_HRYASGN_TO_OBJ_LIST Protected ¶ 2.1.94 ADD_NODE_TO_HRY_OBJECT_LIST Protected ¶ 2.1.95 BUILD_REF_DATA_FOR_ATTACHMENT Protected ¶ 2.1.96 CHECK_ASSIGNMENT_LOCK Protected ¶ 2.1.97 CHECK_ENTITY_MAINTAINABLE Protected ¶ 2.1.98 CHECK_N_ADD_INACT_ASSGNMNT_BUF Protected ¶ 2.1.99 CHECK_N_ADD_INACT_DATALOAD_BUF Protected ¶ 2.1.100 CHECK_PREREQUISITES_FOR_CHANGE Protected ¶ 2.1.101 CONSTRUCTOR Protected ¶ 2.1.102 GET_EDITION_OF_CREQUEST Protected ¶ 2.1.103 GET_FIELDNAME_FOR_ENTITY Protected ¶ 2.1.104 GET_PROC_PERMISSION_FOR_STATUS Protected ¶ 2.1.105 GET_TABLE_KEY Protected ¶ 2.1.106 WF_SERVICE_GET_WITEMS Protected ¶ 2.1.107 ADD_ASSIGNMENT_LOCK Private ¶ 2.1.108 ADD_CORE_MESSAGES_TO_MESS_CONT Private ¶ 2.1.109 ADD_GOV_MESSAGE_TO_MESS_CONT Private ¶ 2.1.110 ADD_HRY_NAME_TO_HRY_OBJ_LIST Private ¶ 2.1.111 ADD_MSG_TO_MSGCONT_AND_TABLES Private ¶ 2.1.112 ADD_PARENT_TO_HRY_OBJECT_LIST Private ¶ 2.1.113 ARE_OBJECT_CHANGES_ALLOWED Private ¶ 2.1.114 BUILD_ASSIGNMENT_BUFF_STRUC Private ¶ 2.1.115 BUILD_ASSIGNMENT_LOCK_STRUC Private ¶ 2.1.116 CHECK_CREQUEST_TYPE Private ¶ 2.1.117 CHECK_CR_LOCK Private ¶ 2.1.118 CHECK_DERIVED_DATA Private ¶ 2.1.119 CHECK_DISPLAY_AUTH_FOR_NODE Private ¶ 2.1.120 CHECK_EDITION Private ¶ 2.1.121 CHECK_ENTITY_ACTIVE_IN_BUFFER Private ¶ 2.1.122 CHECK_FOR_DATA_CONFIRMATION Private ¶ 2.1.123 CHECK_FOR_REMOVE_OBJECT Private ¶ 2.1.124 CHECK_N_BUILD_SEL Private ¶ 2.1.125 CLEAR_AUTH_BUFFER Private ¶ 2.1.126 CLEAR_ENTITY_BUFFER Private ¶ 2.1.127 CLEAR_HRY_OBJECT_LIST_BUFFER Private ¶ 2.1.128 CLEAR_OBJECT_LIST_BUFFER Private ¶ 2.1.129 COMPARE_EDITIONS Private ¶ 2.1.130 CONFIRM_ASSIGNMENT_DATA Private ¶ 2.1.131 CONTAINS_ERROR Private ¶ 2.1.132 CONVERT_ENTITY_TYPE_TO_TEXT Private ¶ 2.1.133 CONVERT_FROM_STRUC_TO_TABLE Private ¶ 2.1.134 CONVERT_HRY_OBJLIST Private ¶ 2.1.135 CREATE_DATA_REF_KEY_STRUCTURE Private ¶ 2.1.136 DELETE_ASSIGNMENT_BUFFER Private ¶ 2.1.137 DELETE_ENTITY_FROM_CHANGELIST Private ¶ 2.1.138 DERIVE_CHANGED_ENTITIES_EVENT Private ¶ 2.1.139 DETERMINE_EDITION_FOR_READ Private ¶ 2.1.140 ENRICH_ASSIGNMENT_ATTRIBUTES Private ¶ 2.1.141 ENRICH_ATTRIBUTES_AFTER_DERIVE Private ¶ 2.1.142 EXTRACT_OBJECT_KEYS Private ¶ 2.1.143 GET_EDITION_OF_CR_BY_LOCK Private ¶ 2.1.144 GET_EDITION_TYPE_BY_CR_TYPE Private ¶ 2.1.145 GET_FIELDS Private ¶ 2.1.146 GET_HRY_OBJECT_LIST_FROM_DB Private ¶ 2.1.147 GET_HRY_OBJ_LIST_FROM_BUFFER Private ¶ 2.1.148 GET_LEADING_SUT1_ENTITY Private ¶ 2.1.149 GET_OBJECT_LIST_FROM_BUFFER Private ¶ 2.1.150 GET_OBJLIST_FROM_KEY Private ¶ 2.1.151 HANDLE_DERIVED_ENTITY_DATA Private ¶ 2.1.152 INSERT_ASSIGNMENT_BUFFER Private ¶ 2.1.153 INVALIDATE_INACT_DATALOAD_BUF Private ¶ 2.1.154 IS_ASSIGNMENT_IN_OBJECT_LIST Private ¶ 2.1.155 IS_AUTHORIZED Private ¶ 2.1.156 IS_CREQUEST_PARALLEL Private ¶ 2.1.157 IS_ENTITY_ADDABLE_TO_OBJLIST Private ¶ 2.1.158 IS_ENTITY_ENQUEUED Private ¶ 2.1.159 IS_ENTITY_IN_OBJECT_LIST Private ¶ 2.1.160 IS_ENTITY_MAINTAINABLE Private ¶ 2.1.161 IS_ENTITY_TYPE_IN_TYPE_SCOPE Private ¶ 2.1.162 PREP_ACT_ASSGNMT_READ Private ¶ 2.1.163 RAISE_RESUMEABLE_EXCEPTION Private ¶ 2.1.164 RAISE_STRUC_CX_ADD_MSG Private ¶ 2.1.165 READ_ASSIGNMENT_BUFFER Private ¶ 2.1.166 READ_AUTH_BUFFER Private ¶ 2.1.167 READ_ENTITY_BUFFER Private ¶ 2.1.168 REMOVE_ASSIGNMENT Private ¶ 2.1.169 REMOVE_ASSIGNMENT_LOCK Private ¶ 2.1.170 SET_HRY_OBJECT_LIST_BUFFER Private ¶ 2.1.171 SET_OBJECT_LIST_BUFFER Private ¶ 2.1.172 UPDATE_ASSIGNMENT_BUFFER Private ¶ 2.1.173 UPDATE_CREQUEST_ADM_FIELDS Private ¶ 2.1.174 UPDATE_CREQUEST_DATA Private ¶ 2.1.175 UPD_BUFFER_FROM_IO_CHANGE Private ¶ 2.1.176 WRITE_AUTH_BUFFER Private ¶ 2.1.177 WRITE_ENTITY_BUFFER Private ¶ 2.1.178 IS_CREQUEST_USER Private ¶ 2.2 CL_USMD_CREQUEST_API ¶ TODO 2.3 CL_USMD_CREQUEST_DELETE ¶ TODO","text_tokens":["61","into","22","interested","16","139","unknown","be","children","&---------------------------------------------------------------------","3010","all","build","order","this","105","invalidate","assgnmnt","tabl","www","step","7","zchangepfli","append","84","158","13","175","before","remove","airline","&","created","needed","130"," ","时候","change","1","resumeable","35","59","67","更新","occured","description","}","workflow","authorization","26","find","something","msgcont","copy","7th","168","arrtime","sut1entity","133","83","erroneous","create","pfli","time","10","ls","8","user","data","34","code","14","方式","fieldname","event","65","addable","contain","86e5","seatsocc","sy","t","yz","sfp02","instance","92","sdn","go","31","一列","可以","empl","102","model","requeried","51","~","only","have","可选","delete","connection","6th","raised","10th","from","校验","public","handling","api","check","should","extract","获取","symbols","assgnmt","like","中","2.2","new","94","a","lh","required","drafts","lfs","allowed","possibility","constructor",":","lt","11th","changing","blocked","116","144","...","occurred","132","enqueueing","23","request","55","convert","errors","32","sfc01","160","70f3f3d3","names","119","47","course","at","validation","target","135","*","index","or","entity","changeable","ts","57","er","house","46","104","endif","lr","try","cannot","121","96","131","optionally","37","141","162","?","right","usmd","derived","85","do","sut1","161","exists","after",",","table","75","field","87","114","38","url","147","fantasy","pdf","164","attribute","dequeue","get","other","next","#","could","tragedy","governance","ref","0","wait","flight","by","any","42","146",".","27","query","needs","interlocked","confirm","实例","scenario","77","quick","message","values","(","128","default","122","is","add","everything","handle","determine","b","173","advanced","76","single","可","sap","88","mode","{","was","_","container","115","added","assign","52","already","91","enrich","1.3","74","163","result","creates","n","if","tough","29","81","can","90","existing","151","的","confirmation","113","library","i","exception","82","again","cr","155","catch","118","145","clean","update","you","inact","reason","retrieve","170","therefore","endtry","that","117","g","sure","36","49","refresh","maybe","parent","167","62","reference","between","clear","properties","entities","80","184000","137","075500","9","9162368bfbec","选","references","69","provide","97","148","carr","process","fill","1.1","of","http","position","33","systems","exceptions","rid","edition","12","4","63","went","4th","111",">","exchange","150","prep","165","某","149","id","structure","report","attributes","tmp","64","169","112","io","part","crequest","text","along","adm","changed","checked","note","143","insert","has","list","125","even","gc","6","authorized","2.3","prerequisites","react","21","write","138","types","72","blocking",")","\"","validate","struct","usage","correct","compare","126","trans","necessary","157","main","109","140","while","started","parallel","document","156","com","name","152","sf","workitems","/","examples","100","5th","additionally","cl","106","166","17","66","2.1","exit","909d","service","struc","notice","notes","98","tables","172","s","et","processed","action","-","to","might","no","18","and","获取数据","exporting","what","display","31122013","hry","scope","fantasyflight","luck","ent","just","status","placeholder","move","127","example","gov","45","15","lc","176","iv","mess","123","true","end","操作","103","uuid","是否","saved","124","adequate","5","proc","zcreatecarr","需要","93","sel","some","86","unfortunately","68","声明","lv","datas","direct","79","43","en","act","参数","corresponding","2","usd","8th","171","73","object","derive","creating","89","fine","53","finalize","enqueued","99","deleted","keys","lo","better","submit","make","for","unrequeried","28","修改","commit","auth","messages","fldate","component","9th","dependent","为","possible","¶","assignment","with","=","msg","read","2nd","private","hryasgn","tab","done","different","todo","153","buff","是","12th","upd","58","129","an","buffer","in","core","107","consistent","buf","56","159","str","数据","xxxx","obj","carrier","draft","type","1.2","properly","obsolete","raise","complete","44","fields","witems","irj","136","creation","lock","are","120","'","currcode","174","error","39","70","3rd","使用","134","changes","technical","the","leading","209","it","collect","importing","从主","24","attr","protected","subrc","154","start","60","schedule","save","on","set","101","contains","active","<","wf","enqueue","3","value","carrname","node","so","检查","overridelayout","19","400","making","!","key","cont","创建","maintain","else","objlist","95","attachment","mdg","54","expand","db","editions","e","177","178","25","maintainable","changelist","0401","20","50","40","content","78","–","110","71","permission","dataload","using","airlines","11","30","48","scn","wrong","services","cx","buffers","108","work","41","142","1st","not","deptime"],"title":"SAP MDG API examples","title_tokens":["sap","api"," ","examples","mdg"]},{"location":"2020/1104/sap-mdg-api-example/#sap-mdg-api-examples","text":"Document PDF: www.sdn.sap.com/irj/scn/index?rid=/library/uuid/70f3f3d3-86e5-3010-909d-9162368bfbec&overridelayout=true","text_tokens":["?","uuid","true","3010","library","909d","9162368bfbec","70f3f3d3","irj","sap","www","pdf","-","document","=","index","com","scn","86e5","overridelayout","&"," ","/","rid",".",":","sdn"],"title":"SAP MDG API examples","title_tokens":["sap","api"," ","examples","mdg"]},{"location":"2020/1104/sap-mdg-api-example/#1-quick-start","text":"","text_tokens":[],"title":"1. Quick start","title_tokens":["start"," ","quick",".","1"]},{"location":"2020/1104/sap-mdg-api-example/#11-code-example-create-airline-with-governance-api","text":"*&---------------------------------------------------------------------* *& Report zcreatecarr_sf *&---------------------------------------------------------------------* *& This example creates a new change request. Along with the change *& request, a new airline (carrier) is created. *& *& The exceptions raised by the governance API contain the error *& messages and some other attributes. Therefore, it is possible to react *& to the errors raised by the governance API. *&---------------------------------------------------------------------* REPORT zcreatecarr_sf . DATA : lo_gov_api TYPE REF TO if_usmd_gov_api , lv_crequest_id TYPE usmd_crequest , \"Change Request ID lr_carr_key_str TYPE REF TO data , \"Entity Carrier - key structure lr_carr_key_tab TYPE REF TO data , \"Entity Carrier - key table lr_carr_data_str TYPE REF TO data , \"Entity Carrier - data structure lr_carr_data_tab TYPE REF TO data , \"Entity Carrier - data table ls_entity TYPE usmd_gov_api_s_ent_tabl , lt_entity TYPE usmd_gov_api_ts_ent_tabl , lt_messages TYPE usmd_t_message . FIELD-SYMBOLS : <ls_carr_key> TYPE any , <lt_carr_key> TYPE ANY TABLE , <ls_carr_data> TYPE any , <lt_carr_data> TYPE ANY TABLE , <value> TYPE any . \"1st: Create an instance of the governance API TRY . lo_gov_api = cl_usmd_gov_api => get_instance ( iv_model_name = 'SF' ). CATCH cx_usmd_gov_api . EXIT . ENDTRY . \"2nd: Create all the data references needed to maintain the carrier entity \"Create a data reference of the key structure / table of entity CARR (Carrier) lo_gov_api -> create_data_reference ( EXPORTING iv_entity_name = 'CARR' iv_struct = lo_gov_api -> gc_struct_key IMPORTING er_structure = lr_carr_key_str er_table = lr_carr_key_tab ). \"Create a data reference of the key and attribute structure / table of \"entity CARR (Carrier) lo_gov_api -> create_data_reference ( EXPORTING iv_entity_name = 'CARR' iv_struct = lo_gov_api -> gc_struct_key_attr IMPORTING er_structure = lr_carr_data_str er_table = lr_carr_data_tab ). \"Assign the created data references for carrier key and carrier data \"to field symbols ASSIGN lr_carr_key_str->* TO <ls_carr_key> . ASSIGN lr_carr_key_tab->* TO <lt_carr_key> . ASSIGN lr_carr_data_str->* TO <ls_carr_data> . ASSIGN lr_carr_data_tab->* TO <lt_carr_data> . \"3rd: Fill the key and data structure with values to create a new carrier \"The entity CARR only has key field CARR. The new carrier ID should be 'YZ' ASSIGN COMPONENT 'CARR' OF STRUCTURE <ls_carr_key> TO <value> . IF sy - subrc = 0 . <value> = 'YZ' . INSERT <ls_carr_key> INTO TABLE <lt_carr_key> . ELSE . EXIT . \"Tough luck – unfortunately, this field name is not part of the key structure ENDIF . \"4th: Create a new change request using change request type and a \"description (required) TRY . lv_crequest_id = lo_gov_api -> create_crequest ( iv_crequest_type = 'SFC01' iv_description = 'Create new Carrier YZ' ). CATCH cx_usmd_gov_api . \"Something went wrong while creating the change request (e.g. model blocked \"or change request type unknown). EXIT . ENDTRY . \"5th: Before making changes to an object, the object needs to be enqueued \"even if this is a creation scenario TRY . lo_gov_api -> enqueue_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'CARR' it_data = <lt_carr_key> ). CATCH cx_usmd_gov_api_entity_lock cx_usmd_gov_api . EXIT . \"Tough luck – \"something went wrong while enqueueing the entity (it could be a \"technical reason, or maybe the carrier is already interlocked?! ENDTRY . \"6th: Provide some entity attributes (complete data structure) MOVE-CORRESPONDING <ls_carr_key> TO <ls_carr_data> . ASSIGN COMPONENT 'CARRNAME' OF STRUCTURE <ls_carr_data> TO <value> . <value> = 'Fantasy Flight Airlines' . ASSIGN COMPONENT 'CURRCODE' OF STRUCTURE <ls_carr_data> TO <value> . <value> = 'USD' . ASSIGN COMPONENT 'URL' OF STRUCTURE <ls_carr_data> TO <value> . <value> = 'http://www.fantasyflight.com' . INSERT <ls_carr_data> INTO TABLE <lt_carr_data> . \"7th: Write the entity data to the change request TRY . lo_gov_api -> write_entity ( EXPORTING iv_crequest_id = lv_crequest_i iv_entity_name = 'CARR' it_data = <lt_carr_data> ). CATCH cx_usmd_gov_api_entity_write . EXIT . \"Tough luck - might be that you have no authorization, or the entity is \"not enqueued or cannot be added to the object list of the change \"request ENDTRY . \"8th: optionally, the entity data is read again... just to make sure everything \"went right. TRY . lo_gov_api -> read_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'CARR' it_key = <lt_carr_key> IMPORTING et_data = <lt_carr_data> ). CATCH cx_usmd_gov_api_core_error cx_usmd_gov_api . EXIT . \"Adequate Exception handling ENDTRY . \"9th: The complete change request should be checked before it is saved TRY . lo_gov_api -> check_crequest_data ( iv_crequest_id = lv_crequest_id ). \"Collect the entities to be checked ls_entity - entity = 'CARR' . ls_entity - tabl = lr_carr_key_tab . INSERT ls_entity INTO TABLE lt_entity . \"check the entity lo_gov_api -> check_complete_data ( EXPORTING iv_crequest_id = lv_crequest_id it_key = lt_entity ). CATCH cx_usmd_gov_api_core_error cx_usmd_gov_api . \"Possibility to handle the erroneous data or go on. ENDTRY . \"10th: Save the change request (and the entity data of course) TRY . lo_gov_api -> save ( ). \"Save is done in draft mode by default so it is possible to \"save the change request even if change request data or \"entity data is not consistent. CATCH cx_usmd_gov_api_core_error . EXIT . \"Adequate Exception handling ENDTRY . \"11th: At the end, it is necessary to clean the house TRY . lo_gov_api -> dequeue_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'CARR' it_data = <lt_carr_key> ). lo_gov_api -> dequeue_crequest ( EXPORTING iv_crequest_id = lv_crequest_id ). CATCH cx_usmd_gov_api . \"Not a tragedy - maybe the workflow could not be processed properly after \"it was started ENDTRY . COMMIT WORK AND WAIT . \"12th: If everything is fine, the workflow can be started for \"the change request (this is like a 'submit') TRY . lo_gov_api -> start_workflow ( iv_crequest_id = lv_crequest_id ). CATCH cx_usmd_gov_api_core_error . \"Adequate Exception handling ENDTRY . \"Interested in the errors occured? lt_messages = lo_gov_api -> get_messages ( ).","text_tokens":["optionally","went","4th","?","into","creating",">","right","fine","interested","usmd","enqueued","unknown","be","&---------------------------------------------------------------------","id","lo","structure","report","all","attributes","submit","make","for","after","this",",","table","commit","messages","field","part","url","crequest","tabl","component","fantasy","www","9th","along","attribute","dequeue","get","other","possible","checked","with","=","before","could","insert","read","has","airline","governance","&","ref","created","2nd","needed","0","list","flight"," ","tab","by","any","change","even","gc",".","done","tragedy","needs","interlocked","react","occured","description","scenario","write","workflow","12th","wait","authorization","an","something","in","core","consistent","message","str","values",")","\"","7th","(","struct","carrier","default","draft","type","erroneous","properly","is","create","everything","handle","complete","ls","necessary","while","started","data","mode","creation","lock","was","'","currcode","_","contain","error","com","name","added","3rd","assign","sf","sy","already","t","/","yz","endif","changes","technical","5th","instance","the","creates","go","cl","it","if","tough","collect","importing","attr","can","model","subrc","exit","start","only","i","have","exception","6th","raised","again","10th","catch","s","save","et","on","processed","to","-","api","might","no","handling","check","clean","should","and","symbols","<","exporting","enqueue","like","value","carrname","you","so","reason","fantasyflight","new","ent","luck","a","making","key","required","example","gov","!","move","just","maintain","therefore","else","iv","endtry","possibility","that",":","lt","11th","end","e","g","sure","blocked","maybe","...","saved","reference","enqueueing","request","adequate","entities","errors","zcreatecarr","–","sfc01","some","unfortunately","lv","references","provide","course","using","airlines","at","carr","*","fill","or","wrong","entity","cx","of","http","ts","work","exceptions","er","1st","house","corresponding","usd","8th","not","lr","try","cannot","object"],"title":"1.1 Code Example – Create Airline (with governance API)","title_tokens":["1.1","airline","governance","api","code","example","create"," ","–","with",")","("]},{"location":"2020/1104/sap-mdg-api-example/#12-code-example-change-flight-connection-with-governance-api","text":"*&---------------------------------------------------------------------* *& Report ZCHANGEPFLI_SF *&---------------------------------------------------------------------* *& This example creates a new change request. Along with the change *& request, an existing flight connection is changed. Additionally, a *& dependent entity of type flight schedule is changed/created. *& *& The exceptions raised by the governance API contain the error *& messages and some other attributes. Therefore, it is possible to react *& to the errors raised by the governance API. *&---------------------------------------------------------------------* REPORT zchangepfli_sf . DATA : lo_gov_api TYPE REF TO if_usmd_gov_api , lv_crequest_id TYPE usmd_crequest , \"Change Request ID lr_pfli_key_str TYPE REF TO data , \"Entity Flight Connection - key structure lr_pfli_key_tab TYPE REF TO data , \"Entity Flight Connection - key table lr_pfli_data_str TYPE REF TO data , \"Entity Flight Connection - data structure lr_pfli_data_tab TYPE REF TO data , \"Entity Flight Connection - data table lr_flight_key_str TYPE REF TO data , \"Entity Flight - key structure lr_flight_key_tab TYPE REF TO data , \"Entity Flight - key table lr_flight_data_str TYPE REF TO data , \"Entity Flight - data structure lr_flight_data_tab TYPE REF TO data , \"Entity Flight - data table ls_entity TYPE usmd_gov_api_s_ent_tabl , lt_entity TYPE usmd_gov_api_ts_ent_tabl , lt_messages TYPE usmd_t_message . FIELD-SYMBOLS : <ls_pfli_key> TYPE any , <lt_pfli_key> TYPE INDEX TABLE , <ls_pfli_data> TYPE any , <lt_pfli_data> TYPE INDEX TABLE , <ls_flight_key> TYPE any , <lt_flight_key> TYPE INDEX TABLE , <ls_flight_data> TYPE any , <lt_flight_data> TYPE INDEX TABLE , <value> TYPE any . \"1: Create an instance of the governance API TRY . lo_gov_api = cl_usmd_gov_api => get_instance ( iv_model_name = 'SF' ). CATCH cx_usmd_gov_api . EXIT . ENDTRY . \"2: Create the data references needed to maintain the flight connection entity \"Create a data reference of the key structure/table of entity PFLI lo_gov_api -> create_data_reference ( EXPORTING iv_entity_name = 'PFLI' iv_struct = lo_gov_api -> gc_struct_key IMPORTING er_structure = lr_pfli_key_str er_table = lr_pfli_key_tab ). lo_gov_api -> create_data_reference ( EXPORTING iv_entity_name = 'PFLI' iv_struct = lo_gov_api -> gc_struct_key_attr IMPORTING er_structure = lr_pfli_data_str er_table = lr_pfli_data_tab ). \"Assign the created data references for the flight connection key to the field symbols ASSIGN lr_pfli_key_str->* TO <ls_pfli_key> . ASSIGN lr_pfli_key_tab->* TO <lt_pfli_key> . ASSIGN COMPONENT 'CARR' OF STRUCTURE <ls_pfli_key> TO <value> . <value> = 'LH' . ASSIGN COMPONENT 'PFLI' OF STRUCTURE <ls_pfli_key> TO <value> . <value> = '0401' . INSERT <ls_pfli_key> INTO TABLE <lt_pfli_key> . \"Assign the created data references for the flight connection data to the field symbols ASSIGN lr_pfli_data_str->* TO <ls_pfli_data> . ASSIGN lr_pfli_data_tab->* TO <lt_pfli_data> . \"3: Create a new change request using change request type and a description ( required ) TRY . lv_crequest_id = lo_gov_api -> create_crequest ( iv_crequest_type = 'SFP02' iv_description = 'Change Flight Connection LH 400' ). CATCH cx_usmd_gov_api . \"Something went wrong while creating the change request (e.g. data model blocked or change request type unknown). EXIT . ENDTRY . \"4: Before making changes to an object, the object needs to be enqueued. TRY . lo_gov_api -> enqueue_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'PFLI' it_data = <lt_pfli_key> ). CATCH cx_usmd_gov_api_entity_lock cx_usmd_gov_api . EXIT . ENDTRY . \"5: Read the flight connection data in order to do some changes TRY . lo_gov_api -> read_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'PFLI' it_key = <lt_pfli_key> IMPORTING et_data = <lt_pfli_data> ). CATCH cx_usmd_gov_api_core_error cx_usmd_gov_api . EXIT . ENDTRY . READ TABLE <lt_pfli_data> INDEX 1 INTO <ls_pfli_data> . CLEAR <lt_pfli_data> . ASSIGN COMPONENT 'ARRTIME' OF STRUCTURE <ls_pfli_data> TO <value> . <value> = '075500' . ASSIGN COMPONENT 'DEPTIME' OF STRUCTURE <ls_pfli_data> TO <value> . <value> = '184000' . INSERT <ls_pfli_data> INTO TABLE <lt_pfli_data> . \"6: Write the changes for the flight connection TRY . lo_gov_api -> write_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'PFLI' it_data = <lt_pfli_data> ). CATCH cx_usmd_gov_api_entity_write . EXIT . \"Do better next time! ENDTRY . \"7: Create all the data references needed to maintain the flight entity \"Create a data reference of the key structure/table of entity FLIGHT (Flight) lo_gov_api -> create_data_reference ( EXPORTING iv_entity_name = 'FLIGHT' iv_struct = lo_gov_api -> gc_struct_key IMPORTING er_structure = lr_flight_key_str er_table = lr_flight_key_tab ). lo_gov_api -> create_data_reference ( EXPORTING iv_entity_name = 'FLIGHT' iv_struct = lo_gov_api -> gc_struct_key_attr IMPORTING er_structure = lr_flight_data_str er_table = lr_flight_data_tab ). \"Assign the created data references for flight connection key to the field symbols ASSIGN lr_flight_key_str->* TO <ls_flight_key> . ASSIGN lr_flight_key_tab->* TO <lt_flight_key> . MOVE-CORRESPONDING <ls_pfli_key> TO <ls_flight_key> . INSERT <ls_flight_key> INTO TABLE <lt_flight_key> . ASSIGN lr_flight_data_str->* TO <ls_flight_data> . ASSIGN lr_flight_data_tab->* TO <lt_flight_data> . \"8: Read some flight data in order to do some changes TRY . lo_gov_api -> read_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'FLIGHT' it_key = <lt_flight_key> IMPORTING et_data = <lt_flight_data> ). CATCH cx_usmd_gov_api_core_error cx_usmd_gov_api . EXIT . ENDTRY . READ TABLE <lt_flight_data> INDEX 1 INTO <ls_flight_data> . CLEAR <lt_flight_data> . IF sy - subrc <> 0 . MOVE-CORRESPONDING <ls_flight_key> TO <ls_flight_data> . ASSIGN COMPONENT 'FLDATE' OF STRUCTURE <ls_flight_data> TO <value> . <value> = '31122013' . ENDIF . ASSIGN COMPONENT 'SEATSOCC' OF STRUCTURE <ls_flight_data> TO <value> . <value> = '209' . INSERT <ls_flight_data> INTO TABLE <lt_flight_data> . \"9: Write the changes for the flight TRY . lo_gov_api -> write_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'FLIGHT' it_data = <lt_flight_data> ). CATCH cx_usmd_gov_api_entity_write . EXIT . \"Do better next time! ENDTRY . \"10: The complete change request should be checked before it is saved TRY . lo_gov_api -> check_crequest_data ( iv_crequest_id = lv_crequest_id ). \"Collect the entities to be checked ls_entity - entity = 'PFLI' . ls_entity - tabl = lr_pfli_key_tab . INSERT ls_entity INTO TABLE lt_entity . \"Check the entity lo_gov_api -> check_complete_data ( EXPORTING iv_crequest_id = lv_crequest_id it_key = lt_entity ). CATCH cx_usmd_gov_api_core_error cx_usmd_gov_api . \"Handle the erroneous data or go on. ENDTRY . \"11: Save the change request (and the entity data, of course) TRY . lo_gov_api -> save ( ). \"Save is done in draft mode by default so it is possible to \"save the change request even if the change request data or \"the entity data is not consistent. CATCH cx_usmd_gov_api_core_error . EXIT . \"Adequate exception handling ENDTRY . \"12: At the end, it is necessary to clean the house TRY . lo_gov_api -> dequeue_entity ( EXPORTING iv_crequest_id = lv_crequest_id iv_entity_name = 'PFLI' it_data = <lt_pfli_key> ). lo_gov_api -> dequeue_crequest ( EXPORTING iv_crequest_id = lv_crequest_id ). CATCH cx_usmd_gov_api . \"Adequate exception handling ENDTRY . COMMIT WORK AND WAIT . \"13: If everything is correct, the workflow can be started for the change request (this is like a 'submit') TRY . lo_gov_api -> start_workflow ( iv_crequest_id = lv_crequest_id ). CATCH cx_usmd_gov_api_core_error . \"Adequate exception handling ENDTRY . \"Interested in the messages occurred? lt_messages = lo_gov_api -> get_messages ( ).","text_tokens":["went","?","into","creating",">","interested","usmd","enqueued","unknown","be","do","&---------------------------------------------------------------------","id","lo","structure","report","better","attributes","all","submit","for","order","this",",","table","commit","messages","field","fldate","crequest","tabl","component","dependent","7","zchangepfli","along","dequeue","get","changed","other","13","possible","next","checked","with","=","before","insert","read","governance","ref","&","0","created","needed","wait","flight"," ","tab","by","any","change","even","gc",".","1","6","done","needs","react","description","write","workflow","an","something","in","core","consistent","message","str",")","\"","(","struct","default","arrtime","draft","type","erroneous","is","create","correct","pfli","handle","time","10","everything","complete","ls","necessary","8","while","started","data","mode","lock","'","_","contain","error","name","seatsocc","assign","sf","sy","/","t","changes","endif","sfp02","additionally","instance","the","12","creates","go","cl","209","it","if","collect","importing","attr","can","model","subrc","existing","exit","start","exception","connection","raised","catch","schedule","s","save","et","on","to","-","api","handling","clean","check","should","and","symbols","<","exporting","enqueue","31122013","3","value","like","so","new","ent","400","a","lh","key","required","example","gov","making","!","move","maintain","therefore","iv","endtry",":","lt","end","e","g","blocked","0401","saved","occurred","reference","request","clear","adequate","5","entities","errors","184000","075500","some","9","lv","references","course","using","11","at","carr","*","index","or","wrong","entity","cx","of","ts","work","exceptions","er","house","deptime","2","corresponding","not","lr","try","4","object"],"title":"1.2 Code Example – Change Flight Connection (with governance API)","title_tokens":["governance","1.2","api","code","example","flight"," ","–","change","connection","with",")","("]},{"location":"2020/1104/sap-mdg-api-example/#13-what-is-the-different-between-creating-and-changing","text":"Notice: read_entity 创建的时候 read_entity 是可选的校验操作 修改的时候 read_entity 是需要从主数据中获取数据","text_tokens":["是","操作","数据","从主","的","需要","可选","notice","修改","校验","获取数据","获取","中","_","entity","read"," ","时候","创建",":"],"title":"1.3 What is the different between creating and changing?","title_tokens":["the","?","changing","is","creating"," ","and","different","1.3","what","between"]},{"location":"2020/1104/sap-mdg-api-example/#2-mdg-advanced-usage","text":"","text_tokens":[],"title":"2. MDG advanced usage","title_tokens":["usage"," ","2",".","advanced","mdg"]},{"location":"2020/1104/sap-mdg-api-example/#21-cl_usmd_gov_api","text":"","text_tokens":[],"title":"2.1 CL_USMD_GOV_API","title_tokens":["2.1","cl","api","gov"," ","usmd","_"]},{"location":"2020/1104/sap-mdg-api-example/#210-if_usmd_gov_api_transsave-public","text":"","text_tokens":[],"title":"2.1.0 IF_USMD_GOV_API_TRANS~SAVE Public","title_tokens":["2.1","save","0","public","api","~","gov","if"," ","usmd",".","trans","_"]},{"location":"2020/1104/sap-mdg-api-example/#211-if_usmd_gov_api_transrefresh_buffers-public","text":"","text_tokens":[],"title":"2.1.1 IF_USMD_GOV_API_TRANS~REFRESH_BUFFERS Public","title_tokens":["2.1","buffers","public","api","~","gov","if"," ","refresh","usmd","1",".","trans","_"]},{"location":"2020/1104/sap-mdg-api-example/#212-if_usmd_gov_api_servicescheck_usage_of_entity-public","text":"","text_tokens":[],"title":"2.1.2 IF_USMD_GOV_API_SERVICES~CHECK_USAGE_OF_ENTITY Public","title_tokens":["2.1","services","entity","usage","of","public","api","~","gov","if"," ","check","usmd","2",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#213-if_usmd_gov_api_servicesget_entity_usage-public","text":"","text_tokens":[],"title":"2.1.3 IF_USMD_GOV_API_SERVICES~GET_ENTITY_USAGE Public","title_tokens":["2.1","services","entity","usage","public","api","~","gov","if"," ","get","usmd",".","3","_"]},{"location":"2020/1104/sap-mdg-api-example/#214-if_usmd_gov_api_servicesdetermine_step_type-public","text":"","text_tokens":[],"title":"2.1.4 IF_USMD_GOV_API_SERVICES~DETERMINE_STEP_TYPE Public","title_tokens":["2.1","services","step","public","type","api","~","gov","if"," ","usmd","determine",".","_","4"]},{"location":"2020/1104/sap-mdg-api-example/#215-if_usmd_gov_api_servicesget_allowed_changes-public","text":"","text_tokens":[],"title":"2.1.5 IF_USMD_GOV_API_SERVICES~GET_ALLOWED_CHANGES Public","title_tokens":["2.1","services","5","public","api","~","gov","if"," ","get","changes","usmd","allowed",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#216-if_usmd_gov_api_servicesget_crequest_types_for_process-public","text":"","text_tokens":[],"title":"2.1.6 IF_USMD_GOV_API_SERVICES~GET_CREQUEST_TYPES_FOR_PROCESS Public","title_tokens":["2.1","services","crequest","public","api","~","gov","if"," ","get","for","usmd","types","6",".","process","_"]},{"location":"2020/1104/sap-mdg-api-example/#217-if_usmd_gov_api_servicesget_main_entities_from_entity-public","text":"","text_tokens":[],"title":"2.1.7 IF_USMD_GOV_API_SERVICES~GET_MAIN_ENTITIES_FROM_ENTITY Public","title_tokens":["2.1","services","main","entity","public","7","entities","api","~","gov","if"," ","get","usmd",".","from","_"]},{"location":"2020/1104/sap-mdg-api-example/#218-if_usmd_gov_api_servicesget_entity_key_fields-public","text":"","text_tokens":[],"title":"2.1.8 IF_USMD_GOV_API_SERVICES~GET_ENTITY_KEY_FIELDS Public","title_tokens":["2.1","services","entity","8","public","api","~","gov","if"," ","get","key","usmd",".","_","fields"]},{"location":"2020/1104/sap-mdg-api-example/#219-if_usmd_gov_api_servicesget_sut1entity_from_entity-public","text":"","text_tokens":[],"title":"2.1.9 IF_USMD_GOV_API_SERVICES~GET_SUT1ENTITY_FROM_ENTITY Public","title_tokens":["2.1","services","entity","sut1entity","public","api","~","gov","if"," ","get","usmd",".","9","from","_"]},{"location":"2020/1104/sap-mdg-api-example/#2110-if_usmd_gov_api_servicesget_workitems_for_crequest-public","text":"","text_tokens":[],"title":"2.1.10 IF_USMD_GOV_API_SERVICES~GET_WORKITEMS_FOR_CREQUEST Public","title_tokens":["2.1","services","crequest","public","api","~","gov","if"," ","get","workitems","usmd","for","10",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#2111-if_usmd_gov_api_serviceshas_entity_type_edition-public","text":"","text_tokens":[],"title":"2.1.11 IF_USMD_GOV_API_SERVICES~HAS_ENTITY_TYPE_EDITION Public","title_tokens":["2.1","services","entity","has","public","type","api","~","gov","if"," ","11","usmd","edition",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#2112-if_usmd_gov_api_servicesis_edition_changeable-public","text":"","text_tokens":[],"title":"2.1.12 IF_USMD_GOV_API_SERVICES~IS_EDITION_CHANGEABLE Public","title_tokens":["2.1","services","changeable","public","api","~","gov","if"," ","is","usmd","edition",".","12","_"]},{"location":"2020/1104/sap-mdg-api-example/#2113-if_usmd_gov_api_servicesis_entity_in_crequest-public","text":"","text_tokens":[],"title":"2.1.13 IF_USMD_GOV_API_SERVICES~IS_ENTITY_IN_CREQUEST Public","title_tokens":["2.1","services","entity","crequest","public","api","~","gov","if"," ","is","in","usmd","13",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#2114-if_usmd_gov_api_servicesretrieve_blocking_cr_by_en_key-public","text":"","text_tokens":[],"title":"2.1.14 IF_USMD_GOV_API_SERVICES~RETRIEVE_BLOCKING_CR_BY_EN_KEY Public","title_tokens":["2.1","services","public","api","~","gov","if"," ","14","retrieve","usmd","cr","by","en","key",".","blocking","_"]},{"location":"2020/1104/sap-mdg-api-example/#2115-if_usmd_gov_api_servicesget_fieldname_of_entity-public","text":"","text_tokens":[],"title":"2.1.15 IF_USMD_GOV_API_SERVICES~GET_FIELDNAME_OF_ENTITY Public","title_tokens":["2.1","services","entity","of","public","api","~","gov","if"," ","15","get","usmd","fieldname",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#2116-if_usmd_gov_api_servicesretrieve_crequest_by_entity-public","text":"","text_tokens":[],"title":"2.1.16 IF_USMD_GOV_API_SERVICES~RETRIEVE_CREQUEST_BY_ENTITY Public","title_tokens":["2.1","services","crequest","entity","public","api","~","gov","16"," ","if","retrieve","usmd","by",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#2117-if_usmd_gov_api_entitycheck_entity_authorization-public","text":"","text_tokens":[],"title":"2.1.17 IF_USMD_GOV_API_ENTITY~CHECK_ENTITY_AUTHORIZATION Public","title_tokens":["2.1","entity","public","authorization","api","~","gov","if"," ","check","usmd",".","_","17"]},{"location":"2020/1104/sap-mdg-api-example/#2118-if_usmd_gov_api_entitycheck_entity_data-public","text":"","text_tokens":[],"title":"2.1.18 IF_USMD_GOV_API_ENTITY~CHECK_ENTITY_DATA Public","title_tokens":["2.1","entity","public","data","api","~","gov","if"," ","check","18","usmd",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#2119-if_usmd_gov_api_entitycheck_entity_lock_single-public","text":"","text_tokens":[],"title":"2.1.19 IF_USMD_GOV_API_ENTITY~CHECK_ENTITY_LOCK_SINGLE Public","title_tokens":["2.1","entity","19","public","api","~","gov","if"," ","check","lock","usmd",".","_","single"]},{"location":"2020/1104/sap-mdg-api-example/#2120-if_usmd_gov_api_entityconfirm_entity_data-public","text":"","text_tokens":[],"title":"2.1.20 IF_USMD_GOV_API_ENTITY~CONFIRM_ENTITY_DATA Public","title_tokens":["2.1","entity","public","20","data","api","~","gov","if"," ","usmd",".","_","confirm"]},{"location":"2020/1104/sap-mdg-api-example/#2121-if_usmd_gov_api_entitycopy_entity-public","text":"","text_tokens":[],"title":"2.1.21 IF_USMD_GOV_API_ENTITY~COPY_ENTITY Public","title_tokens":["2.1","21","entity","public","api","~","gov","if"," ","usmd",".","copy","_"]},{"location":"2020/1104/sap-mdg-api-example/#2122-if_usmd_gov_api_entitycreate_data_reference-public","text":"","text_tokens":[],"title":"2.1.22 IF_USMD_GOV_API_ENTITY~CREATE_DATA_REFERENCE Public","title_tokens":["2.1","entity","public","data","22","api","gov","if"," ","~","create","usmd",".","reference","_"]},{"location":"2020/1104/sap-mdg-api-example/#2123-if_usmd_gov_api_entitycreate_entity_tmp_key-public","text":"","text_tokens":[],"title":"2.1.23 IF_USMD_GOV_API_ENTITY~CREATE_ENTITY_TMP_KEY Public","title_tokens":["2.1","entity","public","tmp","api","~","gov","if"," ","create","key","usmd",".","23","_"]},{"location":"2020/1104/sap-mdg-api-example/#2124-if_usmd_gov_api_entitydelete_entity-public","text":"","text_tokens":[],"title":"2.1.24 IF_USMD_GOV_API_ENTITY~DELETE_ENTITY Public","title_tokens":["2.1","entity","public","api","~","gov","if"," ","usmd","delete",".","24","_"]},{"location":"2020/1104/sap-mdg-api-example/#2125-if_usmd_gov_api_entitydequeue_entity-public","text":"","text_tokens":[],"title":"2.1.25 IF_USMD_GOV_API_ENTITY~DEQUEUE_ENTITY Public","title_tokens":["2.1","entity","public","api","~","gov","if"," ","dequeue","25","usmd",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#2126-if_usmd_gov_api_entitydequeue_entity_all-public","text":"","text_tokens":[],"title":"2.1.26 IF_USMD_GOV_API_ENTITY~DEQUEUE_ENTITY_ALL Public","title_tokens":["2.1","entity","all","public","26","api","gov","if"," ","~","dequeue","usmd",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#2127-if_usmd_gov_api_entityenqueue_entity-public","text":"","text_tokens":[],"title":"2.1.27 IF_USMD_GOV_API_ENTITY~ENQUEUE_ENTITY Public","title_tokens":["2.1","entity","public","api","~","gov","if"," ","usmd","27",".","enqueue","_"]},{"location":"2020/1104/sap-mdg-api-example/#2128-if_usmd_gov_api_entityexchange_entity_key-public","text":"","text_tokens":[],"title":"2.1.28 IF_USMD_GOV_API_ENTITY~EXCHANGE_ENTITY_KEY Public","title_tokens":["2.1","entity","public","api","~","gov","if"," ","key","usmd","exchange","28",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#2129-if_usmd_gov_api_entityget_derive_entity_result-public","text":"","text_tokens":[],"title":"2.1.29 IF_USMD_GOV_API_ENTITY~GET_DERIVE_ENTITY_RESULT Public","title_tokens":["2.1","entity","result","public","api","~","gov","if"," ","get","derive","usmd","29",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#2130-if_usmd_gov_api_entityget_entity_field_properties-public","text":"","text_tokens":[],"title":"2.1.30 IF_USMD_GOV_API_ENTITY~GET_ENTITY_FIELD_PROPERTIES Public","title_tokens":["2.1","entity","properties","public","api","~","gov","if"," ","get","usmd","30",".","_","field"]},{"location":"2020/1104/sap-mdg-api-example/#2131-if_usmd_gov_api_entityis_entity_deleted-public","text":"","text_tokens":[],"title":"2.1.31 IF_USMD_GOV_API_ENTITY~IS_ENTITY_DELETED Public","title_tokens":["2.1","entity","public","api","31","gov","if"," ","~","is","usmd",".","_","deleted"]},{"location":"2020/1104/sap-mdg-api-example/#2132-if_usmd_gov_api_entityis_new_entity-public","text":"","text_tokens":[],"title":"2.1.32 IF_USMD_GOV_API_ENTITY~IS_NEW_ENTITY Public","title_tokens":["2.1","entity","new","public","api","~","gov","32"," ","if","is","usmd",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#2133-if_usmd_gov_api_entityis_tmp_key-public","text":"","text_tokens":[],"title":"2.1.33 IF_USMD_GOV_API_ENTITY~IS_TMP_KEY Public","title_tokens":["2.1","entity","public","tmp","33","api","~","gov","if"," ","is","key","usmd",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#2134-if_usmd_gov_api_entityquery_entity-public","text":"","text_tokens":[],"title":"2.1.34 IF_USMD_GOV_API_ENTITY~QUERY_ENTITY Public","title_tokens":["2.1","entity","public","34","api","~","gov","if"," ","usmd",".","query","_"]},{"location":"2020/1104/sap-mdg-api-example/#2135-if_usmd_gov_api_entityread_entity-public","text":"","text_tokens":[],"title":"2.1.35 IF_USMD_GOV_API_ENTITY~READ_ENTITY Public","title_tokens":["2.1","entity","read","public","api","~","gov","if"," ","usmd",".","_","35"]},{"location":"2020/1104/sap-mdg-api-example/#2136-if_usmd_gov_api_entityread_obsolete_entity-public","text":"","text_tokens":[],"title":"2.1.36 IF_USMD_GOV_API_ENTITY~READ_OBSOLETE_ENTITY Public","title_tokens":["2.1","entity","read","public","obsolete","36","api","~","gov","if"," ","usmd",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#2137-if_usmd_gov_api_entityread_saved_entity-public","text":"","text_tokens":[],"title":"2.1.37 IF_USMD_GOV_API_ENTITY~READ_SAVED_ENTITY Public","title_tokens":["2.1","37","entity","read","public","api","~","gov","if"," ","usmd",".","saved","_"]},{"location":"2020/1104/sap-mdg-api-example/#2138-if_usmd_gov_api_entityretrieve_entity-public","text":"","text_tokens":[],"title":"2.1.38 IF_USMD_GOV_API_ENTITY~RETRIEVE_ENTITY Public","title_tokens":["2.1","38","entity","public","api","~","gov","if"," ","retrieve","usmd",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#2139-if_usmd_gov_api_entityretrieve_obsolete_entity-public","text":"","text_tokens":[],"title":"2.1.39 IF_USMD_GOV_API_ENTITY~RETRIEVE_OBSOLETE_ENTITY Public","title_tokens":["2.1","entity","public","obsolete","api","~","gov","if"," ","retrieve","usmd",".","_","39"]},{"location":"2020/1104/sap-mdg-api-example/#2140-if_usmd_gov_api_entitywrite_entity-public","text":"IV_CREQUEST_ID Importing requeried USMD_CREQUEST Change Request IV_ENTITY_NAME Importing requeried USMD_ENTITY Entity Type IT_DATA Importing requeried ANY TABLE Entity Keys and Attributes IT_ATTRIBUTE Importing unrequeried USMD_TS_FIELDNAME List of Field Names with Changed Data 可以使用可选参数 IT_ATTRIBUTE 更新某一列数据 DATA lo_gov_api TYPE REF TO if_usmd_gov_api . DATA lt_attributes TYPE usmd_ts_fieldname . APPEND '{{fieldname_a}}' TO lt_attributes . APPEND '{{fieldname_b}}' TO lt_attributes . APPEND VALUE # ( key = '{{key}}' {{ fieldname_a } } = 'a' { { fieldname_b }} = 'b' ) TO lt_data . lo_gov_api -> write_entity ( EXPORTING iv_crequest_id = lv_crequest_id \" XXXX iv_entity_name = lc_entity \" EMPL it_data = <lfs_datas> \" lt_data it_attribute = lt_attributes","text_tokens":["}","write","it","if",">","usmd","importing","一列","可以","数据","xxxx","empl",")","request","keys","某","(","requeried","id","\"","lo","type","attributes","unrequeried","b","table","field","可","names","选","crequest","lv","datas","data","to","api","append","{","attribute","-","fieldname","and","changed","'","exporting","with","#","_","value","=","<","name","entity","ref","of","ts","a","list","使用","gov","key"," ","参数","any","lc","change","lfs","iv",".","lt","更新"],"title":"2.1.40 IF_USMD_GOV_API_ENTITY~WRITE_ENTITY Public","title_tokens":["2.1","entity","write","public","40","api","~","gov","if"," ","usmd",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#2141-if_usmd_gov_api_cr_dataadd_attachment-public","text":"","text_tokens":[],"title":"2.1.41 IF_USMD_GOV_API_CR_DATA~ADD_ATTACHMENT Public","title_tokens":["2.1","public","data","api","41","gov","if"," ","~","usmd","add",".","cr","attachment","_"]},{"location":"2020/1104/sap-mdg-api-example/#2142-if_usmd_gov_api_cr_dataadd_target_systems-public","text":"","text_tokens":[],"title":"2.1.42 IF_USMD_GOV_API_CR_DATA~ADD_TARGET_SYSTEMS Public","title_tokens":["2.1","target","public","data","systems","api","~","gov","if"," ","usmd","add","42",".","cr","_"]},{"location":"2020/1104/sap-mdg-api-example/#2143-if_usmd_gov_api_cr_datachange_attachment-public","text":"","text_tokens":[],"title":"2.1.43 IF_USMD_GOV_API_CR_DATA~CHANGE_ATTACHMENT Public","title_tokens":["2.1","public","43","data","api","~","gov","if"," ","usmd","change",".","cr","attachment","_"]},{"location":"2020/1104/sap-mdg-api-example/#2144-if_usmd_gov_api_cr_datachange_note-public","text":"","text_tokens":[],"title":"2.1.44 IF_USMD_GOV_API_CR_DATA~CHANGE_NOTE Public","title_tokens":["2.1","public","data","api","~","gov","if"," ","usmd","change",".","cr","note","44","_"]},{"location":"2020/1104/sap-mdg-api-example/#2145-if_usmd_gov_api_cr_datacheck_crequest_authorization-public","text":"","text_tokens":[],"title":"2.1.45 IF_USMD_GOV_API_CR_DATA~CHECK_CREQUEST_AUTHORIZATION Public","title_tokens":["2.1","crequest","public","data","authorization","api","~","gov","45"," ","if","check","usmd",".","cr","_"]},{"location":"2020/1104/sap-mdg-api-example/#2146-if_usmd_gov_api_cr_datacheck_crequest_data-public","text":"","text_tokens":[],"title":"2.1.46 IF_USMD_GOV_API_CR_DATA~CHECK_CREQUEST_DATA Public","title_tokens":["2.1","crequest","public","data","api","~","gov","if"," ","46","check","usmd",".","cr","_"]},{"location":"2020/1104/sap-mdg-api-example/#2147-if_usmd_gov_api_cr_datacreate_crequest-public","text":"","text_tokens":[],"title":"2.1.47 IF_USMD_GOV_API_CR_DATA~CREATE_CREQUEST Public","title_tokens":["2.1","crequest","public","data","api","~","gov","47"," ","if","create","usmd",".","cr","_"]},{"location":"2020/1104/sap-mdg-api-example/#2148-if_usmd_gov_api_cr_datadelete_attachment-public","text":"","text_tokens":[],"title":"2.1.48 IF_USMD_GOV_API_CR_DATA~DELETE_ATTACHMENT Public","title_tokens":["2.1","public","data","api","~","gov","if"," ","cr","usmd","delete","48",".","attachment","_"]},{"location":"2020/1104/sap-mdg-api-example/#2149-if_usmd_gov_api_cr_datadelete_note-public","text":"","text_tokens":[],"title":"2.1.49 IF_USMD_GOV_API_CR_DATA~DELETE_NOTE Public","title_tokens":["2.1","public","49","data","api","~","gov","if"," ","usmd","delete",".","cr","note","_"]},{"location":"2020/1104/sap-mdg-api-example/#2150-if_usmd_gov_api_cr_datadelete_target_systems-public","text":"","text_tokens":[],"title":"2.1.50 IF_USMD_GOV_API_CR_DATA~DELETE_TARGET_SYSTEMS Public","title_tokens":["2.1","target","public","50","data","api","~","gov","if"," ","systems","usmd","delete",".","cr","_"]},{"location":"2020/1104/sap-mdg-api-example/#2151-if_usmd_gov_api_cr_datadequeue_crequest-public","text":"","text_tokens":[],"title":"2.1.51 IF_USMD_GOV_API_CR_DATA~DEQUEUE_CREQUEST Public","title_tokens":["2.1","51","crequest","public","data","api","~","gov","if"," ","dequeue","usmd",".","cr","_"]},{"location":"2020/1104/sap-mdg-api-example/#2152-if_usmd_gov_api_cr_dataenqueue_crequest-public","text":"","text_tokens":[],"title":"2.1.52 IF_USMD_GOV_API_CR_DATA~ENQUEUE_CREQUEST Public","title_tokens":["2.1","crequest","public","data","52","api","gov","if"," ","~","usmd",".","cr","enqueue","_"]},{"location":"2020/1104/sap-mdg-api-example/#2153-if_usmd_gov_api_cr_dataget_attachment_content-public","text":"","text_tokens":[],"title":"2.1.53 IF_USMD_GOV_API_CR_DATA~GET_ATTACHMENT_CONTENT Public","title_tokens":["2.1","public","data","api","~","gov","if"," ","get","content","usmd","53",".","cr","attachment","_"]},{"location":"2020/1104/sap-mdg-api-example/#2154-if_usmd_gov_api_cr_dataget_attachment_list-public","text":"","text_tokens":[],"title":"2.1.54 IF_USMD_GOV_API_CR_DATA~GET_ATTACHMENT_LIST Public","title_tokens":["2.1","public","data","api","~","gov","if"," ","get","list","usmd",".","cr","attachment","_","54"]},{"location":"2020/1104/sap-mdg-api-example/#2155-if_usmd_gov_api_cr_dataget_crequest_attributes-public","text":"","text_tokens":[],"title":"2.1.55 IF_USMD_GOV_API_CR_DATA~GET_CREQUEST_ATTRIBUTES Public","title_tokens":["2.1","55","crequest","public","attributes","data","api","~","gov","if"," ","get","usmd",".","cr","_"]},{"location":"2020/1104/sap-mdg-api-example/#2156-if_usmd_gov_api_cr_dataget_crequest_data-public","text":"","text_tokens":[],"title":"2.1.56 IF_USMD_GOV_API_CR_DATA~GET_CREQUEST_DATA Public","title_tokens":["2.1","crequest","public","data","api","~","gov","if"," ","get","usmd","56",".","cr","_"]},{"location":"2020/1104/sap-mdg-api-example/#2157-if_usmd_gov_api_cr_dataget_crequest_drafts-public","text":"","text_tokens":[],"title":"2.1.57 IF_USMD_GOV_API_CR_DATA~GET_CREQUEST_DRAFTS Public","title_tokens":["2.1","crequest","public","57","data","api","~","gov","if"," ","get","drafts","usmd",".","cr","_"]},{"location":"2020/1104/sap-mdg-api-example/#2158-if_usmd_gov_api_cr_dataget_crequest_status-public","text":"","text_tokens":[],"title":"2.1.58 IF_USMD_GOV_API_CR_DATA~GET_CREQUEST_STATUS Public","title_tokens":["2.1","crequest","public","status","58","data","api","~","gov","if"," ","get","usmd",".","cr","_"]},{"location":"2020/1104/sap-mdg-api-example/#2159-if_usmd_gov_api_cr_dataget_notes-public","text":"","text_tokens":[],"title":"2.1.59 IF_USMD_GOV_API_CR_DATA~GET_NOTES Public","title_tokens":["2.1","notes","public","data","api","~","gov","if"," ","get","usmd",".","cr","_","59"]},{"location":"2020/1104/sap-mdg-api-example/#2160-if_usmd_gov_api_cr_dataget_hry_object_list-public","text":"","text_tokens":[],"title":"2.1.60 IF_USMD_GOV_API_CR_DATA~GET_HRY_OBJECT_LIST Public","title_tokens":["2.1","public","data","api","~","gov","if"," ","get","list","usmd",".","cr","60","_","hry","object"]},{"location":"2020/1104/sap-mdg-api-example/#2161-if_usmd_gov_api_cr_dataget_object_list-public","text":"","text_tokens":[],"title":"2.1.61 IF_USMD_GOV_API_CR_DATA~GET_OBJECT_LIST Public","title_tokens":["2.1","61","public","data","api","~","gov","if"," ","get","list","usmd",".","cr","_","object"]},{"location":"2020/1104/sap-mdg-api-example/#2162-if_usmd_gov_api_cr_dataget_target_systems-public","text":"","text_tokens":[],"title":"2.1.62 IF_USMD_GOV_API_CR_DATA~GET_TARGET_SYSTEMS Public","title_tokens":["2.1","target","public","data","systems","api","~","gov","if"," ","get","usmd","62",".","cr","_"]},{"location":"2020/1104/sap-mdg-api-example/#2163-if_usmd_gov_api_cr_dataset_crequest_attributes-public","text":"","text_tokens":[],"title":"2.1.63 IF_USMD_GOV_API_CR_DATA~SET_CREQUEST_ATTRIBUTES Public","title_tokens":["2.1","crequest","public","attributes","data","api","~","gov","if"," ","set","usmd",".","cr","_","63"]},{"location":"2020/1104/sap-mdg-api-example/#2164-if_usmd_gov_api_cr_dataset_crequest_edition-public","text":"","text_tokens":[],"title":"2.1.64 IF_USMD_GOV_API_CR_DATA~SET_CREQUEST_EDITION Public","title_tokens":["2.1","crequest","public","data","api","~","gov","if"," ","64","set","usmd","edition",".","cr","_"]},{"location":"2020/1104/sap-mdg-api-example/#2165-if_usmd_gov_api_cr_dataset_crequest_status-public","text":"","text_tokens":[],"title":"2.1.65 IF_USMD_GOV_API_CR_DATA~SET_CREQUEST_STATUS Public","title_tokens":["2.1","crequest","public","status","data","api","~","gov","if"," ","set","usmd","65",".","cr","_"]},{"location":"2020/1104/sap-mdg-api-example/#2166-if_usmd_gov_api_cr_datawrite_note-public","text":"","text_tokens":[],"title":"2.1.66 IF_USMD_GOV_API_CR_DATA~WRITE_NOTE Public","title_tokens":["2.1","write","public","data","api","~","gov","if"," ","usmd",".","cr","note","_","66"]},{"location":"2020/1104/sap-mdg-api-example/#2167-if_usmd_gov_apiget_messages-public","text":"","text_tokens":[],"title":"2.1.67 IF_USMD_GOV_API~GET_MESSAGES Public","title_tokens":["2.1","public","api","~","gov","if"," ","get","usmd",".","_","messages","67"]},{"location":"2020/1104/sap-mdg-api-example/#2168-if_usmd_gov_apiremove_messages_from_msg_cont-public","text":"","text_tokens":[],"title":"2.1.68 IF_USMD_GOV_API~REMOVE_MESSAGES_FROM_MSG_CONT Public","title_tokens":["2.1","68","msg","public","cont","api","~","gov","if"," ","usmd",".","from","_","messages","remove"]},{"location":"2020/1104/sap-mdg-api-example/#2169-if_usmd_gov_apiset_message_container-public","text":"","text_tokens":[],"title":"2.1.69 IF_USMD_GOV_API~SET_MESSAGE_CONTAINER Public","title_tokens":["2.1","69","public","api","~","gov","if"," ","set","usmd","message",".","_","container"]},{"location":"2020/1104/sap-mdg-api-example/#2170-if_usmd_gov_api_processcheck_complete_data-public","text":"","text_tokens":[],"title":"2.1.70 IF_USMD_GOV_API_PROCESS~CHECK_COMPLETE_DATA Public","title_tokens":["2.1","public","data","api","~","gov","if"," ","check","usmd",".","complete","process","_","70"]},{"location":"2020/1104/sap-mdg-api-example/#2171-if_usmd_gov_api_processdelete_entity_from_object_list-public","text":"","text_tokens":[],"title":"2.1.71 IF_USMD_GOV_API_PROCESS~DELETE_ENTITY_FROM_OBJECT_LIST Public","title_tokens":["2.1","entity","public","api","~","gov","if"," ","from","list","usmd","delete","71",".","process","_","object"]},{"location":"2020/1104/sap-mdg-api-example/#2172-if_usmd_gov_api_processfinalize_process_step-public","text":"","text_tokens":[],"title":"2.1.72 IF_USMD_GOV_API_PROCESS~FINALIZE_PROCESS_STEP Public","title_tokens":["2.1","step","public","api","~","gov","if"," ","usmd","72","finalize",".","process","_"]},{"location":"2020/1104/sap-mdg-api-example/#2173-if_usmd_gov_api_processget_cr_validation_result-public","text":"","text_tokens":[],"title":"2.1.73 IF_USMD_GOV_API_PROCESS~GET_CR_VALIDATION_RESULT Public","title_tokens":["2.1","process","result","public","api","~","gov","if"," ","get","usmd","validation",".","cr","73","_"]},{"location":"2020/1104/sap-mdg-api-example/#2174-if_usmd_gov_api_processstart_workflow-public","text":"","text_tokens":[],"title":"2.1.74 IF_USMD_GOV_API_PROCESS~START_WORKFLOW Public","title_tokens":["2.1","workflow","public","api","~","gov","if"," ","start","usmd",".","74","process","_"]},{"location":"2020/1104/sap-mdg-api-example/#2175-if_usmd_gov_api_processvalidate_crequest-public","text":"","text_tokens":[],"title":"2.1.75 IF_USMD_GOV_API_PROCESS~VALIDATE_CREQUEST Public","title_tokens":["2.1","crequest","public","api","~","gov","if"," ","usmd",".","process","_","75","validate"]},{"location":"2020/1104/sap-mdg-api-example/#2176-if_usmd_gov_api_cr_actiondelete_draft-public","text":"","text_tokens":[],"title":"2.1.76 IF_USMD_GOV_API_CR_ACTION~DELETE_DRAFT Public","title_tokens":["2.1","draft","action","public","api","~","gov","if"," ","usmd","delete",".","cr","76","_"]},{"location":"2020/1104/sap-mdg-api-example/#2177-if_usmd_gov_api_hrycheck_assignment_authorization-public","text":"","text_tokens":[],"title":"2.1.77 IF_USMD_GOV_API_HRY~CHECK_ASSIGNMENT_AUTHORIZATION Public","title_tokens":["2.1","77","public","authorization","api","~","gov","if"," ","check","usmd",".","assignment","_","hry"]},{"location":"2020/1104/sap-mdg-api-example/#2178-if_usmd_gov_api_hrycheck_hry_authorization-public","text":"","text_tokens":[],"title":"2.1.78 IF_USMD_GOV_API_HRY~CHECK_HRY_AUTHORIZATION Public","title_tokens":["2.1","public","authorization","api","~","gov","if"," ","78","check","usmd",".","_","hry"]},{"location":"2020/1104/sap-mdg-api-example/#2179-if_usmd_gov_api_hrydelete_assignment-public","text":"","text_tokens":[],"title":"2.1.79 IF_USMD_GOV_API_HRY~DELETE_ASSIGNMENT Public","title_tokens":["2.1","public","api","~","gov","if"," ","79","usmd","delete",".","assignment","_","hry"]},{"location":"2020/1104/sap-mdg-api-example/#2180-if_usmd_gov_api_hrydequeue_assignment-public","text":"","text_tokens":[],"title":"2.1.80 IF_USMD_GOV_API_HRY~DEQUEUE_ASSIGNMENT Public","title_tokens":["2.1","public","api","~","80","if"," ","gov","dequeue","usmd",".","assignment","_","hry"]},{"location":"2020/1104/sap-mdg-api-example/#2181-if_usmd_gov_api_hryenqueue_assignment-public","text":"","text_tokens":[],"title":"2.1.81 IF_USMD_GOV_API_HRY~ENQUEUE_ASSIGNMENT Public","title_tokens":["2.1","public","api","~","gov","if"," ","usmd",".","assignment","enqueue","81","hry","_"]},{"location":"2020/1104/sap-mdg-api-example/#2182-if_usmd_gov_api_hryexpand_placeholder-public","text":"","text_tokens":[],"title":"2.1.82 IF_USMD_GOV_API_HRY~EXPAND_PLACEHOLDER Public","title_tokens":["2.1","public","placeholder","api","~","gov","if"," ","usmd","82",".","_","hry","expand"]},{"location":"2020/1104/sap-mdg-api-example/#2183-if_usmd_gov_api_hryfind_position-public","text":"","text_tokens":[],"title":"2.1.83 IF_USMD_GOV_API_HRY~FIND_POSITION Public","title_tokens":["2.1","position","83","public","api","~","gov","if"," ","find","usmd",".","_","hry"]},{"location":"2020/1104/sap-mdg-api-example/#2184-if_usmd_gov_api_hryget_complete_hry-public","text":"","text_tokens":[],"title":"2.1.84 IF_USMD_GOV_API_HRY~GET_COMPLETE_HRY Public","title_tokens":["2.1","public","api","~","gov","84"," ","if","get","usmd",".","complete","_","hry"]},{"location":"2020/1104/sap-mdg-api-example/#2185-if_usmd_gov_api_hryget_direct_children-public","text":"","text_tokens":[],"title":"2.1.85 IF_USMD_GOV_API_HRY~GET_DIRECT_CHILDREN Public","title_tokens":["2.1","public","api","~","gov","if"," ","get","direct","usmd","children",".","85","_","hry"]},{"location":"2020/1104/sap-mdg-api-example/#2186-if_usmd_gov_api_hryread_assignment-public","text":"","text_tokens":[],"title":"2.1.86 IF_USMD_GOV_API_HRY~READ_ASSIGNMENT Public","title_tokens":["2.1","read","public","api","~","gov","if"," ","usmd",".","assignment","86","hry","_"]},{"location":"2020/1104/sap-mdg-api-example/#2187-if_usmd_gov_api_hryretrieve_crequest_by_assgnmnt-public","text":"","text_tokens":[],"title":"2.1.87 IF_USMD_GOV_API_HRY~RETRIEVE_CREQUEST_BY_ASSGNMNT Public","title_tokens":["2.1","crequest","assgnmnt","public","api","~","gov","if"," ","retrieve","by","usmd",".","_","hry","87"]},{"location":"2020/1104/sap-mdg-api-example/#2188-if_usmd_gov_api_hrywrite_assignment-public","text":"","text_tokens":[],"title":"2.1.88 IF_USMD_GOV_API_HRY~WRITE_ASSIGNMENT Public","title_tokens":["2.1","write","public","88","api","~","gov","if"," ","usmd",".","assignment","_","hry"]},{"location":"2020/1104/sap-mdg-api-example/#2189-check_instance_exists-public","text":"检查实例是否声明 实例声明的方式为 GET_INSTANCE","text_tokens":["检查","实例","声明","的"," ","方式","为","get","是否","_","instance"],"title":"2.1.89 CHECK_INSTANCE_EXISTS Public","title_tokens":["2.1","exists","public","check"," ","89",".","_","instance"]},{"location":"2020/1104/sap-mdg-api-example/#2190-get_instance-public","text":"lo_gov_api = cl_usmd_gov_api=>get_instance( iv_model_name = 'SF' ).","text_tokens":["cl",">","usmd",")","model","(","lo","api","get","'","=","_","name","sf","gov"," ","iv",".","instance"],"title":"2.1.90 GET_INSTANCE Public","title_tokens":["2.1","public"," ","get","instance",".","_","90"]},{"location":"2020/1104/sap-mdg-api-example/#2191-add_entity_to_change_list-protected","text":"","text_tokens":[],"title":"2.1.91 ADD_ENTITY_TO_CHANGE_LIST Protected","title_tokens":["2.1","entity","to","list"," ","91","add","change",".","_","protected"]},{"location":"2020/1104/sap-mdg-api-example/#2192-add_entity_to_object_list-protected","text":"","text_tokens":[],"title":"2.1.92 ADD_ENTITY_TO_OBJECT_LIST Protected","title_tokens":["2.1","entity","object","to","list"," ","protected","add",".","_","92"]},{"location":"2020/1104/sap-mdg-api-example/#2193-add_node_hryasgn_to_obj_list-protected","text":"","text_tokens":[],"title":"2.1.93 ADD_NODE_HRYASGN_TO_OBJ_LIST Protected","title_tokens":["2.1","to","list","hryasgn"," ","add","93",".","_","node","protected","obj"]},{"location":"2020/1104/sap-mdg-api-example/#2194-add_node_to_hry_object_list-protected","text":"","text_tokens":[],"title":"2.1.94 ADD_NODE_TO_HRY_OBJECT_LIST Protected","title_tokens":["2.1","94","to","list"," ","protected","add",".","hry","_","node","object"]},{"location":"2020/1104/sap-mdg-api-example/#2195-build_ref_data_for_attachment-protected","text":"","text_tokens":[],"title":"2.1.95 BUILD_REF_DATA_FOR_ATTACHMENT Protected","title_tokens":["2.1","ref","build","data","for"," ","95",".","attachment","_","protected"]},{"location":"2020/1104/sap-mdg-api-example/#2196-check_assignment_lock-protected","text":"","text_tokens":[],"title":"2.1.96 CHECK_ASSIGNMENT_LOCK Protected","title_tokens":["2.1","check"," ","lock",".","assignment","_","protected","96"]},{"location":"2020/1104/sap-mdg-api-example/#2197-check_entity_maintainable-protected","text":"","text_tokens":[],"title":"2.1.97 CHECK_ENTITY_MAINTAINABLE Protected","title_tokens":["2.1","entity","97","check"," ","maintainable",".","_","protected"]},{"location":"2020/1104/sap-mdg-api-example/#2198-check_n_add_inact_assgnmnt_buf-protected","text":"","text_tokens":[],"title":"2.1.98 CHECK_N_ADD_INACT_ASSGNMNT_BUF Protected","title_tokens":["2.1","assgnmnt","n","check"," ","protected","add","buf",".","98","_","inact"]},{"location":"2020/1104/sap-mdg-api-example/#2199-check_n_add_inact_dataload_buf-protected","text":"","text_tokens":[],"title":"2.1.99 CHECK_N_ADD_INACT_DATALOAD_BUF Protected","title_tokens":["2.1","dataload","n","check"," ","protected","add","buf",".","99","_","inact"]},{"location":"2020/1104/sap-mdg-api-example/#21100-check_prerequisites_for_change-protected","text":"","text_tokens":[],"title":"2.1.100 CHECK_PREREQUISITES_FOR_CHANGE Protected","title_tokens":["2.1","for","check"," ","100","change",".","_","prerequisites","protected"]},{"location":"2020/1104/sap-mdg-api-example/#21101-constructor-protected","text":"","text_tokens":[],"title":"2.1.101 CONSTRUCTOR Protected","title_tokens":["2.1","101"," ",".","constructor","protected"]},{"location":"2020/1104/sap-mdg-api-example/#21102-get_edition_of_crequest-protected","text":"","text_tokens":[],"title":"2.1.102 GET_EDITION_OF_CREQUEST Protected","title_tokens":["2.1","crequest","of"," ","get","edition",".","102","_","protected"]},{"location":"2020/1104/sap-mdg-api-example/#21103-get_fieldname_for_entity-protected","text":"","text_tokens":[],"title":"2.1.103 GET_FIELDNAME_FOR_ENTITY Protected","title_tokens":["2.1","entity","103","for"," ","get","fieldname",".","_","protected"]},{"location":"2020/1104/sap-mdg-api-example/#21104-get_proc_permission_for_status-protected","text":"","text_tokens":[],"title":"2.1.104 GET_PROC_PERMISSION_FOR_STATUS Protected","title_tokens":["2.1","proc","status","for"," ","get","permission",".","104","_","protected"]},{"location":"2020/1104/sap-mdg-api-example/#21105-get_table_key-protected","text":"","text_tokens":[],"title":"2.1.105 GET_TABLE_KEY Protected","title_tokens":["2.1","key"," ","get",".","105","table","_","protected"]},{"location":"2020/1104/sap-mdg-api-example/#21106-wf_service_get_witems-protected","text":"","text_tokens":[],"title":"2.1.106 WF_SERVICE_GET_WITEMS Protected","title_tokens":["2.1"," ","106","get","service","protected",".","wf","_","witems"]},{"location":"2020/1104/sap-mdg-api-example/#21107-add_assignment_lock-private","text":"","text_tokens":[],"title":"2.1.107 ADD_ASSIGNMENT_LOCK Private","title_tokens":["2.1","private"," ","107","lock","add",".","assignment","_"]},{"location":"2020/1104/sap-mdg-api-example/#21108-add_core_messages_to_mess_cont-private","text":"","text_tokens":[],"title":"2.1.108 ADD_CORE_MESSAGES_TO_MESS_CONT Private","title_tokens":["2.1","108","to","cont","private"," ","core","add",".","mess","_","messages"]},{"location":"2020/1104/sap-mdg-api-example/#21109-add_gov_message_to_mess_cont-private","text":"","text_tokens":[],"title":"2.1.109 ADD_GOV_MESSAGE_TO_MESS_CONT Private","title_tokens":["2.1","109","to","cont","private","gov"," ","add","message",".","mess","_"]},{"location":"2020/1104/sap-mdg-api-example/#21110-add_hry_name_to_hry_obj_list-private","text":"","text_tokens":[],"title":"2.1.110 ADD_HRY_NAME_TO_HRY_OBJ_LIST Private","title_tokens":["2.1","name","to","private","list"," ","110","add",".","_","hry","obj"]},{"location":"2020/1104/sap-mdg-api-example/#21111-add_msg_to_msgcont_and_tables-private","text":"","text_tokens":[],"title":"2.1.111 ADD_MSG_TO_MSGCONT_AND_TABLES Private","title_tokens":["2.1","msg","111","to","private","msgcont"," ","add","and",".","tables","_"]},{"location":"2020/1104/sap-mdg-api-example/#21112-add_parent_to_hry_object_list-private","text":"","text_tokens":[],"title":"2.1.112 ADD_PARENT_TO_HRY_OBJECT_LIST Private","title_tokens":["2.1","to","private","list"," ","parent","add",".","112","_","hry","object"]},{"location":"2020/1104/sap-mdg-api-example/#21113-are_object_changes_allowed-private","text":"","text_tokens":[],"title":"2.1.113 ARE_OBJECT_CHANGES_ALLOWED Private","title_tokens":["2.1","private","113"," ","are","changes","allowed",".","_","object"]},{"location":"2020/1104/sap-mdg-api-example/#21114-build_assignment_buff_struc-private","text":"","text_tokens":[],"title":"2.1.114 BUILD_ASSIGNMENT_BUFF_STRUC Private","title_tokens":["2.1","buff","build","private"," ","struc",".","assignment","_","114"]},{"location":"2020/1104/sap-mdg-api-example/#21115-build_assignment_lock_struc-private","text":"","text_tokens":[],"title":"2.1.115 BUILD_ASSIGNMENT_LOCK_STRUC Private","title_tokens":["2.1","build","private"," ","lock","struc",".","assignment","_","115"]},{"location":"2020/1104/sap-mdg-api-example/#21116-check_crequest_type-private","text":"","text_tokens":[],"title":"2.1.116 CHECK_CREQUEST_TYPE Private","title_tokens":["2.1","crequest","type","private","check"," ","116",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#21117-check_cr_lock-private","text":"","text_tokens":[],"title":"2.1.117 CHECK_CR_LOCK Private","title_tokens":["2.1","117","private","check"," ","lock",".","cr","_"]},{"location":"2020/1104/sap-mdg-api-example/#21118-check_derived_data-private","text":"","text_tokens":[],"title":"2.1.118 CHECK_DERIVED_DATA Private","title_tokens":["2.1","118","data","private","check"," ","derived",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#21119-check_display_auth_for_node-private","text":"","text_tokens":[],"title":"2.1.119 CHECK_DISPLAY_AUTH_FOR_NODE Private","title_tokens":["2.1","119","auth","private","for","check"," ",".","display","_","node"]},{"location":"2020/1104/sap-mdg-api-example/#21120-check_edition-private","text":"","text_tokens":[],"title":"2.1.120 CHECK_EDITION Private","title_tokens":["2.1","private","check"," ","120","edition",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#21121-check_entity_active_in_buffer-private","text":"","text_tokens":[],"title":"2.1.121 CHECK_ENTITY_ACTIVE_IN_BUFFER Private","title_tokens":["2.1","entity","private","check"," ","in","buffer","active",".","_","121"]},{"location":"2020/1104/sap-mdg-api-example/#21122-check_for_data_confirmation-private","text":"","text_tokens":[],"title":"2.1.122 CHECK_FOR_DATA_CONFIRMATION Private","title_tokens":["2.1","confirmation","122","data","private","for","check"," ",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#21123-check_for_remove_object-private","text":"","text_tokens":[],"title":"2.1.123 CHECK_FOR_REMOVE_OBJECT Private","title_tokens":["2.1","object","private","for","check"," ",".","123","_","remove"]},{"location":"2020/1104/sap-mdg-api-example/#21124-check_n_build_sel-private","text":"","text_tokens":[],"title":"2.1.124 CHECK_N_BUILD_SEL Private","title_tokens":["2.1","build","private","n","check"," ","sel",".","_","124"]},{"location":"2020/1104/sap-mdg-api-example/#21125-clear_auth_buffer-private","text":"","text_tokens":[],"title":"2.1.125 CLEAR_AUTH_BUFFER Private","title_tokens":["2.1","clear","private","125","buffer"," ",".","auth","_"]},{"location":"2020/1104/sap-mdg-api-example/#21126-clear_entity_buffer-private","text":"","text_tokens":[],"title":"2.1.126 CLEAR_ENTITY_BUFFER Private","title_tokens":["2.1","clear","entity","private","buffer"," ","126",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#21127-clear_hry_object_list_buffer-private","text":"","text_tokens":[],"title":"2.1.127 CLEAR_HRY_OBJECT_LIST_BUFFER Private","title_tokens":["2.1","clear","private","127","list","buffer"," ",".","_","hry","object"]},{"location":"2020/1104/sap-mdg-api-example/#21128-clear_object_list_buffer-private","text":"","text_tokens":[],"title":"2.1.128 CLEAR_OBJECT_LIST_BUFFER Private","title_tokens":["2.1","clear","private","list","buffer"," ",".","_","object","128"]},{"location":"2020/1104/sap-mdg-api-example/#21129-compare_editions-private","text":"","text_tokens":[],"title":"2.1.129 COMPARE_EDITIONS Private","title_tokens":["2.1","editions","private","129"," ","compare",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#21130-confirm_assignment_data-private","text":"","text_tokens":[],"title":"2.1.130 CONFIRM_ASSIGNMENT_DATA Private","title_tokens":["2.1","data","private","130"," ",".","assignment","_","confirm"]},{"location":"2020/1104/sap-mdg-api-example/#21131-contains_error-private","text":"","text_tokens":[],"title":"2.1.131 CONTAINS_ERROR Private","title_tokens":["2.1","private","contains"," ",".","131","_","error"]},{"location":"2020/1104/sap-mdg-api-example/#21132-convert_entity_type_to_text-private","text":"","text_tokens":[],"title":"2.1.132 CONVERT_ENTITY_TYPE_TO_TEXT Private","title_tokens":["2.1","entity","type","to","text","convert","private"," ",".","132","_"]},{"location":"2020/1104/sap-mdg-api-example/#21133-convert_from_struc_to_table-private","text":"","text_tokens":[],"title":"2.1.133 CONVERT_FROM_STRUC_TO_TABLE Private","title_tokens":["2.1","133","to","private","convert"," ","struc","table",".","from","_"]},{"location":"2020/1104/sap-mdg-api-example/#21134-convert_hry_objlist-private","text":"","text_tokens":[],"title":"2.1.134 CONVERT_HRY_OBJLIST Private","title_tokens":["2.1","private","convert"," ","134","objlist",".","_","hry"]},{"location":"2020/1104/sap-mdg-api-example/#21135-create_data_ref_key_structure-private","text":"","text_tokens":[],"title":"2.1.135 CREATE_DATA_REF_KEY_STRUCTURE Private","title_tokens":["2.1","ref","structure","data","private","key","create"," ",".","135","_"]},{"location":"2020/1104/sap-mdg-api-example/#21136-delete_assignment_buffer-private","text":"","text_tokens":[],"title":"2.1.136 DELETE_ASSIGNMENT_BUFFER Private","title_tokens":["2.1","136","private","buffer"," ","delete",".","assignment","_"]},{"location":"2020/1104/sap-mdg-api-example/#21137-delete_entity_from_changelist-private","text":"","text_tokens":[],"title":"2.1.137 DELETE_ENTITY_FROM_CHANGELIST Private","title_tokens":["2.1","entity","private"," ","137","delete","changelist",".","from","_"]},{"location":"2020/1104/sap-mdg-api-example/#21138-derive_changed_entities_event-private","text":"","text_tokens":[],"title":"2.1.138 DERIVE_CHANGED_ENTITIES_EVENT Private","title_tokens":["2.1","entities","138","private","derive"," ","event","changed",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#21139-determine_edition_for_read-private","text":"","text_tokens":[],"title":"2.1.139 DETERMINE_EDITION_FOR_READ Private","title_tokens":["2.1","read","private","for"," ","139","determine","edition",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#21140-enrich_assignment_attributes-private","text":"","text_tokens":[],"title":"2.1.140 ENRICH_ASSIGNMENT_ATTRIBUTES Private","title_tokens":["2.1","140","attributes","private"," ","enrich",".","assignment","_"]},{"location":"2020/1104/sap-mdg-api-example/#21141-enrich_attributes_after_derive-private","text":"","text_tokens":[],"title":"2.1.141 ENRICH_ATTRIBUTES_AFTER_DERIVE Private","title_tokens":["2.1","attributes","private","derive"," ","enrich","after",".","_","141"]},{"location":"2020/1104/sap-mdg-api-example/#21142-extract_object_keys-private","text":"","text_tokens":[],"title":"2.1.142 EXTRACT_OBJECT_KEYS Private","title_tokens":["2.1","private","142"," ","extract",".","_","keys","object"]},{"location":"2020/1104/sap-mdg-api-example/#21143-get_edition_of_cr_by_lock-private","text":"","text_tokens":[],"title":"2.1.143 GET_EDITION_OF_CR_BY_LOCK Private","title_tokens":["2.1","of","private"," ","get","by","lock","edition",".","cr","143","_"]},{"location":"2020/1104/sap-mdg-api-example/#21144-get_edition_type_by_cr_type-private","text":"","text_tokens":[],"title":"2.1.144 GET_EDITION_TYPE_BY_CR_TYPE Private","title_tokens":["2.1","type","private","144"," ","get","by","edition",".","cr","_"]},{"location":"2020/1104/sap-mdg-api-example/#21145-get_fields-private","text":"","text_tokens":[],"title":"2.1.145 GET_FIELDS Private","title_tokens":["2.1","145","private"," ","get",".","_","fields"]},{"location":"2020/1104/sap-mdg-api-example/#21146-get_hry_object_list_from_db-private","text":"","text_tokens":[],"title":"2.1.146 GET_HRY_OBJECT_LIST_FROM_DB Private","title_tokens":["2.1","private","list"," ","get","146",".","from","_","hry","db","object"]},{"location":"2020/1104/sap-mdg-api-example/#21147-get_hry_obj_list_from_buffer-private","text":"","text_tokens":[],"title":"2.1.147 GET_HRY_OBJ_LIST_FROM_BUFFER Private","title_tokens":["2.1","147","private","list","buffer"," ","get",".","from","_","hry","obj"]},{"location":"2020/1104/sap-mdg-api-example/#21148-get_leading_sut1_entity-private","text":"","text_tokens":[],"title":"2.1.148 GET_LEADING_SUT1_ENTITY Private","title_tokens":["2.1","entity","private","leading"," ","get","148",".","_","sut1"]},{"location":"2020/1104/sap-mdg-api-example/#21149-get_object_list_from_buffer-private","text":"","text_tokens":[],"title":"2.1.149 GET_OBJECT_LIST_FROM_BUFFER Private","title_tokens":["2.1","private","list","buffer"," ","get",".","from","_","149","object"]},{"location":"2020/1104/sap-mdg-api-example/#21150-get_objlist_from_key-private","text":"","text_tokens":[],"title":"2.1.150 GET_OBJLIST_FROM_KEY Private","title_tokens":["2.1","private","key"," ","get","objlist",".","150","from","_"]},{"location":"2020/1104/sap-mdg-api-example/#21151-handle_derived_entity_data-private","text":"","text_tokens":[],"title":"2.1.151 HANDLE_DERIVED_ENTITY_DATA Private","title_tokens":["2.1","151","entity","data","private"," ","handle","derived",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#21152-insert_assignment_buffer-private","text":"","text_tokens":[],"title":"2.1.152 INSERT_ASSIGNMENT_BUFFER Private","title_tokens":["2.1","insert","152","private","buffer"," ",".","assignment","_"]},{"location":"2020/1104/sap-mdg-api-example/#21153-invalidate_inact_dataload_buf-private","text":"","text_tokens":[],"title":"2.1.153 INVALIDATE_INACT_DATALOAD_BUF Private","title_tokens":["2.1","invalidate","dataload","private"," ","buf",".","153","_","inact"]},{"location":"2020/1104/sap-mdg-api-example/#21154-is_assignment_in_object_list-private","text":"","text_tokens":[],"title":"2.1.154 IS_ASSIGNMENT_IN_OBJECT_LIST Private","title_tokens":["2.1","private","list","154","is"," ","in",".","assignment","_","object"]},{"location":"2020/1104/sap-mdg-api-example/#21155-is_authorized-private","text":"","text_tokens":[],"title":"2.1.155 IS_AUTHORIZED Private","title_tokens":["2.1","private","is"," ",".","authorized","_","155"]},{"location":"2020/1104/sap-mdg-api-example/#21156-is_crequest_parallel-private","text":"","text_tokens":[],"title":"2.1.156 IS_CREQUEST_PARALLEL Private","title_tokens":["2.1","crequest","parallel","private","is"," ",".","156","_"]},{"location":"2020/1104/sap-mdg-api-example/#21157-is_entity_addable_to_objlist-private","text":"","text_tokens":[],"title":"2.1.157 IS_ENTITY_ADDABLE_TO_OBJLIST Private","title_tokens":["2.1","entity","to","private","is"," ","objlist",".","addable","_","157"]},{"location":"2020/1104/sap-mdg-api-example/#21158-is_entity_enqueued-private","text":"","text_tokens":[],"title":"2.1.158 IS_ENTITY_ENQUEUED Private","title_tokens":["2.1","entity","private","is"," ","158",".","enqueued","_"]},{"location":"2020/1104/sap-mdg-api-example/#21159-is_entity_in_object_list-private","text":"","text_tokens":[],"title":"2.1.159 IS_ENTITY_IN_OBJECT_LIST Private","title_tokens":["2.1","entity","private","list","is"," ","in","159",".","_","object"]},{"location":"2020/1104/sap-mdg-api-example/#21160-is_entity_maintainable-private","text":"","text_tokens":[],"title":"2.1.160 IS_ENTITY_MAINTAINABLE Private","title_tokens":["2.1","entity","private","is"," ","160","maintainable",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#21161-is_entity_type_in_type_scope-private","text":"","text_tokens":[],"title":"2.1.161 IS_ENTITY_TYPE_IN_TYPE_SCOPE Private","title_tokens":["2.1","entity","type","private","is"," ","in",".","_","161","scope"]},{"location":"2020/1104/sap-mdg-api-example/#21162-prep_act_assgnmt_read-private","text":"","text_tokens":[],"title":"2.1.162 PREP_ACT_ASSGNMT_READ Private","title_tokens":["2.1","162","read","private","act"," ",".","assgnmt","prep","_"]},{"location":"2020/1104/sap-mdg-api-example/#21163-raise_resumeable_exception-private","text":"","text_tokens":[],"title":"2.1.163 RAISE_RESUMEABLE_EXCEPTION Private","title_tokens":["2.1","raise","private"," ","exception",".","resumeable","_","163"]},{"location":"2020/1104/sap-mdg-api-example/#21164-raise_struc_cx_add_msg-private","text":"","text_tokens":[],"title":"2.1.164 RAISE_STRUC_CX_ADD_MSG Private","title_tokens":["2.1","msg","cx","raise","private","164"," ","add","struc",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#21165-read_assignment_buffer-private","text":"","text_tokens":[],"title":"2.1.165 READ_ASSIGNMENT_BUFFER Private","title_tokens":["2.1","read","private","buffer"," ",".","assignment","165","_"]},{"location":"2020/1104/sap-mdg-api-example/#21166-read_auth_buffer-private","text":"","text_tokens":[],"title":"2.1.166 READ_AUTH_BUFFER Private","title_tokens":["2.1","read","private","buffer"," ","166",".","auth","_"]},{"location":"2020/1104/sap-mdg-api-example/#21167-read_entity_buffer-private","text":"","text_tokens":[],"title":"2.1.167 READ_ENTITY_BUFFER Private","title_tokens":["2.1","entity","read","private","buffer"," ","167",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#21168-remove_assignment-private","text":"","text_tokens":[],"title":"2.1.168 REMOVE_ASSIGNMENT Private","title_tokens":["2.1","private"," ",".","assignment","_","remove","168"]},{"location":"2020/1104/sap-mdg-api-example/#21169-remove_assignment_lock-private","text":"","text_tokens":[],"title":"2.1.169 REMOVE_ASSIGNMENT_LOCK Private","title_tokens":["2.1","private"," ","169","lock",".","assignment","_","remove"]},{"location":"2020/1104/sap-mdg-api-example/#21170-set_hry_object_list_buffer-private","text":"","text_tokens":[],"title":"2.1.170 SET_HRY_OBJECT_LIST_BUFFER Private","title_tokens":["2.1","private","list","set","buffer"," ","170",".","_","hry","object"]},{"location":"2020/1104/sap-mdg-api-example/#21171-set_object_list_buffer-private","text":"","text_tokens":[],"title":"2.1.171 SET_OBJECT_LIST_BUFFER Private","title_tokens":["2.1","private","list","set","buffer"," ","171",".","_","object"]},{"location":"2020/1104/sap-mdg-api-example/#21172-update_assignment_buffer-private","text":"","text_tokens":[],"title":"2.1.172 UPDATE_ASSIGNMENT_BUFFER Private","title_tokens":["2.1","private","buffer"," ",".","update","assignment","_","172"]},{"location":"2020/1104/sap-mdg-api-example/#21173-update_crequest_adm_fields-private","text":"","text_tokens":[],"title":"2.1.173 UPDATE_CREQUEST_ADM_FIELDS Private","title_tokens":["2.1","crequest","private","adm","fields"," ",".","update","173","_"]},{"location":"2020/1104/sap-mdg-api-example/#21174-update_crequest_data-private","text":"","text_tokens":[],"title":"2.1.174 UPDATE_CREQUEST_DATA Private","title_tokens":["2.1","crequest","data","private"," ",".","update","174","_"]},{"location":"2020/1104/sap-mdg-api-example/#21175-upd_buffer_from_io_change-private","text":"","text_tokens":[],"title":"2.1.175 UPD_BUFFER_FROM_IO_CHANGE Private","title_tokens":["2.1","upd","private","buffer"," ","change",".","175","from","_","io"]},{"location":"2020/1104/sap-mdg-api-example/#21176-write_auth_buffer-private","text":"","text_tokens":[],"title":"2.1.176 WRITE_AUTH_BUFFER Private","title_tokens":["2.1","write","private","buffer"," ","176",".","auth","_"]},{"location":"2020/1104/sap-mdg-api-example/#21177-write_entity_buffer-private","text":"","text_tokens":[],"title":"2.1.177 WRITE_ENTITY_BUFFER Private","title_tokens":["2.1","entity","write","private","177","buffer"," ",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#21178-is_crequest_user-private","text":"","text_tokens":[],"title":"2.1.178 IS_CREQUEST_USER Private","title_tokens":["2.1","crequest","user","private","is","178"," ",".","_"]},{"location":"2020/1104/sap-mdg-api-example/#22-cl_usmd_crequest_api","text":"TODO","text_tokens":["todo"],"title":"2.2 CL_USMD_CREQUEST_API","title_tokens":["crequest","cl","api"," ","usmd","_","2.2"]},{"location":"2020/1104/sap-mdg-api-example/#23-cl_usmd_crequest_delete","text":"TODO","text_tokens":["todo"],"title":"2.3 CL_USMD_CREQUEST_DELETE","title_tokens":["crequest","cl"," ","usmd","delete","2.3","_"]},{"location":"archives/ABAP-guide-zh/","text":"VIA: github.com/SAP/styleguides/blob/master/clean-abap/CleanABAP_zh Translated from English original on 14.11.2019 . Latest version in English . [转载] ABAP 整洁之道 ¶ 中文 · English · Français · Deutsch 本指南针对 ABAP 改编自 Robert C. Martin 所著的 Clean Code 。 速查表 为打印优化版本。 目录 ¶ 做法 整洁代码入门之法 旧代码重构之法 自动检查之法 与其他指南互通之法 表示异议之法 名称 使用描述性名称 首选解决方案域和问题域术语 使用复数形式 使用能读出来的名称 避免缩写 在各处使用相同缩写 用名词表示类而用动词表示方法 避免干扰词，如 \"data\"、\"info\"、\"object\" 每个概念选取一个词 仅在本意如此时使用模式名称 避免编码，特别是匈牙利表示法和前缀 语言 顾及传统 顾及性能 面向对象编程优于过程式编程 函数式语言结构优于过程式语言结构 避免过时语言元素 明智地使用设计模式 常量 使用常量而非幻数 枚举类优于常量接口 如果不使用枚举类，则对常量进行分组 变量 内联声明优于最前声明 勿在可选分支中内联声明 勿用链式最前声明 REF TO 优于 FIELD-SYMBOL 表 使用恰当的表类型 避免 DEFAULT KEY INSERT INTO TABLE 优于 APPEND TO LINE_EXISTS 优于 READ TABLE 或 LOOP AT READ TABLE 优于 LOOP AT LOOP AT WHERE 优于嵌套式 IF 避免不必要的表读取 字符串 使用 ` 定义文字 使用 | 汇集文本 布尔值 明智地使用布尔值 用 ABAP_BOOL 表示布尔值 使用 ABAP_TRUE 和 ABAP_FALSE 进行比较 使用 XSDBOOL 设置布尔变量 条件 尽量使条件为正 IS NOT 优于 NOT IS 考虑分解复杂条件 考虑提炼复杂条件 If 语句 无空的 IF 分支 对于多个备选条件，CASE 优于 ELSE IF 保持低嵌套深度 正则表达式 较简单的方法优于正则表达式 基本检查优于正则表达式 考虑汇集复杂的正则表达式 类 类：面向对象 对象优于静态类 组合优于继承 勿在同一个类中混用有态和无态 作用域 缺省情况下为全局，仅在适当位置为局部 若非为继承而设计则为 FINAL 缺省情况下为 PRIVATE，仅在需要时为 PROTECTED 考虑使用不可变对象而非 getter 保守地使用 READ-ONLY 构造函数 NEW 优于 CREATE OBJECT 如果全局类为 CREATE PRIVATE，则保留 CONSTRUCTOR 为公共 多个静态创建方法优于可选参数 用描述性名称表示多个创建方法 仅在多实例无意义的情况下变成单例 方法 调用 函数式调用优于过程式调用 省略 RECEIVING 省略可选关键字 EXPORTING 在单参数调用中省略参数名称 在调用实例方法时省略自我引用 me 方法：面向对象 实例优于静态方法 公共实例方法应为接口的一部分 参数数目 力图减少 IMPORTING 参数，最好少于三个 拆分方法而非添加 OPTIONAL 参数 保守地使用 PREFERRED PARAMETER RETURN、EXPORT 或 CHANGE 恰有一个参数 参数类型 RETURNING 优于 EXPORTING RETURNING 大表通常没有问题 单独使用 RETURNING 或 EXPORTING 或 CHANGING，而不要组合使用 在合适时保守地使用 CHANGING 拆分方法而非使用布尔输入参数 参数名称 考虑调用 RETURNING 参数 RESULT 参数初始化 清除或覆盖 EXPORTING 引用参数 如果输入和输出可能相同则要当心 勿清除 VALUE 参数 方法体 做且仅做一件事，把它做好 关注愉快路径或错误处理，但非两者兼顾 将抽象降一级 保持方法精简 控制流 快速失败 CHECK 对 RETURN 避免在其他位置使用 CHECK 错误处理 消息 使消息易于查找 返回代码 异常优于返回代码 别让故障溜走 异常 异常针对的是错误，而不是正常情况 使用基于类的异常 抛出 使用各自的超类 抛出一种类型的异常 使用子类以便调用者能够区分错误情况 针对可应对的异常抛出 CX_STATIC_CHECK 针对通常不可恢复的情况抛出 CX_NO_CHECK 针对可避免的异常考虑 CX_DYNAMIC_CHECK 针对完全不可恢复的情况进行转储 RAISE EXCEPTION NEW 优于 RAISE EXCEPTION TYPE 捕获 包裹外来异常而非任其侵入代码 注释 用代码表达自己而不是靠注释 注释绝非坏名称的借口 使用方法而非注释来对代码分段 写注释是要解释为什么而非是什么 设计应放到设计文档里而不是代码里 用 \" 而非 * 加注释 将注释放在与其相关的语句前面 删除代码而非将其注释掉 使用 FIXME、TODO 和 XXX 并添加自己的标识 勿添加方法签名和注释结尾 勿复制消息文本作为注释 ABAP 文档仅适用于公共 API 编译指示优于伪注释 格式化 保持一致 为阅读而不是书写进行优化 激活前使用格式优化器 使用格式优化器团队设置 每行只有一条语句 恪守合理的行长度 紧缩代码 添加单一空行来分隔内容，而不要添加多行 勿因分隔空行产生困扰 对齐同一对象而非不同对象的赋值 在行尾关闭括号 保持单参数调用于一行 保持参数在调用后面 如果换行，则在调用下缩进参数 将多个参数换行 对齐参数 如果调用行过长则将其换行 缩进并卡到制表位 如同方法调用那样缩进内联声明 勿对齐类型子句 测试 原则 编写可测试的代码 让他人能够进行模拟 可读性规则 勿制作副本或写测试报告 测试公共项而非私有内部项 勿困扰于覆盖范围 测试类 按用途调用局部测试类 将测试放在局部类 将帮助方法放在帮助类 如何执行测试类 被测代码 赋予被测代码有意义的名称，或使用缺省名称 CUT 测试接口而非类 将被测代码的调用提取到自身的方法 注入 使用依赖倒置注入测试替身 考虑使用 ABAP 测试替身工具 利用测试工具 使用测试缝隙作为临时解决办法 使用 LOCAL FRIENDS 访问依赖倒置的构造函数 勿滥用 LOCAL FRIENDS 侵入被测代码 勿更改生产代码来使代码可测试 勿子类化来模拟方法 勿模拟不需要的东西 勿构建测试框架 测试方法 测试方法名称：反映出设想和预期的情形 使用 given-when-then \"When\" 恰为一个调用 除非真正需要否则勿添加 TEARDOWN 测试数据 使其易于辨明含义 使其易于辨明差异 使用常量描述测试数据的用途和重要性 断言 少而精的断言 使用恰当的断言类型 断言内容而非数量 断言质量而非内容 使用 FAIL 检查是否出现预期异常 转发意外异常而非捕获就失败 编写自定义断言以缩短代码和避免重复 做法 ¶ ABAP 整洁之道 > 目录 > 本节 整洁代码入门之法 ¶ ABAP 整洁之道 > 目录 > 做法 > 本节 如果您初识整洁代码，应首先阅读 Robert C. Martin 所著的 Clean Code 。借助 Clean Code Developer initiative ，您可以从头学起，循序渐进地对该主题有一般性的了解。 建议从容易理解且广为接受的方面入手，如 布尔值 、 条件 和 If 语句 。 您可能将会从 方法 一节获得最大受益，特别是 做且仅做一件事，把它做好 和 方法精简 ，因为这些会极大地改善代码的总体结构。 对于有行事经验但初识整洁代码的团队，本文的某些主题可能会引起团队内激烈的讨论；这些主题绝对“有益健康”，但人们可能刚开始不太适应。 后面会再继续探讨这些颇具争议的主题，特别是 注释 、 名称 和 格式化 ，它们可能会引起孜孜不倦的争论，只有认识到整洁代码积极效应的团队才知道它的好处。 旧代码重构之法 ¶ ABAP 整洁之道 > 目录 > 做法 > 本节 如果正在遗留项目上工作，其中含有大量无法或不想更改的代码，因为它们可以无冲突地运行在新代码环境，这种情况下， 更改 布尔值 、 条件 、 If 语句 和 方法 方面的主题最有价值。 对于遗留项目而言， 名称 主题改进太费劲了，它可能会在新旧代码之间产生差异，在某种程度上，其中的诸如 避免编码，特别是匈牙利表示法和前缀 等节忽略为宜。 我们发现采用四步计划进行重构，结果比较好： 先让团队上道。沟通并解释新的风格，使项目团队的每个人对此达成一致意见。不用一下子就推行所有指导原则，只需从小部分没有争议的子集入手，然后由此拓展。 按照_童子军规则_开展每日的例行工作： 每次修改代码都比原先更整洁 。不要因此而困扰，好几个小时沉湎于“清理整个营地”，只需花几分钟，思考如何持续不断地改进。 构筑_整洁小岛_：时不时挑选小的对象或组件，试着进行全方位的清洁。这些小岛印证了现在所做事情的好处，为进一步重构形成了经得起考验的坚强堡垒。 谈经论道。不管是设立老派的 范根代码评审 ，还是举办宣讲会，抑或是在自己喜爱的聊天工具中组建讨论板：需要讲出自己的经验和体会，以使团队逐渐达成共识。 自动检查之法 ¶ ABAP 整洁之道 > 目录 > 做法 > 本节 没有一整套全面的静态代码检查方法可以自动检测本文所述的我们这里所描述的反面模式。 ABAP 测试主控室、代码分析器、扩展检查和检查管理器提供了一些检查方法，这些方法可能有助于发现某些问题。 abapOpenChecks 是一个开源的代码分析器检查集，也涵盖了所述的某些反面模式。 abaplint 是 一个ABAP 解析器的开源的实现重写。它不需要SAP系统就可以运行，旨在用 abapGit 使代码串行化。它提供了多个集成（GitHub Actions、Jenkins、文本编辑器...），涵盖了某些反面模式，也可用来检查格式化和代码规范。 与其他指南互通之法 ¶ ABAP 整洁之道 > 目录 > 做法 > 本节 本指南秉承整洁代码的_精神_，这意味着我们对 ABAP 编程语言进行了一些调整，例如， 针对可管理的异常抛出 CX_STATIC_CHECK 。 某些论据来自 ABAP Programming Guidelines 与本指南大多是兼容的；背离之处予以指明，务求符合整洁代码的精神。 本指南也遵循 DSAG's Recommendations for ABAP Development ，不过我们在大多数细节上更加精确。 表示异议之法 ¶ ABAP 整洁之道 > 目录 > 做法 > 本节 编写本风格指南的目标读者已通晓整洁代码或目前正致力于此，且对如何将整洁代码_具体应用于 ABAP_ 极为关注。 因此，请注意，我们没有以原书同样的篇幅和深度介绍所有概念及相关资源：那些内容仍值得一读，特别是，如果您只是因为我们没解释太详细而不同意本文的观点。可使用各节中的链接延伸阅读我们给出指导的背景。 您尽可以讨论文本讲述的任何内容并表示异议。整洁代码的支柱之一是_团队规则_。在您放弃异议之前，一定要给它们一个公平的机会。 CONTRIBUTING 就如何变通本指南或在小的细节上另辟蹊径，给出了建议。 名称 ¶ ABAP 整洁之道 > 目录 > 本节 使用描述性名称 ¶ ABAP 整洁之道 > 目录 > 名称 > 本节 使用可以传达事物内容和含义的名称。 CONSTANTS max_wait_time_in_seconds TYPE i ... DATA customizing_entries TYPE STANDARD TABLE ... METHODS read_user_preferences ... CLASS / clean / user_preference_reader ... 不要只把注意力放在数据类型和技术编码上。它们对理解代码几乎没什么贡献。 \" anti-pattern CONSTANTS sysubrc_04 TYPE sysubrc ... DATA iso3166tab TYPE STANDARD TABLE ... METHODS read_t005 ... CLASS / dirty / t005_reader ... 不要试图通过注释来弥补坏的名称。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Use Intention-Revealing Names 。 首选解决方案域和问题域术语 ¶ ABAP 整洁之道 > 目录 > 名称 > 本节 在解决方案域（即计算机科学术语，如 \"queue\" 或 \"tree\"）和问题域（即业务领域术语，如 \"account\" 或 \"ledger\"）中搜索好的名称。 按问题域命名时，业务层的命名最好听。对于采用域驱动设计而设计的组件（如 API 和业务对象）尤为如此。 按解决方案域命名时，提供大多数技术功能（如工厂类和抽象算法）层的命名最好听。 在任何情况下都不要试图加进自己的语言。需能够在开发人员、产品负责人、合作伙伴和客户之间交换信息，因此要选择所有人不用查定制词典就能理解的名称。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Use Solution Domain Names and [...]: > Use Problem Domain Names 。 使用复数形式 ¶ ABAP 整洁之道 > 目录 > 名称 > 本节 在 SAP 有一种传统习惯，那就是用单数形式命名事物的表，例如， country 表示“国家表”。外界普遍倾向于使用复数形式表示事物的列表。因此，建议最好改用 countries 。 这条建议主要针对诸如变量和属性等事物。> 对于开发对象，可能存在同样> 也有意义的模式，例如，有一种广泛使用的规范，> 以单数形式命名数据库表（“透明表”）。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Use Intention-Revealing Names 。 使用能读出来的名称 ¶ ABAP 整洁之道 > 目录 > 名称 > 本节 关于对象会有很多思考和讨论，因此要使用能读出来的名称，例如， detection_object_types 优于诸如 dobjt 这种晦涩的名称。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Use Pronounceable Names 。 避免缩写 ¶ ABAP 整洁之道 > 目录 > 名称 > 本节 如果有足够空间，那就完整地写出名称。仅当超过长度限制时才使用缩写。 如果不得不缩写，首先考虑_不重要_的词。 采用缩写，可能第一眼看起来很高效，但很快就会变得含糊不清。例如， cust 中的 \"cust\" 究竟是指 \"customizing\"、\"customer\" 还是 \"custom\"？三者在 SAP 应用程序中都很常见。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Make Meaningful Distinctions 。 在各处使用相同缩写 ¶ ABAP 整洁之道 > 目录 > 名称 > 本节 人们会搜索关键字来查找相关代码。为此，应对相同事物使用相同缩写。例如，始终将 \"detection object type\" 缩写为 \"dobjt\"，而不是混合使用 \"dot\"、\"dotype\"、\"detobjtype\" 等等。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Use Searchable Names 。 用名词表示类而用动词表示方法 ¶ ABAP 整洁之道 > 目录 > 名称 > 本节 使用名词或名词词组命名类、接口和对象： CLASS / clean / account CLASS / clean / user_preferences INTERFACE / clean / customizing_reader 使用动词或动词词组命名方法： METHODS withdraw METHODS add_message METHODS read_entries 用诸如 is_ 和 has_ 之类的动词作为布尔方法的开头，读起来会很流畅： IF is_empty ( table ). 建议也像方法一样给函数命名： FUNCTION / clean / read_alerts 避免干扰词，如 \"data\"、\"info\"、\"object\" ¶ ABAP 整洁之道 > 目录 > 名称 > 本节 省略干扰词 account \" instead of account_data alert \" instead of alert_object 或将其替换为某些确实更有价值的特定字眼 user_preferences \" instead of user_info response_time_in_seconds \" instead of response_time_variable 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Make Meaningful Distinctions 每个概念选取一个词 ¶ ABAP 整洁之道 > 目录 > 名称 > 本节 METHODS read_this . METHODS read_that . METHODS read_those . 为一个概念选择一个术语并坚持使用；不要混合使用其他同义词。同义词会使读者浪费时间查找本不存在的差异。 \" anti-pattern METHODS read_this . METHODS retrieve_that . METHODS query_those . 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Pick One Word per Concept 仅在本意如此时使用模式名称 ¶ ABAP 整洁之道 > 目录 > 名称 > 本节 不要对类和接口使用软件设计模式的名称，除非本意真的如此。例如，不要将类称为 file_factory ，除非它的确实施了工厂设计模式。最常见的模式包括： singleton 、 factory 、 facade 、 composite 、 decorator 、 iterator 、 observer 和 strategy 。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Avoid Disinformation 避免编码，特别是匈牙利表示法和前缀 ¶ ABAP 整洁之道 > 目录 > 名称 > 本节 鼓励丢掉_所有_编码前缀。 METHOD add_two_numbers . result = a + b . ENDMETHOD . 而不是毫无必要地加长 METHOD add_two_numbers . rv_result = iv_a + iv_b . ENDMETHOD . Avoid Encodings > 深入介绍了这样做的理由。 语言 ¶ ABAP 整洁之道 > 目录 > 本节 顾及传统 ¶ ABAP 整洁之道 > 目录 > 语言 > 本节 如果是针对较早的 ABAP 版本进行编码，则应谨慎采纳本指南中的建议：下文的许多建议利用了相对较新的语法和结构，这些在较早的 ABAP 版本中可能不受支持。在必须支持的最早版本上验证欲遵循的指导原则。不要简单地整个抛弃整洁代码 - 绝大多数规则（例如，命名、注释）在_任何_ ABAP 版本中都行得通。 顾及性能 ¶ ABAP 整洁之道 > 目录 > 语言 > 本节 如果是为高性能组件编码，则应谨慎采纳本指南中的建议：整洁代码在某些方面可能会降低速度（更多方法调用）或消耗更多内存（更多对象）。ABAP 的某些特点可能会加剧这种情况，例如，在调用方法时，它会比较数据类型，这样一来，将单个大方法拆分成多个子方法，可能会降低代码速度。 然而，强烈建议不要因为模糊的恐惧就过早地悲观失望。绝大多数规则（例如，命名、注释）根本不会产生任何负面影响。尽力采用整洁的面向对象的方式做事情。如果有什么过慢，就做一个性能测量。只有这样做之后，才应根据事实作出决策，放弃所选规则。 一些更深入的思考，部分取自 Martin Fowler 所著的 Refactoring 中的第 2 章： 在典型的应用程序中，大部分运行时间都花在很小比例的代码中。小到 10% 的代码会占到 90% 的运行时间，特别是在 ABAP 中，很大比例的运行时间可能都是数据库时间。 因此，花大力气试图使_所有_代码都一直保持超高效率，并非最好的资源安排方式。不主张忽视性能，但在初始开发阶段，应该更关注代码的整洁性和条理分明的程度，然后使用剖析器找出关键区域进行优化。 事实上，我们有理由证明，这种方式对性能的正面影响更大，因为优化努力更有针对性，更容易找出性能瓶颈，而且条理分明的代码更容易进行重构和调优。 面向对象编程优于过程式编程 ¶ ABAP 整洁之道 > 目录 > 语言 > 本节 面向对象的程序（类、接口）比过程式代码（函数、程序）分段更清晰，并且可以更加容易地进行重构和测试。尽管在某些情况下必须提供过程式对象（对 RFC 用函数、对事务用程序），但这些对象除了调用提供实际功能的相应类之外，不应该再干别的： FUNCTION check_business_partner [...]. DATA ( validator ) = NEW / clean / biz_partner_validator ( ). result = validator -> validate ( business_partners ). ENDFUNCTION . Function Groups vs. Classes > 详细描述了两者的差异。 函数式语言结构优于过程式语言结构 ¶ ABAP 整洁之道 > 目录 > 语言 > 本节 它们通常更加简短，而且更容易为现代程序员所接受。 DATA ( variable ) = 'A' . \" MOVE 'A' TO variable. DATA ( uppercase ) = to_upper ( lowercase ). \" TRANSLATE lowercase TO UPPER CASE. index += 1 . \" >= NW 7.54 index = index + 1 . \" < NW 7.54 \" ADD 1 TO index. DATA ( object ) = NEW / clean / my_class ( ). \" CREATE OBJECT object TYPE /dirty/my_class. result = VALUE # ( FOR row IN input ( row - text ) ). \" LOOP AT input INTO DATA(row). \" INSERT row-text INTO TABLE result. \" ENDLOOP. DATA ( line ) = value_pairs [ name = 'A' ]. \" READ TABLE value_pairs INTO DATA(line) WITH KEY name = 'A'. DATA ( exists ) = xsdbool ( line_exists ( value_pairs [ name = 'A' ] ) ). IF line_exists ( value_pairs [ name = 'A' ] ). \" READ TABLE value_pairs TRANSPORTING NO FIELDS WITH KEY name = 'A'. \" DATA(exists) = xsdbool( sy-subrc = 0 ). 下文的许多详细规则只不过是具体重申了这条通用的建议。 避免过时语言元素 ¶ ABAP 整洁之道 > 目录 > 语言 > 本节 在升级 ABAP 版本时，务必要检查是否有过时的语言元素，避免再使用它们。 例如，以下语句中 @ 转义的 \"host\" 变量更清楚地表明了什么是程序变量、什么是数据库中的列， SELECT * FROM spfli WHERE carrid = @ carrid AND connid = @ connid INTO TABLE @ itab . 相较于 过时的转义形式 SELECT * FROM spfli WHERE carrid = carrid AND connid = connid INTO TABLE itab . 较新的可选方案倾向于提高代码的可读性，减少与现代编程范式的设计冲突，这样切换到这些方案时就会自动使代码更整洁。 如果继续使用旧代码编写方式，过时元素可能在处理速度和内存消耗方面无法再从优化中受益。 使用现代语言元素，可以更轻松地将年轻的 ABAP 程序员带上道，由于在 SAP 的培训中不再教授过时内容，他们可能不再熟悉过时的结构。 SAP NetWeaver 文档固定包含一部分，其中列出了过时的语言元素，例如， NW 7.50 、 NW 7.51 、 NW 7.52 、 NW 7.53 。 明智地使用设计模式 ¶ ABAP 整洁之道 > 目录 > 语言 > 本节 仅在合适且有明显好处的地方使用。不要为了使用而到处用设计模式。 常量 ¶ ABAP 整洁之道 > 目录 > 本节 使用常量而非幻数 ¶ ABAP 整洁之道 > 目录 > 常量 > 本节 IF abap_type = cl_abap_typedescr => typekind_date . 在清晰方面好于 \" anti-pattern IF abap_type = 'D' . 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 17: Smells and Heuristics: G25: > Replace Magic Numbers with Named Constants 。 枚举类优于常量接口 ¶ ABAP 整洁之道 > 目录 > 常量 > 本节 CLASS / clean / message_severity DEFINITION PUBLIC ABSTRACT FINAL . PUBLIC SECTION . CONSTANTS : warning TYPE symsgty VALUE 'W' , error TYPE symsgty VALUE 'E' . ENDCLASS . 或 CLASS / clean / message_severity DEFINITION PUBLIC CREATE PRIVATE FINAL . PUBLIC SECTION . CLASS-DATA : warning TYPE REF TO / clean / message_severity READ - ONLY , error TYPE REF TO / clean / message_severity READ - ONLY . \" ... ENDCLASS . 而不是将不相关的东西混在一起 \" anti-pattern INTERFACE / dirty / common_constants . CONSTANTS : warning TYPE symsgty VALUE 'W' , transitional TYPE i VALUE 1 , error TYPE symsgty VALUE 'E' , persisted TYPE i VALUE 2 . ENDINTERFACE . Enumerations > 描述了常见的枚举模式> 并讨论了它们的优缺点。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 17: Smells and Heuristics: J3: Constants versus Enums 。 如果不使用枚举类，则对常量进行分组 ¶ ABAP 整洁之道 > 目录 > 常量 > 本节 如果以松散方式集合常量，例如，在接口中，则应将其分组： CONSTANTS : BEGIN OF message_severity , warning TYPE symsgty VALUE 'W' , error TYPE symsgty VALUE 'E' , END OF message_severity , BEGIN OF message_lifespan , transitional TYPE i VALUE 1 , persisted TYPE i VALUE 2 , END OF message_lifespan . 使关系更清晰，好于： \" Anti-pattern CONSTANTS : warning TYPE symsgty VALUE 'W' , transitional TYPE i VALUE 1 , error TYPE symsgty VALUE 'E' , persisted TYPE i VALUE 2 , 利用组还可以成组进行访问，例如，进行输入验证： DO number_of_constants TIMES . ASSIGN COMPONENT sy - index OF STRUCTURE message_severity TO FIELD - SYMBOL ( <constant> ). IF <constant> = input . is_valid = abap_true . RETURN . ENDIF . ENDWHILE . 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 17: Smells and Heuristics: G27: Structure over Convention 。 变量 ¶ ABAP 整洁之道 > 目录 > 本节 内联声明优于最前声明 ¶ ABAP 整洁之道 > 目录 > 变量 > 本节 如果遵循本文的指导原则，在首次出现的地方内联式声明变量显得更加自然，方法体也会变得很精短（3-5 条语句）。 METHOD do_something . DATA ( name ) = 'something' . DATA ( reader ) = / clean / reader => get_instance_for ( name ). result = reader -> read_it ( ). ENDMETHOD . 好过在方法开头单独的 DATA 部分声明变量 \" anti-pattern METHOD do_something . DATA : name TYPE seoclsname , reader TYPE REF TO / dirty / reader . name = 'something' . reader = / dirty / reader => get_instance_for ( name ). result = reader -> read_it ( ). ENDMETHOD . 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 5: Formatting: Vertical Distance: Variable Declarations 。 勿在可选分支中内联声明 ¶ ABAP 整洁之道 > 目录 > 变量 > 本节 \" anti-pattern IF has_entries = abap_true . DATA ( value ) = 1 . ELSE . value = 2 . ENDIF . 这样可以正常运行，因为 ABAP 会像声明位于方法开头那样来处理内联式声明。然而，这会令读者感到极其迷惑，特别是方法体较长而又没当场发现声明的话。在此情况下，不要使用内联式声明而将声明放在最前面： DATA value TYPE i . IF has_entries = abap_true . value = 1 . ELSE . value = 2 . ENDIF . 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 5: Formatting: Vertical Distance: Variable Declarations 。 勿用链式最前声明 ¶ ABAP 整洁之道 > 目录 > 变量 > 本节 DATA name TYPE seoclsname . DATA reader TYPE REF TO / dirty / reader . 链式处理主张在逻辑层级关联定义的变量。为了一致性，必须确保所有链式变量结成一体，要添加变量，就得另外引入链组。尽管这种方法可行，但通常不值得花这个功夫。 另外，链式处理也毫无必要地使重新格式化和重构变得复杂，因为每行看起来都不同，改起来需要四处挪动冒号、句号和逗号，根本不值得花功夫。 \" anti-pattern DATA : name TYPE seoclsname , reader TYPE REF TO / dirty / reader . 另请参阅 Don't align type clauses 如果使用链式数据声明，则每组结成一体的变量各用一个链。 REF TO 优于 FIELD-SYMBOL ¶ ABAP 整洁之道 > 目录 > 变量 > 本节 LOOP AT components REFERENCE INTO DATA ( component ). 而非等效形式 \" anti-pattern LOOP AT components ASSIGNING FIELD - SYMBOL ( <component> ). 需要指针的地方除外 ASSIGN generic->* TO FIELD - SYMBOL ( <generic> ). ASSIGN COMPONENT name OF STRUCTURE structure TO FIELD - SYMBOL ( <component> ). ASSIGN ( class_name ) => ( static_member ) TO FIELD - SYMBOL ( <member> ). 从代码评审的经验表明人们往往会随心所欲地做出选择：“就是因为”、“因为我们总是采用那种循环方式”，或者“没特殊原因”。随意选择会令读者把时间浪费在毫无意义的问题上：为什么用这个而不用那个，因此应代之以有理有据、准确无误的决策。我们的建议基于这种理由： 指针能做一些引用做不了的事情，比如动态访问结构的组成部分。同样，引用也能做指针做不了的事情，比如构造动态类型的数据结构。总之，单独指望一个是不行的。 在面向对象的 ABAP 中，引用到处都有并且无法避免，因为任何对象皆是 REF TO <class-name> 。相反，指针仅在涉及动态类型的少数特殊情况下才绝对需要。因此，引用自然成为任何面向对象程序中的首选。 指针比引用短，但结果节省的内存却微不足道，尽可以忽略不计。同样，速度也不是问题。因此，在性能方面没理由厚此薄彼。 更多信息参阅 > ABAP Programming Guidelines 中的篇章 Accessing Data Objects Dynamically 。 表 ¶ ABAP 整洁之道 > 目录 > 本节 使用恰当的表类型 ¶ ABAP 整洁之道 > 目录 > 表 > 本节 HASHED 表通常用来表示**单步填充**、 永不修改**且**常按键值读取**的**大表 。其固有的内存和处理开销使得散列表仅在数据量很大且读访问次数很多的情况下才有价值。每次对表内容进行更改，均需要大量重新计算散列值，因此修改过于频繁的表不要使用此种类型。 SORTED 表通常用于表示需要**时时排序**、 逐位填充**或**需要修改**并且**常按一个或多个完整或部分键值读取**或**以某种特定顺序**处理的**大表 。添加、更改或移除内容，需要找到恰当的插入点，但不需要调整表索引的其余部分。仅对读访问次数很多的情况，有序表才有价值。 STANDARD 表用于表示索引开销大于索引受益的**小表**，以及或是毫不在乎行顺序或是就想完全按追加顺序进行处理的**“数组”**。另外，也适用于需要对表进行不同访问的情况，例如，通过 SORT 和 BINARY SEARCH 进行索引访问和排序访问。 这些只是粗略的指导原则。> 更多细节参见 ABAP Language Help 中的篇章 Selection of Table Category 。 避免 DEFAULT KEY ¶ ABAP 整洁之道 > 目录 > 表 > 本节 \" anti-pattern DATA itab TYPE STANDARD TABLE OF row_type WITH DEFAULT KEY . 添加缺省键值常常只是为了让具有较新功能的语句得以正常工作。事实上，这些键值本身通常是多余的，除了耗费资源，别无它用。由于它们会忽略数值数据类型，因此甚至可能会导致隐蔽的错误。不含显式字段列表的 SORT 和 DELETE ADJACENT 语句将会转而采用内部表的主键，在使用 DEFAULT KEY 的情况下，这可能会导致十分意想不到的结果，例如，当以数值字段作为键值的分量时，特别是当与 READ TABLE ... BINARY 等结合使用时。 要么显式指定键值 DATA itab2 TYPE STANDARD TABLE OF row_type WITH NON-UNIQUE KEY comp1 comp2 . 如果根本不需要键值的话，则采用 EMPTY KEY 。。 DATA itab1 TYPE STANDARD TABLE OF row_type WITH EMPTY KEY . 参照 Horst Keller 的博客文章 Internal Tables with Empty Key **注意：**具有 EMPTY KEY 的内部表上的 SORT 根本不会进行排序，> 但假如能静态确定键值为空，就会发出语法警告。 INSERT INTO TABLE 优于 APPEND TO ¶ ABAP 整洁之道 > 目录 > 表 > 本节 INSERT VALUE # ( ... ) INTO TABLE itab . INSERT INTO TABLE 对所有表和键值类型都起作用，因而更便于在性能需求发生变化时重构表的类型和键值定义。 仅当以类似数组的方式使用 STANDARD 表时才使用 APPEND TO ，如果想要强调所添加的条目应为最后一行的话。 LINE_EXISTS 优于 READ TABLE 或 LOOP AT ¶ ABAP 整洁之道 > 目录 > 表 > 本节 IF line_exists ( my_table [ key = 'A' ] ). 更清楚简洁地表明意图，好于 \" anti-pattern READ TABLE my_table TRANSPORTING NO FIELDS WITH KEY key = 'A' . IF sy - subrc = 0 . 或者甚至是 \" anti-pattern LOOP AT my_table REFERENCE INTO DATA ( line ) WHERE key = 'A' . line_exists = abap_true . EXIT . ENDLOOP . READ TABLE 优于 LOOP AT ¶ ABAP 整洁之道 > 目录 > 表 > 本节 READ TABLE my_table REFERENCE INTO DATA ( line ) WITH KEY key = 'A' . 更清楚简洁地表明意图，好于 \" anti-pattern LOOP AT my_table REFERENCE INTO DATA ( line ) WHERE key = 'A' . EXIT . ENDLOOP . 或者甚至是 \" anti-pattern LOOP AT my_table REFERENCE INTO DATA ( line ). IF line -> key = 'A' . EXIT . ENDIF . ENDLOOP . LOOP AT WHERE 优于嵌套式 IF ¶ ABAP 整洁之道 > 目录 > 表 > 本节 LOOP AT my_table REFERENCE INTO DATA ( line ) WHERE key = 'A' . 更清楚简洁地表明意图，好于 LOOP AT my_table REFERENCE INTO DATA ( line ). IF line -> key = 'A' . EXIT . ENDIF . ENDLOOP . 避免不必要的表读取 ¶ ABAP 整洁之道 > 目录 > 表 > 本节 若你_预期_某一行就在表里，那就读取一次并对异常作出处理就够了， TRY . DATA ( row ) = my_table [ key = input ]. CATCH cx_sy_itab_line_not_found . RAISE EXCEPTION NEW / clean / my_data_not_found ( ). ENDTRY . 而不是用两次读取打乱并减慢主控制流 \" anti-pattern IF NOT line_exists ( my_table [ key = input ] ). RAISE EXCEPTION NEW / clean / my_data_not_found ( ). ENDTRY . DATA ( row ) = my_table [ key = input ]. 除了提高性能以外，这还是更一般性的 关注愉快路径或错误处理，但非两者兼顾 的一种特殊变化形式。 字符串 ¶ ABAP 整洁之道 > 目录 > 本节 使用 ` 定义文字 ¶ ABAP 整洁之道 > 目录 > 字符串 > 本节 CONSTANTS some_constant TYPE string VALUE `ABC` . DATA ( some_string ) = `ABC` . \" --> TYPE string 避免使用 ' ，因为它会增加多余的类型转换，并且会令读者困惑于处理的究竟是 CHAR 还是 STRING ： \" anti-pattern DATA some_string TYPE string . some_string = 'ABC' . | 一般都适用，但无法用于 CONSTANTS ，而且在指定固定值时会增加不必要的开销： \" anti-pattern DATA ( some_string ) = | ABC |. 使用 | 汇集文本 ¶ ABAP 整洁之道 > 目录 > 字符串 > 本节 DATA ( message ) = | Received HTTP code { status_code } with message { text }|. 字符串模板更加突出地表明何为文字、何为变量，特别是如果在文本中嵌入多个变量的话。 \" anti-pattern DATA ( message ) = `Received an unexpected HTTP ` && status_code && ` with message ` && text . 布尔值 ¶ ABAP 整洁之道 > 目录 > 本节 明智地使用布尔值 ¶ ABAP 整洁之道 > 目录 > 布尔值 > 本节 经常会遇到下面这种情况，布尔值似乎是自然的选择 \" anti-pattern is_archived = abap_true . 而换个视角才发现本应选择枚举 archiving_status = / clean / archivation_status => archiving_in_process . 一般来说，用布尔值区分事物的类型是一种坏的选择，因为几乎总会遇到并非彼此排斥的情况 assert_true ( xsdbool ( document -> is_archived ( ) = abap_true AND document -> is_partially_archived ( ) = abap_true ) ). 此外， 拆分方法而非使用布尔输入参数 还解释了为何应始终回避布尔参数。 更多信息参阅 1 用 ABAP_BOOL 表示布尔值 ¶ ABAP 整洁之道 > 目录 > 布尔值 > 本节 DATA has_entries TYPE abap_bool . 不要使用普通类型 char1 。尽管在技术上兼容，但它会掩盖处理的是布尔变量这个事实。 也要避免其他布尔类型，因为它们常常会产生奇怪的副作用，例如， boolean 支持第三个值 \"undefined\"，它会导致难以觉察的编程错误。 在某些情况下，例如，对于 DynPro 字段，可能需要数据字典元素。此时无法使用 abap_bool ，因为它是在类型池 abap 中而不是在数据字典中定义的。在此情况下，转而采用 boole_d 或 xfeld 。如果需要自定义描述，那就创建自己的数据元素。 ABAP 可能是唯一不带通用布尔数据类型的编程语言。然而，设立一个是大势所趋。本建议基于 ABAP Programming Guidelines。 使用 ABAP_TRUE 和 ABAP_FALSE 进行比较 ¶ ABAP 整洁之道 > 目录 > 布尔值 > 本节 has_entries = abap_true . IF has_entries = abap_false . 不要使用等效字符 'X' 和 ' ' 或 space ；用它们很难看出这是一个布尔表达式： \" anti-pattern has_entries = 'X' . IF has_entries = space . 避免与 INITIAL 进行比较 - 这会迫使读者去回想 abap_bool 的缺省值为 abap_false ： \" anti-pattern IF has_entries IS NOT INITIAL . ABAP 可能是唯一不带表示真假的内置“常量”的编程语言。然而，设立它们是大势所趋。本建议基于 ABAP Programming Guidelines。 使用 XSDBOOL 设置布尔变量 ¶ ABAP 整洁之道 > 目录 > 布尔值 > 本节 DATA ( has_entries ) = xsdbool ( line IS NOT INITIAL ). 等效的 IF - THEN - ELSE 除了长得多之外，别无它用： \" anti-pattern IF line IS INITIAL . has_entries = abap_false . ELSE . has_entries = abap_true . ENDIF . xsdbool 是最合乎本来目的的方法，因为它直接产生 char1 ，该类型最适合布尔类型 abap_bool 。等效函数 boolc 和 boolx 会产生不同的类型并增加不必要的隐式类型转换。 我们同意名称 xsdbool 不巧会产生误导；毕竟，我们对 \"xsd\" 前缀暗示的 \"XML Schema Definition\" 部分毫无兴趣。 xsdbool 的一种可行的备选方案是 COND 三元形式。其语法直接明了，但是有点长，因为它会不必要地重复 THEN abap_true 段，而且还需要知道隐式缺省值 abap_false - 这就是为什么我们建议只将其作为第二解决方案。 DATA ( has_entries ) = COND abap_bool ( WHEN line IS NOT INITIAL THEN abap_true ). 条件 ¶ ABAP 整洁之道 > 目录 > 本节 尽量使条件为正 ¶ ABAP 整洁之道 > 目录 > 条件 > 本节 IF has_entries = abap_true . 反之，比较时看看同样的语句会变得多难理解： \" anti-pattern IF has_no_entries = abap_false . 节标题中的“尽量”意味着事先不用强行这样做，直到在某一点要以诸如 空的 IF 分支 之类的语句结束时才应如此： \" anti-pattern IF has_entries = abap_true . ELSE . \" only do something in the ELSE block, IF remains empty ENDIF . 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 17: Smells and Heuristics: G29: Avoid Negative Conditionals 。 IS NOT 优于 NOT IS ¶ ABAP 整洁之道 > 目录 > 条件 > 本节 IF variable IS NOT INITIAL . IF variable NP 'TODO*' . IF variable <> 42 . 否定在逻辑上是等效的，但需要“脑筋转弯”，从而加大了理解难度。 \" anti-pattern IF NOT variable IS INITIAL . IF NOT variable CP 'TODO*' . IF NOT variable = 42 . 尽量使条件为正 的一个更加具体的变化形式。另请参见 ABAP programming guidelines 中的 Alternative Language Constructs 一节。 考虑分解复杂条件 ¶ ABAP 整洁之道 > 目录 > 条件 > 本节 将条件分解成若干基本组成部分，条件就会变得更加简单： DATA ( example_provided ) = xsdbool ( example_a IS NOT INITIAL OR example_b IS NOT INITIAL ). DATA ( one_example_fits ) = xsdbool ( applies ( example_a ) = abap_true OR applies ( example_b ) = abap_true OR fits ( example_b ) = abap_true ). IF example_provided = abap_true AND one_example_fits = abap_true . 而不是全都掺和在一起： \" anti-pattern IF ( example_a IS NOT INITIAL OR example_b IS NOT INITIAL ) AND ( applies ( example_a ) = abap_true OR applies ( example_b ) = abap_true OR fits ( example_b ) = abap_true ). 使用 ABAP 开发工具的快速修复功能，可以很快提取条件并创建如上所示的变量。 考虑提炼复杂条件 ¶ ABAP 整洁之道 > 目录 > 条件 > 本节 将复杂条件提炼成各自的方法是一个好主意： IF is_provided ( example ). METHOD is_provided . DATA ( is_filled ) = xsdbool ( example IS NOT INITIAL ). DATA ( is_working ) = xsdbool ( applies ( example ) = abap_true OR fits ( example ) = abap_true ). result = xsdbool ( is_filled = abap_true AND is_working = abap_true ). ENDMETHOD . If 语句 ¶ ABAP 整洁之道 > 目录 > 本节 无空的 IF 分支 ¶ ABAP 整洁之道 > 目录 > If 语句 > 本节 IF has_entries = abap_false . \" do some magic ENDIF . 更加简明，好于 \" anti-pattern IF has_entries = abap_true . ELSE . \" do some magic ENDIF . 对于多个备选条件，CASE 优于 ELSE IF ¶ ABAP 整洁之道 > 目录 > If 语句 > 本节 CASE type . WHEN type - some_type . \" ... WHEN type - some_other_type . \" ... WHEN OTHERS . RAISE EXCEPTION NEW / clean / unknown_type_failure ( ). ENDCASE . 采用 CASE 更容易看出来是一组互斥的选择。它比一连串 IF 执行起来更快，因为它可以转化为另一种不同的微处理器命令，而不是一连串顺序评估的条件。不必到处重复判别变量，就可以快速引入新的情况。该语句甚至可以防止无意中嵌套 IF - ELSEIF 时可能出现的一些错误。 \" anti-pattern IF type = type - some_type . \" ... ELSEIF type = type - some_other_type . \" ... ELSE . RAISE EXCEPTION NEW / dirty / unknown_type_failure ( ). ENDIF . 保持低嵌套深度 ¶ ABAP 整洁之道 > 目录 > If 语句 > 本节 \" ani-pattern IF <this> . IF <that> . ENDIF . ELSE . IF <other> . ELSE . IF <something> . ENDIF . ENDIF . ENDIF . 嵌套的 IF 不仅难于快速理解，而且需要指数级的测试用例才能完全覆盖。 通常可以通过形成子方法并引入辅助布尔变量来拆分决策树。 其他情况可以通过合并 IF 进行简化，比如 IF <this> AND <that> . 而不是毫无必要地嵌套 \" anti-pattern IF <this> . IF <that> . 正则表达式 ¶ ABAP 整洁之道 > 目录 > 本节 较简单的方法优于正则表达式 ¶ ABAP 整洁之道 > 目录 > 正则表达式 > 本节 IF input IS NOT INITIAL . \" IF matches( val = input regex = '.+' ). WHILE contains ( val = input sub = 'abc' ). \" WHILE contains( val = input regex = 'abc' ). 正则表达式难以快速理解。没有它们，简单情况通常反而更加容易。 正则表达式通常也会消耗更多内存和处理时间，因为需要将其解析成表达式树并在运行时编译成可执行的匹配程序。直接使用循环和临时变量，简单就可以解决。 基本检查优于正则表达式 ¶ ABAP 整洁之道 > 目录 > 正则表达式 > 本节 CALL FUNCTION 'SEO_CLIF_CHECK_NAME' EXPORTING cls_name = class_name EXCEPTIONS ... 而不用费事改成 \" anti-pattern DATA ( is_valid ) = matches ( val = class_name pattern = '[A-Z][A-Z0-9_]{0,29}' ). 当正则表达式无处不在时，，对不重复自己 (DRY) 的原则视而不见似乎变成一种自然的倾向，请对照 Robert C. Martin 所著的 Clean Code 中的 Chapter 17: Smells and Heuristics: General: G5: Duplication 。 考虑汇集复杂的正则表达式 ¶ ABAP 整洁之道 > 目录 > 正则表达式 > 本节 CONSTANTS class_name TYPE string VALUE `CL\\_.*` . CONSTANTS interface_name TYPE string VALUE `IF\\_.*` . DATA ( object_name ) = |{ class_name } \\ | { interface_name }|. 有一些复杂的正则表达式，当您向读者展示它们是如何从更基本的片段构成时，就会变得更加容易。 类 ¶ ABAP 整洁之道 > 目录 > 本节 类：面向对象 ¶ ABAP 整洁之道 > 目录 > 类 > 本节 对象优于静态类 ¶ ABAP 整洁之道 > 目录 > 类 > 类：面向对象 > 本节 首先，静态类失去了面向对象所具备的全部优势。特别是，有了它们，几乎无法在单元测试中用测试替身替换生产中的相关依赖。 如果您在考虑是否该使类或方法变成静态的，答案几乎总是：不。 对于这条规则，有一种例外情况可以接受，那就是简单的实用工具类。其方法使其更容易与某些 ABAP 类型进行交互。它们不仅完全无态，而且相当初级，看起来就像是 ABAP 语句或内置函数。辨别因素是，其调用 者会将它们紧紧捆绑到各自的代码中，从而真的没法在单元测试中对其进行模拟。 CLASS / clean / string_utils DEFINITION [...]. CLASS-METHODS trim IMPORTING string TYPE string RETURNING VALUE ( result ) TYPE string . ENDCLASS . METHOD retrieve . DATA ( trimmed_name ) = / clean / string_utils => trim ( name ). result = read ( trimmed_name ). ENDMETHOD . 组合优于继承 ¶ ABAP 整洁之道 > 目录 > 类 > 类：面向对象 > 本节 避免构建具有继承性的类层次结构，应该选择组合。 很难设计出完美的继承，因为需要遵守规则，如 Liskov substitution principle 。另外，也很难理解，因为人们需要认识并领会层次结构背后的指导原则。继承会降低重用性，因为方法往往仅对子类才可用。它还会使重构复杂化，因为移动或更改成员往往需要对整个层次结构树进行更改。 组合意味着要设计小的独立对象，每个对象只服务于一个特定目的。通过简单的代理和外观模式，就可以将这些对象重新组合成更复杂的对象。组合可能会产生更多的类，但除此之外再无其他缺点。 莫因这条规则而丧失在恰当之处使用继承的信心。有一些应用场合很适合使用继承，例如， Composite design pattern 。只需中肯地问问自己，在所处情况下，继承是否确实利大于弊。如有怀疑，一般来说，选择组合更稳妥。 Interfaces vs. abstract classes 对此做了一些详细比较。 勿在同一个类中混用有态和无态 ¶ ABAP 整洁之道 > 目录 > 类 > 类：面向对象 不要在同一个类中混用无态和有态编程范式。 在无态编程中，方法获取输入并产生输出， 而不会有任何副作用 ，因此无论何时、以何顺序调用，方法都会产生相同的结果。 CLASS / clean / xml_converter DEFINITION PUBLIC FINAL CREATE PUBLIC . PUBLIC SECTION . METHODS convert IMPORTING file_content TYPE xstring RETURNING VALUE ( result ) TYPE / clean / some_inbound_message . ENDCLASS . CLASS / clean / xml_converter IMPLEMENTATION . METHOD convert . cl_proxy_xml_transform => xml_xstring_to_abap ( EXPORTING xml = file_content ext_xml = abap_true svar_name = 'ROOT_NODE' IMPORTING abap_data = result ). ENDMETHOD . ENDCLASS . 在有态编程中，通过对象的方法操控其内部状态，这意味着_满是副作用_。 CLASS / clean / log DEFINITION PUBLIC CREATE PUBLIC . PUBLIC SECTION . METHODS add_message IMPORTING message TYPE / clean / message . PRIVATE SECTION . DATA messages TYPE / clean / message_table . ENDCLASS . CLASS / clean / log IMPLEMENTATION . METHOD add_message . INSERT message INTO TABLE messages . ENDMETHOD . ENDCLASS . 两种范式都不错，有各自的应用场合。然而，在同一个对象中_混用_会使代码难以理解，并且由于携带着的隐蔽错误以及同步性问题，注定会失败。切勿这样做。 作用域 ¶ ABAP 整洁之道 > 目录 > 类 > 本节 缺省情况下为全局，仅在适当位置为局部 ¶ ABAP 整洁之道 > 目录 > 类 > 作用域 > 本节 默认情况下运用全局类。只有在适当位置使用局部类。 全局类在数据字典中可见。局部类存在于另一个开发对象的 include 内，仅对这个另外的对象可见。 局部类适用 用于非常特定的私有数据结构，例如全局类数据的迭代器，仅此处需要这些数据结构， 用于提取复杂的私有部分算法，例如从其余类代码算法中提取出特殊用途的多方法的排序聚合算法， 用于模拟全局类的特定方面，例如，通过将所有数据库访问提取到可在单元测试中使用测试替身替换的单独局部类。 局部类将阻碍重用，因为它们无法在其他位置使用。尽管局部类易于提取，但人们通常甚至无法找到它们，从而导致不希望的代码重复。在极长的局部类中进行定向、导航和调试非常乏味且令人讨厌。由于 ABAP 锁是在包含文件级别上的，人们将无法同时在本地包含文件的不同部分上工作（只有在它们是不同的全局类的情况下，才能执行此操作）。 在以下情况下，重新考虑局部类的使用： 您的本地包含文件可以包含数十个类和数千行代码， 您将全局类视为包含其他类的“包”， 您的全局类退化为空壳， 您发现单独的本地包含文件中有重复代码， 您的开发人员开始互相锁定，无法并行工作， 由于您的团队无法理解彼此的本地子树，因此您的工作项估计会变得很多。 若非为继承而设计则为 FINAL ¶ ABAP 整洁之道 > 目录 > 类 > 作用域 > 本节 将并非针对继承而明确设计的类构建为 FINAL 。 在设计类的合作能力时，您的首选应该是 组合而不是继承 。实现继承不是一件容易的事，因为需要您考虑 PROTECTED 与 PRIVATE 等属性以及 Liskov substitution principle ，并且冻结了许多设计内部功能。如果您在类设计中没有考虑这些问题，那么应该通过将类构建为 FINAL 来防止意外继承。 当然，继承_有_一些很好的应用程序，例如设计模式 复合 。通过允许使用子类，业务加载项也可以变得更加有用，客户能够重用大多数原始代码。但是，请注意，所有这些情况下，从一开始就通过设计内置了继承。 未 实施接口 的不整洁类应保持非 FINAL ，这样使用者才能在单元测试中对其进行模拟。 缺省情况下为 PRIVATE，仅在需要时为 PROTECTED ¶ ABAP 整洁之道 > 目录 > 类 > 作用域 > 本节 默认情况下，将属性、方法和其他类成员设置为 PRIVATE 。 只有在您要启用子类覆盖它们时才将它们设置为 PROTECTED 。 只有需要的情况下，才应让类的内部元素供其他成员或程序使用。这不仅包括外部调用者，还包括子类。信息过度可用可能会因意外重新定义而导致细微错误，并阻碍重构，因为外部调用将冻结原本应流动的成员。 考虑使用不可变对象而非 getter ¶ ABAP 整洁之道 > 目录 > 类 > 作用域 > 本节 不可变对象是在构造后永不改变的对象。对于此类对象，请考虑使用公有只读属性而不是 getter 方法。 CLASS / clean / some_data_container DEFINITION . PUBLIC SECTION . METHODS constructor IMPORTING a TYPE i b TYPE c c TYPE d . DATA a TYPE i READ - ONLY . DATA b TYPE c READ - ONLY . DATA c TYPE d READ - ONLY . ENDCLASS . 而不是 CLASS / dirty / some_data_container DEFINITION . PUBLIC SECTION . METHODS get_a ... METHODS get_b ... METHODS get_c ... PRIVATE SECTION . DATA a TYPE i . DATA b TYPE c . DATA c TYPE d . ENDCLASS . 警告 ：对于**具有**变化值的对象，请勿使用公有只读属性。否则，此属性必须始终保持最新状态，无论其他任何代码是否需要它们的值。 保守地使用 READ-ONLY ¶ ABAP 整洁之道 > 目录 > 类 > 作用域 > 本节 许多现代编程语言（尤其是 Java）建议尽量将类成员设置为只读，以防止产生意外的不良影响。 尽管 ABAP _确实_为数据声明提供了 READ-ONLY 加载项，但我们建议您谨慎使用。 首先，仅在 PUBLIC SECTION 中提供了加载项，从而大大降低了其适用范围。您既不能将其添加到受保护的成员或私有成员，也不能将其添加到方法中的局部变量。 其次，加载项的执行结果与人们对其他编程语言的期望行为略有不同：仍然可以通过类本身、其友元类及其子类中的任何方法自由地修改 READ-ONLY 数据。这与其他语言中普遍采用的“一次写入，永远不会修改”行为相矛盾。这种差异可能会导致令人惊讶的意外。 为了避免误解：保护变量以防意外修改是一种很好的做法。如果是一个合适的语句，我们也建议将其应用于 ABAP中。 构造函数 ¶ ABAP 整洁之道 > 目录 > 类 > 本节 NEW 优于 CREATE OBJECT ¶ ABAP 整洁之道 > 目录 > 类 > 构造函数 > 本节 DATA object TYPE REF TO / clean / some_number_range . object = NEW # ( '/CLEAN/CXTGEN' ) ... DATA ( object ) = NEW / clean / some_number_range ( '/CLEAN/CXTGEN' ). ... DATA ( object ) = CAST / clean / number_range ( NEW / clean / some_number_range ( '/CLEAN/CXTGEN' ) ). 而不是毫无必要地加长 \" anti-pattern DATA object TYPE REF TO / dirty / some_number_range . CREATE OBJECT object EXPORTING number_range = '/DIRTY/CXTGEN' . 当然，除非需要动态类型 CREATE OBJECT number_range TYPE ( dynamic_type ) EXPORTING number_range = '/CLEAN/CXTGEN' . 如果全局类为 CREATE PRIVATE，则保留 CONSTRUCTOR 为公有 ¶ ABAP 整洁之道 > 目录 > 类 > 构造函数 > 本节 CLASS / clean / some_api DEFINITION PUBLIC FINAL CREATE PRIVATE . PUBLIC SECTION . METHODS constructor . 我们同意这是自相矛盾的。但根据文章 ABAP 帮助的 Instance Constructor ，需要在 PUBLIC SECTION 中指定 CONSTRUCTOR 以确保正确的编译和语法验证。 这仅适用于全局类。在局部类中，应将构造函数设置为私有。 多个静态创建方法优于可选参数 ¶ ABAP 整洁之道 > 目录 > 类 > 构造函数 > 本节 CLASS-METHODS describe_by_data IMPORTING data TYPE any [...] CLASS-METHODS describe_by_name IMPORTING name TYPE any [...] CLASS-METHODS describe_by_object_ref IMPORTING object_ref TYPE REF TO object [...] CLASS-METHODS describe_by_data_ref IMPORTING data_ref TYPE REF TO data [...] ABAP 不支持 过载 。使用名称变式而不是可选参数来实现所需的语义。 \" anti-pattern METHODS constructor IMPORTING data TYPE any OPTIONAL name TYPE any OPTIONAL object_ref TYPE REF TO object OPTIONAL data_ref TYPE REF TO data OPTIONAL [...] 拆分方法而非添加 OPTIONAL 参数 通用指南介绍了根本原因。 考虑使用 构建器设计模式 将复杂构造解析为多步构造。 用描述性名称表示多个创建方法 ¶ ABAP 整洁之道 > 目录 > 类 > 构造函数 > 本节 用于创建方法的有效单词为 new_ 、 create_ 和 construct_ 。人们凭直觉就可以将它们与对象构造联系起来。还可以将这些单词连用构成动词短语，如 new_from_template 、 create_as_copy 或 create_by_name 。 CLASS-METHODS new_describe_by_data IMPORTING p_data TYPE any [...] CLASS-METHODS new_describe_by_name IMPORTING p_name TYPE any [...] CLASS-METHODS new_describe_by_object_ref IMPORTING p_object_ref TYPE REF TO object [...] CLASS-METHODS new_describe_by_data_ref IMPORTING p_data_ref TYPE REF TO data [...] 而不是无意义的名称，例如 \" anti-pattern CLASS-METHODS create_1 IMPORTING p_data TYPE any [...] CLASS-METHODS create_2 IMPORTING p_name TYPE any [...] CLASS-METHODS create_3 IMPORTING p_object_ref TYPE REF TO object [...] CLASS-METHODS create_4 IMPORTING p_data_ref TYPE REF TO data [...] 仅在多实例无意义的情况下变成单例 ¶ ABAP 整洁之道 > 目录 > 类 > 构造函数 > 本节 METHOD new . IF singleton IS NOT BOUND . singleton = NEW / clean / my_class ( ). ENDIF . result = singleton . ENDMETHOD . 在您的面向对象的设计中提到第二个实例没有意义的情况下应用单例模式。该模式可确保每个使用者都以相同的状态和相同的数据处理相同的内容。 不要出于习惯或者因为某些性能规则的评分而使用单例模式。该模式最容易被过度使用和错误应用，这会产生意想不到的交叉影响，并为测试增加不必要的复杂性。如果单一对象没有设计驱动原因，可由使用者自己做决定，他仍然可以通过构造函数之外的方式（例如使用工厂）达到相同目的。 方法 ¶ ABAP 整洁之道 > 目录 > 本节 这些规则可应用于类和功能模块中的方法。 调用 ¶ ABAP 整洁之道 > 目录 > 方法 > 本节 函数式调用优于过程式调用 ¶ ABAP 整洁之道 > 目录 > 方法 > 调用 > 本节 modify -> update ( node = / clean / my_bo_c => node - item key = item -> key data = item changed_fields = changed_fields ). 而不是毫无必要地加长 \" anti-pattern CALL METHOD modify -> update EXPORTING node = / dirty / my_bo_c => node - item key = item -> key data = item changed_fields = changed_fields . 如果动态类型禁止函数调用，请使用过程式调用 CALL METHOD modify -> ( method_name ) EXPORTING node = / clean / my_bo_c => node - item key = item -> key data = item changed_fields = changed_fields . 以下许多详细规则只是此建议的更具体变式。 省略 RECEIVING ¶ ABAP 整洁之道 > 目录 > 方法 > 调用 > 本节 DATA ( sum ) = aggregate_values ( values ). 而不是毫无必要地加长 \" anti-pattern aggregate_values ( EXPORTING values = values RECEIVING result = DATA ( sum ) ). 省略可选关键字 EXPORTING ¶ ABAP 整洁之道 > 目录 > 方法 > 调用 > 本节 modify -> update ( node = / clean / my_bo_c => node - item key = item -> key data = item changed_fields = changed_fields ). 而不是毫无必要地加长 \" anti-pattern modify -> update ( EXPORTING node = / dirty / my_bo_c => node - item key = item -> key data = item changed_fields = changed_fields ). 在单参数调用中省略参数名称 ¶ ABAP 整洁之道 > 目录 > 方法 > 调用 > 本节 DATA ( unique_list ) = remove_duplicates ( list ). 而不是毫无必要地加长 \" anti-pattern DATA ( unique_list ) = remove_duplicates ( list = list ). 但是，在某些情况下，仅方法名称还不够清楚，重复参数名称可能会更易于理解： car -> drive ( speed = 50 ). update ( asynchronous = abap_true ). 在调用实例方法时省略自我引用 me ¶ ABAP 整洁之道 > 目录 > 方法 > 调用 > 本节 由于自我引用 me-> 是由系统隐式设置的，因此可在调用实例方法时将其省略 DATA ( sum ) = aggregate_values ( values ). 而不是毫无必要地加长 \" anti-pattern DATA ( sum ) = me -> aggregate_values ( values ). 方法：面向对象 ¶ ABAP 整洁之道 > 目录 > 方法 > 本节 实例优于静态方法 ¶ ABAP 整洁之道 > 目录 > 方法 > 方法：面向对象 > 本节 缺省情况下，方法应为实例成员。实例方法可以更好地反映类的“对象本质”。在单元测试中可以更轻松地模拟这些方法。 METHODS publish . 方法仅在特殊情况下才是静态的，例如静态创建方法。 CLASS-METHODS create_instance RETURNING VALUE ( result ) TYPE REF TO / clean / blog_post . 公共实例方法应为接口的一部分 ¶ ABAP 整洁之道 > 目录 > 方法 > 方法：面向对象 > 本节 公有实例方法应始终是接口的一部分。这样可以解耦相关性，并简化单元测试中的模拟过程。 METHOD / clean / blog_post~publish . 在面向整洁对象的方法中，公开没有接口的方法没有多大意义，枚举类等少数方法除外，这些方法永远不会有备选实施，也永远不会在测试用例中进行模拟。 接口与抽象类 描述了为什么这也适用于覆盖继承方法的类。 参数数目 ¶ ABAP 整洁之道 > 目录 > 方法 > 本节 力图减少 IMPORTING 参数，最好少于三个 ¶ ABAP 整洁之道 > 目录 > 方法 > 参数数目 > 本节 FUNCTION seo_class_copy IMPORTING clskey TYPE seoclskey new_clskey TYPE seoclskey config TYPE class_copy_config EXPORTING ... 整洁程度优于 \" anti-pattern FUNCTION seo_class_copy IMPORTING clskey TYPE seoclskey new_clskey TYPE seoclskey access_permission TYPE seox_boolean DEFAULT seox_true VALUE ( save ) TYPE seox_boolean DEFAULT seox_true VALUE ( suppress_corr ) TYPE seox_boolean DEFAULT seox_false VALUE ( suppress_dialog ) TYPE seox_boolean DEFAULT seox_false VALUE ( authority_check ) TYPE seox_boolean DEFAULT seox_true lifecycle_manager TYPE REF TO if_adt_lifecycle_manager OPTIONAL lock_handle TYPE REF TO if_adt_lock_handle OPTIONAL VALUE ( suppress_commit ) TYPE seox_boolean DEFAULT seox_false EXPORTING ... 输入参数过多会大幅增加方法的复杂性，因为方法需要处理指数级的组合。有多个参数就说明该方法做了超过一件事。 您可以通过结构和对象将参数组合为有意义的集合，从而减少参数的数目。 拆分方法而非添加 OPTIONAL 参数 ¶ ABAP 整洁之道 > 目录 > 方法 > 参数数目 > 本节 METHODS do_one_thing IMPORTING what_i_need TYPE string . METHODS do_another_thing IMPORTING something_else TYPE i . 为了实现ABAP不支持但又需要的语义 过载 。 \" anti-pattern METHODS do_one_or_the_other IMPORTING what_i_need TYPE string OPTIONAL something_else TYPE i OPTIONAL . 可选参数使调用者感到困惑： 真正需要哪些参数？ 哪些参数组合有效？ 哪些参数互相排斥？ 按特定的参数拆分成多个方法可以给人明确的指引，从而避免了这种混淆。 保守地使用 PREFERRED PARAMETER ¶ ABAP 整洁之道 > 目录 > 方法 > 参数数目 > 本节 额外定义 PREFERRED PARAMETER 让人很难知道实际需要提供什么样的参数，理解代码也变得更困难。将参数数目减至最少，尤其是可选参数的数目，可以自动减少对 PREFERRED PARAMETER 的需求。 RETURN、EXPORT 或 CHANGE 恰有一个参数 ¶ ABAP 整洁之道 > 目录 > 方法 > 参数数目 > 本节 好的方法只做_一件事_，而这也应该反映在方法恰好只返回一个值。如果方法的输出参数相互之间_没有_联系，则说明您的方法做了多件事，则应该对其进行拆分。 在某些情况下，输出是由多件事组成的逻辑实体。通过返回结构或对象可以很容易表示： TYPES : BEGIN OF check_result , result TYPE result_type , failed_keys TYPE / bobf / t_frw_key , messages TYPE / bobf / t_frw_message , END OF check_result . METHODS check_business_partners IMPORTING business_partners TYPE business_partners RETURNING VALUE ( result ) TYPE check_result . 而不是 \" anti-pattern METHODS check_business_partners IMPORTING business_partners TYPE business_partners EXPORTING result TYPE result_type failed_keys TYPE / bobf / t_frw_key messages TYPE / bobf / t_frw_message . 特别是与多个 EXPORTING 参数相比，在该方法中人们可以使用函数式调用，您可以不考虑 IS SUPPLIED ，并且避免出现人们意外忘记检索重要的 ERROR_OCCURRED 信息的情况。 不使用，而是考虑根据有意义的调用模式拆分方法去替代多个可选的输出参数： TYPES : BEGIN OF check_result , result TYPE result_type , failed_keys TYPE / bobf / t_frw_key , messages TYPE / bobf / t_frw_message , END OF check_result . METHODS check IMPORTING business_partners TYPE business_partners RETURNING VALUE ( result ) TYPE result_type . METHODS check_and_report IMPORTING business_partners TYPE business_partners RETURNING VALUE ( result ) TYPE check_result . 参数类型 ¶ ABAP 整洁之道 > 目录 > 方法 > 本节 RETURNING 优于 EXPORTING ¶ ABAP 整洁之道 > 目录 > 方法 > 参数类型 > 本节 METHODS square IMPORTING number TYPE i RETURNING VALUE ( result ) TYPE i . DATA ( result ) = square ( 42 ). 而不是毫无必要地加长 \" anti-pattern METHODS square IMPORTING number TYPE i EXPORTING result TYPE i . square ( EXPORTING number = 42 IMPORTING result = DATA ( result ) ). RETURNING 不仅可以使调用更短，还允许使用方法链并防止 相同输入和输出错误 。 RETURNING 大表通常没有问题 ¶ ABAP 整洁之道 > 目录 > 方法 > 参数类型 > 本节 尽管 ABAP 语言文档和性能指南有不一样的说法，但我们很少遇到在 VALUE 参数中传递大表或深度嵌套表_确实_导致性能问题的情况。因此，我们建议正常使用 METHODS get_large_table RETURNING VALUE ( result ) TYPE / clean / some_table_type . METHOD get_large_table . result = me -> large_table . ENDMETHOD . DATA ( my_table ) = get_large_table ( ). 只有在您的个别情况有实际证据（= 不良的性能衡量）时，您才应该使用更繁琐的过程式调用 \" anti-pattern METHODS get_large_table EXPORTING result TYPE / dirty / some_table_type . METHOD get_large_table . result = me -> large_table . ENDMETHOD . get_large_table ( IMPORTING result = DATA ( my_table ) ). 本节与 ABAP Programming Guidelines 和代码分析器检查相矛盾，二者都建议应通过引用导出大表，以避免性能下降。但我们始终未能重现任何性能下降和内存不足情况，也未收到有关内核优化（通常可提高 RETURNING 性能）的通知。 单独使用 RETURNING 或 EXPORTING 或 CHANGING，而不要组合使用 ¶ ABAP 整洁之道 > 目录 > 方法 > 参数类型 > 本节 METHODS copy_class IMPORTING old_name TYPE seoclsname new name TYPE secolsname RETURNING VALUE ( result ) TYPE copy_result RAISING / clean / class_copy_failure . 而不是混合使用，例如 \" anti-pattern METHODS copy_class ... RETURNING VALUE ( result ) TYPE vseoclass EXPORTING error_occurred TYPE abap_bool CHANGING correction_request TYPE trkorr package TYPE devclass . 不同种类的输出参数表明该方法做了多件事。这使读者感到困惑，并使调用该方法变得不必要的复杂。 此规则的可接受的例外情况是使用他们的输入构建他们的输出： METHODS build_tree CHANGING tokens TYPE tokens RETURNING VALUE ( result ) TYPE REF TO tree . 然而，可以把输入对象化参数使这些内容更加清晰： METHODS build_tree IMPORTING tokens TYPE REF TO token_stack RETURNING VALUE ( result ) TYPE REF TO tree . 在合适时保守地使用 CHANGING ¶ ABAP 整洁之道 > 目录 > 方法 > 参数类型 > 本节 CHANGING 应预留给以下情况：现有局部变量已填充仅在某些位置需要更新： METHODS update_references IMPORTING new_reference TYPE / bobf / conf_key CHANGING bo_nodes TYPE root_nodes . METHOD update_references . LOOP AT bo_nodes REFERENCE INTO DATA ( bo_node ). bo_node -> reference = new_reference . ENDLOOP . ENDMETHOD . 不要强迫调用者仅仅为了提供 CHANGING 参数而引入不必要的局部变量。不要使用 CHANGING 参数来初始填充先前为空的变量。 拆分方法而非使用布尔输入参数 ¶ ABAP 整洁之道 > 目录 > 方法 > 参数类型 > 本节 布尔输入参数通常表示一个方法做_两_件事，而不是一件。 \" anti-pattern METHODS update IMPORTING do_save TYPE abap_bool . 同样，使用单个（因此未命名的）布尔参数的方法调用往往会混淆参数的含义。 \" anti-pattern update ( abap_true ). \" what does 'true' mean? synchronous? simulate? commit? 拆分方法可以简化方法的代码并更好地描述不同的意图 update_without_saving ( ). update_and_save ( ). 普遍认为，对布尔变量使用 setter 是可以的： METHODS set_is_deleted IMPORTING new_value TYPE abap_bool . 有关详细信息，请参阅 1 2 3 参数名称 ¶ ABAP 整洁之道 > 目录 > 方法 > 本节 考虑调用 RETURNING 参数 RESULT ¶ ABAP 整洁之道 > 目录 > 方法 > 参数名称 > 本节 好的方法名称通常可以让 RETURNING 参数不需要自己的名称这样的好效果。参数名只需要模仿方法名称或重复一些显而易见的内容。 重复成员名称甚至可能产生冲突，需要添加多余的 me-> 才能解决。 \" anti-pattern METHODS get_name RETURNING VALUE ( name ) TYPE string . METHOD get_name . name = me -> name . ENDMETHOD . 在此类情况下，只需把参数命名为 RESULT ，或者类似于 RV_RESULT 的名称（如果您喜欢用匈牙利表示法）。 例如在针对方法链返回 me 的方法中，或在创建某些对象但不返回创建的实体而仅返回其键值的方法中，如果参数代表的含义_不_明确，则需要为 RETURNING 参数起个名字。 参数初始化 ¶ ABAP 整洁之道 > 目录 > 方法 > 本节 清除或覆盖 EXPORTING 引用参数 ¶ ABAP 整洁之道 > 目录 > 方法 > 参数初始化 > 本节 引用参数是指可预先填充的现有内存区域。清除或覆盖它们以提供可靠的数据： METHODS square EXPORTING result TYPE i . \" clear METHOD square . CLEAR result . \" ... ENDMETHOD . \" overwrite METHOD square . result = cl_abap_math => square ( 2 ). ENDMETHOD . 代码分析器和检查管理器会指出从 EXPORTING 变量未写入值。使用这些静态检查来避免这个可能相当模糊的错误源。 如果输入和输出可能相同则要当心 ¶ ABAP 整洁之道 > 目录 > 方法 > 参数初始化 > 本节 通常，在方法体里，类型和数据声明之后第一件事把参数清空是一个好主意。这使该语句易于辨别，并避免了后续语句意外使用原来的值。 但是，某些参数配置可能会使用相同的变量作为输入和输出。在这种情况下，之前的 CLEAR 语句会在使用输入值之前将其删除，从而产生错误的结果。 \" anti-pattern DATA value TYPE i . square_dirty ( EXPORTING number = value IMPORTING result = value ). METHOD square_dirty . CLEAR result . result = number * number . ENDMETHOD . 考虑用 RETURNING 替换 EXPORTING 来重新设计此类方法。还可以考虑在单个结果计算语句中覆盖 EXPORTING 参数。如果都不适合，只能稍后执行 CLEAR 。 勿清除 VALUE 参数 ¶ ABAP 整洁之道 > 目录 > 方法 > 参数初始化 > 本节 通过 VALUE 传递的参数会开辟新的独立内存，这些内存区域定义时为空。不要再清除这些区域： METHODS square EXPORTING VALUE ( result ) TYPE i . METHOD square . \" no need to CLEAR result ENDMETHOD . RETURNING 参数始终是 VALUE 参数，因此您永远不需要清除这些参数： METHODS square RETURNING VALUE ( result ) TYPE i . METHOD square . \" no need to CLEAR result ENDMETHOD . 方法体 ¶ ABAP 整洁之道 > 目录 > 方法 > 本节 做且仅做一件事，把它做好 ¶ ABAP 整洁之道 > 目录 > 方法 > 方法体 > 本节 一个方法应该做一件事，且只能做一件事。应该采用最好的方法做这件事。 如果满足以下条件，一个方法可能做一件事： 输入参数很少 不包含布尔参数 只有一个输出参数 很小 将抽象降一级 您无法提取有意义的其他方法 您无法将其语句分组为有意义的部分 关注愉快路径或错误处理，但非两者兼顾 ¶ ABAP 整洁之道 > 目录 > 方法 > 方法体 > 本节 由于 做且仅做一件事，把它做好 规则的专业化要求，方法应该遵循其建立的愉快路径，或在无法建立愉快路径的情况下采用其他错误处理方式，但也可能出现第三种情况。 \" anti-pattern METHOD append_xs . IF input > 0 . DATA ( remainder ) = input . WHILE remainder > 0 . result = result && `X` . remainder = remainder - 1 . ENDWHILE . ELSEIF input = 0 . RAISE EXCEPTION / dirty / sorry_cant_do ( ). ELSE . RAISE EXCEPTION cx_sy_illegal_argument ( ). ENDIF . ENDMETHOD . 可以分解为 METHOD append_xs . validate ( input ). DATA ( remainder ) = input . WHILE remainder > 0 . result = result && `X` . remainder = remainder - 1 . ENDWHILE . ENDMETHOD . METHOD validate . IF input = 0 . RAISE EXCEPTION / dirty / sorry_cant_do ( ). ELSEIF input < 0 . RAISE EXCEPTION cx_sy_illegal_argument ( ). ENDIF . ENDMETHOD . 或者，强调验证部分 METHOD append_xs . IF input > 0 . result = append_xs_without_check ( input ). ELSEIF input = 0 . RAISE EXCEPTION / dirty / sorry_cant_do ( ). ELSE . RAISE EXCEPTION cx_sy_illegal_argument ( ). ENDIF . ENDMETHOD . METHOD append_xs_without_check . DATA ( remainder ) = input . WHILE remainder > 0 . result = result && `X` . remainder = remainder - 1 . ENDWHILE . ENDMETHOD . 将抽象降一级 ¶ ABAP 整洁之道 > 目录 > 方法 > 方法体 > 本节 方法中的语句应处于方法本身抽象级别的下一级。相应地，这些语句都应处于相同的抽象级别。 METHOD create_and_publish . post = create_post ( user_input ). post -> publish ( ). ENDMETHOD . 而不是混合使用低级（ trim 、 to_upper 、...）和高级（ publish 、...）概念，例如 \" anti-pattern METHOD create_and_publish . post = NEW blog_post ( ). DATA ( user_name ) = trim ( to_upper ( sy - uname ) ). post -> set_author ( user_name ). post -> publish ( ). ENDMETHOD . 找出正确抽象级别的可靠方法是：让该方法的作者用简短的几个单词来解释该方法的功能，而不需要查看代码。他列的功能项就应该是方法应调用的子方法或应执行的语句。 保持方法精简 ¶ ABAP 整洁之道 > 目录 > 方法 > 方法体 > 本节 方法应少于 20 条语句，最好为 3 至 5 条语句。 METHOD read_and_parse_version_filters . DATA ( active_model_version ) = read_random_version_under ( model_guid ). DATA ( filter_json ) = read_model_version_filters ( active_model_version - guid ). result = parse_model_version_filters ( filter_json ). ENDMETHOD . 仅通过下面的 DATA 声明就足以看出相关的方法不止做一件事： \" anti-pattern DATA : class TYPE vseoclass , attributes TYPE seoo_attributes_r , methods TYPE seoo_methods_r , events TYPE seoo_events_r , types TYPE seoo_types_r , aliases TYPE seoo_aliases_r , implementings TYPE seor_implementings_r , inheritance TYPE vseoextend , friendships TYPE seof_friendships_r , typepusages TYPE seot_typepusages_r , clsdeferrds TYPE seot_clsdeferrds_r , intdeferrds TYPE seot_intdeferrds_r , attribute TYPE vseoattrib , method TYPE vseomethod , event TYPE vseoevent , type TYPE vseotype , alias TYPE seoaliases , implementing TYPE vseoimplem , friendship TYPE seofriends , typepusage TYPE vseotypep , clsdeferrd TYPE vseocdefer , intdeferrd TYPE vseoidefer , new_clskey_save TYPE seoclskey . 当然，在某些情况下，进一步缩小较大的方法没有任何意义。这是完全可以的，只要该方法始终 专注于一件事 ： METHOD decide_what_to_do . CASE temperature . WHEN burning . result = air_conditioning . WHEN hot . result = ice_cream . WHEN moderate . result = chill . WHEN cold . result = skiing . WHEN freezing . result = hot_cocoa . ENDCASE . ENDMETHOD . 但是，验证冗长的代码是否隐藏了更合适的模式仍然有意义： METHOD decide_what_to_do . result = VALUE # ( spare_time_activities [ temperature = temperature ] OPTIONAL ). ENDMETHOD . 将方法切割过小可能会对性能产生不良影响，因为这会增加方法调用的次数。 _顾及性能_一节 提供了有关如何平衡整洁代码和性能的指南。 控制流 ¶ ABAP 整洁之道 > 目录 > 方法 > 本节 快速失败 ¶ ABAP 整洁之道 > 目录 > 方法 > 控制流 > 本节 尽早验证并处理失败情景： METHOD do_something . IF input IS INITIAL . RAISE EXCEPTION cx_sy_illegal_argument ( ). ENDIF . DATA ( massive_object ) = build_expensive_object_from ( input ). result = massive_object -> do_some_fancy_calculation ( ). ENDMETHOD . 后面再进行验证更难以辨别和理解，并且可能已经浪费了很多资源。 \" anti-pattern METHOD do_something . DATA ( massive_object ) = build_expensive_object_from ( input ). IF massive_object IS NOT BOUND . \" happens if input is initial RAISE EXCEPTION cx_sy_illegal_argument ( ). ENDIF . result = massive_object -> do_some_fancy_calculation ( ). ENDMETHOD . CHECK 对 RETURN ¶ ABAP 整洁之道 > 目录 > 方法 > 控制流 > 本节 如果输入不符合预期，是否应使用 CHECK 或 RETURN 退出方法，人们对此并未达成共识。 尽管 CHECK 显式提供了较短的语法， METHOD read_customizing . CHECK keys IS NOT INITIAL . \" do whatever needs doing ENDMETHOD . 该语句的名称未能说明条件失败时会发生什么情况，因此长格式可能更易于人们理解： METHOD read_customizing . IF keys IS INITIAL . RETURN . ENDIF . \" do whatever needs doing ENDMETHOD : 通过反向验证并采用单向控制流，完全可以避免此类问题 METHOD read_customizing . IF keys IS NOT INITIAL . \" do whatever needs doing ENDIF . ENDMETHOD : 无论如何，请考虑不返回任何内容是否真的合适。方法应该提供有意义的结果，即已填充的返回参数或异常。在许多情况下，不返回任何内容都类似于返回 null ，应该避免这种情况。 ABAP Programming Guidelines 中的_退出过程_一节 建议在此实例中使用 CHECK 。社区讨论表明该语句如此不清晰，许多人无法理解程序的行为。 避免在其他位置使用 CHECK ¶ ABAP 整洁之道 > 目录 > 方法 > 控制流 > 本节 不要在方法的初始化部分以外使用 CHECK 。该语句在不同位置的行为方式不同，可能会造成不明确、意想不到的影响。 例如， LOOP 中的 CHECK 结束当前迭代并继续下一个 ；人们原本可能期望它结束方法或退出循环。 基于 ABAP Programming Guidelines 中的_退出过程_一节 。请注意，这与 循环中 CHECK 的关键字引用 相矛盾。 错误处理 ¶ ABAP 整洁之道 > 目录 > 本节 消息 ¶ ABAP 整洁之道 > 目录 > 错误处理 > 本节 使消息易于查找 ¶ ABAP 整洁之道 > 目录 > 错误处理 > 消息 > 本节 要使通过事务 SE91 的使用位置搜索更容易找到消息，请使用以下模式： MESSAGE e001 ( ad ) INTO DATA ( message ). 如果不需要变量 message ，请添加编译指示 ##NEEDED ： MESSAGE e001 ( ad ) INTO DATA ( message ) ##NEEDED . 避免使用以下模式： \" anti-pattern IF 1 = 2 . MESSAGE e001 ( ad ). ENDIF . 这是一种反面模式，因为： - 其中包含不可达代码。 - 其测试的条件永远不可能真正实现对等。 返回代码 ¶ ABAP 整洁之道 > 目录 > 错误处理 > 本节 异常优于返回代码 ¶ ABAP 整洁之道 > 目录 > 错误处理 > 返回代码 > 本节 METHOD try_this_and_that . RAISE EXCEPTION NEW cx_failed ( ). ENDMETHOD . 而不是 \" anti-pattern METHOD try_this_and_that . error_occurred = abap_true . ENDMETHOD . 与返回代码相比，异常有许多优点： 异常能保持方法签名的干净整洁：以 RETURNING 参数形式返回方法结果，同时仍抛出异常。返回代码使用其他参数进行错误处理，会污染您的签名。 调用者不必立即做出反应，只需按愉快的路径写下代码。异常处理 CATCH 可在方法的末尾执行，也可以完全在外部执行。 异常可以通过其属性和方法提供有关错误的详细信息。而返回代码则要求您自行设计另一个解决方案，例如还要返回日志。 开发环境通过语法错误提醒调用者处理异常。而在没有任何人注意的情况下，返回代码可能会被不小心忽略。 别让故障溜走 ¶ ABAP 整洁之道 > 目录 > 错误处理 > 返回代码 > 本节 如果确实必须使用返回代码，例如因为调用了不在自己控制范围内的函数和较旧的代码，务必确保别让故障溜走。 DATA : current_date TYPE string , response TYPE bapiret2 . CALL FUNCTION 'BAPI_GET_CURRENT_DATE' IMPORTING current_date = current_date CHANGING response = response . IF response - type = 'E' . RAISE EXCEPTION NEW / clean / some_error ( ); ENDIF . 异常 ¶ ABAP 整洁之道 > 目录 > 错误处理 > 本节 异常针对的是错误，而不是正常情况 ¶ ABAP 整洁之道 > 目录 > 错误处理 > 异常 > 本节 \" anti-pattern METHODS entry_exists_in_db IMPORTING key TYPE char10 RAISING cx_not_found_exception . 如果情况是正常、有效的，应该使用常规的结果参数进行处理。 METHODS entry_exists_in_db IMPORTING key TYPE char10 RETURNING VALUE ( result ) TYPE abap_bool . 异常应该反映错误情况，留到您不希望看到的情况下使用。 METHODS assert_user_input_is_valid IMPORTING user_input TYPE string RAISING cx_bad_user_input . 误用异常会误导读者认为实际上一切都顺利的地方出了问题。异常也比正常代码慢得多，因为它们需要进行构建，往往要收集大量上下文信息。 使用基于类的异常 ¶ ABAP 整洁之道 > 目录 > 错误处理 > 异常 > 本节 TRY . get_component_types ( ). CATCH cx_has_deep_components_error . ENDTRY . 过时的非基于类的异常与返回代码具有相同的功能，不应再使用。 \" anti-pattern get_component_types ( EXCEPTIONS has_deep_components = 1 OTHERS = 2 ). 抛出 ¶ ABAP 整洁之道 > 目录 > 错误处理 > 本节 使用各自的超类 ¶ ABAP 整洁之道 > 目录 > 错误处理 > 抛出 > 本节 CLASS cx_fra_static_check DEFINITION ABSTRACT INHERITING FROM cx_static_check . CLASS cx_fra_no_check DEFINITION ABSTRACT INHERITING FROM cx_no_check . 考虑为应用程序的每种异常类型创建抽象超类，而不是直接对基础类进行子类化。允许您对_自己的_所有异常执行 CATCH 。使您可以向所有异常添加通用功能，例如特殊文本处理。 ABSTRACT 防止人们意外地直接使用这些非描述性错误。 抛出一种类型的异常 ¶ ABAP 整洁之道 > 目录 > 错误处理 > 抛出 > 本节 METHODS generate RAISING cx_generation_error . 在绝大多数情况下，抛出多种类型的异常没有任何用处。调用者通常既不感兴趣，也没法区分错误情况，因此经常会以相同的方式处理它们——既然如此，为什么一开始要区分它们呢？ \" anti-pattern METHODS generate RAISING cx_abap_generation cx_hdbr_access_error cx_model_read_error . 识别不同错误情况的更好解决方案是使用一种异常类型，但添加允许（但不要求）对个别错误情况做出反应的子类，如 使用子类以便调用者能够区分错误情况 中所述。 使用子类以便调用者能够区分错误情况 ¶ ABAP 整洁之道 > 目录 > 错误处理 > 抛出 > 本节 CLASS cx_bad_generation_variable DEFINITION INHERITING FROM cx_generation_error . CLASS cx_bad_code_composer_template DEFINITION INHERITING FROM cx_generation_error . TRY . generator -> generate ( ). CATCH cx_bad_generation_variable . log_failure ( ). CATCH cx_bad_code_composer_template INTO DATA ( bad_template_exception ). show_error_to_user ( bad_template_exception ). CATCH cx_generation_error INTO DATA ( other_exception ). RAISE EXCEPTION NEW cx_application_error ( previous = other_exception ). ENDTRY . 如果有许多不同的错误情况，则改用错误代码： CLASS cx_generation_error DEFINITION ... PUBLIC SECTION . TYPES error_code_type TYPE i . CONSTANTS : BEGIN OF error_code_enum , bad_generation_variable TYPE error_code_type VALUE 1 , bad_code_composer_template TYPE error_code_type VALUE 2 , ... END OF error_code_enum . DATA error_code TYPE error_code_type . TRY . generator -> generate ( ). CATCH cx_generation_error INTO DATA ( exception ). CASE exception -> error_code . WHEN cx_generation_error => error_code_enum - bad_generation_variable . WHEN cx_generation_error => error_code_enum - bad_code_composer_variable . ... ENDCASE . ENDTRY . 针对可应对的异常抛出 CX_STATIC_CHECK ¶ ABAP 整洁之道 > 目录 > 错误处理 > 抛出 > 本节 如果预期会出现异常并可由接收者合理处理，则抛出继承自 CX_STATIC_CHECK 的可控异常：用户输入验证失败，缺少存在后备的资源，等等。 CLASS cx_file_not_found DEFINITION INHERITING FROM cx_static_check . METHODS read_file IMPORTING file_name_enterd_by_user TYPE string RAISING cx_file_not_found . 这种异常类型_必须_在方法签名中给出，并且_必须_被捕获或转发以避免语法错误。这样，用户便能够清楚看到这种异常类型，确保其不会因意外的异常而感到惊讶，并负责对错误情况做出反应。 这与 ABAP Programming Guidelines 一致，但与 Robert C. Martin 所著的 Clean Code （其中建议优先使用不可控异常）相矛盾； 异常 说明了其中的原因。 针对通常不可恢复的情况抛出 CX_NO_CHECK ¶ ABAP 整洁之道 > 目录 > 错误处理 > 抛出 > 本节 如果异常严重到使接收端不太可能恢复正常工作，则使用 CX_NO_CHECK ：无法读取必备资源，无法解决请求的依赖项等。 CLASS cx_out_of_memory DEFINITION INHERITING FROM cx_no_check . METHODS create_guid RETURNING VALUE ( result ) TYPE / bobf / conf_key . CX_NO_CHECK _不能_在方法签名中声明，因此它的出现会使用户感到意外。在无法恢复的情况下，这是可以接受的，因为用户无论如何都无法采取有效的操作。 但是，在某些情况下，用户实际上_可能_希望识别并应对这种故障。例如，如果依赖的管理器无法为请求的接口提供一个实现，则会抛出 CX_NO_CHECK ，因为常规应用程序代码将无法继续执行。但是，可能某个测试报告试图实例化所有事物，以查看其是否有效，并且会简单地将失败报告为列表中的红色条目——该服务应该能够捕获并忽略异常，而不是被强制转储。 针对可避免的异常考虑 CX_DYNAMIC_CHECK ¶ ABAP 整洁之道 > 目录 > 错误处理 > 抛出 > 本节 CX_DYNAMIC_CHECK 的用例很少见，通常我们建议使用其他异常类型。但是，如果调用者对是否可能发生异常完全自主控制，您可能要考虑使用这种异常来代替 CX_STATIC_CHECK 。 DATA value TYPE decfloat . value = '7.13' . cl_abap_math => get_db_length_decs ( EXPORTING in = value IMPORTING length = DATA ( length ) ). 例如，使用 cl_abap_math 类的 get_db_length_decs 方法，它告诉您十进制浮点数的位数和小数位数。如果输入参数未反映十进制浮点数，此方法会引发动态异常 cx_parameter_invalid_type 。通常，将为完全静态类型的变量调用此方法，以便开发人员知道该异常是否会发生。在这种情况下，动态异常能够让调用者省略不必要的 CATCH 子句。 针对完全不可恢复的情况进行转储 ¶ ABAP 整洁之道 > 目录 > 错误处理 > 抛出 > 本节 如果情况严重到可以完全确定接收者不太可能从中恢复，或者清楚地表明了编程错误，请转储而不是抛出异常：获取内存失败，对必须填充的表读取索引失败等。 RAISE SHORTDUMP TYPE cx_sy_create_object_error . \" >= NW 7.53 MESSAGE x666 ( general ). \" < NW 7.53 这种行为将阻止任何类型的用户事后执行任何有用的操作。请仅在确定时使用此功能。 RAISE EXCEPTION NEW 优于 RAISE EXCEPTION TYPE ¶ ABAP 整洁之道 > 目录 > 错误处理 > 抛出 > 本节 注：自 NW 7.52 起可用。 RAISE EXCEPTION NEW cx_generation_error ( previous = exception ). 通常短于毫无必要加长的 RAISE EXCEPTION TYPE cx_generation_error EXPORTING previous = exception . 但是，如果大量添加 MESSAGE ，可能需要坚持使用 TYPE 变式： RAISE EXCEPTION TYPE cx_generation_error EXPORTING previous = exception MESSAGE e136 ( messages ). 捕获 ¶ ABAP 整洁之道 > 目录 > 错误处理 > 本节 包裹外来异常而非任其侵入代码 ¶ ABAP 整洁之道 > 目录 > 错误处理 > 捕获 > 本节 METHODS generate RAISING cx_generation_failure . METHOD generate . TRY . generator -> generate ( ). CATCH cx_amdp_generation_failure INTO DATA ( exception ). RAISE EXCEPTION NEW cx_generation_failure ( previous = exception ). ENDTRY . ENDMETHOD . 得墨忒耳律 建议将事物解耦，而转发来自其他组件的异常是违反了这一原则的。通过捕获这些异常并将其封装在自己的异常类型中，使自己独立于外部代码。 \" anti-pattern METHODS generate RAISING cx_sy_gateway_failure . METHOD generate . generator -> generate ( ). ENDMETHOD . 注释 ¶ ABAP 整洁之道 > 目录 > 本节 用代码表达自己而不是靠注释 ¶ ABAP 整洁之道 > 目录 > 注释 > 本节 METHOD correct_day_to_last_in_month . WHILE is_invalid ( date ). reduce_day_by_one ( CHANGING date = date ). ENDWHILE . ENDMETHOD . METHOD is_invalid . DATA zero_if_invalid TYPE i . zero_if_invalid = date . result = xsdbool ( zero_if_invalid = 0 ). ENDMETHOD . METHOD reduce_day_by_one . date + 6 ( 2 ) = date + 6 ( 2 ) - 1 . ENDMETHOD . 而不是 \" anti-pattern \" correct e.g. 29.02. in non-leap years as well as result of a date calculation would be \" something like e.g. the 31.06. that example has to be corrected to 30.06. METHOD fix_day_overflow . DO 3 TIMES . \" 31 - 28 = 3 => this correction is required not more than 3 times lv_dummy = cv_date . \" lv_dummy is 0 if the date value is a not existing date - ABAP specific implementation IF ( lv_dummy EQ 0 ). cv_date + 6 ( 2 ) = cv_date + 6 ( 2 ) - 1 . \" subtract 1 day from the given date ELSE . \" date exists => no correction required EXIT . ENDIF . ENDDO . ENDMETHOD . 整洁代码_并不是_禁止您为代码写注释，而是鼓励您想出_更好的_替代方法。只有想不出替代方法时才使用注释。 从性能的角度来看，这个例子受到了质疑，因为将方法缩减到如此之短会严重降低性能。样本测量表明，在运行速度上，重构代码要比原始的脏代码慢 2.13 倍。整洁代码修复输入 31-02-2018 需要 9.6 微秒，而脏代码只需 4.5 微秒。当频繁在高性能应用程序中运行此方法时，可能会对性能造成影响；但对于常规用户输入验证，应该是可以接受的。请参阅 顾及性能 一节以处理整洁代码和性能问题。 注释绝非坏名称的借口 ¶ ABAP 整洁之道 > 目录 > 注释 > 本节 DATA ( input_has_entries ) = has_entries ( input ). 与其解释那些坏名称的真正含义或者您选择坏名称的原因，不如去实际改良名称。 \" anti-pattern \" checks whether the table input contains entries DATA ( result ) = check_table ( input ). 使用方法而非注释来对代码分段 ¶ ABAP 整洁之道 > 目录 > 注释 > 本节 DATA ( statement ) = build_statement ( ). DATA ( data ) = execute_statement ( statement ). 这样不但能够更加清晰地体现代码的意图、结构和依赖关系，同时还能避免在块与块之间因临时变量未清空引起的错误。 \" anti-pattern \" ----------------- \" Build statement \" ----------------- DATA statement TYPE string . statement = | SELECT * FROM d_document_roots |. \" ----------------- \" Execute statement \" ----------------- DATA ( result_set ) = adbc -> execute_sql_query ( statement ). result_set -> next_package ( IMPORTING data = data ). 写注释是要解释为什么而非是什么 ¶ ABAP 整洁之道 > 目录 > 注释 > 本节 \" can't fail, existence of >= 1 row asserted above DATA ( first_line ) = table [ 1 ]. 没人需要用自然语言重复代码 \" anti-pattern \" select alert root from database by key SELECT * FROM d_alert_root WHERE key = key . 设计应放到设计文档里而不是代码里 ¶ ABAP 整洁之道 > 目录 > 注释 > 本节 \" anti-pattern \" This class serves a double purpose. First, it does one thing. Then, it does another thing. \" It does so by executing a lot of code that is distributed over the local helper classes. \" To understand what's going on, let us at first ponder the nature of the universe as such. \" Have a look at this and that to get the details. 没人会认真读——真的。如果人们需要阅读教科书才能使用代码，这可能说明您的代码存在严重的设计问题，应通过其他方式解决。有些代码_确实_需要解释，而不仅仅是一行注释；在这种情况下，请考虑链接设计文档。 用 \" 而非 * 加注释 ¶ ABAP 整洁之道 > 目录 > 注释 > 本节 加引号的注释及其注释语句一同缩进 METHOD do_it . IF input IS NOT INITIAL . \" delegate pattern output = calculate_result ( input ). ENDIF . ENDMETHOD . 加星号的注释往往造成缩进异常 \" anti-pattern METHOD do_it . IF input IS NOT INITIAL . * delegate pattern output = calculate_result ( input ). ENDIF . ENDMETHOD . 将注释放在与其相关的语句前面 ¶ ABAP 整洁之道 > 目录 > 注释 > 本节 \" delegate pattern output = calculate_result ( input ). 整洁性强于 \" anti-pattern output = calculate_result ( input ). \" delegate pattern 且唐突的程度低于 output = calculate_result ( input ). \" delegate pattern 删除代码而非将其注释掉 ¶ ABAP 整洁之道 > 目录 > 注释 > 本节 \" anti-pattern * output = calculate_result( input ). 当您发现类似内容时，请将其删除。这里显然不需要代码，因为应用程序顺利运行并且所有测试都通过了。以后可根据版本历史记录再生删除的代码。如果需要永久保留某一段代码，请将其复制到文件或 $TMP 或 HOME 对象中。 使用 FIXME、TODO 和 XXX 并添加自己的标识 ¶ ABAP 整洁之道 > 目录 > 注释 > 本节 METHOD do_something . \" XXX FH delete this method - it does nothing ENDMETHOD . FIXME 指向内部事件正在形成的过小或过大的错误。 TODO 是您要在不久之后编写代码的地方。 XXX 标记出有效但还可以进一步优化的代码。 输入这类注释时，请添加昵称、姓名缩写或用户，这样可方便共同开发者与您联系并可以在不清楚注释的意图时向您询问问题。 勿添加方法签名和注释结尾 ¶ ABAP 整洁之道 > 目录 > 注释 > 本节 方法签名注释对任何人都没有帮助。 \" anti-pattern * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Static Public Method CALIBRATION_KPIS=>CALCULATE_KPI * +-------------------------------------------------------------------------------------------------+ * | [--->] STRATEGY_ID TYPE STRATEGY_ID * | [--->] THRESHOLD TYPE STRATEGY_THRESHOLD * | [--->] DETECTION_OBJECT_SCORE TYPE T_HIT_RESULT * | [<---] KPI TYPE T_SIMULATED_KPI * +--------------------------------------------------------------------------------------</SIGNATURE> 几十年前，当在检查代码或处理数十页的打印输出内容时，如果看不到方法签名，这些注释可能会对您大有帮助。但现在，所有 ABAP IDE（SE24、SE80、ADT）都可以轻松显示方法签名，因此这些注释只是干扰而已。 在基于表单的编辑器 SE24/SE80 中，按_签名_按钮。在 ABAP 开发工具中，选中方法名称然后按 F2，或将 _ABAP 元素信息_视图添加到您的透视图中。 同样，注释结尾也是多余的。几十年前，当程序和函数以及内部嵌套的 IF 长度达到数百行代码时，这些注释可能很有用。但如今的编码风格发生了变化，方法非常简短，可以轻松看到 ENDIF 或 ENDMETHOD 属于哪个开头语句： \" anti-pattern METHOD get_kpi_calc . IF has_entries = abap_false . result = 42 . ENDIF . \" IF has_entries = abap_false ENDMETHOD . \" get_kpi_calc 勿复制消息文本作为注释 ¶ ABAP 整洁之道 > 目录 > 注释 > 本节 \" anti-pattern \" alert category not filled MESSAGE e003 INTO dummy . 消息独立于您的代码而变化，没有人会记得调整注释，这样注释将很快过时甚至变得有误导性，却没有引起任何人注意。 在现代 IDE 中，您可以轻松查看消息背后的文本，例如在 ABAP 开发工具中，选中消息标识并按 Shift+F2。 如果您希望消息更准确，请考虑将消息提取到其自身的方法。 METHOD create_alert_not_found_message . MESSAGE e003 INTO dummy . ENDMETHOD . ABAP 文档仅适用于公共 API ¶ ABAP 整洁之道 > 目录 > 注释 > 本节 编写 ABAP 文档来记录公共 API，这意味着这些 API 可供其他团队或应用程序的开发人员使用。不要为内部内容编写 ABAP 文档。 ABAP 文档与所有注释一样都有相同的弱点，也就是说，它很快会过时，然后会变得有误导性。因此，您应该只在有意义的情况下使用，而不要为一切内容强制编写 ABAP 文档。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 4: Good Comments: Javadocs in Public APIs 和 Chapter 4: Bad Comments: Javadocs in Nonpublic Code 。 编译指示优于伪注释 ¶ ABAP 整洁之道 > 目录 > 注释 > 本节 优先使用编译指示而不是伪注释来抑制 ATC 识别的无关警告和错误。伪注释大部分已过时，并已替换为编译指示。 \" pattern MESSAGE e001 ( ad ) INTO DATA ( message ) ##NEEDED . \" anti-pattern MESSAGE e001 ( ad ) INTO DATA ( message ). \"#EC NEEDED 使用 ABAP_SLIN_PRAGMAS 程序或 SLIN_DESC 表查找过时伪注释与已替换这些伪注释的编译指示之间的映射。 格式化 ¶ ABAP 整洁之道 > 目录 > 本节 下面的建议 为阅读而不是书写进行优化 。由于 ABAP 的格式优化器没有涵盖它们，其中的部分建议会产生额外的人工工作，以在名称长度等发生变化时重新格式化语句；如果要避免这种情况，请考虑放弃这些规则，例如 对齐同一对象而非不同对象的赋值 。 保持一致 ¶ ABAP 整洁之道 > 目录 > 本节 以相同的方式格式化项目的所有代码。让所有团队成员使用相同的格式化风格。 如果要编辑外来代码，请遵循该项目的格式化风格，而不要坚持自己的个人风格。 如果要随时间更改格式化规则，请使用 重构最佳实践 随时间更新代码。 为阅读而不是书写进行优化 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 开发人员花费大量时间_阅读_代码。实际上，一天中_编写_代码所占的比例要小得多。 因此，应针对读取和调试（而非编写）来优化代码格式。 例如，应该优先采用 DATA : a TYPE b , c TYPE d , e TYPE f . 而不是 \" anti-pattern DATA : a TYPE b , c TYPE d , e TYPE f . 激活前使用格式优化器 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 在激活对象前应用格式优化器——SE80、SE24 和 ADT 中的 Shift+F1。 如果修改一个大型未格式化旧代码库，可能需要仅对选定行应用格式优化器，以避免产生大量的变更项和传输依赖项。请考虑在单独的传输请求或注释中整齐打印完整的开发对象。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 5: Formatting: Team Rules 。 使用格式优化器团队设置 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 始终使用团队设置。在_菜单_ > 实用程序 > 设置 ... > ABAP 编辑器 > _格式优化器_下进行指定。 按照团队的协商设置_缩进_和_转换大写/小写_ > 大写关键字 。 大写字母与小写字母 解释了为什么我们没有为关键字的大小写提供明确的指导。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 5: Formatting: Team Rules 。 每行只有一条语句 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA do_this TYPE i . do_this = input + 3 . 即使某些情况可能使您误以为这是可读的： \" anti-pattern DATA do_this TYPE i . do_this = input + 3 . 恪守合理的行长度 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 遵守最多 120 个字符的行长度。 如果行距不是很宽，人眼可以更舒适地阅读文字——请在UI 设计师或眼动研究人员建议下做出您的选择。在调试或比较相邻的两行源代码时，如果代码行更窄一些，您会心生感激之情的。 老的终端设备的 80 个甚至 72 个字符的限制太过严格了。虽然通常建议使用 100 个字符（这是一个可行的选择），但对于 ABAP 来说，最好使用 120 个字符，这可能是因为这种语言一般较为冗长。 提醒一下，您可以在 ADT 中将打印边距配置为 120 个字符，然后在代码视图中将其显示为垂直线。在_菜单_ > 窗口 > 首选项 > 常规 > 编辑器 > _文本编辑器_下进行配置。 紧缩代码 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA ( result ) = calculate ( items ). 而不是添加不必要的空格 \" anti-pattern DATA ( result ) = calculate ( items = items ) . 添加单一空行来分隔内容，而不要添加多行 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA ( result ) = do_something ( ). DATA ( else ) = calculate_this ( result ). 强调这两条语句做的是不同的事情。但没必要 \" anti-pattern DATA ( result ) = do_something ( ). DATA ( else ) = calculate_this ( result ). 添加分隔空行可能表明您的方法没有在 做一件事 。 勿因分隔空行产生困扰 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 METHOD do_something . do_this ( ). then_that ( ). ENDMETHOD . 没有理由养成用空行将代码分开的坏习惯 \" anti-pattern METHOD do_something . do_this ( ). then_that ( ). ENDMETHOD . 空行实际上仅在您有跨越多行的语句时才有意义 METHOD do_something . do_this ( ). then_that ( EXPORTING variable = 'A' IMPORTING result = result ). ENDMETHOD . 对齐同一对象而非不同对象的赋值 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 为了强调这些事物在某种程度上是属于一起的 structure - type = 'A' . structure - id = '4711' . 或者这样更好 structure = VALUE # ( type = 'A' id = '4711' ). 而对于那些彼此无关的事物，仍保留参差不齐的状态： customizing_reader = fra_cust_obj_model_reader => s_get_instance ( ). hdb_access = fra_hdbr_access => s_get_instance ( ). 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 5: Formatting: Horizontal Alignment 。 在行尾关闭括号 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 modify -> update ( node = if_fra_alert_c => node - item key = item -> key data = item changed_fields = changed_fields ). 而不是毫无必要地加长 \" anti-pattern modify -> update ( node = if_fra_alert_c => node - item key = item -> key data = item changed_fields = changed_fields ). 保持单参数调用于一行 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA ( unique_list ) = remove_duplicates ( list ). remove_duplicates ( CHANGING list = list ). 而不是毫无必要地加长 \" anti-pattern DATA ( unique_list ) = remove_duplicates ( list ). DATA ( unique_list ) = remove_duplicates ( CHANGING list = list ). 保持参数在调用后面 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA ( sum ) = add_two_numbers ( value_1 = 5 value_2 = 6 ). 如果这造成行很长，可以换行，将参数转到下一行： DATA ( sum ) = add_two_numbers ( value_1 = round_up ( input DIV 7 ) * 42 + round_down ( 19 * step_size ) value_2 = VALUE # ( ( `Calculation failed with a very weird result` ) ) ). 如果换行，则在调用下缩进参数 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA ( sum ) = add_two_numbers ( value_1 = 5 value_2 = 6 ). 在其他地方对齐参数将导致很难发现它们所属的对象： DATA ( sum ) = add_two_numbers ( value_1 = 5 value_2 = 6 ). 但是，如果要避免因名称长度更改而破坏格式，这就是最佳模式了。 将多个参数换行 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA ( sum ) = add_two_numbers ( value_1 = 5 value_2 = 6 ). 是的，这浪费了空间。但是如果不这样，就很难确定一个参数在哪里结束而下一个在哪里开始： \" anti-pattern DATA ( sum ) = add_two_numbers ( value_1 = 5 value_2 = 6 ). 对齐参数 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 modify -> update ( node = if_fra_alert_c => node - item key = item -> key data = item changed_fields = changed_fields ). 边距参差不齐，使得很难看到参数的结束位置以及参数值的开始位置： \" anti-pattern modify -> update ( node = if_fra_alert_c => node - item key = item -> key data = item changed_fields = changed_fields ). 如果要避免因名称长度更改而破坏格式，这就是另一种最佳模式了。 如果调用行过长则将其换行 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA ( some_super_long_param_name ) = if_some_annoying_interface~add_two_numbers_in_a_long_name ( value_1 = 5 value_2 = 6 ). 缩进并卡到制表位 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 将参数关键字缩进 2 个空格，并将参数缩进 4 个空格： DATA ( sum ) = add_two_numbers ( EXPORTING value_1 = 5 value_2 = 6 CHANGING errors = errors ). 如果没有关键字，则将参数缩进 4 个空格。 DATA ( sum ) = add_two_numbers ( value_1 = 5 value_2 = 6 ). 使用 Tab 键缩进。就算多加了一个空格也没有关系。（如果左侧 DATA(sum) = 部分的字符数非偶数，则会发生这种情况。） 如同方法调用那样缩进内联声明 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 按照与方法调用相同的方式，使用 VALUE 或 NEW 缩进内联声明： DATA ( result ) = merge_structures ( a = VALUE # ( field_1 = 'X' field_2 = 'A' ) b = NEW / clean / structure_type ( field_3 = 'C' field_4 = 'D' ) ). 勿对齐类型子句 ¶ ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA name TYPE seoclsname . DATA reader TYPE REF TO / clean / reader . 变量及其类型属于同一类，因此从视觉上来说应将其分为一组。将 TYPE 子句对齐会使人们的分心，并建议这些变量形成一个垂直组，而它们的类型形成一个垂直组。对齐还会产生不必要的编辑开销，当最长变量名的长度发生变化时，需要调整所有的缩进。 \" anti-pattern DATA name TYPE seoclsname . DATA reader TYPE REF TO / clean / reader . 测试 ¶ ABAP 整洁之道 > 目录 > 本节 原则 ¶ ABAP 整洁之道 > 目录 > 测试 > 本节 编写可测试的代码 ¶ ABAP 整洁之道 > 目录 > 测试 > 原则 > 本节 编写的所有代码应该允许您以自动方式测试。 如果需要重构您的代码，那就重构。并在开始添加其他功能之前重构。 如果添加到的旧代码结构过于混乱而无法测试，那么至少要对其进行重构到您新添加部分能够测试。 让他人能够进行模拟 ¶ ABAP 整洁之道 > 目录 > 测试 > 原则 > 本节 如果要编写供其他人使用的代码，请让他们能够为自己的代码编写单元测试，例如通过在所有对外交互的位置添加接口，提供有助于促进集成测试的测试替身，或应用依赖倒置使他们能够用测试配置替代生产配置。 可读性规则 ¶ ABAP 整洁之道 > 目录 > 测试 > 原则 > 本节 让您的测试代码比生产代码更具可读性。您可以通过有效的测试来处理糟糕的生产代码，但是，可能您甚至还未进行测试，就已经把自己弄懵了。 保持您的测试代码保持简单、傻瓜，这样您一年后仍然能够理解它。 遵守标准和模式，使您的同事能够快速了解代码。 勿制作副本或写测试报告 ¶ ABAP 整洁之道 > 目录 > 测试 > 原则 > 本节 不要通过制作一个开发对象的 $TMP 副本并反复研究来处理开发项。其他人不会注意到这些对象，因此不会知道您的工作状态。您可能会在一开始就浪费大量的时间来制作工作副本，之后您也可能会忘记删除副本，这些副本对于系统和依赖项来说是没用的垃圾。（不相信？立刻看看开发系统并检查一下 $TMP 。） 另外，不要一开始就编写以特定方式调用某些内容的测试报告，并重复此操作以验证您在运行代码时是否一切正常。这是糟糕的手动测试：手动重复测试报告，目视验证一切是否正常。往前迈一步，在单元测试中自动执行此报告，使用自动断言告诉您代码是否仍然正常运行。这样的好处有，，您不需要进行之后必须编写单元测试的工作。其次，您可以节省进行手动重复所用的大量时间，另外还可以避免感到无聊和疲劳。 测试公共项而非私有内部项 ¶ ABAP 整洁之道 > 目录 > 测试 > 原则 > 本节 类的公共项部分，尤其是它们实现的接口，相当稳定并且不太可能发生更改。让您的单元测试仅验证公共项，使其稳定可靠，并最大程度地减少重构类时所需的工作量。相比之下，受保护的和私有的内部项可能会通过重构而快速变化，这样，每次重构都会不必要地中断您的测试。 测试私有方法或受保护方法的迫切需求可能是几个早期设计缺陷的警告信号。问问您自己以下问题： 您是否意外地在您的类中埋没了一个概念，这个概念本该公开到其自己的类并使用其专用测试套件？ 您是否忘记将域逻辑与粘合代码分开？例如，直接在类中实施作为操作、确定或验证插入到 BOPF 的域逻辑，或者由 SAP Gateway 作为 *_DPC_EXT 数据提供者生成的域逻辑，可能不是上策。 接口是不是太过复杂、请求过多无关的数据或者无法轻松进行模拟？ 勿困扰于覆盖范围 ¶ ABAP 整洁之道 > 目录 > 测试 > 原则 > 本节 代码覆盖范围可以帮助您找到忘记测试的代码，而不是满足某些随机的 KPI： 不要仅为了达到覆盖范围而在包含或不含虚拟断言的情况下编写测试。最好保留未经测试的内容，以表明您不能安全地进行重构。您可以拥有小于 100％ 的覆盖范围，并且仍然可以进行完美的测试。在某些情况下，例如在构造函数中使用 IF 插入测试替身时，可能无法达到 100％。好的测试往往会针对不同的分支和条件多次覆盖同一条语句。实际上，这些测试的假想覆盖率大于 100％。 测试类 ¶ ABAP 整洁之道 > 目录 > 测试 > 本节 按用途调用局部测试类 ¶ ABAP 整洁之道 > 目录 > 测试 > 测试类 > 本节 CLASS ltc_unit_tests DEFINITION FOR TESTING ... . CLASS ltc_integration_tests DEFINITION FOR TESTING ... . CLASS ltc_unit_tests_with_mocks DEFINITION FOR TESTING ... . 良好的名称可以揭示测试的级别以及公有设置部分。 \" anti-patterns CLASS ltc_fra_online_detection_api DEFINITION FOR TESTING ... . \" We know that's the class under test - why repeat it? CLASS ltc_test DEFINITION FOR TESTING .... \" Of course it's a test, what else should it be? 将测试放在局部类 ¶ ABAP 整洁之道 > 目录 > 测试 > 测试类 > 本节 将单元测试放入被测类的局部测试包含文件中。这样可以确保人们在重构该类时能够找到这些测试，并允许他们通过按一次按键运行所有相关的测试，如 如何执行测试类 中所述。 将组件测试、集成测试和系统测试放入包含单独全局类的局部测试中。它们与被测的单个类没有直接关系，因此不应随意将它们放在某个相关类中，而是应放在一个单独的类中。将此全局测试类标记为 FOR TESTING 和 ABSTRACT ，以避免在生产代码中意外地引用该类。将测试放到其他类中存在这样的危险，即人们在重构所涉及的类时忽略并忘记运行这些测试。 因此，使用*测试关系*来记录已测试的对象是有好处的。在下面的例子中，可以在类 recruting 或 candidate 中或通过快捷键 Shift-Crtl-F12 (Windows) 或 Cmd-Shift-F12 (macOS) 执行测试类 hiring_test 。 \"! @testing recruting \"! @testing candidate class hiring_test defintion for testing risk level dangerous duration medium abstract . ... endclass . 将帮助方法放在帮助类 ¶ ABAP 整洁之道 > 目录 > 测试 > 测试类 > 本节 将若干测试类使用的帮助方法放在帮助类中。通过继承（关系）或委托（具有关系）使帮助方法可用。 \" inheritance example CLASS lth_unit_tests DEFINITION ABSTRACT FOR TESTING DURATION SHORT RISK LEVEL HARMLESS . PROTECTED SECTION . CLASS-METHODS assert_activity_entity IMPORTING actual_activity_entity TYPE REF TO zcl_activity_entity expected_activity_entity TYPE REF TO zcl_activity_entity . ... ENDCLASS . CLASS lth_unit_tests IMPLEMENTATION . METHOD assert_activity_entity . ... ENDMETHOD . ENDCLASS . CLASS ltc_unit_tests DEFINITION INHERITING FROM lth_unit_tests FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS . ... ENDCLASS . 如何执行测试类 ¶ ABAP 整洁之道 > 目录 > 测试 > 测试类 > 本节 在 ABAP 开发工具中，按 Ctrl+Shift+F10 运行某个类中的所有测试。按 Ctrl+Shift+F11 以包括覆盖范围测量。按 Ctrl+Shift+F12 还可运行作为测试关系维护的其他类中的测试。 在 macOS 中，使用 Cmd 而不是 Ctrl 。 被测代码 ¶ ABAP 整洁之道 > 目录 > 测试 > 本节 赋予被测代码有意义的名称，或使用缺省名称 CUT ¶ ABAP 整洁之道 > 目录 > 测试 > 被测代码 > 本节 为被测代码的变量提供一个有意义的名称： DATA blog_post TYPE REF TO ... 不要只使用类名称的所有无价值的命名空间和前缀来重复类名称： \" anti-pattern DATA clean_fra_blog_post TYPE REF TO ... 如果您具有不同的测试设置，且对描述对象的变化状态可能会有所帮助： DATA empty_blog_post TYPE REF TO ... DATA simple_blog_post TYPE REF TO ... DATA very_long_blog_post TYPE REF TO ... 如果想不到起什么名称有意义，请使用缺省名称 cut 。该缩写代表“code under test”。 DATA cut TYPE REF TO ... 特别是在不整洁且令人困惑的测试中，调用变量 cut 可以暂时帮助读者查看实际测试的内容。然而，从长远来看，整理测试才是真正有效的方法。 测试接口而非类 ¶ ABAP 整洁之道 > 目录 > 测试 > 被测代码 > 本节 测试公共项而非私有内部项 的实际结果是，使用_接口_输入您的被测代码 DATA code_under_test TYPE REF TO some_interface . 而不是_类_ \" anti-pattern DATA code_under_test TYPE REF TO some_class . 将被测代码的调用提取到自身的方法 ¶ ABAP 整洁之道 > 目录 > 测试 > 被测代码 > 本节 如果要测试的方法需要大量参数或准备好的数据，有必要将对它的调用提取到它自己的帮助方法中，该方法预设了不那么重要的参数： METHODS map_xml_to_itab IMPORTING xml_string TYPE string config TYPE / clean / xml2itab_config DEFAULT default_config format TYPE / clean / xml2itab_format DEFAULT default_format . METHOD map_xml_to_itab . result = cut -> map_xml_to_itab ( xml_string = xml_string config = config format = format ). ENDMETHOD . DATA ( itab ) = map_xml_to_itab ( '<xml></xml>' ). 直接调用原始方法会让您的测试陷入很多无意义的细枝末节： \" anti-pattern DATA ( itab ) = cut -> map_xml_to_itab ( xml_string = '<xml></xml>' config = VALUE # ( 'some meaningless stuff' ) format = VALUE # ( 'more meaningless stuff' ) ). 注入 ¶ ABAP 整洁之道 > 目录 > 测试 > 本节 使用依赖倒置注入测试替身 ¶ ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 依赖倒置意味着您将所有依赖项传递给构造函数： METHODS constructor IMPORTING customizing_reader TYPE REF TO if_fra_cust_obj_model_reader . METHOD constructor . me -> customizing_reader = customizing_reader . ENDMETHOD . 不要使用 setter 注入，这样做会以非预期方式使用生产代码： \" anti-pattern METHODS set_customizing_reader IMPORTING customizing_reader TYPE REF TO if_fra_cust_obj_model_reader . METHOD do_something . object -> set_customizing_reader ( a ). object -> set_customizing_reader ( b ). \" would you expect that somebody does this? ENDMETHOD . 不要使用 FRIENDS 注入，这会在替换生产依赖项之前对其进行初始化，产生意想不到的后果。当您重命名内部项后，它将立即中断。它还会绕过构造函数中的初始化。 \" anti-pattern METHOD setup . cut = NEW fra_my_class ( ). \" <- builds a productive customizing_reader first - what will it break with that? cut -> customizing_reader ?= cl_abap_testdouble => create ( 'if_fra_cust_obj_model_reader' ). ENDMETHOD . METHOD constructor . customizing_reader = fra_cust_obj_model_reader => s_get_instance ( ). customizing_reader -> fill_buffer ( ). \" <- won't be called on your test double, so no chance to test this ENDMETHOD . 考虑使用 ABAP 测试替身工具 ¶ ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 DATA ( customizing_reader ) = CAST / clean / customizing_reader ( cl_abap_testdouble => create ( '/clean/default_custom_reader' ) ). cl_abap_testdouble => configure_call ( customizing_reader ) -> returning ( sub_claim_customizing ). customizing_reader -> read ( 'SOME_ID' ). 与自定义测试替身相比，更短、更容易理解： \" anti-pattern CLASS / dirty / default_custom_reader DEFINITION FOR TESTING CREATE PUBLIC . PUBLIC SECTION . INTERFACES / dirty / customizing_reader . DATA customizing TYPE / dirty / customizing_table . ENDCLASS . CLASS / dirty / default_custom_reader IMPLEMENTATION . METHOD / dirty / customizing_reader~read . result = customizing . ENDMETHOD . ENDCLASS . METHOD test_something . DATA ( customizing_reader ) = NEW / dirty / customizing_reader ( ). customizing_reader -> customizing = sub_claim_customizing . ENDMETHOD . 利用测试工具 ¶ ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 一般来说，整洁的编程风格可以让您使用标准 ABAP 单元测试和测试替身完成大部分工作。但是，有些工具可以让您以优雅的方式处理更棘手的情况: 使用 CL_OSQL_REPLACE 服务测试复杂的 OpenSQL 语句，方法是将这些语句重定向到可在不影响系统其余部分的情况下填充测试数据的测试数据仓。 使用 CDS 测试框架来测试您的 CDS 视图。 使用测试缝隙作为临时解决办法 ¶ ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 如果所有其他技术都失败了，或者处于旧代码可能无法正常运行的情况下，应避免使用 测试缝隙 来增加可测试性。 尽管第一眼看上去很舒服，但测试接缝是侵入性的，而且容易与私有依赖项纠缠在一起，从长远来看，它们很难保持活性和稳定性。 因此，我们建议避免仅将测试接缝作为一种临时解决方法以将代码重构为更易于测试的形式。 使用 LOCAL FRIENDS 访问依赖倒置的构造函数 ¶ ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 CLASS / clean / unit_tests DEFINITION . PRIVATE SECTION . DATA cut TYPE REF TO / clean / interface_under_test . METHODS setup . ENDCLASS . CLASS / clean / class_under_test DEFINITION LOCAL FRIENDS unit_tests . CLASS unit_tests IMPLEMENTATION . METHOD setup . DATA ( mock ) = cl_abap_testdouble => create ( '/clean/some_mock' ). \" /clean/class_under_test is CREATE PRIVATE \" so this only works because of the LOCAL FRIENDS cut = NEW / clean / class_under_test ( mock ). ENDMETHOD . ENDCLASS . 勿滥用 LOCAL FRIENDS 侵入被测代码 ¶ ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 访问私有成员和受保护成员以插入模拟数据的单元测试很脆弱：当测试代码的内部结构发生变化时，它们会中断。 \" anti-pattern CLASS / dirty / class_under_test DEFINITION LOCAL FRIENDS unit_tests . CLASS unit_tests IMPLEMENTATION . METHOD returns_right_result . cut -> some_private_member = 'AUNIT_DUMMY' . ENDMETHOD . ENDCLASS . 勿更改生产代码来使代码可测试 ¶ ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 \" anti-pattern IF me -> in_test_mode = abap_true . 勿子类化来模拟方法 ¶ ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 不要在单元测试中通过子类化和覆盖方法来模拟方法。尽管这是可行的，但这样的方法很脆弱，在重构代码时测试很容易中断。而且真正的使用者还可能继承您的类， 如果没有明确设计此功能，这可能会令您措手不及 。 \" anti-pattern CLASS unit_tests DEFINITION INHERITING FROM / dirty / real_class FOR TESTING [...]. PROTECTED SECTION . METHODS needs_to_be_mocked REDEFINITION . 要获取旧被测代码，请 改用测试接缝 。测试接缝同样脆弱，但至少不会改变类的生产行为（如通过删除先前的 FINAL 标志或将方法的作用域从 PRIVATE 更改为 PROTECTED 来启用继承时可能发生的行为），仍不失为一种更为整洁的方式。 在编写新代码时，在设计类时应直接考虑此可测试性问题，并找到其他更好的方法。常见的最佳做法包括 求助于其他测试工具 并将问题方法提取到本身具有接口的单独类中。 勿更改生产代码来使代码可测试 的更具体的变化形式。 勿模拟不需要的东西 ¶ ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 cut = NEW / clean / class_under_test ( db_reader = db_reader config = VALUE # ( ) writer = VALUE # ( ) ). 尽可能精确地定义给定条件：不要设置测试不需要的数据，也不要模拟永远不会调用的对象。这些内容会分散读者对真实运行情况的注意力。 \" anti-pattern cut = NEW / dirty / class_under_test ( db_reader = db_reader config = config writer = writer ). 在某些情况下，根本不需要模拟某些内容，数据结构和数据容器通常就是这种情况。例如，您的单元测试可以使用 transient_log 生产版本正常运行，因为该版本只存储数据而不会产生其他影响。 勿构建测试框架 ¶ ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 与集成测试不同，单元测试涉及数据输入和数据输出，所有测试数据都是根据需要动态定义的。 cl_abap_testdouble => configure_call ( test_double ) -> returning ( data ). 不要开始构建用于区分“ 测试案例标识 ”的框架来决定要提供的数据。生成的代码将会如此冗长而复杂，以至于您无法长期保留这些测试。 \" anti-pattern test_double -> set_test_case ( 1 ). CASE me -> test_case . WHEN 1 . WHEN 2 . ENDCASE . 测试方法 ¶ ABAP 整洁之道 > 目录 > 测试 > 本节 测试方法名称：反映出设想和预期的情形 ¶ ABAP 整洁之道 > 目录 > 测试 > 测试方法 > 本节 好的名称可以反映出测试的设想内容和预期结果： METHOD reads_existing_entry . METHOD throws_on_invalid_key . METHOD detects_invalid_input . 不恰当的名称则反映操作内容，重复无意义的事实或含糊不清： \" anti-patterns \" What's expected, success or failure? METHOD get_conversion_exits . \" It's a test method, what else should it do but \"test\"? METHOD test_loop . \" So it's parameterized, but what is its aim? METHOD parameterized_test . \" What's \"_wo_w\" supposed to mean and will you still remember that in a year from now? METHOD get_attributes_wo_w . 由于 ABAP 只允许方法名称使用 30 个字符，如果名称过短而无法表达足够的含义，那么添加注释是合理的。在 ABAP 文档中或在测试方法的第一行添加注释都是不错的选择。 如果有很多名称过长的测试方法，这可能意味着您应该将单个测试类拆分为多个测试类，并在类名称中的给定部分予以区别。 使用 given-when-then ¶ ABAP 整洁之道 > 目录 > 测试 > 测试方法 > 本节 按照 given-when-then 范式组织测试代码：首先，初始化给定部分中的内容 (\"given\")，其次调用实际测试的内容 (\"when\")，再次验证结果 (\"then\")。 如果 given 或 then 部分过长，您无法再从视觉上区分这三个部分，请提取子方法。空行或注释作为分隔符乍一看可能还不错，但并不能真正减少视觉混乱。尽管如此，空行或注释对于读者和测试新手区分这三个部分还是有所帮助的。 \"When\" 恰为一个调用 ¶ ABAP 整洁之道 > 目录 > 测试 > 测试方法 > 本节 确保测试方法的 \"when\" 部分仅包含对被测类的一次调用： METHOD rejects_invalid_input . \" when DATA ( is_valid ) = cut -> is_valid_input ( 'SOME_RANDOM_ENTRY' ). \" then cl_abap_unit_assert => assert_false ( is_valid ). ENDMETHOD . 调用多个对象表明该方法没有明确的焦点，测试内容过多。这使得测试失败时更难以找到原因：是第一次、第二次还是第三次调用导致了失败？这也使读者感到困惑，因为他不确定确切的被测功能是什么。 除非真正需要否则勿添加 TEARDOWN ¶ ABAP 整洁之道 > 目录 > 测试 > 测试方法 > 本节 通常只需要使用 teardown 方法来清除数据库条目或集成测试中的其他外部资源。 重置测试类的成员（尤其是 cut 和所用的测试替身）是多余的操作；在启动下一个测试方法之前，这些成员就会由 setup 方法覆盖。 测试数据 ¶ ABAP 整洁之道 > 目录 > 测试 > 本节 使其易于辨明含义 ¶ ABAP 整洁之道 > 目录 > 测试 > 测试数据 > 本节 在单元测试中，您希望能够快速判断出哪些数据和替身是需要关注的内容，哪些内容的作用只是为了防止代码崩溃。通过为没有含义的内容起一个显眼的名称和值来支持此功能，例如： DATA ( alert_id ) = '42' . \" well-known meaningless numbers DATA ( detection_object_type ) = '?=/\"&' . \" 'keyboard accidents' CONSTANTS some_random_number TYPE i VALUE 782346 . \" revealing variable names 不要欺骗人们相信某些内容可以与真实的对象或真实的定制联系起来（如果没有联系）： \" anti-pattern DATA ( alert_id ) = '00000001223678871' . \" this alert really exists DATA ( detection_object_type ) = 'FRA_SCLAIM' . \" this detection object type, too CONSTANTS memory_limit TYPE i VALUE 4096 . \" this number looks carefully chosen 使其易于辨明差异 ¶ ABAP 整洁之道 > 目录 > 测试 > 测试数据 > 本节 exp_parameter_in = VALUE # ( ( parameter_name = '45678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789END1' ) ( parameter_name = '45678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789END2' ) ). 不要强迫读者去比较长且无意义的字符串来发现细微的差别。 使用常量描述测试数据的用途和重要性 ¶ ABAP 整洁之道 > 目录 > 测试 > 测试数据 > 本节 CONSTANTS some_nonsense_key TYPE char8 VALUE 'ABCDEFGH' . METHOD throws_on_invalid_entry . TRY . \" when cut -> read_entry ( some_nonsense_key ). cl_abap_unit_assert => fail ( ). CATCH / clean / customizing_reader_error . \" then ENDTRY . ENDMETHOD . 断言 ¶ ABAP 整洁之道 > 目录 > 测试 > 本节 少而精的断言 ¶ ABAP 整洁之道 > 目录 > 测试 > 断言 > 本节 仅使用少量断言，准确地断言测试方法的内容。 METHOD rejects_invalid_input . \" when DATA ( is_valid ) = cut -> is_valid_input ( 'SOME_RANDOM_ENTRY' ). \" then cl_abap_unit_assert => assert_false ( is_valid ). ENDMETHOD . 断言过多表明该方法没有明确的重点。这会在很多地方将生产和测试代码耦合在一起：更改功能将需要重写大量的测试，尽管它们实际上并未涉及更改后的功能。各种各样的断言使读者感到困惑，难以辨别其中最重要的那个断言。 \" anti-pattern METHOD rejects_invalid_input . \" when DATA ( is_valid ) = cut -> is_valid_input ( 'SOME_RANDOM_ENTRY' ). \" then cl_abap_unit_assert => assert_false ( is_valid ). cl_abap_unit_assert => assert_not_initial ( log -> get_messages ( ) ). cl_abap_unit_assert => assert_equals ( act = sy - langu exp = 'E' ). ENDMETHOD . 使用恰当的断言类型 ¶ ABAP 整洁之道 > 目录 > 测试 > 断言 > 本节 cl_abap_unit_assert => assert_equals ( act = table exp = test_data ). 断言的作用往往不止表面看到的那些，例如 assert_equals 包括类型匹配，如果值不同，还能提供准确的描述。使用错误的、过于常见的断言将迫使您立即进入调试器，而不是让您直接从错误消息中看到问题所在。 \" anti-pattern cl_abap_unit_assert => assert_true ( xsdbool ( act = exp ) ). 断言内容而非数量 ¶ ABAP 整洁之道 > 目录 > 测试 > 断言 > 本节 assert_contains_exactly ( actual = table expected = VALUE string_table ( ( `ABC` ) ( `DEF` ) ( `GHI` ) ) ). 如果可以表达期望的实际内容，就不要编写幻数数量断言。尽管仍然可以达到预期，但数字可能会有所不同。相反，尽管内容完全出乎意料，但数字可能会匹配。 \" anti-pattern assert_equals ( act = lines ( log_messages ) exp = 3 ). 断言质量而非内容 ¶ ABAP 整洁之道 > 目录 > 测试 > 断言 > 本节 如果您对结果的元质量感兴趣，但对实际内容本身不感兴趣，请使用合适的断言来表达： assert_all_lines_shorter_than ( actual_lines = table expected_max_length = 80 ). 断言精确的内容会掩盖您实际想要测试的内容。它还很脆弱，因为重构可能会产生一个不同但完全可以接受的结果，尽管它会中断所有过于精确的单元测试。 \" anti-pattern assert_equals ( act = table exp = VALUE string_table ( ( `ABC` ) ( `DEF` ) ( `GHI` ) ) ). 使用 FAIL 检查是否出现预期异常 ¶ ABAP 整洁之道 > 目录 > 测试 > 断言 > 本节 METHOD throws_on_empty_input . TRY . \" when cut -> do_something ( '' ). cl_abap_unit_assert => fail ( ). CATCH / clean / some_exception . \" then ENDTRY . ENDMETHOD . 转发意外异常而非捕获就失败 ¶ ABAP 整洁之道 > 目录 > 测试 > 断言 > 本节 METHODS reads_entry FOR TESTING RAISING / clean / some_exception . METHOD reads_entry . \"when DATA ( entry ) = cut -> read_something ( ). \"then cl_abap_unit_assert => assert_not_initial ( entry ). ENDMETHOD . 与以下代码相比，您的测试代码始终专注于愉快路径，因此更易于阅读和理解： \" anti-pattern METHOD reads_entry . TRY . DATA ( entry ) = cut -> read_something ( ). CATCH / clean / some_exception INTO DATA ( unexpected_exception ). cl_abap_unit_assert => fail ( unexpected_exception -> get_text ( ) ). ENDTRY . cl_abap_unit_assert => assert_not_initial ( entry ). ENDMETHOD . 编写自定义断言以缩短代码和避免重复 ¶ ABAP 整洁之道 > 目录 > 测试 > 断言 > 本节 METHODS assert_contains IMPORTING actual_entries TYPE STANDARD TABLE OF entries_tab expected_key TYPE key_structure . METHOD assert_contains . TRY . actual_entries [ key = expected_key ]. CATCH cx_sy_itab_line_not_found . cl_abap_unit_assert => fail ( | Couldn't find the key { expected_key }| ). ENDTRY . ENDMETHOD . 而不是一遍又一遍地复制粘贴。","text_tokens":["random","重复","利大于弊","tokens","不是","相邻","总会","到","十进制","没人会","数非","得以","business","参差","be","enterd","散","减少","assigning","all","指向","兼容","发生","外部","this","decs","最后","正面","增加","文本","有益","结尾","识别","乍一看","abapgit","考虑","负面影响","有用","之短会","错误处理","f","大有","松散","总是","month","锁","晦涩","其次","同步性","7.50","整洁"," ","一连","显而易见","change","调整","导致","fixme","即","2018","success","功能模块","}","don","往前","supposed","立即","元","something","控制","他们","matches","好几","根本","call","导出","create","要求","friendships","例如","内核","速查表","解释","某种","solution","陷入","器","标志","这些","过多","data","empty","老派","十分","general","本意","两种","出来","结果","构建","抛弃","jenkins","9.6","验证","actions","变得","占","adbc","天工","这件","链","有助于","小数","含有","up","np","类型","单元","多件","功能","ice","解决办法","warning","31","觉察","返回","切割","seoo","为此","行为","恰当","合作","look","cut","危险","差别","refactoring","double","表单","简洁","关系","矛盾","from","之下","强于","两","一遍","分解成","预留","毫不","很大","方位","乏味","中","点","hdbr","begin","主意","同时","十页","让","读取","提供","支柱","测试报告","一天","抽象","进入","比较","constructor","known","作用域","或","检查和","changing","一整套","request","comp2","不感兴趣","对","之外","随机","（","@","层次","同样","dpc","逐渐","nonsense","多种","adjacent","领域","少数","终端","然而","几分","组成","他列","缺点","config","改良","at","全部","自定义","余部","耗费","被","减慢","or","足以","archivation","entity","解决","相关性","当然","endif","不行","清楚","童子","找到","精神","vseoextend","恪守","棘手","立刻","误以为","愉快","每次","编译成","退化","do","claim","适用范围","redefinition","dangerous","这个","函数调用","events","可行","converter","calibration","提炼","模糊","当","故障","hiring","word","算法","耦","get","人们","替代","exactly","时","出","蹊径","以何","相对","空间","kpi","原始","found","会心","真的","cv","功夫","一组","件","42","做法","02","nonpublic","query","详细","实例","宣讲会","匈牙利","出现异常","组织","层级","received","sorry","给","一切","这会","微处理器","测试方法","参差不齐","method","b","迫使","行得通","像","skiing","搜索","2019","性能需求","782346","rv","_","并行","少而精","enumerations","高性能","因","不必","是不是","具有","多数","github","包括","方便","缩写","保留","抑或","partner","本应","元素","所著","反复","开展","加载","多余","感到","can","大部分","frw","existing","此时","判别","旧","工具","内","终端设备","过","第一件","leap","全面","篇幅","更改","robert","处","字典","体里","以便","多次","加大","事","calculation","主","小数位","interfaces","existence","reader","一直","都","非任","小得多","意料","row","tests","04","指定","iso3166tab","高级","选取","主键","额外","ide","g","决策","一般来说","weird","自行","最少","过早地","observer","类才","clear","相比","继承性","原本","80","基本","同事","指明","传统","简单","博客","过度","严重","框架","循序","常量","外来","希望","无关","queue","不久","谨慎","大多","清洁","typepusages","类时","numbers","树","例外","binary","builds","遵守","除非","新","是因为","如","强调","45678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789end1","出现","就是","同义","更大","home","长期",">","构筑","既","your","exits","两次","早","粗略","char8","itab","提取","或是","移动","重置","structure","三元","tmp","range","建立","有助","preferences","接受","并且","教授","7.13","容易","毫无意义","破坏","know","数据类型","xsdbool","本来","clif","account","loop","meaningless","结构","逗号","各用","适用","item","insert","针对性","trimmed","菜单","list","无法","短语","assert","6","差异","十个","alerts","mocked","开源","样本","real","以外","代理","第三次","恰为","活性","服务","transform","一同",")","太","评审","drive","逐位","缩进","清晰","而","及其","至","每个","过程","output","小写","捆绑","状态","弄","details","liskov","slin","publish","document","除此","测类","询问","过载","happens","达","定性","replace","签名","rejects","heuristics","named","否则","各种各样","教科书","多个","重构","前","文字","为什么","一般性","努力","validator","在","小心","请求","含糊不清","31.06","最长","覆盖范围","as","activities","正常","tables","going","除外","用于","浪费时间","对此","magic","包","应","exporting","指导","一步","组成部分","假想","刚","现在","喜欢","有所不同","优缺点","move","example","大表","filter","没人","进制","个人风格","不再","仍然","true","经验","透视图","lowercase","pragmas","classes","似乎","round","各样","能力","用来","是否","不够","并未","team","synchronous","accidents","目视","估计","浮点","char10","开始","提醒","dot","setter","均","着","大多数","dirty","弥补","不齐","地方","可读性","背景","一次","不","冗长","对外","切换","脆弱","倾向","一点","利用","不管","背离","确保","category","尽量","宽","请参阅","函数","厚此薄彼","式","make","这样","添加","一行","写下","修改","commit","查找","4096","只不过","除此之外","十年","等等","四处","为","implementation","=","该项","表示法","bad","迷惑","常规","项目","private","不良","比如","下面","database","todo","绕过","下","务求","来说","sort","是","单","概念","可控","兼顾","keyboard","键值","过时","达成","只是","详细描述","干扰","相关","表明","一致性","日志","昵称","。","时向","osql","复制粘贴","fields","反之","无处不在","通常","复杂性","聚合","120","容器","抛出","'","thing","keller","空格","可用","若","了解","只读","重用","重点","保持一致","有理","皆","不同","后果","没有","fra","ponder","解决方案","条","起来","在技术上","绝大","没什么","星号","费时","it","排斥","事先","以非","overflow","放在","按键","不巧","效果","也就是说","ui","看不到","客户","internal","性能","大势所趋","set","知道","对子","language","active","detection","集成","defintion","替身","推行","node","so","所有人","污染","作者","制表","选项","子类","所在","else","稳妥","delegate","clauses","没法","二个","首选","e","挑选","数十个","inbound","return","大幅","custom","直线","无处","##","总体","一定","除了","几十年","广泛","20","旨在","欲","permission","长且","情况严重","才能","小时","节省","表才","square","呢","傻瓜","intention","费事","达式","超高","30","永远","维护","所处","每种","不太可能","comments","burning","老","cleanabap","分明","稳定","harmless","想","暂时","boolx","local","临时","低级","此类","各种","info","unique","该","不及","developer","boolean","倒置","package","格式化","致意","幻数","non","这是","查看","段","引入","itab2","点数","边距","必要","devclass","一起","清除","发人","append","相","lines","多难","asynchronous","f10","关键字","持续","remove","elseif","优于","标识","介绍","line","丧失","接口","接收者","二次","14.11","写出","恰好","find","定向","驱动","size","令人","构成","manager","案例","设备","类应","目标","而脏","整个","数值字","掩盖","设计模式","不仅","耦合","数十页","而仅","永不","名","另辟","大","pattern","中有","event","负责","全局","转化","认为","轻松","t","looks","粘贴","优化","通过","尽管","编写","substitution","相信","null","因此","simulate","何人","采纳","效率","objects","可以","参见","欺骗","pick","model","e136","无","感兴趣","~","deep","现代","versus","seofriends","了","专业化","三个","直到","public","itab1","很","hashed","getter","传递","e003","nothing","customizing","获取","regex","like","编码","formatting","authority","clsdeferrds","手动","a","面向对象编程","nw","valid","试图","分组","固有","打乱","实践","新手","根据","文本处理","健康","接收端","令人困惑","template","目的","原因","alternative","拆","horst","patterns","仅仅","本质","previous","最有","何为","原书","数值","detobjtype","errors","对类","abstract","普通","打印输出","wo","over","*","index","given","groups","适当","export","如何","认真","管理器","?","社区","明智地","理器","具体","句号","转换","情况","dotype","准确","exists","iterator","继续","尤其","zh","做","模仿","大小","答案","初级","直觉","master","table","项","不太","论道","语句","cds","enum","同步","constant","attribute","其他人","common","--","other","若非","char1","准备","角度","哪些","属性","难度","ref","便于","合作伙伴","个人","by","failed","失望","domain","searchable","看起来","信心","请勿","浪费","shift","conversion","当心","原则","仅当","区域","final","前面","体","采取有效","新旧","one","坚强","corr","default","本原","整齐","大势","允许","aim","speed","干","成员","工作量","好几个","何时","第一眼","\\","horizontal","{","供者","host","或者","指","whether","不断","造成","重定向","kpis","使","val","cls","所用","works","更","散列值","协商","能够","transient","but","确切","bobf","更具","小岛","result","returning","constants","证明","distance","simple","不在","的","怀疑","不到","facade","i","产生","文章","暗示","accessing","子树","]","律","clean","条目","降低","遵守规则","本身","无意","注意力","param","满是","专业","缩减到","控制流","循序渐进","路径","retrieve","拆分","temperature","输出","短于","out","endtry","用工","that","安排","条理","小到","suppress","bapiret2","略有不同","删除","对照","迭代","very","进行","与其","大于","分量","applies","reference","复数","编程","简短","有理有据","实际","并","中断","年轻","最早","突出","必备","委托","名词","那些","很小","特点","学","references","）","不要","29.02","一个","优点","按钮","一类","parse","只","of","http","试用","想不出","有些","垂直","什么","would","编辑器","复合","translate","case","moderate","不如","级","接缝","防止","插入","某","区别","前缀","attributes","地使","methods","本","长","映射","不失为","语法","vseomethod","缺省","范根","factory","毫不在乎","execute","认识","air","非常","changed","block","已经","人","用处","程序","永久","符合","concept","行尾","注定","贡献","％","诸如","静态","遇到","事后","合乎","表里","困难","回想","正确","一件","类化","易于","自主","打印","为空","垂直线","online","准确无误","validate","确定","fowler","联系","包裹","对齐","不了","如果","where","系统","自相","如同","的话","length","跨越","two","当前","携带","互相","绝对","范围","做且","条件","enums","contributing","fail","那","us","显得","input","明显","sorted","做出",";","复制到","译成","|","精简","沉湎","改用","expected","恢复","那样","exit","词","generic","几乎","生成","懵","退出","行事","不足","收到","不得","特别","布尔方法","-","no","忘记","教科","受","文件","对象","整套","不应","what","数","seor","未经","productive","精短","structures","数千","数据处理","saving","几个","每日","上去","help","duplicates","subtract","equals","崩溃","消息","自己","查","country","应用程序","之前","composer","xs","反映","设计","费时间","最新","全都","关联","小于","distributed","种类","自","错误","局部","人工","令人讨厌","statement","迈","asserted","上下文","ledger","默认","invalid","测试","含糊","每组","不倦","或应","转储","改变","一部","内容","first","规范","不在乎","恢复正常","片段","项后","whatever","act","满足","工作","分析","candidate","关闭","完美","脏","进一步","意想","视为","testdouble","定义","证据","作出","视而不见","正则表达式","考验","之","高效","deleted","书写","循环","指引","运用","交换","以","就够","fancy","责人","实际上","最好","理解","enddo","失败","讲述","with","组件","各自","某种程度","现有","负面","45678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789end2","个别情况","well","macos","作用","干净","限制","微秒","simulated","看出","有点","tab","行","transitional","dynamically","各节","使得","supplied","不想","意义","制作","显而","more","conditioning","一读","dynamic","经得起","结合","测试代码","于类","争议","方面","再","尽管如此","替换","它会","命令","精确","let","javadocs","test","测试工具","via","upper","说明","under","优先","recruting","聊天","引发","xxx","所","误解","历史记录","但","作为","东西","参数值","使用","沟通","方法","背后","少量","举办","the","转而","扩展","f1","不含","g29","凭直觉","改编","symbol","小表","初始化","索引","endcase","顾及","特殊","subrc","误导","trim","以防","内联","connid","相互","false","明","过长","展示","unit","同一个","save","基于","绝大多数","长得","出乎意料","确无","抑制","消耗","选择","<","z0","代码","”","3","负责人","慢得","惊讶","据库","缝隙","存在","自由","出于","!","流畅","创建","副作用","意味着","7.53","下降","shorter","receiving","意图","后面","的确","改","层次结构","这使","问题所在","甚至","编程语言","integration","endloop","把","隐蔽","追加","主张","避免出现","format","先前","setup","分隔符","freezing","above","主控室","对于","接收","连串","spfli","各处","过于","来自","testing","于","伪","对表","而是","剖析","空行","last","guidelines","entry","相应","其余","不用","not","集合","不见","本该","阻止","定制","nodes","讨厌","member","一眼","相反","篇章","长远","还","小","辨明","编译","这里","几分钟","build","加长","假如能","由于","模块","ctrl","指出","这样一来","step","更加","7","缺省值","记录","others","表时","working","不止","决定","留到","务必","vseoidefer","指南","测","include","交叉","想要","任何人","map","动词","1","log","字","毫无","同意","数百","例外情况","求助","root","面向","否定","自我","function","correction","合理","j3","完整","time","chill","注","user","格式","lifespan","cold","styleguides","重写","合适","“","以下","标记","自然语言","模板","恰有","configure","目前","法","anti","instance","节","低于","上","自动","blog","generation","管理","覆盖","dsag","endclass","clsdeferrd","大型","意想不到","下子","strategy","have","唯一","delete","放到","abcdefgh","奇怪","bapi","convention","entries","探讨","数据结构","不必要","常","三种","check","机会","固定值","should","工厂","写","忽视","new","times","一连串","e001","detects","required","阅读","减到","强迫","lifecycle","endwhile","很少","字眼","此","指示","毕竟","...","多种类型","occurred","seoclsname","这会令","力图","加","4.5","withdraw","至于","很难","avoid","该类","所有","有益健康","00000001223678871","corrected","随意","读者","科学","duplication","者","公开","最大","而非","不仅仅","安全","缩减","reads","sclaim","程序员","不足道","透视","混乱","列","course","字符串","intdeferrds","链式","费劲","看上","例子","shortdump","z","影响","错误代码","备选","拓展","开销","未","called","变得复杂","而已","带上","尤为","之类","未能","异常","支持","所欲","netweaver","parameterized","重现","universe","zcl","频繁","translated","risk","类似","---","now","以后","发出","cond","设立","多加",",","至少","模式","保持","·","相当","后备","still","really","会以","隐藏","隐式","next","掺和","印证","abaplint","#","day","观点","冲突","描述性","wait","specific","传达","表","见","聊天工具","极长","类而用","所述","继承","不可","加剧","另外","needs","分心","引用","current","调试器","disinformation","优势","坏","紧紧","seof","查表","改成","团队","决策树","国家","argument","(","7.51","class","those","互通","is","add","文本编辑","handle","score","一体","子句","致力","可","所属","sap","史记","rules","teardown","illegal","level","hot","时为","上下","clskey","应该","避免","细微","始终保持","事情","块","static","首先","激活","程序代码","资源","显示","变化","首选项","if","空壳","不能","由此","不错","somebody","ghi","变通","只要","第二","许多","舒服","需求","cp","merge","生变","适合","封装","链接","exception","好处","规则","成","舒适","渐进","cast","更为","90%","sql","质量","之后","和","表面","忽略","低","平衡","明确","update","积极","同义词","you","减至","一条","连用","本文","真实","blob","post","fran","悲观","变成","martin","反面","me","partners","没理由","limit","一整","per","之间","guid","schema","绝非","一种","指针","应用","dummy","三次","ec","多","用途","couldn","access","、","试着","经常","混用","这仅","快捷键","9","历史","search","嵌入","软件设计","类","细枝","seox","关键","之道","对象化","r","少于","测量","始终","又","seconds","process","业务","公有","intdeferrd","算机","来看","activity","还要","测试用例","预期","exceptions","然后","remember","误导性","名称","互斥","singleton","cxtgen","既然如此","4","动态","直接","起个","seoclskey","处理","花大","比","值得","很多","告诉您","以及","报告","锁定","两条","secolsname","私有","id","区分","注入","而言","您","数据库","检索","养成","composite","保护","reduce","出乎","开发阶段","分解","section","xml2itab","[","without","initiative","stack","inheritance","，","良好","has","等节","why","pronounceable","勿子","交互","fh","转载","某些","速度","doing","中肯","72","purpose","位置","深入","激烈","借助","\"","nature","求助于","short","层","快速","来","_.","墨忒耳","焦点","throws","颇具","typekind","selection","construct","optional","孜孜不倦","单一","什么样","成为","像是","明智","语法错误","入手","值","为何","位数","com","need","任何","name","他","并非","面向对象","100","提供者","空","随心所欲","几十","vseoattrib","眼动","次数","cl","视觉","because","姓名","构造函数","components","大部","改善","abapopenchecks","use","心所","依赖","就","简明","此处","bo","情景","助于","感兴","条理分明","friends","endmethod","to","单个","只能","串行","boole","and","decide","有关","预先","汇集","super","正","变量","status","crtl","negative","处理器","se80","用户","本处","align","地","代之以","第三种","早期","操作","疲劳","将","一部分","解","池","被测","raising","采用","我们","失去","第三个","alignment","5","小写字母","文档","感激","customer","一段","链组","短","preferred","优雅","countries","good","long","单数","阶段","困惑","细枝末节","纠缠","外观","习惯","质疑","共识","涉及","threshold","2","....","信息","definition","object","思考","repeat","其余部分","极大","读出","sub","嵌套","show","类为","单例","环境","内存","大大","如此","人会","一般","章","uname","粘合","expect","中文","紧缩","时不时","endfunction","ais","就是说","产品","principle","相比之下","component","se91","另","辨别","上策","does","事物","表上","cant","decfloat","json","抽象类","read","严格","以至","代表","专用","large","反而","space","时会","an","开发人员","buffer","in","部分","局部变量","sum","returns","cust","break","obj","尽早","放入","每行","做不了","极为","快","放弃","将类","措手","没用","memory","lock","坏习惯","生产","效应","my","标准","error","其中","endinterface","executing","以为","代替","检查一下","期望","可靠","彼此","declarations","使用者","dry","改编自","we","请","conditionals","提到","不会","protected","f11","指数","辅助","用例","做好","eq","正则","讲","应为","长度","想不到","而换个","当场","别情","误用","分成","拥有","：","preference","两行","仍","contains","脑筋","7.54","匹配","value","去","仓","检查","里","个","意外","key","provided","archived","哪里","迫切","个字符","挪动","自动检测","db","无论如何","parameter","一年","列表","用","xstring","f12","此种","侵入","分支","此外","将域","高性","carrid","应对","调优","内置","警告","实体","判断","真正","清理","给定","aggregate","堡垒","字符","原先","发生变化","不带","顺序调用","较为","writer","可见","自然","comp1","years","视角","cx","基础","有","需花","靠","普遍","describe","难","外界","兴趣","will","revealing","项而非","非","则","overwrite","into","看上去","w","fits","切勿","mocks","unknown","广为","它们","一下","decorator","提高","微不足道","写入","cocoa","窄","注释","单向","访问","覆盖率","这","他人","一节","入门","g27","布尔值","original","用者","启动","初始","究竟","一致","当以","不计","因而","那个","虽然","开头","分散","一致意见","名字","捕获","喜爱","&","needed","促进","重要","conf","when","d","等","体较","数值数据","version","省略","分段","重新","评分","更新","收集","已","因素","不过","板","多大","研究","左侧","down","为了","def","断言","old","alias","+-------------------------------------------------------------------------------------------------+","类型转换","copy","范式","instead","关于","有效","好",".+","signature","实施","atc","调","后续","枚举","源代码","不整洁","多步","这种","serves","合并","code","即使","方式","位","原来","强制","chance","降","含义","配置","carefully","math","共同","导航","要","困扰","sy","培训","往往","opensql","倍","写字","从","不得不","意见","内部结构","为宜","处于","实现","体会","archiving","一样","便","max","symsgty","生","items","其","ltc","调用者","风格","abc","only","可选","会","fix","混合","全方位","掉","反向","api","year","相互之间","方案","取自","整理","好于","副本","vseoclass","悲观失望","所示","表达","后","改进","数据量","讨论","秉承","继续执行","inheriting",":","数组","distinctions","级别","听","大写","就算","才","反复研究","gateway","同","糟糕","固定","引起","未命名","通用","smells","尽","词组","鼓励","convert","只有","深度","伙伴","names","术语","成组","运行","实用程序","勿","下才","具备","vertical","读","dialog","设想","数十","encodings","值来","布尔","视图","非类","severity","分开","埋没","有人","自身","date","予以","try","选定","vseotype","但是","过早","行距","可读","缺少","right","$","过多会","第一","一来","2.13","有所","价值","延伸","末尾","含","也","典型","最","；","赋予","field","使类","垃圾","单词","实用工具","类中","记得","seot","g25","initial","constructs","库","之一","属于","语义","丢掉","无论","弱点","变更","那种","设置","0","alert","尽力","公平","表示","any","aliases","冻结","复制",".","衡量","既然","在乎","4711","自相矛盾","不但","存储","generator","模拟","dynpro","源","遗留","message","版本","values","duration","unexpected","expensive","特定","事实","供","很长","建议您","too","帮助","自定","generate","由","受益","重新组合","f2","mode","显然","解析器","通晓","实用","达到","x666","problem","争论","获得","actual","按照","道","container","换行","坚持","比例","assign","分析器","时才","逻辑","单元测试","需","modify","超过","vseotypep","massive","稍后","而且","annoying","执行","自行设计","还是","哪个","partially","29","独立","专注","回避","会因","another","信号","无空","uppercase","顺序","个别","开辟","化","chosen","rfc","seo","借口","键","biz","先","typedescr","catch","领会","hdb","完成","cream","别的","通知","且","恐惧","例行工作","组","仅","尽可能","请仅","计算","select","计算机","ext","字母","没","程度","看到","因为","本地","理由","致力于","这条","论据","dobjt","若干","remainder","速查","普遍认为","不失","末节","选","implementing","完全","div","重要性","lot","interface","移除","太过","正在","roots","公共","fill","总之","无态","大大降低","sysubrc","清空","测试数据","事务","那么","输入您","结成","尽可","从而","假如","缩短","report","流动","计划","随","apis","token","浮点数","calc","场合","它","给出","text","谈经","调试","第二个","有态","分隔","？","并卡到","童子军","说法","难以","svar","单独","filled","ani","异议","无误","参照","development","mock","及","根本原因","相同","如今","足够","大写字母","位于","its","内部","表达式","主要","意味","转义","会令","评估","做会","多行","design","操控","溜走","types","trkorr","response","car","从小","技术","处理速度","checks","滥用","第","变量名","correct","偶数","套件","窗口","混在","其友元类","串行化","tree","子集","性","while","关注","undefined","最佳","+--------------------------------------------------------------------------------------","语言","升级","such","冒号","红色","其他","事实上","传输","vs","难于","then","不出","/","ç","复杂化","快捷","xfeld","采取","构造","大量","更好","例行","熟悉","复杂","标题","强烈建议","瓶颈","读出来","违反","称为","medium","发现","helper","问题","难看","17","同一","要么","可能","启用","得","组合","s","揭示","等效","重新考虑","cmd","时时","adt","常常","latest","author","虚拟","莫因","exp","针对","implementings","还会","看起","iv","人员","+","看看","时间","end","好过","数目","pairs","file","number","预设","起","加进","---------------------------------------------------------------------------------------+","此类情况","数字","指望","赋值","强行","集","需要","分钟","重申","aunit","xsd","some","与","分为","显眼","缩小","组建","声明","failure","lv","一下子","remains","描述","30.06","阻碍","软件","不良影响","第一次","english","适应","找出","persisted","到处","看","事件","营地","bound","zero","understand","参数","结束","详细信息","lth","试工","形成","以至于","略有","boolc","g5","顺利","than","宣讲","参阅","转发","目录","standard","选中","不时","中将","相较","排序","确实","keys","形式","列出","开发","for","java","se24","28","解析","极其","向","typepusage","静态方法","messages","stuff","孜孜","告诉","情形","子","忽略不计","第三","转到","主题","¶","c","amdp","受到","recommendations","调用","t005","string","引号","显式","较大","动检","proxy","反应","p","一些","数据","seoaliases","域","有序","简化","重命名","type","raise","10%","chapter","char","某个","`","bopf","建议","必须","&&","人眼","mean","别","能","下文","从中","之情","涵盖","填充","第二次","修复","易见","hit","windows","常见","内存不足","体现","力气","保守","另辟蹊径","desc","大小写","一","从头","vseoevent","vseocdefer","按","检测","importing","混淆","办法","命名","再生","langu","7.52","won","变式","主控","第一行","却","开发工具","bool","你","括号","vseoimplem","on","很快","透明","-----------------","包含","spare","calculate","—","指南针","南针","编辑","问问","19","x","计算机科学","将会","三者","transporting","强烈","真假","随心","慢","转弯","两者","花","缺陷","词典","稳定性","再次","花费","开发者","variable","唐突","单步","遵循","设计师","无聊","较","数量","注意","一切正常","50","content","变","application","四步","programming","超类","禁止","数位","ad","deutsch","措手不及","输入","filters","二者","首次","xml","friendship","utils","abap","繁琐","本节","初识","meaningful","一级","细节","改为"],"title":"ABAP guide zh","title_tokens":["zh","abap"," ","guide"]},{"location":"archives/ABAP-guide-zh/#abap","text":"中文 · English · Français · Deutsch 本指南针对 ABAP 改编自 Robert C. Martin 所著的 Clean Code 。 速查表 为打印优化版本。","text_tokens":["martin","改编自","查表","改编","打印","所著","版本","中文","的","对","ais","本","速查表","。","速查","·","robert","clean","code","为","english","指南针","deutsch","南针","c","指南","abap"," ","ç","优化",".","fran"],"title":"[转载] ABAP 整洁之道","title_tokens":["转载","]","abap","之道","整洁"," ","["]},{"location":"archives/ABAP-guide-zh/#_1","text":"做法 整洁代码入门之法 旧代码重构之法 自动检查之法 与其他指南互通之法 表示异议之法 名称 使用描述性名称 首选解决方案域和问题域术语 使用复数形式 使用能读出来的名称 避免缩写 在各处使用相同缩写 用名词表示类而用动词表示方法 避免干扰词，如 \"data\"、\"info\"、\"object\" 每个概念选取一个词 仅在本意如此时使用模式名称 避免编码，特别是匈牙利表示法和前缀 语言 顾及传统 顾及性能 面向对象编程优于过程式编程 函数式语言结构优于过程式语言结构 避免过时语言元素 明智地使用设计模式 常量 使用常量而非幻数 枚举类优于常量接口 如果不使用枚举类，则对常量进行分组 变量 内联声明优于最前声明 勿在可选分支中内联声明 勿用链式最前声明 REF TO 优于 FIELD-SYMBOL 表 使用恰当的表类型 避免 DEFAULT KEY INSERT INTO TABLE 优于 APPEND TO LINE_EXISTS 优于 READ TABLE 或 LOOP AT READ TABLE 优于 LOOP AT LOOP AT WHERE 优于嵌套式 IF 避免不必要的表读取 字符串 使用 ` 定义文字 使用 | 汇集文本 布尔值 明智地使用布尔值 用 ABAP_BOOL 表示布尔值 使用 ABAP_TRUE 和 ABAP_FALSE 进行比较 使用 XSDBOOL 设置布尔变量 条件 尽量使条件为正 IS NOT 优于 NOT IS 考虑分解复杂条件 考虑提炼复杂条件 If 语句 无空的 IF 分支 对于多个备选条件，CASE 优于 ELSE IF 保持低嵌套深度 正则表达式 较简单的方法优于正则表达式 基本检查优于正则表达式 考虑汇集复杂的正则表达式 类 类：面向对象 对象优于静态类 组合优于继承 勿在同一个类中混用有态和无态 作用域 缺省情况下为全局，仅在适当位置为局部 若非为继承而设计则为 FINAL 缺省情况下为 PRIVATE，仅在需要时为 PROTECTED 考虑使用不可变对象而非 getter 保守地使用 READ-ONLY 构造函数 NEW 优于 CREATE OBJECT 如果全局类为 CREATE PRIVATE，则保留 CONSTRUCTOR 为公共 多个静态创建方法优于可选参数 用描述性名称表示多个创建方法 仅在多实例无意义的情况下变成单例 方法 调用 函数式调用优于过程式调用 省略 RECEIVING 省略可选关键字 EXPORTING 在单参数调用中省略参数名称 在调用实例方法时省略自我引用 me 方法：面向对象 实例优于静态方法 公共实例方法应为接口的一部分 参数数目 力图减少 IMPORTING 参数，最好少于三个 拆分方法而非添加 OPTIONAL 参数 保守地使用 PREFERRED PARAMETER RETURN、EXPORT 或 CHANGE 恰有一个参数 参数类型 RETURNING 优于 EXPORTING RETURNING 大表通常没有问题 单独使用 RETURNING 或 EXPORTING 或 CHANGING，而不要组合使用 在合适时保守地使用 CHANGING 拆分方法而非使用布尔输入参数 参数名称 考虑调用 RETURNING 参数 RESULT 参数初始化 清除或覆盖 EXPORTING 引用参数 如果输入和输出可能相同则要当心 勿清除 VALUE 参数 方法体 做且仅做一件事，把它做好 关注愉快路径或错误处理，但非两者兼顾 将抽象降一级 保持方法精简 控制流 快速失败 CHECK 对 RETURN 避免在其他位置使用 CHECK 错误处理 消息 使消息易于查找 返回代码 异常优于返回代码 别让故障溜走 异常 异常针对的是错误，而不是正常情况 使用基于类的异常 抛出 使用各自的超类 抛出一种类型的异常 使用子类以便调用者能够区分错误情况 针对可应对的异常抛出 CX_STATIC_CHECK 针对通常不可恢复的情况抛出 CX_NO_CHECK 针对可避免的异常考虑 CX_DYNAMIC_CHECK 针对完全不可恢复的情况进行转储 RAISE EXCEPTION NEW 优于 RAISE EXCEPTION TYPE 捕获 包裹外来异常而非任其侵入代码 注释 用代码表达自己而不是靠注释 注释绝非坏名称的借口 使用方法而非注释来对代码分段 写注释是要解释为什么而非是什么 设计应放到设计文档里而不是代码里 用 \" 而非 * 加注释 将注释放在与其相关的语句前面 删除代码而非将其注释掉 使用 FIXME、TODO 和 XXX 并添加自己的标识 勿添加方法签名和注释结尾 勿复制消息文本作为注释 ABAP 文档仅适用于公共 API 编译指示优于伪注释 格式化 保持一致 为阅读而不是书写进行优化 激活前使用格式优化器 使用格式优化器团队设置 每行只有一条语句 恪守合理的行长度 紧缩代码 添加单一空行来分隔内容，而不要添加多行 勿因分隔空行产生困扰 对齐同一对象而非不同对象的赋值 在行尾关闭括号 保持单参数调用于一行 保持参数在调用后面 如果换行，则在调用下缩进参数 将多个参数换行 对齐参数 如果调用行过长则将其换行 缩进并卡到制表位 如同方法调用那样缩进内联声明 勿对齐类型子句 测试 原则 编写可测试的代码 让他人能够进行模拟 可读性规则 勿制作副本或写测试报告 测试公共项而非私有内部项 勿困扰于覆盖范围 测试类 按用途调用局部测试类 将测试放在局部类 将帮助方法放在帮助类 如何执行测试类 被测代码 赋予被测代码有意义的名称，或使用缺省名称 CUT 测试接口而非类 将被测代码的调用提取到自身的方法 注入 使用依赖倒置注入测试替身 考虑使用 ABAP 测试替身工具 利用测试工具 使用测试缝隙作为临时解决办法 使用 LOCAL FRIENDS 访问依赖倒置的构造函数 勿滥用 LOCAL FRIENDS 侵入被测代码 勿更改生产代码来使代码可测试 勿子类化来模拟方法 勿模拟不需要的东西 勿构建测试框架 测试方法 测试方法名称：反映出设想和预期的情形 使用 given-when-then \"When\" 恰为一个调用 除非真正需要否则勿添加 TEARDOWN 测试数据 使其易于辨明含义 使其易于辨明差异 使用常量描述测试数据的用途和重要性 断言 少而精的断言 使用恰当的断言类型 断言内容而非数量 断言质量而非内容 使用 FAIL 检查是否出现预期异常 转发意外异常而非捕获就失败 编写自定义断言以缩短代码和避免重复","text_tokens":["重复","info","项而非","非","不是","则","into","到","倒置","减少","格式化","辨明","编译","注释","幻数","访问","他人","入门","布尔值","必要","文本","用者","结尾","初始","清除","考虑","append","一致","错误处理","指南","关键字","测","捕获","优于","标识","line","重要","整洁","when"," ","change","动词","省略","分段","fixme","接口","断言","控制","面向","自我","合理","create","调","设计模式","枚举","解释","器","data","格式","位","本意","全局","降","含义","合适","要","出来","困扰","构建","恰有","法","优化","编写","类型","自动","解决办法","local","返回","覆盖","其","恰当","无","调用者","cut","only","可选","放到","三个","掉","不必要","getter","api","check","方案","中","编码","写","副本","new","让","读取","表达","阅读","测试报告","面向对象编程","抽象","比较","constructor","作用域","分组","或","changing","指示","力图","加","对","只有","深度","术语","而非","勿","字符串","at","自定义","链式","被","*","设想","given","适当","布尔","export","备选","解决","如何","非类","自身","异常","明智地","恪守","可读","情况","愉快","exists","做","最","模式","table","提炼","保持","field","项","赋予","语句","类中","故障","时","若非","出","描述性","设置","ref","表示","表","做法","复制","类而用","继承","不可","实例","引用","匈牙利","当心","坏","原则","模拟","final","团队","前面","体","default","测试方法","互通","is","帮助","自定","子句","可","teardown","时为","_","少而精","避免","换行","因","使","不必","static","能够","激活","缩写","保留","result","returning","执行","if","元素","的","旧","工具","无空","exception","规则","借口","产生","更改","质量","和","以便","低","事","仅","一条","控制流","路径","非任","拆分","输出","选取","变成","删除","me","进行","与其","绝非","一种","多","用途","复数","编程","、","基本","并","混用","传统","简单","名词","框架","类","选","常量","完全","外来","关键","不要","重要性","少于","一个","公共","预期","无态","什么","名称","除非","如","case","出现","测试数据","处理","报告","提取","私有","前缀","区分","缩短","注入","分解","它","缺省","xsdbool","loop","有态","分隔","并卡到","结构","适用","单独","异议","，","insert","行尾","相同","静态","内部","表达式","勿子","差异","一件","类化","易于","多行","恰为","溜走","位置","\"","缩进","滥用","快速","而","包裹","来","对齐","如果","每个","where","过程","如同","optional","单一","关注","明智","语言","范围","其他","做且","条件","签名","fail","then","面向对象","否则","构造","多个","重构","复杂","前","读出来","文字","为什么","构造函数","问题","在","|","精简","依赖","同一","就","恢复","那样","词","可能","覆盖范围","正常","组合","特别","friends","to","-","no","用于","对象","应","exporting","汇集","正","变量","大表","针对","消息","自己","地","true","反映","设计","数目","将","一部分","是否","被测","错误","赋值","局部","需要","文档","测试","与","声明","转储","一部","描述","内容","preferred","参数","可读性","不","试工","关闭","object","转发","读出","嵌套","利用","类为","单例","如此","定义","尽量","正则表达式","之","形式","函数","书写","紧缩","式","以","添加","一行","静态方法","查找","情形","最好","为","失败","各自","表示法","read","作用","调用","private","行","todo","下","是","单","概念","意义","制作","兼顾","部分","dynamic","数据","域","过时","type","raise","干扰","相关","每行","`","测试工具","别","能","通常","抛出","生产","xxx","但","作为","东西","使用","保持一致","不同","方法","没有","解决方案","保守","symbol","按","importing","初始化","办法","顾及","protected","放在","做好","正则","内联","应为","长度","false","过长","bool","：","同一个","括号","基于","性能","代码","value","替身","检查","里","缝隙","意外","key","制表","创建","子类","else","两者","receiving","parameter","首选","后面","用","return","侵入","分支","较","数量","应对","把","变","真正","超类","对于","达式","字符","各处","输入","于","伪","cx","空行","有","abap","靠","not","一级","临时"],"title":"目录","title_tokens":["目录"]},{"location":"archives/ABAP-guide-zh/#_2","text":"ABAP 整洁之道 > 目录 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","节"],"title":"做法","title_tokens":["做法"]},{"location":"archives/ABAP-guide-zh/#_3","text":"ABAP 整洁之道 > 目录 > 做法 > 本节 如果您初识整洁代码，应首先阅读 Robert C. Martin 所著的 Clean Code 。借助 Clean Code Developer initiative ，您可以从头学起，循序渐进地对该主题有一般性的了解。 建议从容易理解且广为接受的方面入手，如 布尔值 、 条件 和 If 语句 。 您可能将会从 方法 一节获得最大受益，特别是 做且仅做一件事，把它做好 和 方法精简 ，因为这些会极大地改善代码的总体结构。 对于有行事经验但初识整洁代码的团队，本文的某些主题可能会引起团队内激烈的讨论；这些主题绝对“有益健康”，但人们可能刚开始不太适应。 后面会再继续探讨这些颇具争议的主题，特别是 注释 、 名称 和 格式化 ，它们可能会引起孜孜不倦的争论，只有认识到整洁代码积极效应的团队才知道它的好处。","text_tokens":["极大","该","到",">","目录","developer","一般","广为","它们","格式化","继续","注释","您","做","本","一节","布尔值","；","接受","不太","容易","它","有益","孜孜","语句","理解","认识","人们","主题","c","initiative","结构","，","整洁"," ","做法",".","一件","是","某些","团队","激烈","借助","争议","方面","再","。","如果","建议","颇具","受益","这些","孜孜不倦","格式","code","入手","效应","争论","获得","绝对","做且","但","“","了解","条件","从","方法","首先","节","从头","if","所著","一般性","可以","精简","改善","的","内","做好","可能","会","好处","行事","渐进","robert","探讨","和","特别","clean","知道","事","且","应","代码","”","积极","刚","仅","循序渐进","阅读","本文","将会","讨论","地","经验","martin","才","后面","健康","起","总体","因为","引起","对","、","把","只有","开始","有益健康","最大","循序","不倦","学","对于","之道","适应","布尔","有","abap","初识","名称","如"],"title":"整洁代码入门之法","title_tokens":["整洁","入门","法","代码","之"]},{"location":"archives/ABAP-guide-zh/#_4","text":"ABAP 整洁之道 > 目录 > 做法 > 本节 如果正在遗留项目上工作，其中含有大量无法或不想更改的代码，因为它们可以无冲突地运行在新代码环境，这种情况下， 更改 布尔值 、 条件 、 If 语句 和 方法 方面的主题最有价值。 对于遗留项目而言， 名称 主题改进太费劲了，它可能会在新旧代码之间产生差异，在某种程度上，其中的诸如 避免编码，特别是匈牙利表示法和前缀 等节忽略为宜。 我们发现采用四步计划进行重构，结果比较好： 先让团队上道。沟通并解释新的风格，使项目团队的每个人对此达成一致意见。不用一下子就推行所有指导原则，只需从小部分没有争议的子集入手，然后由此拓展。 按照_童子军规则_开展每日的例行工作： 每次修改代码都比原先更整洁 。不要因此而困扰，好几个小时沉湎于“清理整个营地”，只需花几分钟，思考如何持续不断地改进。 构筑_整洁小岛_：时不时挑选小的对象或组件，试着进行全方位的清洁。这些小岛印证了现在所做事情的好处，为进一步重构形成了经得起考验的坚强堡垒。 谈经论道。不管是设立老派的 范根代码评审 ，还是举办宣讲会，抑或是在自己喜爱的聊天工具中组建讨论板：需要讲出自己的经验和体会，以使团队逐渐达成共识。","text_tokens":["童子","思考","宣讲","进一步","不管","环境",">","构筑","目录","情况","每次","比","不时","考验","它们","一下","小","前缀","致意","价值","几分钟","时不时","以","而言","计划","做","本","设立","布尔值","修改","它","论道","语句","范根","谈经","为","一致","主题","人","童子军","印证","出","组件","某种程度","冲突","表示法","持续","，","一致意见","项目","喜爱","等节","整洁","无法"," ","表示","诸如","做法","聊天工具","差异","下","宣讲会","不想","是","匈牙利","板","原则","遗留","团队","部分","新旧","经得起","好几","从小","太","争议","坚强","评审","方面","达成","好","整个","而","。","如果","每个","解释","某种","这种","好几个","子集","这些","老派","聊天","入手","不断","所","按照","_","道","“","其中","条件","避免","结果","困扰","使","事情","沟通","需","更","方法","没有","天工","举办","节","含有","上","大量","重构","意见","为宜","例行","小岛","抑或","体会","因此","if","还是","发现","可以","在","由此","开展","沉湎","就","的","工具","无","风格","下子","讲","可能","会","好处","规则","了","产生","先","更改","：","全方位","和","特别","忽略","对此","对象","方位","指导","一步","代码","编码","推行","例行工作","”","现在","中","几个","每日","让","都","改进","自己","讨论","比较","地","经验","或","挑选","程度","进行","之间","因为","采用","我们","、","最有","试着","需要","并","分钟","四步","所有","小时","清理","逐渐","组建","对于","一下子","堡垒","运行","之道","不要","几分","正在","原先","费劲","于","营地","清洁","布尔","只","如何","拓展","abap","共识","需花","然后","工作","不用","名称","形成","新"],"title":"旧代码重构之法","title_tokens":["重构","旧","法","代码","之"]},{"location":"archives/ABAP-guide-zh/#_5","text":"ABAP 整洁之道 > 目录 > 做法 > 本节 没有一整套全面的静态代码检查方法可以自动检测本文所述的我们这里所描述的反面模式。 ABAP 测试主控室、代码分析器、扩展检查和检查管理器提供了一些检查方法，这些方法可能有助于发现某些问题。 abapOpenChecks 是一个开源的代码分析器检查集，也涵盖了所述的某些反面模式。 abaplint 是 一个ABAP 解析器的开源的实现重写。它不需要SAP系统就可以运行，旨在用 abapGit 使代码串行化。它提供了多个集成（GitHub Actions、Jenkins、文本编辑器...），涵盖了某些反面模式，也可用来检查格式化和代码规范。","text_tokens":["理器",">","目录","格式化","这里","也","本","有助","解析","模式","文本","它","abapgit","abaplint","，","整洁"," ","静态","做法","所述","动检","开源","是","某些","一些","来","文本编辑","。","系统","串行化","器","sap","这些","格式","解析器","重写","所","可用","涵盖","jenkins","分析器","使","actions","方法","没有","github","有助于","节","多个","自动","扩展","实现","发现","检测","可以","管理","问题","abapopenchecks","就","的","可能","主控","全面","了","助于","和","串行","整套","集成","编辑","代码","检查","提供","本文","自动检测","反面","检查和","用","一整","一整套","...","我们","、","旨在","集","需要","（","测试","主控室","描述","运行","之道","）","一个","规范","abap","管理器","分析","不"],"title":"自动检查之法","title_tokens":["检查","法","之","自动"]},{"location":"archives/ABAP-guide-zh/#_6","text":"ABAP 整洁之道 > 目录 > 做法 > 本节 本指南秉承整洁代码的_精神_，这意味着我们对 ABAP 编程语言进行了一些调整，例如， 针对可管理的异常抛出 CX_STATIC_CHECK 。 某些论据来自 ABAP Programming Guidelines 与本指南大多是兼容的；背离之处予以指明，务求符合整洁代码的精神。 本指南也遵循 DSAG's Recommendations for ABAP Development ，不过我们在大多数细节上更加精确。","text_tokens":["精神","是","不过","异常","某些","背离",">","进行","目录","一些","遵循","管理","在","dsag","之","我们","编程语言","论据","的","编程","对","兼容","也","for","这","本","例如","。","了","；","指明","精确","programming","与","处","可","s","更加","之道","check","大多数","语言","抛出","'","来自","细节","代码","指南","_","大多","recommendations","，","development","cx","符合","abap","guidelines","整洁"," ","针对","多数","调整","做法","秉承","意味着","static","意味","予以","务求","节","上"],"title":"与其他指南互通之法","title_tokens":["互通","法","指南","与","其他","之"]},{"location":"archives/ABAP-guide-zh/#_7","text":"ABAP 整洁之道 > 目录 > 做法 > 本节 编写本风格指南的目标读者已通晓整洁代码或目前正致力于此，且对如何将整洁代码_具体应用于 ABAP_ 极为关注。 因此，请注意，我们没有以原书同样的篇幅和深度介绍所有概念及相关资源：那些内容仍值得一读，特别是，如果您只是因为我们没解释太详细而不同意本文的观点。可使用各节中的链接延伸阅读我们给出指导的背景。 您尽可以讨论文本讲述的任何内容并表示异议。整洁代码的支柱之一是_团队规则_。在您放弃异议之前，一定要给它们一个公平的机会。 CONTRIBUTING 就如何变通本指南或在小的细节上另辟蹊径，给出了建议。","text_tokens":["具体",">","目录","值得","它们","小","延伸","以","您","本","文本","给出","之一","讲述","蹊径","指南","观点","异议","，","介绍","及","整洁"," ","表示","公平","做法","详细","各节","是","已","概念","同意","团队","一读","给","太","目标","只是","相关","而","。","极为","如果","解释","建议","致力","可","放弃","通晓","关注","另辟","_","任何","要","contributing","使用","目前","没有","编写","节","上","资源","另辟蹊径","请","因此","可以","在","变通","就","的","风格","链接","规则","篇幅","了","：","和","仍","特别","机会","且","指导","代码","中","正","阅读","支柱","本文","讨论","之前","或","将","此","没","因为","致力于","应用","一定","我们","对","注意","尽","原书","并","所有","同样","读者","深度","那些","内容","之道","一个","于","如何","abap","背景","不","细节"],"title":"表示异议之法","title_tokens":["异议","之","法","表示"]},{"location":"archives/ABAP-guide-zh/#_8","text":"ABAP 整洁之道 > 目录 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","节"],"title":"名称","title_tokens":["名称"]},{"location":"archives/ABAP-guide-zh/#_9","text":"ABAP 整洁之道 > 目录 > 名称 > 本节 使用可以传达事物内容和含义的名称。 CONSTANTS max_wait_time_in_seconds TYPE i ... DATA customizing_entries TYPE STANDARD TABLE ... METHODS read_user_preferences ... CLASS / clean / user_preference_reader ... 不要只把注意力放在数据类型和技术编码上。它们对理解代码几乎没什么贡献。 \" anti-pattern CONSTANTS sysubrc_04 TYPE sysubrc ... DATA iso3166tab TYPE STANDARD TABLE ... METHODS read_t005 ... CLASS / dirty / t005_reader ... 不要试图通过注释来弥补坏的名称。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Use Intention-Revealing Names 。","text_tokens":["参阅","revealing",">","目录","standard","它们","注释","methods","本","preferences","table","数据类型","理解","事物","c","read","wait","传达","t005","整洁","贡献"," ",".","坏","in","数据","\"","技术","class","type","chapter","来","。","time","user","data","code","pattern","含义","_","使用","/","更","通过","anti","节","上","类型","constants","没什么","max","所著","可以","use","放在","的","i","几乎","robert","preference","entries","和","-","clean","customizing","代码","编码","中","注意力","reader","04","iso3166tab","试图",":","martin","...","多","注意","对","把","names","intention","内容","之道","不要","dirty","seconds","弥补","只","abap","什么","2","sysubrc","meaningful","名称","信息"],"title":"使用描述性名称","title_tokens":["使用","名称","描述性","描述"]},{"location":"archives/ABAP-guide-zh/#_10","text":"ABAP 整洁之道 > 目录 > 名称 > 本节 在解决方案域（即计算机科学术语，如 \"queue\" 或 \"tree\"）和问题域（即业务领域术语，如 \"account\" 或 \"ledger\"）中搜索好的名称。 按问题域命名时，业务层的命名最好听。对于采用域驱动设计而设计的组件（如 API 和业务对象）尤为如此。 按解决方案域命名时，提供大多数技术功能（如工厂类和抽象算法）层的命名最好听。 在任何情况下都不要试图加进自己的语言。需能够在开发人员、产品负责人、合作伙伴和客户之间交换信息，因此要选择所有人不用查定制词典就能理解的名称。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Use Solution Domain Names and [...]: > Use Problem Domain Names 。","text_tokens":["尤为","参阅","定制",">","目录","如此","情况","开发","交换","本","产品","责人","发人","最好","算法","account","理解","[","时","c","组件","，","合作伙伴","整洁"," ",".","domain","下","即","开发人员","驱动","域","\"","技术","好","层","chapter","而","。","solution","tree","搜索","能","code","problem","语言","负责","任何","要","需","更","能够","多数","节","解决方案","功能","因此","按","所著","问题","在","use","命名","就","的","合作","robert","客户","和","]","api","clean","and","方案","对象","选择","工厂","中","负责人","所有人","都","提供","计算机科学","抽象","自己","查","计算","人员","试图","词典",":","计算机","martin","设计","听","或","之间","加进","...","采用","多","、","ledger","（","所有","科学","伙伴","类","术语","names","领域","对于","）","不要","之道","queue","大多数","业务","大多","算机","解决","abap","有人","2","不用","meaningful","名称","信息","如"],"title":"首选解决方案域和问题域术语","title_tokens":["解决方案","术语","首选","和","解决","方案","问题","域"]},{"location":"archives/ABAP-guide-zh/#_11","text":"ABAP 整洁之道 > 目录 > 名称 > 本节 在 SAP 有一种传统习惯，那就是用单数形式命名事物的表，例如， country 表示“国家表”。外界普遍倾向于使用复数形式表示事物的列表。因此，建议最好改用 countries 。 这条建议主要针对诸如变量和属性等事物。> 对于开发对象，可能存在同样> 也有意义的模式，例如，有一种广泛使用的规范，> 以单数形式命名数据库表（“透明表”）。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Use Intention-Revealing Names 。","text_tokens":["参阅","revealing","就是",">","目录","形式","开发","以","也","数据库","这","本","模式","最好","事物","c","属性","，","整洁"," ","表示","表","诸如","等",".","主要","意义","国家","数据","chapter","例如","。","建议","sap","code","“","使用","那","更","节","条","因此","所著","在","use","命名","改用","的","可能","robert","和","-","clean","透明","对象","”","中","变量","据库","存在","针对","country",":","martin","列表","用","一种","多","广泛","复数","外界","（","传统","同样","names","对于","intention","）","之道","规范","countries","单数","于","习惯","有","abap","普遍","2","meaningful","名称","信息","倾向"],"title":"使用复数形式","title_tokens":["复数","使用","形式"]},{"location":"archives/ABAP-guide-zh/#_12","text":"ABAP 整洁之道 > 目录 > 名称 > 本节 关于对象会有很多思考和讨论，因此要使用能读出来的名称，例如， detection_object_types 优于诸如 dobjt 这种晦涩的名称。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Use Pronounceable Names 。","text_tokens":["martin","思考","参阅","读出","因此","读出来",">","目录","types","很多","所著","pronounceable","use","多","关于","的","chapter","会","本","例如","dobjt","。","这种","robert",":","names","和","能","之道","clean","code","对象","detection","c","中","_","，","要","出来","晦涩","优于","有","abap","使用","整洁"," ","诸如","更","2","讨论",".","名称","meaningful","信息","节","object"],"title":"使用能读出来的名称","title_tokens":["出来","的","读出","能","使用","读出来","名称"]},{"location":"archives/ABAP-guide-zh/#_13","text":"ABAP 整洁之道 > 目录 > 名称 > 本节 如果有足够空间，那就完整地写出名称。仅当超过长度限制时才使用缩写。 如果不得不缩写，首先考虑_不重要_的词。 采用缩写，可能第一眼看起来很高效，但很快就会变得含糊不清。例如， cust 中的 \"cust\" 究竟是指 \"customizing\"、\"customer\" 还是 \"custom\"？三者在 SAP 应用程序中都很常见。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Make Meaningful Distinctions 。","text_tokens":["参阅",">","目录","一眼","高效","第一","make","本","考虑","究竟","？","c","空间","程序","，","重要","整洁","限制"," ","足够",".","看起来","写出","是","仅当","\"","cust","chapter","完整","例如","。","如果","第一眼","sap","code","指","_","但","时才","使用","变得","那","更","不得不","首先","常见","超过","缩写","节","起来","还是","所著","在","就","的","含糊不清","词","可能","长度","会","robert","不得","很快","很","clean","customizing","中","都","三者","看起","应用程序","地",":","martin","distinctions","custom","应用","采用","多","、","含糊","customer","names","之道","有","abap","不","2","meaningful","名称","信息"],"title":"避免缩写","title_tokens":["避免","缩写"]},{"location":"archives/ABAP-guide-zh/#_14","text":"ABAP 整洁之道 > 目录 > 名称 > 本节 人们会搜索关键字来查找相关代码。为此，应对相同事物使用相同缩写。例如，始终将 \"detection object type\" 缩写为 \"dobjt\"，而不是混合使用 \"dot\"、\"dotype\"、\"detobjtype\" 等等。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Use Searchable Names 。","text_tokens":["martin","参阅","不是","将",">","目录","所著","dotype","use","\"","多","为此","的","应对","type","、","chapter","detobjtype","会","相关","本","例如","来","dobjt","。","而","dot","混合","robert",":","查找","names","搜索","关键","之道","clean","code","等等","事物","为","人们","始终","detection","c","代码","中","关键字","，","abap","使用","相同","整洁"," ","更","2","meaningful",".","名称","searchable","信息","缩写","节","object"],"title":"在各处使用相同缩写","title_tokens":["使用","相同","各处","在","缩写"]},{"location":"archives/ABAP-guide-zh/#_15","text":"ABAP 整洁之道 > 目录 > 名称 > 本节 使用名词或名词词组命名类、接口和对象： CLASS / clean / account CLASS / clean / user_preferences INTERFACE / clean / customizing_reader 使用动词或动词词组命名方法： METHODS withdraw METHODS add_message METHODS read_entries 用诸如 is_ 和 has_ 之类的动词作为布尔方法的开头，读起来会很流畅： IF is_empty ( table ). 建议也像方法一样给函数命名： FUNCTION / clean / read_alerts","text_tokens":["之类","起来","或","用",">","if","目录","一样","message","alerts","给",")","命名","函数","(","withdraw","的","function","class","、","词组","也","is","methods","会","本","add","preferences","建议","table","名词","：","类","entries","像","user","和","布尔方法","很","之道","clean","empty","account","interface","对象","customizing","读","_","作为","开头","read","has","布尔","，","reader","abap","使用","整洁"," ","流畅","/","诸如","动词","方法",".","名称","接口","节"],"title":"用名词表示类而用动词表示方法","title_tokens":["用","表示","动词","方法","类而用","名词"]},{"location":"archives/ABAP-guide-zh/#datainfoobject","text":"ABAP 整洁之道 > 目录 > 名称 > 本节 省略干扰词 account \" instead of account_data alert \" instead of alert_object 或将其替换为某些确实更有价值的特定字眼 user_preferences \" instead of user_info response_time_in_seconds \" instead of response_time_variable 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Make Meaningful Distinctions","text_tokens":["martin","distinctions","参阅","info","或","将","字眼","variable","某些",">","in","目录","所著","response","确实","\"","instead","多","其","的","价值","特定","make","词","chapter","干扰","本","替换","preferences","time","robert",":","names","user","data","之道","clean","code","account","为","c","seconds","中","_","of","有","alert","abap","整洁"," ","更","2","省略","meaningful",".","名称","信息","节","object"],"title":"避免干扰词，如 \"data\"、\"info\"、\"object\"","title_tokens":["，","避免","info","object","data","、","词","干扰"," ","\"","如"]},{"location":"archives/ABAP-guide-zh/#_16","text":"ABAP 整洁之道 > 目录 > 名称 > 本节 METHODS read_this . METHODS read_that . METHODS read_those . 为一个概念选择一个术语并坚持使用；不要混合使用其他同义词。同义词会使读者浪费时间查找本不存在的差异。 \" anti-pattern METHODS read_this . METHODS retrieve_that . METHODS query_those . 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Pick One Word per Concept","text_tokens":["martin","时间","费时间","参阅","概念","同义","费时",">","目录","per","信息","所著","one","\"","多","pick","的","those","chapter","methods","会","本","this","并","。","；","混合","读者","robert",":","查找","names","术语","浪费","不要","之道","浪费时间","-","clean","code","word","为","一个","pattern","选择","c","中","_","其他","同义词","read","坚持","存在","abap","使用","使","整洁","retrieve"," ","anti","concept","不","更","2","meaningful",".","名称","query","差异","that","节"],"title":"每个概念选取一个词","title_tokens":["概念","词","一个","每个","选取"]},{"location":"archives/ABAP-guide-zh/#_17","text":"ABAP 整洁之道 > 目录 > 名称 > 本节 不要对类和接口使用软件设计模式的名称，除非本意真的如此。例如，不要将类称为 file_factory ，除非它的确实施了工厂设计模式。最常见的模式包括： singleton 、 factory 、 facade 、 composite 、 decorator 、 iterator 、 observer 和 strategy 。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 2: Meaningful Names: Avoid Disinformation","text_tokens":["martin","设计","参阅","disinformation","file","的确",">","称为","目录","如此","信息","所著","observer","decorator","多","的","iterator","、","avoid","strategy","chapter","facade","实施","本","对类","例如","。","设计模式","了","最","composite","模式","robert","软件设计","：","将类","它",":","包括","names","和","不要","之道","factory","clean","code","软件","本意","c","工厂","常见","_","中","，","真的","abap","使用","整洁"," ","更","2","meaningful",".","名称","singleton","除非","接口","节"],"title":"仅在本意如此时使用模式名称","title_tokens":["仅","使用","如此","本意","时","名称","在","模式"]},{"location":"archives/ABAP-guide-zh/#_18","text":"ABAP 整洁之道 > 目录 > 名称 > 本节 鼓励丢掉_所有_编码前缀。 METHOD add_two_numbers . result = a + b . ENDMETHOD . 而不是毫无必要地加长 METHOD add_two_numbers . rv_result = iv_a + iv_b . ENDMETHOD . Avoid Encodings > 深入介绍了这样做的理由。","text_tokens":["result","不是","毫无",">","目录","深入","理由","前缀","的","鼓励","avoid","这样","做","加长","而","本","method","add","所有","。","b","了","必要","two","endmethod","之道","rv","丢掉","=","编码","_","encodings","介绍","a","abap","整洁","numbers"," ",".","名称","+","地","iv","节"],"title":"避免编码，特别是匈牙利表示法和前缀","title_tokens":["，","避免","是","匈牙利","前缀","特别","和","表示","编码","表示法"]},{"location":"archives/ABAP-guide-zh/#_19","text":"ABAP 整洁之道 > 目录 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","节"],"title":"语言","title_tokens":["语言"]},{"location":"archives/ABAP-guide-zh/#_20","text":"ABAP 整洁之道 > 目录 > 语言 > 本节 如果是针对较早的 ABAP 版本进行编码，则应谨慎采纳本指南中的建议：下文的许多建议利用了相对较新的语法和结构，这些在较早的 ABAP 版本中可能不受支持。在必须支持的最早版本上验证欲遵循的指导原则。不要简单地整个抛弃整洁代码 - 绝大多数规则（例如，命名、注释）在_任何_ ABAP 版本中都行得通。","text_tokens":["是","支持","则","利用","原则","绝大",">","进行","目录","采纳","遵循","版本","早","在","较","命名","许多","的","注释","、","可能","整个","本","欲","例如","。","规则","了","如果","（","建议","必须","最早","简单","行得通","：","语法","绝大多数","这些","和","）","不要","之道","-","下文","受","大多数","语言","应","结构","指导","指南","编码","谨慎","中","相对","代码","大多","，","_","任何","抛弃","abap","都","验证","整洁"," ","针对","不","多数","地","新","节","上"],"title":"顾及传统","title_tokens":["顾及","传统"]},{"location":"archives/ABAP-guide-zh/#_21","text":"ABAP 整洁之道 > 目录 > 语言 > 本节 如果是为高性能组件编码，则应谨慎采纳本指南中的建议：整洁代码在某些方面可能会降低速度（更多方法调用）或消耗更多内存（更多对象）。ABAP 的某些特点可能会加剧这种情况，例如，在调用方法时，它会比较数据类型，这样一来，将单个大方法拆分成多个子方法，可能会降低代码速度。 然而，强烈建议不要因为模糊的恐惧就过早地悲观失望。绝大多数规则（例如，命名、注释）根本不会产生任何负面影响。尽力采用整洁的面向对象的方式做事情。如果有什么过慢，就做一个性能测量。只有这样做之后，才应根据事实作出决策，放弃所选规则。 一些更深入的思考，部分取自 Martin Fowler 所著的 Refactoring 中的第 2 章： 在典型的应用程序中，大部分运行时间都花在很小比例的代码中。小到 10% 的代码会占到 90% 的运行时间，特别是在 ABAP 中，很大比例的运行时间可能都是数据库时间。 因此，花大力气试图使_所有_代码都一直保持超高效率，并非最好的资源安排方式。不主张忽视性能，但在初始开发阶段，应该更关注代码的整洁性和条理分明的程度，然后使用剖析器找出关键区域进行优化。 事实上，我们有理由证明，这种方式对性能的正面影响更大，因为优化努力更有针对性，更容易找出性能瓶颈，而且条理分明的代码更容易进行重构和调优。","text_tokens":["思考","过早","则","更大","到",">","内存","目录","花大","情况","作出","章","一来","开发","注释","这样","做","数据库","本","典型","正面","保持","开发阶段","这样一来","模糊","容易","数据类型","初始","最好","负面影响","子","为","时","组件","指南","程序","负面","，","针对性","调用","整洁","尽力"," ","失望","加剧","是","区域","某些","速度","一些","部分","面向","数据","深入","根本","fowler","方面","事实","10%","第","例如","。","它会","如果","建议","这种","放弃","器","性","大","方式","关注","语言","所","_","但","事实上","任何","应该","高性能","比例","并非","使","事情","使用","占","面向对象","更","方法","优化","多数","节","力气","多个","资源","类型","重构","证明","强烈建议","绝大","因此","瓶颈","而且","采纳","所著","大部","效率","努力","在","不会","命名","大部分","就","的","过","可能","会","refactoring","规则","产生","分成","90%","：","绝大多数","性能","之后","特别","和","单个","条理分明","降低","对象","消耗","恐惧","应","取自","很大","中","编码","代码","忽视","据库","悲观失望","一直","都","针对","强烈","比较","慢","应用程序","花","悲观","试图","安排","小到","条理","martin","时间","或","才","将","决策","根据","程度","进行","因为","过早地","理由","应用","拆","多","高性","采用","我们","对","调优","、","只有","主张","所有","（","选","很小","特点","）","然而","之道","不要","运行","关键","大多数","一个","超高","测量","找出","谨慎","大多","阶段","影响","分明","剖析","有","abap","什么","然后","2","不"],"title":"顾及性能","title_tokens":["顾及","性能"]},{"location":"archives/ABAP-guide-zh/#_22","text":"ABAP 整洁之道 > 目录 > 语言 > 本节 面向对象的程序（类、接口）比过程式代码（函数、程序）分段更清晰，并且可以更加容易地进行重构和测试。尽管在某些情况下必须提供过程式对象（对 RFC 用函数、对事务用程序），但这些对象除了调用提供实际功能的相应类之外，不应该再干别的： FUNCTION check_business_partner [...]. DATA ( validator ) = NEW / clean / biz_partner_validator ( ). result = validator -> validate ( business_partners ). ENDFUNCTION . Function Groups vs. Classes > 详细描述了两者的差异。","text_tokens":[">","事务","目录","比","情况","business","函数","式","endfunction","本","并且","容易","更加","[","=","程序","，","调用","整洁"," ","分段",".","详细","下","差异","接口","某些","面向",")","validate","(","function","详细描述","清晰","再","。","干","过程","必须","这些","data","语言","_","但","应该","vs","/","面向对象","更","尽管","节","result","重构","partner","功能","validator","可以","在","的","了","rfc","biz","：","和","]","-","clean","check","别的","对象","代码","new","提供","地","两者","partners","classes","用","进行","...","除了","对","之外","、","实际","（","测试","类","）","描述","之道","groups","abap","相应","不"],"title":"面向对象编程优于过程式编程","title_tokens":["编程","优于","式","面向对象编程","对象","面向","过程"]},{"location":"archives/ABAP-guide-zh/#_23","text":"ABAP 整洁之道 > 目录 > 语言 > 本节 它们通常更加简短，而且更容易为现代程序员所接受。 DATA ( variable ) = 'A' . \" MOVE 'A' TO variable. DATA ( uppercase ) = to_upper ( lowercase ). \" TRANSLATE lowercase TO UPPER CASE. index += 1 . \" >= NW 7.54 index = index + 1 . \" < NW 7.54 \" ADD 1 TO index. DATA ( object ) = NEW / clean / my_class ( ). \" CREATE OBJECT object TYPE /dirty/my_class. result = VALUE # ( FOR row IN input ( row - text ) ). \" LOOP AT input INTO DATA(row). \" INSERT row-text INTO TABLE result. \" ENDLOOP. DATA ( line ) = value_pairs [ name = 'A' ]. \" READ TABLE value_pairs INTO DATA(line) WITH KEY name = 'A'. DATA ( exists ) = xsdbool ( line_exists ( value_pairs [ name = 'A' ] ) ). IF line_exists ( value_pairs [ name = 'A' ] ). \" READ TABLE value_pairs TRANSPORTING NO FIELDS WITH KEY name = 'A'. \" DATA(exists) = xsdbool( sy-subrc = 0 ). 下文的许多详细规则只不过是具体重申了这条通用的建议。","text_tokens":["case","具体","into",">","目录","它们","exists","for","本","接受","table","容易","只不过","更加","text","xsdbool","为","loop","[","translate","#","=","with","程序","，","insert","read","0","line","整洁"," ",".","1","详细","是","不过","in",")","\"","(","class","type","create","add","。","建议","fields","upper","data","下文","通常","语言","my","'","所","_","name","sy","/","更","input","节","result","而且","if","subrc","许多","的","uppercase","现代","规则","了","]","to","-","clean","no","7.54","<","value","new","a","move","key","row","transporting","nw","+","lowercase","pairs","variable","这条","通用","简短","endloop","重申","程序员","之道","at","dirty","index","abap","object"],"title":"函数式语言结构优于过程式语言结构","title_tokens":["优于","式","语言","结构","过程","函数"]},{"location":"archives/ABAP-guide-zh/#_24","text":"ABAP 整洁之道 > 目录 > 语言 > 本节 在升级 ABAP 版本时，务必要检查是否有过时的语言元素，避免再使用它们。 例如，以下语句中 @ 转义的 \"host\" 变量更清楚地表明了什么是程序变量、什么是数据库中的列， SELECT * FROM spfli WHERE carrid = @ carrid AND connid = @ connid INTO TABLE @ itab . 相较于 过时的转义形式 SELECT * FROM spfli WHERE carrid = carrid AND connid = connid INTO TABLE itab . 较新的可选方案倾向于提高代码的可读性，减少与现代编程范式的设计冲突，这样切换到这些方案时就会自动使代码更整洁。 如果继续使用旧代码编写方式，过时元素可能在处理速度和内存消耗方面无法再从优化中受益。 使用现代语言元素，可以更轻松地将年轻的 ABAP 程序员带上道，由于在 SAP 的培训中不再教授过时内容，他们可能不再熟悉过时的结构。 SAP NetWeaver 文档固定包含一部分，其中列出了过时的语言元素，例如， NW 7.50 、 NW 7.51 、 NW 7.52 、 NW 7.53 。","text_tokens":["into","到",">","可读","目录","处理","内存","netweaver","相较","itab","它们","形式","提高","减少","列出","继续","这样","数据库","本","由于","table","教授","语句","时","务必","结构","=","程序","冲突","，","7.50","整洁","无法"," ",".","转义","是","速度","部分","版本","他们","数据","范式","\"","7.51","过时","处理速度","方面","再","表明","例如","。","如果","where","sap","受益","这些","host","方式","语言","升级","道","以下","要","避免","其中","培训","使","使用","轻松","更","从","优化","编写","节","熟悉","自动","清楚","元素","可以","在","就","的","旧","7.52","connid","会","可选","现代","可能","了","from","和","包含","and","方案","消耗","中","代码","检查","变量","据库","nw","不再","地","select","7.53","设计","将","一部分","是否","固定","较","carrid","编程","、","文档","年轻","@","与","一部","程序员","内容","之道","spfli","列","*","于","有","abap","什么","可读性","切换","新","带上","倾向"],"title":"避免过时语言元素","title_tokens":["元素","过时","避免","语言"]},{"location":"archives/ABAP-guide-zh/#_25","text":"ABAP 整洁之道 > 目录 > 语言 > 本节 仅在合适且有明显好处的地方使用。不要为了使用而到处用设计模式。","text_tokens":["设计","用","为了",">","目录","在","的","而","本","好处","。","设计模式","模式","不要","之道","且","语言","合适","到处","地方","仅","有","abap","使用","整洁"," ","明显","节"],"title":"明智地使用设计模式","title_tokens":["设计","明智地","使用","明智","设计模式","模式"]},{"location":"archives/ABAP-guide-zh/#_26","text":"ABAP 整洁之道 > 目录 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","节"],"title":"常量","title_tokens":["常量"]},{"location":"archives/ABAP-guide-zh/#_27","text":"ABAP 整洁之道 > 目录 > 常量 > 本节 IF abap_type = cl_abap_typedescr => typekind_date . 在清晰方面好于 \" anti-pattern IF abap_type = 'D' . 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 17: Smells and Heuristics: G25: > Replace Magic Numbers with Named Constants 。","text_tokens":["martin","参阅","constants","cl",">","if","目录","所著","在","\"","17","多","的","smells","方面","type","chapter","清晰","本","。","typedescr","robert",":","typekind","常量","-","之道","clean","code","pattern","g25","and","magic","c","'","with","=","_","中","好于","replace","abap","整洁","d"," ","numbers","更","date","heuristics",".","named","信息","anti","节"],"title":"使用常量而非幻数","title_tokens":["常量","非","幻数","使用","而"]},{"location":"archives/ABAP-guide-zh/#_28","text":"ABAP 整洁之道 > 目录 > 常量 > 本节 CLASS / clean / message_severity DEFINITION PUBLIC ABSTRACT FINAL . PUBLIC SECTION . CONSTANTS : warning TYPE symsgty VALUE 'W' , error TYPE symsgty VALUE 'E' . ENDCLASS . 或 CLASS / clean / message_severity DEFINITION PUBLIC CREATE PRIVATE FINAL . PUBLIC SECTION . CLASS-DATA : warning TYPE REF TO / clean / message_severity READ - ONLY , error TYPE REF TO / clean / message_severity READ - ONLY . \" ... ENDCLASS . 而不是将不相关的东西混在一起 \" anti-pattern INTERFACE / dirty / common_constants . CONSTANTS : warning TYPE symsgty VALUE 'W' , transitional TYPE i VALUE 1 , error TYPE symsgty VALUE 'E' , persisted TYPE i VALUE 2 . ENDINTERFACE . Enumerations > 描述了常见的枚举模式> 并讨论了它们的优缺点。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 17: Smells and Heuristics: J3: Constants versus Enums 。","text_tokens":["参阅","不是",">","w","目录","它们","本",",","模式","section","一起","common","c","read","ref","private","整洁"," ","transitional",".","1","final","message","\"","class","type","chapter","create","j3","而","相关","。","混在","枚举","data","code","pattern","'","_","error","东西","enumerations","endinterface","enums","/","更","heuristics","常见","anti","节","constants","warning","所著","symsgty","endclass","17","的","only","i","versus","了","robert","public","-","to","clean","and","中","value","优缺点","讨论",":","martin","e","或","将","...","多","smells","并","abstract","常量","描述","之道","interface","缺点","dirty","persisted","severity","abap","不","2","信息","definition"],"title":"枚举类优于常量接口","title_tokens":["类","常量","优于","枚举","接口"]},{"location":"archives/ABAP-guide-zh/#_29","text":"ABAP 整洁之道 > 目录 > 常量 > 本节 如果以松散方式集合常量，例如，在接口中，则应将其分组： CONSTANTS : BEGIN OF message_severity , warning TYPE symsgty VALUE 'W' , error TYPE symsgty VALUE 'E' , END OF message_severity , BEGIN OF message_lifespan , transitional TYPE i VALUE 1 , persisted TYPE i VALUE 2 , END OF message_lifespan . 使关系更清晰，好于： \" Anti-pattern CONSTANTS : warning TYPE symsgty VALUE 'W' , transitional TYPE i VALUE 1 , error TYPE symsgty VALUE 'E' , persisted TYPE i VALUE 2 , 利用组还可以成组进行访问，例如，进行输入验证： DO number_of_constants TIMES . ASSIGN COMPONENT sy - index OF STRUCTURE message_severity TO FIELD - SYMBOL ( <constant> ). IF <constant> = input . is_valid = abap_true . RETURN . ENDIF . ENDWHILE . 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 17: Smells and Heuristics: G27: Structure over Convention 。","text_tokens":["参阅","则","利用",">","w","目录","do","还","structure","以","访问","本","g27",",","field","component","constant","c","松散","=","，","整洁"," ","transitional","1",".","接口","信息","message",")","\"","(","type","chapter","清晰","is","例如","。","如果","lifespan","code","方式","pattern","'","_","error","assign","sy","使","验证","更","heuristics","input","anti","节","constants","warning","symbol","if","所著","可以","在","symsgty","17","其","的","i","关系","robert","：","convention","-","to","clean","and","应","<","中","value","好于","begin","组","times","valid","分组","endwhile",":","true","martin","end","e","将","number","return","进行","多","smells","常量","成组","之道","persisted","over","输入","index","of","severity","abap","2","集合","endif"],"title":"如果不使用枚举类，则对常量进行分组","title_tokens":["类","，","常量","对","则","使用","进行","不","如果","枚举","分组"]},{"location":"archives/ABAP-guide-zh/#_30","text":"ABAP 整洁之道 > 目录 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","节"],"title":"变量","title_tokens":["变量"]},{"location":"archives/ABAP-guide-zh/#_31","text":"ABAP 整洁之道 > 目录 > 变量 > 本节 如果遵循本文的指导原则，在首次出现的地方内联式声明变量显得更加自然，方法体也会变得很精短（3-5 条语句）。 METHOD do_something . DATA ( name ) = 'something' . DATA ( reader ) = / clean / reader => get_instance_for ( name ). result = reader -> read_it ( ). ENDMETHOD . 好过在方法开头单独的 DATA 部分声明变量 \" anti-pattern METHOD do_something . DATA : name TYPE seoclsname , reader TYPE REF TO / dirty / reader . name = 'something' . reader = / dirty / reader => get_instance_for ( name ). result = reader -> read_it ( ). ENDMETHOD . 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 5: Formatting: Vertical Distance: Variable Declarations 。","text_tokens":["参阅","出现",">","目录","do","式","也","for","本",",","更加","语句","get","c","=","单独","，","read","开头","ref","整洁"," ",".","原则","something","部分","体",")","\"","(","type","chapter","method","。","如果","data","code","pattern","'","_","name","变得","/","更","显得","方法","declarations","anti","instance","节","条","result","it","distance","所著","在","的","内联","会","robert","endmethod","很","-","clean","to","指导","中","3","formatting","精短","变量","reader","本文",":","martin","好过","variable","遵循","seoclsname","多","5","（","声明","）","之道","dirty","vertical","自然","首次","地方","abap","信息"],"title":"内联声明优于最前声明","title_tokens":["声明","优于","前","内联","最"]},{"location":"archives/ABAP-guide-zh/#_32","text":"ABAP 整洁之道 > 目录 > 变量 > 本节 \" anti-pattern IF has_entries = abap_true . DATA ( value ) = 1 . ELSE . value = 2 . ENDIF . 这样可以正常运行，因为 ABAP 会像声明位于方法开头那样来处理内联式声明。然而，这会令读者感到极其迷惑，特别是方法体较长而又没当场发现声明的话。在此情况下，不要使用内联式声明而将声明放在最前面： DATA value TYPE i . IF has_entries = abap_true . value = 1 . ELSE . value = 2 . ENDIF . 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 5: Formatting: Vertical Distance: Variable Declarations 。","text_tokens":["参阅",">","目录","处理","情况","式","这样","本","长","最","极其","c","=","迷惑","，","开头","has","整洁"," ","体较","位于",".","1","下","是","信息","前面",")","\"","(","type","chapter","而","来","。","的话","像","data","code","pattern","_","使用","更","方法","declarations","anti","节","if","distance","发现","所著","可以","在","感到","放在","的","那样","内联","会","i","当场","正常","robert","：","entries","特别","-","clean","中","value","formatting","变量","else","true",":","martin","将","variable","此","没","因为","这会令","多","5","读者","声明","运行","之道","然而","不要","又","vertical","abap","2","endif"],"title":"勿在可选分支中内联声明","title_tokens":["声明","内联","勿","可选","分支","在","中"]},{"location":"archives/ABAP-guide-zh/#_33","text":"ABAP 整洁之道 > 目录 > 变量 > 本节 DATA name TYPE seoclsname . DATA reader TYPE REF TO / dirty / reader . 链式处理主张在逻辑层级关联定义的变量。为了一致性，必须确保所有链式变量结成一体，要添加变量，就得另外引入链组。尽管这种方法可行，但通常不值得花这个功夫。 另外，链式处理也毫无必要地使重新格式化和重构变得复杂，因为每行看起来都不同，改起来需要四处挪动冒号、句号和逗号，根本不值得花功夫。 \" anti-pattern DATA : name TYPE seoclsname , reader TYPE REF TO / dirty / reader . 另请参阅 Don't align type clauses 如果使用链式数据声明，则每组结成一体的变量各用一个链。","text_tokens":["参阅","则","句号",">","目录","处理","确保","定义","值得","结成","请参阅","格式化","这个","也","地使","添加","本","可行","引入",",","必要","另","四处","一致","逗号","各用","，","ref","整洁"," ","功夫",".","看起来","重新","另外","don","毫无","为了","层级","数据","根本","\"","type","一致性","每行","。","如果","必须","一体","这种","data","格式","通常","pattern","'","冒号","但","name","要","使用","变得","/","逻辑","不同","t","方法","尽管","链","anti","节","重构","起来","复杂","在","就","的","得","和","to","-","变量","reader","都","看起","align","花","clauses","挪动",":","改","关联","因为","seoclsname","、","需要","主张","所有","每组","声明","之道","链组","一个","dirty","链式","abap","不","变得复杂"],"title":"勿用链式最前声明","title_tokens":["声明","前","用","勿","最","链式"]},{"location":"archives/ABAP-guide-zh/#ref-to-field-symbol","text":"ABAP 整洁之道 > 目录 > 变量 > 本节 LOOP AT components REFERENCE INTO DATA ( component ). 而非等效形式 \" anti-pattern LOOP AT components ASSIGNING FIELD - SYMBOL ( <component> ). 需要指针的地方除外 ASSIGN generic->* TO FIELD - SYMBOL ( <generic> ). ASSIGN COMPONENT name OF STRUCTURE structure TO FIELD - SYMBOL ( <component> ). ASSIGN ( class_name ) => ( static_member ) TO FIELD - SYMBOL ( <member> ). 从代码评审的经验表明人们往往会随心所欲地做出选择：“就是因为”、“因为我们总是采用那种循环方式”，或者“没特殊原因”。随意选择会令读者把时间浪费在毫无意义的问题上：为什么用这个而不用那个，因此应代之以有理有据、准确无误的决策。我们的建议基于这种理由： 指针能做一些引用做不了的事情，比如动态访问结构的组成部分。同样，引用也能做指针做不了的事情，比如构造动态类型的数据结构。总之，单独指望一个是不行的。 在面向对象的 ABAP 中，引用到处都有并且无法避免，因为任何对象皆是 REF TO <class-name> 。相反，指针仅在涉及动态类型的少数特殊情况下才绝对需要。因此，引用自然成为任何面向对象程序中的首选。 指针比引用短，但结果节省的内存却微不足道，尽可以忽略不计。同样，速度也不是问题。因此，在性能方面没理由厚此薄彼。 更多信息参阅 > ABAP Programming Guidelines 中的篇章 Accessing Data Objects Dynamically 。","text_tokens":["参阅","非","就是","不是","into",">","内存","目录","所欲","member","情况","比","准确","相反","篇章","形式","assigning","循环","微不足道","structure","这个","厚此薄彼","访问","做","也","本","field","并且","毫无意义","component","loop","忽略不计","人们","结构","不计","=","总是","那个","单独","程序","那种","，","无误","ref","比如","整洁","无法"," ",".","会令","浪费","dynamically","引用","是","意义","毫无","速度","一些","信息","部分","面向","数据","准确无误",")","\"","(","评审","class","方面","而","表明","做不了","。","不了","建议","这种","能","data","成为","方式","或者","pattern","绝对","_","但","“","任何","name","避免","结果","assign","往往","事情","有理","面向对象","皆","更","static","从","随心所欲","anti","构造","节","上","类型","做出","因此","为什么","symbol","components","objects","问题","在","可以","心所","特殊","的","会","generic","不足","却","：","accessing","除外","等效","基于","数据结构","性能","-","to","忽略","确无","对象","选择","应","<","无意","代码","”","组成部分","中","变量","仅","都","随心","地","代之以","经验","时间","首选","没理由","用","没","决策","因为","指针","reference","原因","理由","指望","采用","我们","多","有理有据","、","尽","把","需要","随意","同样","读者","programming","节省","少数","不足道","之道","组成","一个","at","下才","短","到处","*","自然","地方","of","总之","有","abap","guidelines","什么","涉及","不用","不行","动态"],"title":"REF TO 优于 FIELD-SYMBOL","title_tokens":["ref","优于","to","-","symbol"," ","field"]},{"location":"archives/ABAP-guide-zh/#_34","text":"ABAP 整洁之道 > 目录 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","节"],"title":"表","title_tokens":["表"]},{"location":"archives/ABAP-guide-zh/#_35","text":"ABAP 整洁之道 > 目录 > 表 > 本节 HASHED 表通常用来表示**单步填充**、 永不修改**且**常按键值读取**的**大表 。其固有的内存和处理开销使得散列表仅在数据量很大且读访问次数很多的情况下才有价值。每次对表内容进行更改，均需要大量重新计算散列值，因此修改过于频繁的表不要使用此种类型。 SORTED 表通常用于表示需要**时时排序**、 逐位填充**或**需要修改**并且**常按一个或多个完整或部分键值读取**或**以某种特定顺序**处理的**大表 。添加、更改或移除内容，需要找到恰当的插入点，但不需要调整表索引的其余部分。仅对读访问次数很多的情况，有序表才有价值。 STANDARD 表用于表示索引开销大于索引受益的**小表**，以及或是毫不在乎行顺序或是就想完全按追加顺序进行处理的**“数组”**。另外，也适用于需要对表进行不同访问的情况，例如，通过 SORT 和 BINARY SEARCH 进行索引访问和排序访问。 这些只是粗略的指导原则。> 更多细节参见 ABAP Language Help 中的篇章 Selection of Table Category 。","text_tokens":["找到","其余部分",">","内存","目录","处理","standard","很多","情况","每次","category","以及","排序","粗略","或是","插入","篇章","散","频繁","价值","以","访问","也","添加","本","修改","table","并且","毫不在乎","适用","，","整洁"," ","表示","表","调整","行","下","重新","在乎","另外","sort","使得","原则","部分","数据","有序","键值","逐位","特定","只是","完整","例如","。","某种","永不","selection","受益","这些","通常","值","但","填充","“","使用","不同","散列值","更","通过","节","大量","多个","sorted","类型","次数","因此","按","小表","索引","在","参见","不在","按键","其","的","恰当","就","顺序","更改","常","和","用于","hashed","时时","language","且","毫不","很大","指导","”","中","点","仅","help","读取","大表","数据量","计算","固有","数组","或","才","列表","进行","单步","用来","此种","大于","多","对","、","需要","追加","search","表才","完全","均","内容","之道","不要","一个","移除","不在乎","过于","余部","读","*","于","对表","of","有","abap","开销","想","不","其余","binary","细节"],"title":"使用恰当的表类型","title_tokens":["类型","的","恰当","使用","表"]},{"location":"archives/ABAP-guide-zh/#default-key","text":"ABAP 整洁之道 > 目录 > 表 > 本节 \" anti-pattern DATA itab TYPE STANDARD TABLE OF row_type WITH DEFAULT KEY . 添加缺省键值常常只是为了让具有较新功能的语句得以正常工作。事实上，这些键值本身通常是多余的，除了耗费资源，别无它用。由于它们会忽略数值数据类型，因此甚至可能会导致隐蔽的错误。不含显式字段列表的 SORT 和 DELETE ADJACENT 语句将会转而采用内部表的主键，在使用 DEFAULT KEY 的情况下，这可能会导致十分意想不到的结果，例如，当以数值字段作为键值的分量时，特别是当与 READ TABLE ... BINARY 等结合使用时。 要么显式指定键值 DATA itab2 TYPE STANDARD TABLE OF row_type WITH NON-UNIQUE KEY comp1 comp2 . 如果根本不需要键值的话，则采用 EMPTY KEY 。。 DATA itab1 TYPE STANDARD TABLE OF row_type WITH EMPTY KEY . 参照 Horst Keller 的博客文章 Internal Tables with Empty Key **注意：**具有 EMPTY KEY 的内部表上的 SORT 根本不会进行排序，> 但假如能静态确定键值为空，就会发出语法警告。","text_tokens":["意想","unique","则",">","目录","standard","情况","得以","排序","itab","它们","假如","non","这","添加","本","假如能","发出","段","由于","itab2","table","语法","它","当","缺省","语句","表上","当以","时","with","，","read","参照","整洁"," ","表","数值数据","等","导致","内部",".","静态","下","sort","字","显式","是","为了","为空","结合","数据","根本","\"","键值","default","确定","事实","type","只是","数值字","例如","。","如果","的话","这些","别","data","empty","通常","十分","pattern","keller","_","但","事实上","作为","结果","使用","具有","anti","节","资源","类型","转而","功能","因此","不含","在","多余","不会","就","的","无","意想不到","不到","要么","可能","会","想不到","delete","正常","文章","tables","：","internal","和","特别","-","忽略","itab1","常常","本身","让","key","row","将会","指定","主键","列表","用","进行","分量","...","horst","除了","错误","较","甚至","采用","comp2","注意","数值","隐蔽","需要","警告","与","博客","adjacent","之道","耗费","*","comp1","of","abap","工作","不","binary","新"],"title":"避免 DEFAULT KEY","title_tokens":["default","避免","key"," "]},{"location":"archives/ABAP-guide-zh/#insert-into-table-append-to","text":"ABAP 整洁之道 > 目录 > 表 > 本节 INSERT VALUE # ( ... ) INTO TABLE itab . INSERT INTO TABLE 对所有表和键值类型都起作用，因而更便于在性能需求发生变化时重构表的类型和键值定义。 仅当以类似数组的方式使用 STANDARD 表时才使用 APPEND TO ，如果想要强调所添加的条目应为最后一行的话。","text_tokens":["数组","重构","类型","强调","变化","才","into",">","目录","起","standard","定义","...","在","itab",")","(","键值","的","需求","对","生变","发生","类似","添加","应为","本","一行","所有","。","最后","如果","table","的话","性能","和","to","之道","append","条目","方式","性能需求","表时","发生变化","当以","时","#","所","因而","value","insert","，","便于","作用","仅","想要","abap","都","使用","整洁"," ","表","更",".","节"],"title":"INSERT INTO TABLE 优于 APPEND TO","title_tokens":["insert","优于","to","into","append"," ","table"]},{"location":"archives/ABAP-guide-zh/#line_exists-read-table-loop-at","text":"ABAP 整洁之道 > 目录 > 表 > 本节 IF line_exists ( my_table [ key = 'A' ] ). 更清楚简洁地表明意图，好于 \" anti-pattern READ TABLE my_table TRANSPORTING NO FIELDS WITH KEY key = 'A' . IF sy - subrc = 0 . 或者甚至是 \" anti-pattern LOOP AT my_table REFERENCE INTO DATA ( line ) WHERE key = 'A' . line_exists = abap_true . EXIT . ENDLOOP .","text_tokens":["意图","是","into",">","if","目录","reference",")","\"","true","甚至","(","subrc","exists","exit","endloop","表明","本","简洁","where","table","fields","]","-","之道","no","data","或者","loop","pattern","at","[","my","'","with","=","_","好于","，","read","0","sy","a","abap","line","key","整洁"," ","表","更","transporting",".","地","anti","节","清楚"],"title":"LINE_EXISTS 优于 READ TABLE 或 LOOP AT","title_tokens":["exists","read","或","优于","line"," ","loop","at","table","_"]},{"location":"archives/ABAP-guide-zh/#read-table-loop-at","text":"ABAP 整洁之道 > 目录 > 表 > 本节 READ TABLE my_table REFERENCE INTO DATA ( line ) WITH KEY key = 'A' . 更清楚简洁地表明意图，好于 \" anti-pattern LOOP AT my_table REFERENCE INTO DATA ( line ) WHERE key = 'A' . EXIT . ENDLOOP . 或者甚至是 \" anti-pattern LOOP AT my_table REFERENCE INTO DATA ( line ). IF line -> key = 'A' . EXIT . ENDIF . ENDLOOP .","text_tokens":["意图","是","into",">","if","目录","reference",")","\"","甚至","(","exit","endloop","表明","本","简洁","where","table","data","之道","-","或者","loop","pattern","at","my","'","with","=","_","好于","，","read","a","abap","line","key","整洁"," ","表","更",".","地","endif","anti","节","清楚"],"title":"READ TABLE 优于 LOOP AT","title_tokens":["read","优于"," ","loop","at","table"]},{"location":"archives/ABAP-guide-zh/#loop-at-where-if","text":"ABAP 整洁之道 > 目录 > 表 > 本节 LOOP AT my_table REFERENCE INTO DATA ( line ) WHERE key = 'A' . 更清楚简洁地表明意图，好于 LOOP AT my_table REFERENCE INTO DATA ( line ). IF line -> key = 'A' . EXIT . ENDIF . ENDLOOP .","text_tokens":["意图","into",">","if","目录","reference",")","(","exit","endloop","表明","本","简洁","where","table","data","之道","-","loop","at","my","'","=","_","好于","，","a","abap","line","key","整洁"," ","表","更",".","地","endif","节","清楚"],"title":"LOOP AT WHERE 优于嵌套式 IF","title_tokens":["优于","式","嵌套","if"," ","loop","at","where"]},{"location":"archives/ABAP-guide-zh/#_36","text":"ABAP 整洁之道 > 目录 > 表 > 本节 若你_预期_某一行就在表里，那就读取一次并对异常作出处理就够了， TRY . DATA ( row ) = my_table [ key = input ]. CATCH cx_sy_itab_line_not_found . RAISE EXCEPTION NEW / clean / my_data_not_found ( ). ENDTRY . 而不是用两次读取打乱并减慢主控制流 \" anti-pattern IF NOT line_exists ( my_table [ key = input ] ). RAISE EXCEPTION NEW / clean / my_data_not_found ( ). ENDTRY . DATA ( row ) = my_table [ key = input ]. 除了提高性能以外，这还是更一般性的 关注愉快路径或错误处理，但非两者兼顾 的一种特殊变化形式。","text_tokens":["不是","异常","非",">","目录","处理","愉快","一般","作出","两次","itab","某","形式","提高","exists","这","本","一行","就够","table","[","错误处理","=","found","，","line","整洁"," ","表",".","表里","以外","兼顾","控制",")","\"","(","raise","而","。","data","关注","pattern","my","_","但","若","sy","/","那","更","input","anti","节","变化","if","还是","一般性","在","特殊","就","的","exception","了","catch","你","性能","]","-","clean","主","new","控制流","key","读取","路径","row","endtry","两者","打乱","或","用","一种","除了","错误","对","并","之道","减慢","cx","abap","预期","一次","not","try"],"title":"避免不必要的表读取","title_tokens":["避免","的","不必要","读取","不必","表","必要"]},{"location":"archives/ABAP-guide-zh/#_37","text":"ABAP 整洁之道 > 目录 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","节"],"title":"字符串","title_tokens":["字符串","字符"]},{"location":"archives/ABAP-guide-zh/#_38","text":"ABAP 整洁之道 > 目录 > 字符串 > 本节 CONSTANTS some_constant TYPE string VALUE `ABC` . DATA ( some_string ) = `ABC` . \" --> TYPE string 避免使用 ' ，因为它会增加多余的类型转换，并且会令读者困惑于处理的究竟是 CHAR 还是 STRING ： \" anti-pattern DATA some_string TYPE string . some_string = 'ABC' . | 一般都适用，但无法用于 CONSTANTS ，而且在指定固定值时会增加不必要的开销： \" anti-pattern DATA ( some_string ) = | ABC |.","text_tokens":["类型","constants","是","时会","而且","转换",">","目录","处理","还是","类型转换","一般","固定","因为","|","在","多余",")","\"","(","的","abc","type","本","char","它会","`","some","增加","读者","并且","：","必要","不必要","data","之道","-","究竟","用于","constant","固定值","字符串","字符","pattern","--","'","=","_","value","适用","于","但","困惑","，","避免","abap","使用","string","整洁","都"," ","无法","不必","开销","指定",".","anti","会令","节"],"title":"使用 ` 定义文字","title_tokens":["使用","文字"," ","定义","`"]},{"location":"archives/ABAP-guide-zh/#_39","text":"ABAP 整洁之道 > 目录 > 字符串 > 本节 DATA ( message ) = | Received HTTP code { status_code } with message { text }|. 字符串模板更加突出地表明何为文字、何为变量，特别是如果在文本中嵌入多个变量的话。 \" anti-pattern DATA ( message ) = `Received an unexpected HTTP ` && status_code && ` with message ` && text .","text_tokens":["多个","}","是","an","文字",">","目录","received","message","|","在",")","\"","unexpected","(","、","何为","表明","本","。","如果","`","突出","嵌入","文本","的话","&&","更加","特别","text","data","之道","-","code","{","字符串","字符","pattern","with","=","_","中","，","变量","http","status","abap","模板","整洁"," ",".","地","anti","节"],"title":"使用 | 汇集文本","title_tokens":["使用"," ","|","汇集","文本"]},{"location":"archives/ABAP-guide-zh/#_40","text":"ABAP 整洁之道 > 目录 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","节"],"title":"布尔值","title_tokens":["布尔","布尔值"]},{"location":"archives/ABAP-guide-zh/#_41","text":"ABAP 整洁之道 > 目录 > 布尔值 > 本节 经常会遇到下面这种情况，布尔值似乎是自然的选择 \" anti-pattern is_archived = abap_true . 而换个视角才发现本应选择枚举 archiving_status = / clean / archivation_status => archiving_in_process . 一般来说，用布尔值区分事物的类型是一种坏的选择，因为几乎总会遇到并非彼此排斥的情况 assert_true ( xsdbool ( document -> is_archived ( ) = abap_true AND document -> is_partially_archived ( ) = abap_true ) ). 此外， 拆分方法而非使用布尔输入参数 还解释了为何应始终回避布尔参数。 更多信息参阅 1","text_tokens":["参阅","非","总会",">","目录","情况","一般","还","区分","本","布尔值","xsdbool","事物","=","，","整洁"," ","下面","assert","遇到",".","1","来说","是","坏","in",")","\"","(","is","而","。","枚举","解释","这种","pattern","document","为何","_","并非","使用","/","更","方法","彼此","anti","节","类型","本应","archiving","排斥","发现","partially","回避","的","而换个","会","几乎","了","-","clean","and","选择","应","status","拆分","archived","true","才","似乎","用","一般来说","因为","一种","此外","多","经常","之道","始终","process","输入","自然","archivation","视角","布尔","abap","参数","信息"],"title":"明智地使用布尔值","title_tokens":["布尔","明智地","使用","明智","布尔值"]},{"location":"archives/ABAP-guide-zh/#abap_bool","text":"ABAP 整洁之道 > 目录 > 布尔值 > 本节 DATA has_entries TYPE abap_bool . 不要使用普通类型 char1 。尽管在技术上兼容，但它会掩盖处理的是布尔变量这个事实。 也要避免其他布尔类型，因为它们常常会产生奇怪的副作用，例如， boolean 支持第三个值 \"undefined\"，它会导致难以觉察的编程错误。 在某些情况下，例如，对于 DynPro 字段，可能需要数据字典元素。此时无法使用 abap_bool ，因为它是在类型池 abap 中而不是在数据字典中定义的。在此情况下，转而采用 boole_d 或 xfeld 。如果需要自定义描述，那就创建自己的数据元素。 ABAP 可能是唯一不带通用布尔数据类型的编程语言。然而，设立一个是大势所趋。本建议基于 ABAP Programming Guidelines。","text_tokens":["不是","支持",">","目录","处理","情况","定义","boolean","它们","这个","兼容","也","本","段","设立","布尔值","它","数据类型","第三","char1","难以","，","has","作用","整洁","无法"," ","d","导致",".","下","字","是","dynpro","某些","数据","\"","技术","事实","type","大势","而","例如","。","掩盖","它会","如果","自定","建议","data","undefined","语言","值","_","其他","但","要","避免","使用","那","尽管","xfeld","节","类型","转而","在技术上","觉察","元素","在","此时","的","就","可能","会","唯一","产生","三个","bool","奇怪","字典","entries","基于","大势所趋","boole","常常","中","变量","创建","副作用","自己","或","此","池","因为","错误","采用","通用","编程语言","第三个","编程","需要","programming","普通","对于","描述","不要","之道","然而","一个","不带","自定义","布尔","abap","guidelines"],"title":"用 ABAP_BOOL 表示布尔值","title_tokens":["布尔","用","abap"," ","表示","布尔值","_","bool"]},{"location":"archives/ABAP-guide-zh/#abap_true-abap_false","text":"ABAP 整洁之道 > 目录 > 布尔值 > 本节 has_entries = abap_true . IF has_entries = abap_false . 不要使用等效字符 'X' 和 ' ' 或 space ；用它们很难看出这是一个布尔表达式： \" anti-pattern has_entries = 'X' . IF has_entries = space . 避免与 INITIAL 进行比较 - 这会迫使读者去回想 abap_bool 的缺省值为 abap_false ： \" anti-pattern IF has_entries IS NOT INITIAL . ABAP 可能是唯一不带表示真假的内置“常量”的编程语言。然而，设立它们是大势所趋。本建议基于 ABAP Programming Guidelines。","text_tokens":[">","目录","它们","这","本","设立","布尔值","；","缺省","缺省值","为","initial","出","=","，","has","整洁"," ","表示","表达式",".","回想","space","是","\"","这会","大势","is","迫使","。","建议","pattern","语言","'","_","“","避免","使用","anti","节","if","难看","的","可能","唯一","false","bool","：","等效","entries","基于","大势所趋","和","很","-","”","去","x","表达","比较","真假","true","或","用","进行","编程语言","编程","内置","与","读者","programming","常量","不要","之道","达式","然而","一个","字符","不带","布尔","abap","guidelines","not"],"title":"使用 ABAP_TRUE 和 ABAP_FALSE 进行比较","title_tokens":["和","abap","使用"," ","进行","false","比较","_","true"]},{"location":"archives/ABAP-guide-zh/#xsdbool","text":"ABAP 整洁之道 > 目录 > 布尔值 > 本节 DATA ( has_entries ) = xsdbool ( line IS NOT INITIAL ). 等效的 IF - THEN - ELSE 除了长得多之外，别无它用： \" anti-pattern IF line IS INITIAL . has_entries = abap_false . ELSE . has_entries = abap_true . ENDIF . xsdbool 是最合乎本来目的的方法，因为它直接产生 char1 ，该类型最适合布尔类型 abap_bool 。等效函数 boolc 和 boolx 会产生不同的类型并增加不必要的隐式类型转换。 我们同意名称 xsdbool 不巧会产生误导；毕竟，我们对 \"xsd\" 前缀暗示的 \"XML Schema Definition\" 部分毫无兴趣。 xsdbool 的一种可行的备选方案是 COND 三元形式。其语法直接明了，但是有点长，因为它会不必要地重复 THEN abap_true 段，而且还需要知道隐式缺省值 abap_false - 这就是为什么我们建议只将其作为第二解决方案。 DATA ( has_entries ) = COND abap_bool ( WHEN line IS NOT INITIAL THEN abap_true ).","text_tokens":["直接","重复","但是","该","就是","转换",">","目录","函数","形式","还","前缀","三元","这","本","长","cond","最","可行","段","布尔值","；","增加","必要","语法","它","缺省","xsdbool","本来","缺省值","initial","隐式","char1","=","，","has","line","整洁","when"," ","有点",".","合乎","是","毫无","同意","类型转换","部分",")","\"","(","is","。","它会","建议","别","data","pattern","_","作为","then","不必","不同","方法","anti","节","解决方案","类型","而且","为什么","if","误导","第二","不巧","其","的","无","适合","会","false","明","了","产生","bool","：","暗示","等效","entries","和","长得","-","不必要","知道","方案","else","地","true","将","用","毕竟","schema","目的","因为","一种","除了","多","我们","对","之外","需要","并","xsd","之道","xml","布尔","只","备选","解决","abap","什么","not","boolx","名称","endif","definition","boolc","兴趣"],"title":"使用 XSDBOOL 设置布尔变量","title_tokens":["变量","设置","布尔","xsdbool","使用"," "]},{"location":"archives/ABAP-guide-zh/#_42","text":"ABAP 整洁之道 > 目录 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","节"],"title":"条件","title_tokens":["条件"]},{"location":"archives/ABAP-guide-zh/#_43","text":"ABAP 整洁之道 > 目录 > 条件 > 本节 IF has_entries = abap_true . 反之，比较时看看同样的语句会变得多难理解： \" anti-pattern IF has_no_entries = abap_false . 节标题中的“尽量”意味着事先不用强行这样做，直到在某一点要以诸如 空的 IF 分支 之类的语句结束时才应如此： \" anti-pattern IF has_entries = abap_true . ELSE . \" only do something in the ELSE block, IF remains empty ENDIF . 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 17: Smells and Heuristics: G29: Avoid Negative Conditionals 。","text_tokens":["之类","参阅","一点",">","目录","如此","尽量","某","do","以","这样","做","本",",","语句","理解","block","时","多难","c","=","，","has","整洁"," ","诸如",".","意味","something","in","信息","\"","chapter","。","反之","empty","code","pattern","_","“","要","条件","时才","变得","更","heuristics","空","anti","节","the","标题","g29","if","conditionals","事先","所著","在","17","的","会","only","false","robert","：","直到","entries","-","no","clean","and","应","中","”","negative","else","意味着","比较","true",":","看看","martin","分支","多","smells","强行","avoid","同样","remains","之道","abap","结束","不用","endif"],"title":"尽量使条件为正","title_tokens":["正","条件","使","为","尽量"]},{"location":"archives/ABAP-guide-zh/#is-not-not-is","text":"ABAP 整洁之道 > 目录 > 条件 > 本节 IF variable IS NOT INITIAL . IF variable NP 'TODO*' . IF variable <> 42 . 否定在逻辑上是等效的，但需要“脑筋转弯”，从而加大了理解难度。 \" anti-pattern IF NOT variable IS INITIAL . IF NOT variable CP 'TODO*' . IF NOT variable = 42 . 尽量使条件为正 的一个更加具体的变化形式。另请参见 ABAP programming guidelines 中的 Alternative Language Constructs 一节。","text_tokens":["上","是","变化","variable","具体","请",">","if","目录","尽量","否定","在","参见","alternative","\"","形式","从而","的","cp","is","需要","本","一节","。","了","programming","等效","更加","另","-","之道","加大","理解","脑筋","pattern","initial","为","一个","language","constructs","'","<","”","*","=","但","“","中","正","，","难度","条件","abap","使","guidelines","整洁"," ","逻辑","转弯","42","not",".","todo","anti","节","np"],"title":"IS NOT 优于 NOT IS","title_tokens":["优于","is","not"," "]},{"location":"archives/ABAP-guide-zh/#_44","text":"ABAP 整洁之道 > 目录 > 条件 > 本节 将条件分解成若干基本组成部分，条件就会变得更加简单： DATA ( example_provided ) = xsdbool ( example_a IS NOT INITIAL OR example_b IS NOT INITIAL ). DATA ( one_example_fits ) = xsdbool ( applies ( example_a ) = abap_true OR applies ( example_b ) = abap_true OR fits ( example_b ) = abap_true ). IF example_provided = abap_true AND one_example_fits = abap_true . 而不是全都掺和在一起： \" anti-pattern IF ( example_a IS NOT INITIAL OR example_b IS NOT INITIAL ) AND ( applies ( example_a ) = abap_true OR applies ( example_b ) = abap_true OR fits ( example_b ) = abap_true ). 使用 ABAP 开发工具的快速修复功能，可以很快提取条件并创建如上所示的变量。","text_tokens":["不是","将","全都","功能",">","fits","目录","if","部分","applies","可以","在","one",")","\"","true","提取","(","开发","就","的","工具","is","快速","会","而","本","基本","并","若干","b","。","简单","开发工具","：","分解","更加","一起","很快","data","之道","xsdbool","-","组成","分解成","initial","and","pattern","掺和","组成部分","_","=","or","，","变量","条件","修复","a","abap","使用","provided","整洁","变得"," ","example","所示","创建","not",".","anti","节","如","上"],"title":"考虑分解复杂条件","title_tokens":["考虑","条件","复杂","分解"]},{"location":"archives/ABAP-guide-zh/#_45","text":"ABAP 整洁之道 > 目录 > 条件 > 本节 将复杂条件提炼成各自的方法是一个好主意： IF is_provided ( example ). METHOD is_provided . DATA ( is_filled ) = xsdbool ( example IS NOT INITIAL ). DATA ( is_working ) = xsdbool ( applies ( example ) = abap_true OR fits ( example ) = abap_true ). result = xsdbool ( is_filled = abap_true AND is_working = abap_true ). ENDMETHOD .","text_tokens":["result","是","复杂","将",">","if","目录","fits","applies",")","true","(","的","好","is","本","method","成","提炼","：","endmethod","data","之道","xsdbool","一个","initial","working","and","=","各自","_","filled","or","条件","主意","abap","provided","整洁","example"," ","方法",".","not","节"],"title":"考虑提炼复杂条件","title_tokens":["考虑","提炼","复杂","条件"]},{"location":"archives/ABAP-guide-zh/#if","text":"ABAP 整洁之道 > 目录 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","节"],"title":"If 语句","title_tokens":["if"," ","语句"]},{"location":"archives/ABAP-guide-zh/#if_1","text":"ABAP 整洁之道 > 目录 > If 语句 > 本节 IF has_entries = abap_false . \" do some magic ENDIF . 更加简明，好于 \" anti-pattern IF has_entries = abap_true . ELSE . \" do some magic ENDIF .","text_tokens":[">","if","目录","\"","do","true","简明","本","false","some","entries","更加","语句","-","之道","pattern","magic","=","_","好于","，","has","abap","整洁"," ","else",".","endif","anti","节"],"title":"无空的 IF 分支","title_tokens":["的","无空","if"," ","分支"]},{"location":"archives/ABAP-guide-zh/#case-else-if","text":"ABAP 整洁之道 > 目录 > If 语句 > 本节 CASE type . WHEN type - some_type . \" ... WHEN type - some_other_type . \" ... WHEN OTHERS . RAISE EXCEPTION NEW / clean / unknown_type_failure ( ). ENDCASE . 采用 CASE 更容易看出来是一组互斥的选择。它比一连串 IF 执行起来更快，因为它可以转化为另一种不同的微处理器命令，而不是一连串顺序评估的条件。不必到处重复判别变量，就可以快速引入新的情况。该语句甚至可以防止无意中嵌套 IF - ELSEIF 时可能出现的一些错误。 \" anti-pattern IF type = type - some_type . \" ... ELSEIF type = type - some_other_type . \" ... ELSE . RAISE EXCEPTION NEW / dirty / unknown_type_failure ( ). ENDIF .","text_tokens":["重复","case","出现","不是","该","理器","嵌套",">","目录","处理","比","情况","unknown","防止","本","引入","容易","它","语句","另","为","others","other","时","=","，","elseif","整洁","when"," ","一连","一组",".","是","评估","一些",")","\"","(","微处理器","type","raise","快速","而","。","命令","快","pattern","_","转化","出来","条件","不必","/","更","不同","anti","节","起来","执行","if","可以","endcase","就","的","判别","可能","顺序","exception","-","clean","选择","无意","中","变量","new","一连串","处理器","else","...","因为","一种","错误","采用","甚至","some","failure","之道","连串","dirty","看","到处","abap","互斥","endif","新"],"title":"对于多个备选条件，CASE 优于 ELSE IF","title_tokens":["多个","，","case","条件","对于","优于","备选","if"," ","else"]},{"location":"archives/ABAP-guide-zh/#_46","text":"ABAP 整洁之道 > 目录 > If 语句 > 本节 \" ani-pattern IF <this> . IF <that> . ENDIF . ELSE . IF <other> . ELSE . IF <something> . ENDIF . ENDIF . ENDIF . 嵌套的 IF 不仅难于快速理解，而且需要指数级的测试用例才能完全覆盖。 通常可以通过形成子方法并引入辅助布尔变量来拆分决策树。 其他情况可以通过合并 IF 进行简化，比如 IF <this> AND <that> . 而不是毫无必要地嵌套 \" anti-pattern IF <this> . IF <that> .","text_tokens":["不是","而且","嵌套","决策","毫无","something",">","if","目录","级","进行","决策树","情况","可以","覆盖","\"","简化","的","指数","辅助","快速","需要","而","本","this","并","来","。","引入","不仅","测试","才能","必要","完全","合并","语句","-","之道","理解","通常","子","pattern","and","other","<","其他","ani","，","变量","布尔","试用","abap","测试用例","难于","整洁","拆分"," ","比如","anti","else","方法",".","通过","形成","地","endif","that","节"],"title":"保持低嵌套深度","title_tokens":["嵌套","深度","保持","低"]},{"location":"archives/ABAP-guide-zh/#_47","text":"ABAP 整洁之道 > 目录 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","节"],"title":"正则表达式","title_tokens":["达式","正则","表达","表达式","正则表达式"]},{"location":"archives/ABAP-guide-zh/#_48","text":"ABAP 整洁之道 > 目录 > 正则表达式 > 本节 IF input IS NOT INITIAL . \" IF matches( val = input regex = '.+' ). WHILE contains ( val = input sub = 'abc' ). \" WHILE contains( val = input regex = 'abc' ). 正则表达式难以快速理解。没有它们，简单情况通常反而更加容易。 正则表达式通常也会消耗更多内存和处理时间，因为需要将其解析成表达式树并在运行时编译成可执行的匹配程序。直接使用循环和临时变量，简单就可以解决。","text_tokens":["直接","sub",">","内存","目录","处理","情况","编译成","正则表达式","它们","循环","编译","也","本","解析","容易","更加","理解","initial","时","=","难以","程序","，","整洁"," ","表达式",".","反而","matches",")","\"","(",".+","is","快速","。","可","while","通常","'","val","使用","更","input","没有","节","执行","if","译成","可以","在","其","就","的","abc","正则","会","成","和","contains","消耗","regex","匹配","变量","表达","时间","将","因为","多","需要","并","简单","运行","之道","达式","解决","abap","树","not","临时"],"title":"较简单的方法优于正则表达式","title_tokens":["的","优于","达式","正则","表达","方法","表达式","正则表达式","简单","较"]},{"location":"archives/ABAP-guide-zh/#_49","text":"ABAP 整洁之道 > 目录 > 正则表达式 > 本节 CALL FUNCTION 'SEO_CLIF_CHECK_NAME' EXPORTING cls_name = class_name EXCEPTIONS ... 而不用费事改成 \" anti-pattern DATA ( is_valid ) = matches ( val = class_name pattern = '[A-Z][A-Z0-9_]{0,29}' ). 当正则表达式无处不在时，，对不重复自己 (DRY) 的原则视而不见似乎变成一种自然的倾向，请对照 Robert C. Martin 所著的 Clean Code 中的 Chapter 17: Smells and Heuristics: General: G5: Duplication 。","text_tokens":["重复",">","目录","视而不见","正则表达式","本",",","当","clif","[","时","c","=","，","0","整洁"," ","表达式",".","}","原则","改成","matches",")","\"","(","function","class","call","chapter","is","而","。","data","{","无处不在","code","general","pattern","'","_","name","val","cls","heuristics","dry","anti","节","请","29","所著","不在","17","的","正则","seo","robert","]","-","clean","check","and","exporting","z0","中","a","表达","valid","自己",":","变成","martin","对照","似乎","无处","...","一种","smells","对","9","duplication","费事","之道","达式","自然","z","abap","exceptions","不","不用","不见","g5","倾向"],"title":"基本检查优于正则表达式","title_tokens":["检查","优于","达式","正则","表达","基本","表达式","正则表达式"]},{"location":"archives/ABAP-guide-zh/#_50","text":"ABAP 整洁之道 > 目录 > 正则表达式 > 本节 CONSTANTS class_name TYPE string VALUE `CL\\_.*` . CONSTANTS interface_name TYPE string VALUE `IF\\_.*` . DATA ( object_name ) = |{ class_name } \\ | { interface_name }|. 有一些复杂的正则表达式，当您向读者展示它们是如何从更基本的片段构成时，就会变得更加容易。","text_tokens":["}","constants","是","复杂","cl",">","if","目录","一些","正则表达式","|","构成",")","它们","(","就","的","class","type","正则","您","会","本","基本","_.","展示","。","`","向","读者","当","容易","更加","\\","data","之道","达式","{","interface","时","=","_","value","*","name","，","片段","如何","有","abap","string","整洁","表达"," ","变得","更","从","表达式",".","节","object"],"title":"考虑汇集复杂的正则表达式","title_tokens":["的","复杂","达式","考虑","正则","表达","表达式","正则表达式","汇集"]},{"location":"archives/ABAP-guide-zh/#_51","text":"ABAP 整洁之道 > 目录 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","节"],"title":"类","title_tokens":["类"]},{"location":"archives/ABAP-guide-zh/#_52","text":"ABAP 整洁之道 > 目录 > 类 > 本节","text_tokens":["类","abap","之道","整洁",">"," ","目录","本","节"],"title":"类：面向对象","title_tokens":["类","面向对象","对象","面向","："]},{"location":"archives/ABAP-guide-zh/#_53","text":"ABAP 整洁之道 > 目录 > 类 > 类：面向对象 > 本节 首先，静态类失去了面向对象所具备的全部优势。特别是，有了它们，几乎无法在单元测试中用测试替身替换生产中的相关依赖。 如果您在考虑是否该使类或方法变成静态的，答案几乎总是：不。 对于这条规则，有一种例外情况可以接受，那就是简单的实用工具类。其方法使其更容易与某些 ABAP 类型进行交互。它们不仅完全无态，而且相当初级，看起来就像是 ABAP 语句或内置函数。辨别因素是，其调用 者会将它们紧紧捆绑到各自的代码中，从而真的没法在单元测试中对其进行模拟。 CLASS / clean / string_utils DEFINITION [...]. CLASS-METHODS trim IMPORTING string TYPE string RETURNING VALUE ( result ) TYPE string . ENDCLASS . METHOD retrieve . DATA ( trimmed_name ) = / clean / string_utils => trim ( name ). result = read ( trimmed_name ). ENDMETHOD .","text_tokens":["该","就是","到",">","目录","情况","它们","函数","从而","您","这","methods","本","答案","初级","接受","相当","容易","使类","实用工具","语句","辨别","考虑","[","总是","各自","=","，","read","真的","trimmed","调用","string","整洁","无法"," ","静态",".","看起来","交互","是","因素","优势","紧紧","模拟","某些","例外情况","面向",")","(","class","type","相关","method","替换","。","如果","不仅","捆绑","data","实用","像是","生产","所","_","name","使","/","面向对象","单元测试","那","更","方法","首先","节","条","result","单元","类型","起来","returning","而且","importing","可以","在","endclass","依赖","其","就","的","工具","trim","会","几乎","规则","了","：","特别","]","-","endmethod","clean","对象","中","代码","替身","value","retrieve","看起","用工","变成","没法","或","将","用","进行","是否","...","一种","失去","对","内置","测试","简单","与","者","类","完全","对于","之道","全部","具备","有","abap","utils","例外","无态","不","definition"],"title":"对象优于静态类","title_tokens":["类","对象","静态","优于"]},{"location":"archives/ABAP-guide-zh/#_54","text":"ABAP 整洁之道 > 目录 > 类 > 类：面向对象 > 本节 避免构建具有继承性的类层次结构，应该选择组合。 很难设计出完美的继承，因为需要遵守规则，如 Liskov substitution principle 。另外，也很难理解，因为人们需要认识并领会层次结构背后的指导原则。继承会降低重用性，因为方法往往仅对子类才可用。它还会使重构复杂化，因为移动或更改成员往往需要对整个层次结构树进行更改。 组合意味着要设计小的独立对象，每个对象只服务于一个特定目的。通过简单的代理和外观模式，就可以将这些对象重新组合成更复杂的对象。组合可能会产生更多的类，但除此之外再无其他缺点。 莫因这条规则而丧失在恰当之处使用继承的信心。有一些应用场合很适合使用继承，例如， Composite design pattern 。只需中肯地问问自己，在所处情况下，继承是否确实利大于弊。如有怀疑，一般来说，选择组合更稳妥。 Interfaces vs. abstract classes 对此做了一些详细比较。","text_tokens":["利大于弊",">","目录","情况","一般","移动","之","确实","还","小","也","做","本","composite","模式","场合","principle","它","除此之外","理解","认识","人们","出","结构","，","整洁"," ",".","信心","意味","详细","继承","另外","重新","丧失","下","来说","原则","代理","一些","design","中肯","服务","面向","特定","整个","再","而","例如","。","成员","每个","性","这些","重新组合","liskov","pattern","除此","可用","其他","但","应该","避免","要","构建","往往","重用","使","使用","vs","面向对象","更","需","复杂化","背后","具有","方法","通过","substitution","节","重构","复杂","独立","可以","在","就","的","恰当","无","怀疑","适合","可能","会","成","规则","了","产生","更改","：","组合","领会","处","和","很","对子","降低","遵守规则","对象","对此","选择","指导","问问","interfaces","仅","莫因","意味着","自己","稳妥","比较","地","设计","或","classes","将","层次结构","一般来说","进行","大于","目的","因为","是否","应用","多","类才","这条","对","之外","继承性","很难","需要","并","abstract","层次","简单","类","之道","缺点","一个","所处","于","只","外观","有","abap","树","难","遵守","如","完美"],"title":"组合优于继承","title_tokens":["继承","优于","组合"]},{"location":"archives/ABAP-guide-zh/#_55","text":"ABAP 整洁之道 > 目录 > 类 > 类：面向对象 不要在同一个类中混用无态和有态编程范式。 在无态编程中，方法获取输入并产生输出， 而不会有任何副作用 ，因此无论何时、以何顺序调用，方法都会产生相同的结果。 CLASS / clean / xml_converter DEFINITION PUBLIC FINAL CREATE PUBLIC . PUBLIC SECTION . METHODS convert IMPORTING file_content TYPE xstring RETURNING VALUE ( result ) TYPE / clean / some_inbound_message . ENDCLASS . CLASS / clean / xml_converter IMPLEMENTATION . METHOD convert . cl_proxy_xml_transform => xml_xstring_to_abap ( EXPORTING xml = file_content ext_xml = abap_true svar_name = 'ROOT_NODE' IMPORTING abap_data = result ). ENDMETHOD . ENDCLASS . 在有态编程中，通过对象的方法操控其内部状态，这意味着_满是副作用_。 CLASS / clean / log DEFINITION PUBLIC CREATE PUBLIC . PUBLIC SECTION . METHODS add_message IMPORTING message TYPE / clean / message . PRIVATE SECTION . DATA messages TYPE / clean / message_table . ENDCLASS . CLASS / clean / log IMPLEMENTATION . METHOD add_message . INSERT message INTO TABLE messages . ENDMETHOD . ENDCLASS . 两种范式都不错，有各自的应用场合。然而，在同一个对象中_混用_会使代码难以理解，并且由于携带着的隐蔽错误以及同步性问题，注定会失败。切勿这样做。","text_tokens":["into",">","目录","切勿","以及","这样","做","methods","这","由于","converter","table","场合","messages","并且","section","类中","理解","同步","有态","implementation","失败","以何","无论","=","svar","各自","难以","，","insert","作用","调用","同步性","private","注定","相同","整洁"," ","内部",".","意味","log","proxy","final","操控","root","面向","message","transform","范式",")","(","class","type","create","而","method","add","。","何时","状态","data","携带","两种","'","_","任何","name","结果","使","/","面向对象","方法","通过","result","returning","因此","cl","importing","问题","在","不错","endclass","不会","其","同一","的","顺序","会","产生","同一个","：","public","和","endmethod","to","clean","对象","获取","exporting","中","代码","value","node","满是","都","输出","副作用","意味着","true","ext","file","inbound","xstring","应用","错误","编程","、","convert","content","隐蔽","并","混用","some","类","不要","之道","然而","着","一个","顺序调用","输入","xml","有","abap","无态","definition"],"title":"勿在同一个类中混用有态和无态","title_tokens":["同一","和","类中","勿","无态","一个","有态","混用","在","同一个"]},{"location":"archives/ABAP-guide-zh/#_56","text":"ABAP 整洁之道 > 目录 > 类 > 本节","text_tokens":["类","abap","之道","整洁",">"," ","目录","本","节"],"title":"作用域","title_tokens":["作用域","作用"]},{"location":"archives/ABAP-guide-zh/#_57","text":"ABAP 整洁之道 > 目录 > 类 > 作用域 > 本节 默认情况下运用全局类。只有在适当位置使用局部类。 全局类在数据字典中可见。局部类存在于另一个开发对象的 include 内，仅对这个另外的对象可见。 局部类适用 用于非常特定的私有数据结构，例如全局类数据的迭代器，仅此处需要这些数据结构， 用于提取复杂的私有部分算法，例如从其余类代码算法中提取出特殊用途的多方法的排序聚合算法， 用于模拟全局类的特定方面，例如，通过将所有数据库访问提取到可在单元测试中使用测试替身替换的单独局部类。 局部类将阻碍重用，因为它们无法在其他位置使用。尽管局部类易于提取，但人们通常甚至无法找到它们，从而导致不希望的代码重复。在极长的局部类中进行定向、导航和调试非常乏味且令人讨厌。由于 ABAP 锁是在包含文件级别上的，人们将无法同时在本地包含文件的不同部分上工作（只有在它们是不同的全局类的情况下，才能执行此操作）。 在以下情况下，重新考虑局部类的使用： 您的本地包含文件可以包含数十个类和数千行代码， 您将全局类视为包含其他类的“包”， 您的全局类退化为空壳， 您发现单独的本地包含文件中有重复代码， 您的开发人员开始互相锁定，无法并行工作， 由于您的团队无法理解彼此的本地子树，因此您的工作项估计会变得很多。","text_tokens":["重复","找到","视为","到",">","目录","讨厌","情况","很多","排序","提取","它们","从而","退化","开发","私有","锁定","运用","这个","访问","数据库","您","本","由于","项","另","类中","调试","考虑","发人","算法","理解","为","非常","人们","出","结构","适用","单独","锁","，","include","作用","整洁","无法"," ","行","导致","极长","下","另外","重新","十个","是","易于","模拟","开发人员","定向","团队","部分","令人","位置","数据","方面","特定","例如","替换","。","器","可","这些","通常","聚合","互相","中有","全局","其他","但","导航","“","以下","并行","重用","使用","变得","单元测试","不同","从","方法","通过","彼此","尽管","节","上","单元","复杂","因此","执行","发现","空壳","可以","在","特殊","的","内","此处","会","：","字典","数据结构","子树","和","重新考虑","用于","包含","文件","对象","且","乏味","包","中","代码","替身","”","数千","据库","仅","存在","同时","人员","作用域","级别","操作","数十个","将","迭代","此","进行","因为","本地","多","甚至","用途","对","局部","、","估计","令人讨厌","需要","只有","开始","默认","所有","（","测试","才能","类","希望","）","之道","一个","阻碍","可见","数十","于","适当","abap","工作","不","其余"],"title":"缺省情况下为全局，仅在适当位置为局部","title_tokens":["，","适当","仅","缺省","局部","为","情况","全局","在","下","位置"]},{"location":"archives/ABAP-guide-zh/#final","text":"ABAP 整洁之道 > 目录 > 类 > 作用域 > 本节 将并非针对继承而明确设计的类构建为 FINAL 。 在设计类的合作能力时，您的首选应该是 组合而不是继承 。实现继承不是一件容易的事，因为需要您考虑 PROTECTED 与 PRIVATE 等属性以及 Liskov substitution principle ，并且冻结了许多设计内部功能。如果您在类设计中没有考虑这些问题，那么应该通过将类构建为 FINAL 来防止意外继承。 当然，继承_有_一些很好的应用程序，例如设计模式 复合 。通过允许使用子类，业务加载项也可以变得更加有用，客户能够重用大多数原始代码。但是，请注意，所有这些情况下，从一开始就通过设计内置了继承。 未 实施接口 的不整洁类应保持非 FINAL ，这样使用者才能在单元测试中对其进行模拟。","text_tokens":["但是","不是","非",">","目录","那么","情况","防止","以及","也","您","这样","本","模式","项","principle","保持","并且","容易","用者","更加","考虑","有用","为","时","程序","原始","属性","，","作用","private","整洁"," ","等","冻结","内部","继承","下","接口","一件","是","模拟","final","一些","类应","好","允许","实施","而","例如","来","。","设计模式","如果","不整洁","将类","这些","liskov","_","应该","构建","并非","重用","使用","变得","单元测试","从","没有","通过","能够","多数","使用者","substitution","节","单元","实现","功能","请","一","问题","在","加载","可以","protected","许多","其","就","的","合作","了","组合","客户","很","事","明确","中","代码","意外","针对","子类","应用程序","作用域","设计","首选","将","进行","能力","因为","应用","注意","对","内置","需要","开始","所有","测试","与","才能","类","之道","大多数","业务","大多","有","abap","未","当然","复合"],"title":"若非为继承而设计则为 FINAL","title_tokens":["设计","则","final","而","为"," ","若非","继承"]},{"location":"archives/ABAP-guide-zh/#private-protected","text":"ABAP 整洁之道 > 目录 > 类 > 作用域 > 本节 默认情况下，将属性、方法和其他类成员设置为 PRIVATE 。 只有在您要启用子类覆盖它们时才将它们设置为 PROTECTED 。 只有需要的情况下，才应让类的内部元素供其他成员或程序使用。这不仅包括外部调用者，还包括子类。信息过度可用可能会因意外重新定义而导致细微错误，并阻碍重构，因为外部调用将冻结原本应流动的成员。","text_tokens":["重构","或","才","将",">","目录","元素","信息","情况","定义","因为","在","覆盖","会因","它们","protected","错误","还","的","调用者","供","流动","、","外部","您","这","需要","只有","本","可能","启用","默认","。","而","并","不仅","成员","过度","类","用者","包括","和","之道","为","阻碍","应","可用","其他","程序","属性","，","要","设置","作用","细微","调用","让","abap","private","时才","整洁","使用"," ","作用域","意外","子类","内部","方法","导致","冻结","原本","下","重新","节"],"title":"缺省情况下为 PRIVATE，仅在需要时为 PROTECTED","title_tokens":["，","仅","缺省","private","需要"," ","为","情况","时为","在","下","protected"]},{"location":"archives/ABAP-guide-zh/#getter","text":"ABAP 整洁之道 > 目录 > 类 > 作用域 > 本节 不可变对象是在构造后永不改变的对象。对于此类对象，请考虑使用公有只读属性而不是 getter 方法。 CLASS / clean / some_data_container DEFINITION . PUBLIC SECTION . METHODS constructor IMPORTING a TYPE i b TYPE c c TYPE d . DATA a TYPE i READ - ONLY . DATA b TYPE c READ - ONLY . DATA c TYPE d READ - ONLY . ENDCLASS . 而不是 CLASS / dirty / some_data_container DEFINITION . PUBLIC SECTION . METHODS get_a ... METHODS get_b ... METHODS get_c ... PRIVATE SECTION . DATA a TYPE i . DATA b TYPE c . DATA c TYPE d . ENDCLASS . 警告 ：对于**具有**变化值的对象，请勿使用公有只读属性。否则，此属性必须始终保持最新状态，无论其他任何代码是否需要它们的值。","text_tokens":["不是",">","目录","它们","methods","本","保持","section","考虑","get","c","无论","属性","，","read","作用","private","整洁","d"," ",".","请勿","不可","是","class","type","而","。","b","必须","永不","状态","data","值","_","其他","container","任何","只读","始终保持","使用","/","方法","具有","否则","构造","节","变化","请","importing","在","endclass","的","i","only","：","public","-","getter","clean","对象","代码","a","后","constructor","作用域","最新","此","...","是否","需要","变","警告","some","类","改变","对于","之道","dirty","始终","公有","*","abap","definition","此类"],"title":"考虑使用不可变对象而非 getter","title_tokens":["非","考虑","使用","getter","变","而"," ","对象","不可"]},{"location":"archives/ABAP-guide-zh/#read-only","text":"ABAP 整洁之道 > 目录 > 类 > 作用域 > 本节 许多现代编程语言（尤其是 Java）建议尽量将类成员设置为只读，以防止产生意外的不良影响。 尽管 ABAP _确实_为数据声明提供了 READ-ONLY 加载项，但我们建议您谨慎使用。 首先，仅在 PUBLIC SECTION 中提供了加载项，从而大大降低了其适用范围。您既不能将其添加到受保护的成员或私有成员，也不能将其添加到方法中的局部变量。 其次，加载项的执行结果与人们对其他编程语言的期望行为略有不同：仍然可以通过类本身、其友元类及其子类中的任何方法自由地修改 READ-ONLY 数据。这与其他语言中普遍采用的“一次写入，永远不会修改”行为相矛盾。这种差异可能会导致令人惊讶的意外。 为了避免误解：保护变量以防意外修改是一种很好的做法。如果是一个合适的语句，我们也建议将其应用于 ABAP中。","text_tokens":["到",">","大大","目录","既","尽量","防止","确实","从而","适用范围","私有","写入","尤其","以","也","您","这","添加","java","本","保护","修改","项","section","语句","为","相","人们","适用","，","read","设置","作用","其次","不良","整洁"," ","导致","做法","差异","是","为了","令人","数据","局部变量","好","建议您","及其","。","如果","成员","建议","其友元类","这种","将类","语言","合适","误解","_","范围","但","其他","任何","只读","“","避免","结果","使用","期望","不同","方法","通过","首先","尽管","节","执行","不能","加载","在","可以","不会","许多","其","的","行为","以防","可能","only","现代","会","了","矛盾","产生","：","public","-","很","受","降低","本身","中","”","变量","惊讶","仅","自由","意外","提供","子类","地","作用域","仍然","略有不同","或","将","一种","应用","采用","我们","编程语言","编程","对","局部","、","（","与","类","声明","）","之道","不良影响","一个","永远","谨慎","于","影响","abap","普遍","大大降低","一次","略有"],"title":"保守地使用 READ-ONLY","title_tokens":["保守","read","-","使用","only"," ","地"]},{"location":"archives/ABAP-guide-zh/#_58","text":"ABAP 整洁之道 > 目录 > 类 > 本节","text_tokens":["类","abap","之道","整洁",">"," ","目录","本","节"],"title":"构造函数","title_tokens":["构造","函数","构造函数"]},{"location":"archives/ABAP-guide-zh/#new-create-object","text":"ABAP 整洁之道 > 目录 > 类 > 构造函数 > 本节 DATA object TYPE REF TO / clean / some_number_range . object = NEW # ( '/CLEAN/CXTGEN' ) ... DATA ( object ) = NEW / clean / some_number_range ( '/CLEAN/CXTGEN' ). ... DATA ( object ) = CAST / clean / number_range ( NEW / clean / some_number_range ( '/CLEAN/CXTGEN' ) ). 而不是毫无必要地加长 \" anti-pattern DATA object TYPE REF TO / dirty / some_number_range . CREATE OBJECT object EXPORTING number_range = '/DIRTY/CXTGEN' . 当然，除非需要动态类型 CREATE OBJECT number_range TYPE ( dynamic_type ) EXPORTING number_range = '/CLEAN/CXTGEN' .","text_tokens":["类型","不是","number","毫无",">","目录","构造函数","...","动态","dynamic",")","\"","函数","(","type","create","加长","range","本","而","需要","some","cast","必要","类","data","之道","to","clean","-","pattern","dirty","'","exporting","#","=","_","，","ref","new","abap","整洁"," ","/","当然",".","cxtgen","地","除非","anti","构造","节","object"],"title":"NEW 优于 CREATE OBJECT","title_tokens":["new","优于","create"," ","object"]},{"location":"archives/ABAP-guide-zh/#create-private-constructor","text":"ABAP 整洁之道 > 目录 > 类 > 构造函数 > 本节 CLASS / clean / some_api DEFINITION PUBLIC FINAL CREATE PRIVATE . PUBLIC SECTION . METHODS constructor . 我们同意这是自相矛盾的。但根据文章 ABAP 帮助的 Instance Constructor ，需要在 PUBLIC SECTION 中指定 CONSTRUCTOR 以确保正确的编译和语法验证。 这仅适用于全局类。在局部类中，应将构造函数设置为私有。","text_tokens":["自相矛盾","将","根据","同意","final",">","目录","构造函数","确保","在","函数","我们","私有","的","编译","class","局部","以","这是","create","methods","需要","本","帮助","这仅","。","矛盾","some","自相","文章","语法","类","section","public","和","类中","之道","clean","api","为","构造","全局","应","中","_","适用","但","于","，","设置","abap","private","验证","整洁"," ","/","instance","指定",".","constructor","正确","definition","节"],"title":"如果全局类为 CREATE PRIVATE，则保留 CONSTRUCTOR 为公有","title_tokens":["，","则","private","类为","create"," ","为","全局","如果","公有","保留","constructor"]},{"location":"archives/ABAP-guide-zh/#_59","text":"ABAP 整洁之道 > 目录 > 类 > 构造函数 > 本节 CLASS-METHODS describe_by_data IMPORTING data TYPE any [...] CLASS-METHODS describe_by_name IMPORTING name TYPE any [...] CLASS-METHODS describe_by_object_ref IMPORTING object_ref TYPE REF TO object [...] CLASS-METHODS describe_by_data_ref IMPORTING data_ref TYPE REF TO data [...] ABAP 不支持 过载 。使用名称变式而不是可选参数来实现所需的语义。 \" anti-pattern METHODS constructor IMPORTING data TYPE any OPTIONAL name TYPE any OPTIONAL object_ref TYPE REF TO object OPTIONAL data_ref TYPE REF TO data OPTIONAL [...] 拆分方法而非添加 OPTIONAL 参数 通用指南介绍了根本原因。 考虑使用 构建器设计模式 将复杂构造解析为多步构造。","text_tokens":["设计","复杂","不是","支持","实现","非","将",">","目录","构造函数","importing","...","原因","根本","\"","函数","通用","的","class","type","本原","methods","变式","而","本","添加","来","。","设计模式","了","解析","模式","多步","可","类","选","器","optional","]","-","之道","data","to","考虑","为","pattern","[","语义","所","指南","_","过载","constructor","name","ref","构建","介绍","abap","使用","根本原因","整洁","拆分"," ","参数","by","any","不","需","describe","方法","名称","anti","构造","节","object"],"title":"多个静态创建方法优于可选参数","title_tokens":["多个","选","优于","参数","创建","静态","方法","可"]},{"location":"archives/ABAP-guide-zh/#_60","text":"ABAP 整洁之道 > 目录 > 类 > 构造函数 > 本节 用于创建方法的有效单词为 new_ 、 create_ 和 construct_ 。人们凭直觉就可以将它们与对象构造联系起来。还可以将这些单词连用构成动词短语，如 new_from_template 、 create_as_copy 或 create_by_name 。 CLASS-METHODS new_describe_by_data IMPORTING p_data TYPE any [...] CLASS-METHODS new_describe_by_name IMPORTING p_name TYPE any [...] CLASS-METHODS new_describe_by_object_ref IMPORTING p_object_ref TYPE REF TO object [...] CLASS-METHODS new_describe_by_data_ref IMPORTING p_data_ref TYPE REF TO data [...] 而不是无意义的名称，例如 \" anti-pattern CLASS-METHODS create_1 IMPORTING p_data TYPE any [...] CLASS-METHODS create_2 IMPORTING p_name TYPE any [...] CLASS-METHODS create_3 IMPORTING p_object_ref TYPE REF TO object [...] CLASS-METHODS create_4 IMPORTING p_data_ref TYPE REF TO data [...]","text_tokens":["不是",">","目录","如","函数","它们","还","methods","本","直觉","单词","为","人们","[","，","ref","整洁"," ","by","短语","any","动词","1","p","意义","copy","构成","\"","有效","class","type","create","联系","而","例如","。","construct","这些","data","pattern","_","name","方法","anti","构造","节","起来","凭直觉","构造函数","importing","可以","就","的","无","as","from","和","]","用于","-","to","对象","3","new","连用","创建","或","将","template","...","、","与","类","之道","abap","2","describe","名称","4","object"],"title":"用描述性名称表示多个创建方法","title_tokens":["多个","描述","用","表示","创建","方法","名称","描述性"]},{"location":"archives/ABAP-guide-zh/#_61","text":"ABAP 整洁之道 > 目录 > 类 > 构造函数 > 本节 METHOD new . IF singleton IS NOT BOUND . singleton = NEW / clean / my_class ( ). ENDIF . result = singleton . ENDMETHOD . 在您的面向对象的设计中提到第二个实例没有意义的情况下应用单例模式。该模式可确保每个使用者都以相同的状态和相同的数据处理相同的内容。 不要出于习惯或者因为某些性能规则的评分而使用单例模式。该模式最容易被过度使用和错误应用，这会产生意想不到的交叉影响，并为测试增加不必要的复杂性。如果单一对象没有设计驱动原因，可由使用者自己做决定，他仍然可以通过构造函数之外的方式（例如使用工厂）达到相同目的。","text_tokens":["意想","该","单例",">","目录","处理","确保","情况","函数","以","您","做","本","最","模式","增加","必要","容易","用者","第二个","为","决定","=","，","交叉","相同","整洁"," ",".","下","评分","实例","意义","某些","驱动","面向","数据",")","(","这会","class","is","而","method","例如","。","如果","每个","可","由","状态","单一","达到","复杂性","或者","方式","my","_","他","使用","不必","/","面向对象","没有","通过","使用者","构造","节","result","复杂","if","构造函数","可以","在","提到","第二","的","意想不到","不到","想不到","规则","产生","性能","和","endmethod","不必要","clean","对象","工厂","中","数据处理","new","出于","都","自己","仍然","设计","二个","目的","因为","原因","应用","错误","之外","并","（","测试","过度","类","）","内容","之道","不要","被","影响","习惯","bound","abap","not","singleton","endif"],"title":"仅在多实例无意义的情况下变成单例","title_tokens":["实例","的","无","仅","意义","单例","情况","在","下","多","变成"]},{"location":"archives/ABAP-guide-zh/#_62","text":"ABAP 整洁之道 > 目录 > 本节 这些规则可应用于类和功能模块中的方法。","text_tokens":["功能",">","目录","应用","于类","的","本","。","规则","模块","可","这些","和","之道","中","abap","整洁"," ","方法","节","功能模块"],"title":"方法","title_tokens":["方法"]},{"location":"archives/ABAP-guide-zh/#_63","text":"ABAP 整洁之道 > 目录 > 方法 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","方法","节"],"title":"调用","title_tokens":["调用"]},{"location":"archives/ABAP-guide-zh/#_64","text":"ABAP 整洁之道 > 目录 > 方法 > 调用 > 本节 modify -> update ( node = / clean / my_bo_c => node - item key = item -> key data = item changed_fields = changed_fields ). 而不是毫无必要地加长 \" anti-pattern CALL METHOD modify -> update EXPORTING node = / dirty / my_bo_c => node - item key = item -> key data = item changed_fields = changed_fields . 如果动态类型禁止函数调用，请使用过程式调用 CALL METHOD modify -> ( method_name ) EXPORTING node = / clean / my_bo_c => node - item key = item -> key data = item changed_fields = changed_fields . 以下许多详细规则只是此建议的更具体变式。","text_tokens":["类型","不是","请","此","毫无","具体",">","目录",")","\"","函数","(","许多","的","式","call","函数调用","只是","变式","加长","而","本","method","。","规则","bo","如果","过程","建议","fields","必要","禁止","-","之道","clean","data","pattern","changed","dirty","my","c","update","exporting","=","_","node","item","name","，","以下","调用","abap","key","使用","整洁"," ","/","详细","更","modify","方法",".","地","anti","节","动态"],"title":"函数式调用优于过程式调用","title_tokens":["优于","式","调用","过程","函数"]},{"location":"archives/ABAP-guide-zh/#receiving","text":"ABAP 整洁之道 > 目录 > 方法 > 调用 > 本节 DATA ( sum ) = aggregate_values ( values ). 而不是毫无必要地加长 \" anti-pattern aggregate_values ( EXPORTING values = values RECEIVING result = DATA ( sum ) ).","text_tokens":["result","receiving","不是","毫无",">","目录","values",")","sum","\"","(","加长","而","本","必要","aggregate","data","之道","-","pattern","exporting","=","_","调用","abap","整洁"," ","方法",".","地","anti","节"],"title":"省略 RECEIVING","title_tokens":["receiving","省略"," "]},{"location":"archives/ABAP-guide-zh/#exporting","text":"ABAP 整洁之道 > 目录 > 方法 > 调用 > 本节 modify -> update ( node = / clean / my_bo_c => node - item key = item -> key data = item changed_fields = changed_fields ). 而不是毫无必要地加长 \" anti-pattern modify -> update ( EXPORTING node = / dirty / my_bo_c => node - item key = item -> key data = item changed_fields = changed_fields ).","text_tokens":["不是","毫无",">","目录",")","\"","(","加长","而","本","bo","fields","必要","-","之道","clean","data","pattern","changed","dirty","my","c","update","exporting","=","_","node","item","调用","abap","key","整洁"," ","/","modify","方法",".","地","anti","节"],"title":"省略可选关键字 EXPORTING","title_tokens":["选","关键"," ","省略","exporting","关键字","可"]},{"location":"archives/ABAP-guide-zh/#_65","text":"ABAP 整洁之道 > 目录 > 方法 > 调用 > 本节 DATA ( unique_list ) = remove_duplicates ( list ). 而不是毫无必要地加长 \" anti-pattern DATA ( unique_list ) = remove_duplicates ( list = list ). 但是，在某些情况下，仅方法名称还不够清楚，重复参数名称可能会更易于理解： car -> drive ( speed = 50 ). update ( asynchronous = abap_true ).","text_tokens":["重复","unique","不是","但是","易于","毫无","某些",">","目录","情况","在","car","不够",")","\"","true","(","还","drive","50","可能","加长","而","本","会","speed","必要","：","data","之道","-","理解","pattern","update","asynchronous","=","_","remove","，","仅","调用","abap","list","duplicates","整洁"," ","参数","更","方法",".","名称","地","下","anti","节","清楚"],"title":"在单参数调用中省略参数名称","title_tokens":["单","调用","参数","省略","名称","在","中"]},{"location":"archives/ABAP-guide-zh/#me","text":"ABAP 整洁之道 > 目录 > 方法 > 调用 > 本节 由于自我引用 me-> 是由系统隐式设置的，因此可在调用实例方法时将其省略 DATA ( sum ) = aggregate_values ( values ). 而不是毫无必要地加长 \" anti-pattern DATA ( sum ) = me -> aggregate_values ( values ).","text_tokens":["引用","实例","是","me","不是","将","因此","毫无",">","目录","在","values","sum",")","\"","自我","(","其","的","加长","而","本","由于","系统","必要","由","可","aggregate","-","之道","data","pattern","隐式","时","=","_","，","设置","调用","abap","整洁"," ","省略","方法",".","地","anti","节"],"title":"在调用实例方法时省略自我引用 me","title_tokens":["实例","引用","me","调用"," ","省略","方法","时","在","自我"]},{"location":"archives/ABAP-guide-zh/#_66","text":"ABAP 整洁之道 > 目录 > 方法 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","方法","节"],"title":"方法：面向对象","title_tokens":["面向对象","对象","面向","方法","："]},{"location":"archives/ABAP-guide-zh/#_67","text":"ABAP 整洁之道 > 目录 > 方法 > 方法：面向对象 > 本节 缺省情况下，方法应为实例成员。实例方法可以更好地反映类的“对象本质”。在单元测试中可以更轻松地模拟这些方法。 METHODS publish . 方法仅在特殊情况下才是静态的，例如静态创建方法。 CLASS-METHODS create_instance RETURNING VALUE ( result ) TYPE REF TO / clean / blog_post .","text_tokens":["实例","result","更好","单元","是","returning","才","blog","模拟",">","目录","情况","面向","可以","在",")","特殊","(","的","本质","class","type","methods","应为","create","本","例如","。","成员","测试","：","类","这些","缺省","-","之道","to","clean","publish","对象","”","中","_","value","“","post","，","ref","仅","abap","轻松","整洁"," ","/","面向对象","单元测试","更","静态","方法",".","创建","地","下","instance","节","反映"],"title":"实例优于静态方法","title_tokens":["实例","优于","静态","方法","静态方法"]},{"location":"archives/ABAP-guide-zh/#_68","text":"ABAP 整洁之道 > 目录 > 方法 > 方法：面向对象 > 本节 公有实例方法应始终是接口的一部分。这样可以解耦相关性，并简化单元测试中的模拟过程。 METHOD / clean / blog_post~publish . 在面向整洁对象的方法中，公开没有接口的方法没有多大意义，枚举类等少数方法除外，这些方法永远不会有备选实施，也永远不会在测试用例中进行模拟。 接口与抽象类 描述了为什么这也适用于覆盖继承方法的类。","text_tokens":[">","目录","这样","也","这","本","耦","适用","，","抽象类","整洁"," ","等",".","继承","接口","实例","是","多大","意义","模拟","部分","面向","简化","实施","相关","method","。","枚举","过程","这些","publish","_","/","面向对象","单元测试","方法","没有","节","单元","blog","为什么","可以","在","覆盖","不会","的","~","了","：","除外","clean","对象","应","中","抽象","post","一部分","进行","解","并","测试","与","公开","类","一部","少数","描述","之道","始终","永远","公有","于","试用","备选","有","abap","测试用例","什么","相关性"],"title":"公共实例方法应为接口的一部分","title_tokens":["实例","的","一部","应为","一部分","部分","方法","公共","接口"]},{"location":"archives/ABAP-guide-zh/#_69","text":"ABAP 整洁之道 > 目录 > 方法 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","方法","节"],"title":"参数数目","title_tokens":["数目","参数"]},{"location":"archives/ABAP-guide-zh/#importing","text":"ABAP 整洁之道 > 目录 > 方法 > 参数数目 > 本节 FUNCTION seo_class_copy IMPORTING clskey TYPE seoclskey new_clskey TYPE seoclskey config TYPE class_copy_config EXPORTING ... 整洁程度优于 \" anti-pattern FUNCTION seo_class_copy IMPORTING clskey TYPE seoclskey new_clskey TYPE seoclskey access_permission TYPE seox_boolean DEFAULT seox_true VALUE ( save ) TYPE seox_boolean DEFAULT seox_true VALUE ( suppress_corr ) TYPE seox_boolean DEFAULT seox_false VALUE ( suppress_dialog ) TYPE seox_boolean DEFAULT seox_false VALUE ( authority_check ) TYPE seox_boolean DEFAULT seox_true lifecycle_manager TYPE REF TO if_adt_lifecycle_manager OPTIONAL lock_handle TYPE REF TO if_adt_lock_handle OPTIONAL VALUE ( suppress_commit ) TYPE seox_boolean DEFAULT seox_false EXPORTING ... 输入参数过多会大幅增加方法的复杂性，因为方法需要处理指数级的组合。有多个参数就说明该方法做了超过一件事。 您可以通过结构和对象将参数组合为有意义的集合，从而减少参数的数目。","text_tokens":["该",">","seoclskey","目录","处理","级","boolean","过多会","从而","减少","做","您","本","commit","增加","为","结构","，","ref","优于","整洁"," ","一件","意义","copy","manager",")","\"","(","corr","default","function","class","type","handle","。","optional","说明","复杂性","pattern","lock","_","clskey","方法","通过","超过","anti","节","多个","复杂","if","importing","可以","就","的","指数","false","了","seo","组合","save","和","-","to","check","adt","事","对象","exporting","value","authority","new","lifecycle","suppress","true","大幅","数目","将","程度","...","因为","access","需要","permission","seox","之道","config","dialog","输入","有","abap","参数","集合"],"title":"力图减少 IMPORTING 参数，最好少于三个","title_tokens":["，","最好","少于"," ","参数","importing","三个","力图","减少"]},{"location":"archives/ABAP-guide-zh/#optional","text":"ABAP 整洁之道 > 目录 > 方法 > 参数数目 > 本节 METHODS do_one_thing IMPORTING what_i_need TYPE string . METHODS do_another_thing IMPORTING something_else TYPE i . 为了实现ABAP不支持但又需要的语义 过载 。 \" anti-pattern METHODS do_one_or_the_other IMPORTING what_i_need TYPE string OPTIONAL something_else TYPE i OPTIONAL . 可选参数使调用者感到困惑： 真正需要哪些参数？ 哪些参数组合有效？ 哪些参数互相排斥？ 按特定的参数拆分成多个方法可以给人明确的指引，从而避免了这种混淆。","text_tokens":["支持",">","目录","do","从而","指引","methods","本","用者","other","？","人","语义","哪些","，","调用","string","整洁"," ",".","something","为了","给","one","\"","有效","特定","type","。","这种","可","optional","pattern","互相","thing","_","过载","但","need","避免","使","方法","anti","节","多个","the","实现","排斥","按","importing","可以","混淆","another","感到","的","调用者","i","了","分成","：","组合","-","明确","what","else","数目","拆","需要","真正","选","之道","又","or","困惑","abap","参数","不"],"title":"拆分方法而非添加 OPTIONAL 参数","title_tokens":["optional","非","添加","拆分","而"," ","参数","方法"]},{"location":"archives/ABAP-guide-zh/#preferred-parameter","text":"ABAP 整洁之道 > 目录 > 方法 > 参数数目 > 本节 额外定义 PREFERRED PARAMETER 让人很难知道实际需要提供什么样的参数，理解代码也变得更困难。将参数数目减至最少，尤其是可选参数的数目，可以自动减少对 PREFERRED PARAMETER 的需求。","text_tokens":["parameter","额外","是","自动","数目","将",">","目录","最少","定义","可以","减少","的","需求","对","实际","尤其","也","需要","可选","本","。","困难","很","之道","什么样","知道","理解","人","preferred","代码","减至","，","让","abap","提供","整洁","变得"," ","参数","什么","更","方法","难","节"],"title":"保守地使用 PREFERRED PARAMETER","title_tokens":["保守","parameter","使用"," ","preferred","地"]},{"location":"archives/ABAP-guide-zh/#returnexport-change","text":"ABAP 整洁之道 > 目录 > 方法 > 参数数目 > 本节 好的方法只做_一件事_，而这也应该反映在方法恰好只返回一个值。如果方法的输出参数相互之间_没有_联系，则说明您的方法做了多件事，则应该对其进行拆分。 在某些情况下，输出是由多件事组成的逻辑实体。通过返回结构或对象可以很容易表示： TYPES : BEGIN OF check_result , result TYPE result_type , failed_keys TYPE / bobf / t_frw_key , messages TYPE / bobf / t_frw_message , END OF check_result . METHODS check_business_partners IMPORTING business_partners TYPE business_partners RETURNING VALUE ( result ) TYPE check_result . 而不是 \" anti-pattern METHODS check_business_partners IMPORTING business_partners TYPE business_partners EXPORTING result TYPE result_type failed_keys TYPE / bobf / t_frw_key messages TYPE / bobf / t_frw_message . 特别是与多个 EXPORTING 参数相比，在该方法中人们可以使用函数式调用，您可以不考虑 IS SUPPLIED ，并且避免出现人们意外忘记检索重要的 ERROR_OCCURRED 信息的情况。 不使用，而是考虑根据有意义的调用模式拆分方法去替代多个可选的输出参数： TYPES : BEGIN OF check_result , result TYPE result_type , failed_keys TYPE / bobf / t_frw_key , messages TYPE / bobf / t_frw_message , END OF check_result . METHODS check IMPORTING business_partners TYPE business_partners RETURNING VALUE ( result ) TYPE result_type . METHODS check_and_report IMPORTING business_partners TYPE business_partners RETURNING VALUE ( result ) TYPE check_result .","text_tokens":["出现","不是","该","则",">","目录","情况","business","keys","函数","report","式","也","做","这","您","methods","本","检索",",","模式","messages","并且","容易","考虑","人们","替代","结构","，","调用","重要","整洁"," ","表示","failed",".","下","supplied","一件","是","意义","恰好","某些","types","message",")","\"","(","好","type","is","联系","而","。","如果","由","说明","pattern","值","_","error","应该","避免","使用","逻辑","/","t","方法","没有","通过","bobf","anti","节","result","多个","returning","多件","importing","可以","在","返回","frw","其","的","相互","可选","了","：","特别","很","-","忘记","check","事","相互之间","对象","and","exporting","中","value","去","begin","意外","key","拆分","输出",":","反映","end","partners","或","数目","根据","进行","之间","occurred","相比","对","避免出现","实体","与","之道","组成","一个","而是","只","of","有","abap","参数","不","信息"],"title":"RETURN、EXPORT 或 CHANGE 恰有一个参数","title_tokens":["或","export","、","return","恰有"," ","一个","参数","change"]},{"location":"archives/ABAP-guide-zh/#_70","text":"ABAP 整洁之道 > 目录 > 方法 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","方法","节"],"title":"参数类型","title_tokens":["类型","参数"]},{"location":"archives/ABAP-guide-zh/#returning-exporting","text":"ABAP 整洁之道 > 目录 > 方法 > 参数类型 > 本节 METHODS square IMPORTING number TYPE i RETURNING VALUE ( result ) TYPE i . DATA ( result ) = square ( 42 ). 而不是毫无必要地加长 \" anti-pattern METHODS square IMPORTING number TYPE i EXPORTING result TYPE i . square ( EXPORTING number = 42 IMPORTING result = DATA ( result ) ). RETURNING 不仅可以使调用更短，还允许使用方法链并防止 相同输入和输出错误 。","text_tokens":["result","类型","returning","不是","number","毫无",">","目录","importing","可以","防止",")","\"","错误","(","还","type","允许","methods","i","而","本","加长","并","。","不仅","必要","square","和","data","之道","-","pattern","短","exporting","=","输入","value","，","调用","abap","使","使用","整洁","相同"," ","参数","输出","更","42","方法",".","地","链","anti","节"],"title":"RETURNING 优于 EXPORTING","title_tokens":["returning","优于"," ","exporting"]},{"location":"archives/ABAP-guide-zh/#returning","text":"ABAP 整洁之道 > 目录 > 方法 > 参数类型 > 本节 尽管 ABAP 语言文档和性能指南有不一样的说法，但我们很少遇到在 VALUE 参数中传递大表或深度嵌套表_确实_导致性能问题的情况。因此，我们建议正常使用 METHODS get_large_table RETURNING VALUE ( result ) TYPE / clean / some_table_type . METHOD get_large_table . result = me -> large_table . ENDMETHOD . DATA ( my_table ) = get_large_table ( ). 只有在您的个别情况有实际证据（= 不良的性能衡量）时，您才应该使用更繁琐的过程式调用 \" anti-pattern METHODS get_large_table EXPORTING result TYPE / dirty / some_table_type . METHOD get_large_table . result = me -> large_table . ENDMETHOD . get_large_table ( IMPORTING result = DATA ( my_table ) ). 本节与 ABAP Programming Guidelines 和代码分析器检查相矛盾，二者都建议应通过引用导出大表，以避免性能下降。但我们始终未能重现任何性能下降和内存不足情况，也未收到有关内核优化（通常可提高 RETURNING 性能）的通知。","text_tokens":["未能","嵌套",">","内存","目录","重现","情况","证据","确实","提高","式","以","也","您","methods","本","table","get","相","说法","时","指南","=","，","个别情况","调用","不良","整洁"," ","表","遇到","导致",".","衡量","large","引用",")","\"","(","type","导出","method","内核","。","建议","过程","可","data","通常","pattern","语言","my","_","但","任何","应该","避免","分析器","使用","/","更","方法","通过","优化","尽管","anti","内存不足","节","result","类型","returning","因此","一样","importing","问题","在","的","个别","别情","矛盾","不足","正常","收到","性能","和","endmethod","-","clean","传递","通知","应","exporting","有关","中","代码","value","检查","都","大表","下降","me","或","很少","才","我们","实际","文档","只有","（","some","深度","与","programming","）","之道","dirty","始终","二者","有","abap","繁琐","本节","guidelines","未","参数","不","分析"],"title":"RETURNING 大表通常没有问题","title_tokens":["returning","通常","大表"," ","没有","问题"]},{"location":"archives/ABAP-guide-zh/#returning-exporting-changing","text":"ABAP 整洁之道 > 目录 > 方法 > 参数类型 > 本节 METHODS copy_class IMPORTING old_name TYPE seoclsname new name TYPE secolsname RETURNING VALUE ( result ) TYPE copy_result RAISING / clean / class_copy_failure . 而不是混合使用，例如 \" anti-pattern METHODS copy_class ... RETURNING VALUE ( result ) TYPE vseoclass EXPORTING error_occurred TYPE abap_bool CHANGING correction_request TYPE trkorr package TYPE devclass . 不同种类的输出参数表明该方法做了多件事。这使读者感到困惑，并使调用该方法变得不必要的复杂。 此规则的可接受的例外情况是使用他们的输入构建他们的输出： METHODS build_tree CHANGING tokens TYPE tokens RETURNING VALUE ( result ) TYPE REF TO tree . 然而，可以把输入对象化参数使这些内容更加清晰： METHODS build_tree IMPORTING tokens TYPE REF TO token_stack RETURNING VALUE ( result ) TYPE REF TO tree .","text_tokens":["tokens","不是","该",">","目录","情况","package","secolsname","build","做","methods","本","token","接受","必要","devclass","更加","stack","，","ref","调用","整洁"," ",".","是","例外情况","old","trkorr","copy","他们",")","\"","(","correction","class","type","清晰","而","表明","例如","。","可","tree","这些","pattern","_","error","name","构建","使","使用","变得","不必","/","不同","方法","anti","节","result","类型","returning","多件","复杂","importing","可以","感到","的","规则","了","混合","bool","：","不必要","-","to","clean","事","对象","exporting","value","new","vseoclass","输出","changing","此","这使","种类","...","occurred","seoclsname","raising","request","把","并","读者","failure","然而","之道","对象化","内容","输入","困惑","abap","例外","参数"],"title":"单独使用 RETURNING 或 EXPORTING 或 CHANGING，而不要组合使用","title_tokens":["，","returning","或","不要","changing","使用"," ","而","exporting","单独","组合"]},{"location":"archives/ABAP-guide-zh/#changing","text":"ABAP 整洁之道 > 目录 > 方法 > 参数类型 > 本节 CHANGING 应预留给以下情况：现有局部变量已填充仅在某些位置需要更新： METHODS update_references IMPORTING new_reference TYPE / bobf / conf_key CHANGING bo_nodes TYPE root_nodes . METHOD update_references . LOOP AT bo_nodes REFERENCE INTO DATA ( bo_node ). bo_node -> reference = new_reference . ENDLOOP . ENDMETHOD . 不要强迫调用者仅仅为了提供 CHANGING 参数而引入不必要的局部变量。不要使用 CHANGING 参数来初始填充先前为空的变量。","text_tokens":["into",">","nodes","目录","情况","methods","本","引入","必要","用者","初始","loop","=","现有","调用","conf","整洁"," ",".","更新","已","某些","为了","为空","root","给","位置","局部变量",")","(","type","而","method","来","。","data","_","填充","以下","使用","不必","/","方法","bobf","节","类型","importing","在","的","调用者","bo","：","不必要","endmethod","-","预留","应","update","node","变量","仅","new","key","提供","强迫","changing","reference","仅仅","局部","endloop","需要","先前","references","不要","之道","at","abap","参数"],"title":"在合适时保守地使用 CHANGING","title_tokens":["保守","地","使用","changing"," ","时","在","合适"]},{"location":"archives/ABAP-guide-zh/#_71","text":"ABAP 整洁之道 > 目录 > 方法 > 参数类型 > 本节 布尔输入参数通常表示一个方法做_两_件事，而不是一件。 \" anti-pattern METHODS update IMPORTING do_save TYPE abap_bool . 同样，使用单个（因此未命名的）布尔参数的方法调用往往会混淆参数的含义。 \" anti-pattern update ( abap_true ). \" what does 'true' mean? synchronous? simulate? commit? 拆分方法可以简化方法的代码并更好地描述不同的意图 update_without_saving ( ). update_and_save ( ). 普遍认为，对布尔变量使用 setter 是可以的： METHODS set_is_deleted IMPORTING new_value TYPE abap_bool . 有关详细信息，请参阅 1 2 3","text_tokens":["参阅","不是","?",">","目录","deleted","do","请参阅","做","methods","本","commit","does","without","，","调用","整洁"," ","表示","件",".","1","详细","一件","是",")","\"","(","简化","type","is","而","。","mean","通常","pattern","含义","'","_","认为","往往","使用","不同","方法","anti","节","类型","更好","因此","simulate","importing","混淆","可以","命名","的","会","bool","：","两","save","-","单个","set","事","and","update","what","有关","代码","3","value","变量","saving","new","拆分","地","true","意图","未命名","synchronous","对","并","（","普遍认为","同样","setter","）","描述","之道","一个","输入","布尔","abap","参数","普遍","详细信息","2","信息"],"title":"拆分方法而非使用布尔输入参数","title_tokens":["布尔","非","使用","拆分","而","参数","方法","输入"]},{"location":"archives/ABAP-guide-zh/#_72","text":"ABAP 整洁之道 > 目录 > 方法 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","方法","节"],"title":"参数名称","title_tokens":["名称","参数"]},{"location":"archives/ABAP-guide-zh/#returning-result","text":"ABAP 整洁之道 > 目录 > 方法 > 参数名称 > 本节 好的方法名称通常可以让 RETURNING 参数不需要自己的名称这样的好效果。参数名只需要模仿方法名称或重复一些显而易见的内容。 重复成员名称甚至可能产生冲突，需要添加多余的 me-> 才能解决。 \" anti-pattern METHODS get_name RETURNING VALUE ( name ) TYPE string . METHOD get_name . name = me -> name . ENDMETHOD . 在此类情况下，只需把参数命名为 RESULT ，或者类似于 RV_RESULT 的名称（如果您喜欢用匈牙利表示法）。 例如在针对方法链返回 me 的方法中，或在创建某些对象但不返回创建的实体而仅返回其键值的方法中，如果参数代表的含义_不_明确，则需要为 RETURNING 参数起个名字。","text_tokens":["重复","则","起个",">","目录","情况","这样","模仿","methods","添加","类似","本","您","get","为","=","冲突","表示法","，","名字","string","整洁"," ","表示","显而易见","代表",".","下","匈牙利","某些","显而","一些",")","\"","(","键值","好","type","method","例如","。","如果","成员","而仅","名","通常","或者","pattern","rv","含义","_","但","name","易见","需","方法","链","anti","节","result","returning","可以","在","多余","返回","命名","效果","其","的","可能","产生","endmethod","-","对象","明确","中","value","喜欢","让","针对","创建","自己","me","或","用","此类情况","甚至","把","需要","实体","（","才能","）","内容","之道","于","只","解决","abap","参数","不","名称","此类"],"title":"考虑调用 RETURNING 参数 RESULT","title_tokens":["result","returning","调用","考虑"," ","参数"]},{"location":"archives/ABAP-guide-zh/#_73","text":"ABAP 整洁之道 > 目录 > 方法 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","方法","节"],"title":"参数初始化","title_tokens":["初始化","初始","参数"]},{"location":"archives/ABAP-guide-zh/#exporting_1","text":"ABAP 整洁之道 > 目录 > 方法 > 参数初始化 > 本节 引用参数是指可预先填充的现有内存区域。清除或覆盖它们以提供可靠的数据： METHODS square EXPORTING result TYPE i . \" clear METHOD square . CLEAR result . \" ... ENDMETHOD . \" overwrite METHOD square . result = cl_abap_math => square ( 2 ). ENDMETHOD . 代码分析器和检查管理器会指出从 EXPORTING 变量未写入值。使用这些静态检查来避免这个可能相当模糊的错误源。","text_tokens":["overwrite","理器",">","内存","目录","它们","写入","这个","以","methods","本","指出","相当","模糊","初始","清除","=","现有","整洁"," ","静态",".","引用","是","区域","源","数据",")","\"","(","type","method","来","。","可","这些","指","值","_","math","填充","避免","分析器","使用","可靠","从","方法","节","result","cl","初始化","管理","覆盖","的","可能","i","会","：","和","endmethod","exporting","预先","代码","检查","变量","提供","或","...","错误","clear","square","之道","abap","未","参数","管理器","2","分析"],"title":"清除或覆盖 EXPORTING 引用参数","title_tokens":["引用","或","清除"," ","参数","exporting","覆盖"]},{"location":"archives/ABAP-guide-zh/#_74","text":"ABAP 整洁之道 > 目录 > 方法 > 参数初始化 > 本节 通常，在方法体里，类型和数据声明之后第一件事把参数清空是一个好主意。这使该语句易于辨别，并避免了后续语句意外使用原来的值。 但是，某些参数配置可能会使用相同的变量作为输入和输出。在这种情况下，之前的 CLEAR 语句会在使用输入值之前将其删除，从而产生错误的结果。 \" anti-pattern DATA value TYPE i . square_dirty ( EXPORTING number = value IMPORTING result = value ). METHOD square_dirty . CLEAR result . result = number * number . ENDMETHOD . 考虑用 RETURNING 替换 EXPORTING 来重新设计此类方法。还可以考虑在单个结果计算语句中覆盖 EXPORTING 参数。如果都不适合，只能稍后执行 CLEAR 。","text_tokens":["但是","该",">","目录","情况","从而","第一","还","本","初始","语句","辨别","考虑","=","，","相同","整洁"," ",".","下","重新","一件","是","易于","某些","数据",")","\"","(","好","type","method","替换","来","。","后续","如果","这种","data","通常","原来","pattern","值","配置","_","作为","避免","结果","使用","方法","anti","节","result","类型","returning","稍后","执行","importing","初始化","可以","在","覆盖","其","的","适合","可能","会","i","第一件","了","产生","体里","之后","和","endmethod","-","单个","只能","事","exporting","中","value","变量","主意","意外","都","输出","计算","之前","设计","删除","将","number","用","这使","错误","clear","把","并","square","声明","之道","一个","dirty","输入","*","abap","参数","不","清空","此类"],"title":"如果输入和输出可能相同则要当心","title_tokens":["要","和","则","当心","相同","可能","输出","如果","输入"]},{"location":"archives/ABAP-guide-zh/#value","text":"ABAP 整洁之道 > 目录 > 方法 > 参数初始化 > 本节 通过 VALUE 传递的参数会开辟新的独立内存，这些内存区域定义时为空。不要再清除这些区域： METHODS square EXPORTING VALUE ( result ) TYPE i . METHOD square . \" no need to CLEAR result ENDMETHOD . RETURNING 参数始终是 VALUE 参数，因此您永远不需要清除这些参数： METHODS square RETURNING VALUE ( result ) TYPE i . METHOD square . \" no need to CLEAR result ENDMETHOD .","text_tokens":["result","returning","是","区域","因此",">","内存","目录","独立","定义","初始化",")","\"","(","clear","的","type","您","methods","会","再","本","i","method","开辟","。","需要","：","square","这些","初始","endmethod","不要","之道","清除","no","to","传递","始终","时为","exporting","永远","value","need","，","abap","整洁"," ","参数","不","方法","通过","空",".","新","节"],"title":"勿清除 VALUE 参数","title_tokens":["清除","勿"," ","参数","value"]},{"location":"archives/ABAP-guide-zh/#_75","text":"ABAP 整洁之道 > 目录 > 方法 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","方法","节"],"title":"方法体","title_tokens":["体","方法"]},{"location":"archives/ABAP-guide-zh/#_76","text":"ABAP 整洁之道 > 目录 > 方法 > 方法体 > 本节 一个方法应该做一件事，且只能做一件事。应该采用最好的方法做这件事。 如果满足以下条件，一个方法可能做一件事： 输入参数很少 不包含布尔参数 只有一个输出参数 很小 将抽象降一级 您无法提取有意义的其他方法 您无法将其语句分组为有意义的部分","text_tokens":["一件","很少","将","意义",">","目录","部分","体","提取","采用","其","的","做","可能","您","只有","本","。","如果","：","很小","语句","只能","之道","最好","包含","一个","事","为","且","降","输入","其他","应该","，","以下","条件","布尔","有","abap","整洁","满足"," ","参数","输出","无法","不","抽象","方法","一级","这件","分组","节"],"title":"做且仅做一件事，把它做好","title_tokens":["它","，","一件","仅","做好","做","把","事","做且"]},{"location":"archives/ABAP-guide-zh/#_77","text":"ABAP 整洁之道 > 目录 > 方法 > 方法体 > 本节 由于 做且仅做一件事，把它做好 规则的专业化要求，方法应该遵循其建立的愉快路径，或在无法建立愉快路径的情况下采用其他错误处理方式，但也可能出现第三种情况。 \" anti-pattern METHOD append_xs . IF input > 0 . DATA ( remainder ) = input . WHILE remainder > 0 . result = result && `X` . remainder = remainder - 1 . ENDWHILE . ELSEIF input = 0 . RAISE EXCEPTION / dirty / sorry_cant_do ( ). ELSE . RAISE EXCEPTION cx_sy_illegal_argument ( ). ENDIF . ENDMETHOD . 可以分解为 METHOD append_xs . validate ( input ). DATA ( remainder ) = input . WHILE remainder > 0 . result = result && `X` . remainder = remainder - 1 . ENDWHILE . ENDMETHOD . METHOD validate . IF input = 0 . RAISE EXCEPTION / dirty / sorry_cant_do ( ). ELSEIF input < 0 . RAISE EXCEPTION cx_sy_illegal_argument ( ). ENDIF . ENDMETHOD . 或者，强调验证部分 METHOD append_xs . IF input > 0 . result = append_xs_without_check ( input ). ELSEIF input = 0 . RAISE EXCEPTION / dirty / sorry_cant_do ( ). ELSE . RAISE EXCEPTION cx_sy_illegal_argument ( ). ENDIF . ENDMETHOD . METHOD append_xs_without_check . DATA ( remainder ) = input . WHILE remainder > 0 . result = result && `X` . remainder = remainder - 1 . ENDWHILE . ENDMETHOD .","text_tokens":["强调","出现",">","目录","处理","愉快","情况","do","也","做","建立","本","由于","分解","它","append","为","第三","cant","错误处理","without","=","，","elseif","0","整洁","无法"," ",".","1","下","一件","部分","体","sorry",")","\"","argument","(","validate","raise","要求","method","。","`","&&","while","data","方式","或者","pattern","illegal","_","其他","做且","但","应该","sy","验证","/","方法","input","anti","节","result","if","可以","在","其","的","做好","可能","exception","规则","专业化","三种","endmethod","-","check","事","<","专业","x","仅","路径","else","第三种","endwhile","xs","或","遵循","错误","采用","把","remainder","之道","dirty","cx","abap","endif"],"title":"关注愉快路径或错误处理，但非两者兼顾","title_tokens":["，","或","非","路径","关注","兼顾","处理","愉快","错误处理","两者","错误","但"]},{"location":"archives/ABAP-guide-zh/#_78","text":"ABAP 整洁之道 > 目录 > 方法 > 方法体 > 本节 方法中的语句应处于方法本身抽象级别的下一级。相应地，这些语句都应处于相同的抽象级别。 METHOD create_and_publish . post = create_post ( user_input ). post -> publish ( ). ENDMETHOD . 而不是混合使用低级（ trim 、 to_upper 、...）和高级（ publish 、...）概念，例如 \" anti-pattern METHOD create_and_publish . post = NEW blog_post ( ). DATA ( user_name ) = trim ( to_upper ( sy - uname ) ). post -> set_author ( user_name ). post -> publish ( ). ENDMETHOD . 找出正确抽象级别的可靠方法是：让该方法的作者用简短的几个单词来解释该方法的功能，而不需要查看代码。他列的功能项就应该是方法应调用的子方法或应执行的语句。","text_tokens":["不是","该",">","目录","uname","查看","本","项","单词","语句","子","=","，","调用","相同","整洁"," ",".","正确","下","是","概念","体",")","\"","(","create","而","method","例如","来","。","解释","这些","user","upper","data","publish","pattern","_","name","应该","sy","使用","可靠","方法","input","anti","节","处于","blog","功能","执行","trim","就","的","混合","：","和","endmethod","-","to","set","and","应","本身","中","代码","new","几个","让","author","都","作者","抽象","post","地","高级","级别","用","...","简短","、","需要","（","或应","）","之道","他列","找出","abap","相应","不","一级","低级"],"title":"将抽象降一级","title_tokens":["抽象","一级","降","将"]},{"location":"archives/ABAP-guide-zh/#_79","text":"ABAP 整洁之道 > 目录 > 方法 > 方法体 > 本节 方法应少于 20 条语句，最好为 3 至 5 条语句。 METHOD read_and_parse_version_filters . DATA ( active_model_version ) = read_random_version_under ( model_guid ). DATA ( filter_json ) = read_model_version_filters ( active_model_version - guid ). result = parse_model_version_filters ( filter_json ). ENDMETHOD . 仅通过下面的 DATA 声明就足以看出相关的方法不止做一件事： \" anti-pattern DATA : class TYPE vseoclass , attributes TYPE seoo_attributes_r , methods TYPE seoo_methods_r , events TYPE seoo_events_r , types TYPE seoo_types_r , aliases TYPE seoo_aliases_r , implementings TYPE seor_implementings_r , inheritance TYPE vseoextend , friendships TYPE seof_friendships_r , typepusages TYPE seot_typepusages_r , clsdeferrds TYPE seot_clsdeferrds_r , intdeferrds TYPE seot_intdeferrds_r , attribute TYPE vseoattrib , method TYPE vseomethod , event TYPE vseoevent , type TYPE vseotype , alias TYPE seoaliases , implementing TYPE vseoimplem , friendship TYPE seofriends , typepusage TYPE vseotypep , clsdeferrd TYPE vseocdefer , intdeferrd TYPE vseoidefer , new_clskey_save TYPE seoclskey . 当然，在某些情况下，进一步缩小较大的方法没有任何意义。这是完全可以的，只要该方法始终 专注于一件事 ： METHOD decide_what_to_do . CASE temperature . WHEN burning . result = air_conditioning . WHEN hot . result = ice_cream . WHEN moderate . result = chill . WHEN cold . result = skiing . WHEN freezing . result = hot_cocoa . ENDCASE . ENDMETHOD . 但是，验证冗长的代码是否隐藏了更合适的模式仍然有意义： METHOD decide_what_to_do . result = VALUE # ( spare_time_activities [ temperature = temperature ] OPTIONAL ). ENDMETHOD . 将方法切割过小可能会对性能产生不良影响，因为这会增加方法调用的次数。 _顾及性能_一节 提供了有关如何平衡整洁代码和性能的指南。","text_tokens":["random","case","vseotype","进一步","vseoextend","该","moderate","但是",">","seoclskey","目录","情况","do","cocoa","小","attributes","这是","做","methods","events","本","一节",",","模式","typepusage","增加","vseomethod","语句","最好","seot","attribute","为","air","隐藏","不止","[","vseoidefer","=","#","指南","json","inheritance","，","read","调用","不良","整洁","when"," ","看出","下面","aliases","version",".","下","较大","一件","意义","seof","某些","alias","types","体","conditioning","seoaliases",")","\"","(","这会","class","type","相关","method","friendships","。","至","chill","time","skiing","optional","data","under","cold","pattern","event","hot","合适","_","clskey","任何","验证","更","方法","通过","没有","anti","节","条","result","vseoattrib","vseotypep","次数","ice","vseoevent","vseocdefer","专注","可以","在","endcase","切割","顾及","只要","model","seoo","clsdeferrd","就","的","过","可能","会","activities","seofriends","了","产生","：","save","vseoimplem","]","endmethod","-","to","cream","性能","和","spare","事","平衡","and","active","应","decide","一步","what","seor","3","代码","value","有关","clsdeferrds","仅","vseoclass","new","temperature","提供","filter","implementings","仍然",":","将","guid","是否","因为","5","对","20","freezing","缩小","implementing","声明","完全","之道","r","少于","不良影响","intdeferrds","始终","intdeferrd","filters","足以","于","burning","影响","parse","typepusages","friendship","有","abap","如何","冗长","当然"],"title":"保持方法精简","title_tokens":["保持","方法","精简"]},{"location":"archives/ABAP-guide-zh/#_80","text":"ABAP 整洁之道 > 目录 > 方法 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","方法","节"],"title":"控制流","title_tokens":["控制流","控制"]},{"location":"archives/ABAP-guide-zh/#_81","text":"ABAP 整洁之道 > 目录 > 方法 > 控制流 > 本节 尽早验证并处理失败情景： METHOD do_something . IF input IS INITIAL . RAISE EXCEPTION cx_sy_illegal_argument ( ). ENDIF . DATA ( massive_object ) = build_expensive_object_from ( input ). result = massive_object -> do_some_fancy_calculation ( ). ENDMETHOD . 后面再进行验证更难以辨别和理解，并且可能已经浪费了很多资源。 \" anti-pattern METHOD do_something . DATA ( massive_object ) = build_expensive_object_from ( input ). IF massive_object IS NOT BOUND . \" happens if input is initial RAISE EXCEPTION cx_sy_illegal_argument ( ). ENDIF . result = massive_object -> do_some_fancy_calculation ( ). ENDMETHOD .","text_tokens":["result","资源","massive","后面","something",">","if","目录","处理","进行","控制","很多",")","\"","do","argument","(","expensive","尽早","build","raise","is","可能","再","本","并","method","exception","。","了","some","from","情景","并且","：","fancy","浪费","和","endmethod","data","之道","-","辨别","理解","失败","已经","initial","illegal","calculation","pattern","=","_","难以","happens","，","cx","sy","bound","abap","控制流","验证","整洁"," ","更","方法",".","input","not","endif","anti","节","object"],"title":"快速失败","title_tokens":["快速","失败"]},{"location":"archives/ABAP-guide-zh/#check-return","text":"ABAP 整洁之道 > 目录 > 方法 > 控制流 > 本节 如果输入不符合预期，是否应使用 CHECK 或 RETURN 退出方法，人们对此并未达成共识。 尽管 CHECK 显式提供了较短的语法， METHOD read_customizing . CHECK keys IS NOT INITIAL . \" do whatever needs doing ENDMETHOD . 该语句的名称未能说明条件失败时会发生什么情况，因此长格式可能更易于人们理解： METHOD read_customizing . IF keys IS INITIAL . RETURN . ENDIF . \" do whatever needs doing ENDMETHOD : 通过反向验证并采用单向控制流，完全可以避免此类问题 METHOD read_customizing . IF keys IS NOT INITIAL . \" do whatever needs doing ENDIF . ENDMETHOD : 无论如何，请考虑不返回任何内容是否真的合适。方法应该提供有意义的结果，即已填充的返回参数或异常。在许多情况下，不返回任何内容都类似于返回 null ，应该避免这种情况。 ABAP Programming Guidelines 中的_退出过程_一节 建议在此实例中使用 CHECK 。社区讨论表明该语句如此不清晰，许多人无法理解程序的行为。","text_tokens":["未能","该","异常","社区",">","目录","如此","情况","keys","do","单向","发生","类似","本","长","一节","语法","语句","考虑","理解","失败","initial","人们","人","无论","程序","，","read","符合","真的","整洁","无法"," ",".","即","needs","下","显式","实例","时会","已","意义","易于","doing","控制","\"","达成","is","清晰","表明","method","。","如果","过程","建议","这种","说明","格式","合适","_","填充","任何","应该","避免","条件","结果","使用","验证","更","方法","通过","尽管","节","null","请","因此","if","可以","问题","在","返回","许多","的","行为","可能","退出","了","：","反向","endmethod","check","对此","customizing","应","中","控制流","都","提供","讨论",":","无论如何","或","return","此","是否","并未","较","采用","并","programming","完全","内容","之道","短","输入","于","whatever","如何","有","abap","共识","guidelines","预期","什么","参数","不","not","名称","endif","此类"],"title":"CHECK 对 RETURN","title_tokens":["return","check"," ","对"]},{"location":"archives/ABAP-guide-zh/#check","text":"ABAP 整洁之道 > 目录 > 方法 > 控制流 > 本节 不要在方法的初始化部分以外使用 CHECK 。该语句在不同位置的行为方式不同，可能会造成不明确、意想不到的影响。 例如， LOOP 中的 CHECK 结束当前迭代并继续下一个 ；人们原本可能期望它结束方法或退出循环。 基于 ABAP Programming Guidelines 中的_退出过程_一节 。请注意，这与 循环中 CHECK 的关键字引用 相矛盾。","text_tokens":["引用","意想","该","或","迭代","以外","请",">","目录","控制","部分","初始化","在","位置","循环","的","行为","注意","继续","、","意想不到","不到","原本","可能","会","想不到","本","例如","并","一节","。","这","退出","；","矛盾","过程","programming","与","它","基于","初始","语句","不要","之道","当前","关键","check","方式","loop","一个","相","人们","明确","造成","中","_","关键字","影响","，","abap","控制流","使用","整洁","guidelines"," ","结束","期望","不同","不","方法","下","节"],"title":"避免在其他位置使用 CHECK","title_tokens":["避免","使用","check"," ","在","其他","位置"]},{"location":"archives/ABAP-guide-zh/#_82","text":"ABAP 整洁之道 > 目录 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","节"],"title":"错误处理","title_tokens":["错误处理","错误","处理"]},{"location":"archives/ABAP-guide-zh/#_83","text":"ABAP 整洁之道 > 目录 > 错误处理 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","处理","本","错误处理","错误","节"],"title":"消息","title_tokens":["消息"]},{"location":"archives/ABAP-guide-zh/#_84","text":"ABAP 整洁之道 > 目录 > 错误处理 > 消息 > 本节 要使通过事务 SE91 的使用位置搜索更容易找到消息，请使用以下模式： MESSAGE e001 ( ad ) INTO DATA ( message ). 如果不需要变量 message ，请添加编译指示 ##NEEDED ： MESSAGE e001 ( ad ) INTO DATA ( message ) ##NEEDED . 避免使用以下模式： \" anti-pattern IF 1 = 2 . MESSAGE e001 ( ad ). ENDIF . 这是一种反面模式，因为： - 其中包含不可达代码。 - 其测试的条件永远不可能真正实现对等。","text_tokens":["找到","反面","实现","请","into",">","事务","目录","处理","指示","##","if","message","因为","一种","位置",")","错误","\"","(","其","的","编译","对","这是","可能","需要","添加","本","。","如果","模式","测试","：","真正","容易","se91","搜索","data","之道","-","ad","包含","pattern","错误处理","永远","=","代码","达","以下","，","要","变量","避免","e001","其中","条件","needed","abap","使","使用","整洁"," ","等","更","消息","不","2","通过",".","1","不可","endif","anti","节"],"title":"使消息易于查找","title_tokens":["使","消息","查找","易于"]},{"location":"archives/ABAP-guide-zh/#_85","text":"ABAP 整洁之道 > 目录 > 错误处理 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","处理","本","错误处理","错误","节"],"title":"返回代码","title_tokens":["返回","代码"]},{"location":"archives/ABAP-guide-zh/#_86","text":"ABAP 整洁之道 > 目录 > 错误处理 > 返回代码 > 本节 METHOD try_this_and_that . RAISE EXCEPTION NEW cx_failed ( ). ENDMETHOD . 而不是 \" anti-pattern METHOD try_this_and_that . error_occurred = abap_true . ENDMETHOD . 与返回代码相比，异常有许多优点： 异常能保持方法签名的干净整洁：以 RETURNING 参数形式返回方法结果，同时仍抛出异常。返回代码使用其他参数进行错误处理，会污染您的签名。 调用者不必立即做出反应，只需按愉快的路径写下代码。异常处理 CATCH 可在方法的末尾执行，也可以完全在外部执行。 异常可以通过其属性和方法提供有关错误的详细信息。而返回代码则要求您自行设计另一个解决方案，例如还要返回日志。 开发环境通过语法错误提醒调用者处理异常。而在没有任何人注意的情况下，返回代码可能会被不小心忽略。","text_tokens":["不是","异常","则","环境",">","目录","处理","愉快","情况","形式","开发","末尾","外部","以","也","您","本","this","写下","保持","语法","用者","另","错误处理","=","属性","，","干净","调用","任何人","整洁"," ","failed",".","详细","下","反应","立即",")","\"","(","raise","而","method","要求","例如","日志","。","可","能","pattern","语法错误","抛出","_","error","其他","任何","结果","使用","签名","不必","需","方法","通过","没有","anti","节","解决方案","returning","做出","执行","何人","自行设计","按","可以","在","小心","返回","许多","其","的","调用者","可能","会","exception","：","catch","和","endmethod","-","仍","忽略","and","方案","有关","代码","同时","new","污染","路径","提供","that","true","设计","自行","进行","occurred","错误","相比","注意","提醒","与","完全","之道","一个","优点","被","只","cx","有","abap","解决","还要","参数","详细信息","不","信息","try"],"title":"异常优于返回代码","title_tokens":["返回","代码","优于","异常"]},{"location":"archives/ABAP-guide-zh/#_87","text":"ABAP 整洁之道 > 目录 > 错误处理 > 返回代码 > 本节 如果确实必须使用返回代码，例如因为调用了不在自己控制范围内的函数和较旧的代码，务必确保别让故障溜走。 DATA : current_date TYPE string , response TYPE bapiret2 . CALL FUNCTION 'BAPI_GET_CURRENT_DATE' IMPORTING current_date = current_date CHANGING response = response . IF response - type = 'E' . RAISE EXCEPTION NEW / clean / some_error ( ); ENDIF .","text_tokens":["current","e",";","changing",">","if","目录","处理","确保","控制","溜走","importing","因为","response","在","返回","确实","错误","函数","较","(",")","的","内","旧","function","type","call","raise","本","例如","exception","。","了","如果",",","some","必须",":","bapi","别","和","故障","data","之道","-","clean","get","错误处理","务必","'","代码","范围","_","=","error","，","new","调用","让","abap","使用","string","整洁"," ","/","不","date","自己",".","endif","节","bapiret2"],"title":"别让故障溜走","title_tokens":["让","溜走","别","故障"]},{"location":"archives/ABAP-guide-zh/#_88","text":"ABAP 整洁之道 > 目录 > 错误处理 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","处理","本","错误处理","错误","节"],"title":"异常","title_tokens":["异常"]},{"location":"archives/ABAP-guide-zh/#_89","text":"ABAP 整洁之道 > 目录 > 错误处理 > 异常 > 本节 \" anti-pattern METHODS entry_exists_in_db IMPORTING key TYPE char10 RAISING cx_not_found_exception . 如果情况是正常、有效的，应该使用常规的结果参数进行处理。 METHODS entry_exists_in_db IMPORTING key TYPE char10 RETURNING VALUE ( result ) TYPE abap_bool . 异常应该反映错误情况，留到您不希望看到的情况下使用。 METHODS assert_user_input_is_valid IMPORTING user_input TYPE string RAISING cx_bad_user_input . 误用异常会误导读者认为实际上一切都顺利的地方出了问题。异常也比正常代码慢得多，因为它们需要进行构建，往往要收集大量上下文信息。","text_tokens":["异常",">","目录","处理","情况","比","它们","exists","也","您","methods","本","实际上","留到","错误处理","出","bad","found","，","常规","string","整洁"," ","assert",".","下","收集","是","in","一切",")","\"","(","有效","type","is","。","如果","user","下文","pattern","上下","_","应该","要","认为","结果","构建","往往","使用","input","anti","节","大量","result","returning","importing","问题","误导","的","会","exception","了","误用","正常","bool","-","代码","慢得","value","key","都","valid","db","反映","进行","看到","因为","错误","raising","多","、","实际","需要","char10","上下文","读者","希望","之道","cx","地方","abap","entry","参数","不","not","信息","顺利"],"title":"异常针对的是错误，而不是正常情况","title_tokens":["，","的","是","不是","异常","而","针对","情况","正常","错误"]},{"location":"archives/ABAP-guide-zh/#_90","text":"ABAP 整洁之道 > 目录 > 错误处理 > 异常 > 本节 TRY . get_component_types ( ). CATCH cx_has_deep_components_error . ENDTRY . 过时的非基于类的异常与返回代码具有相同的功能，不应再使用。 \" anti-pattern get_component_types ( EXCEPTIONS has_deep_components = 1 OTHERS = 2 ).","text_tokens":["非","异常","功能",">","目录","处理","components","types","返回",")","错误","\"","(","过时","的","deep","再","本","。","与","catch","类","基于","component","-","之道","get","pattern","others","错误处理","不应","代码","_","error","=","，","has","cx","abap","使用","相同","整洁","exceptions"," ","2",".","endtry","具有","1","anti","try","节"],"title":"使用基于类的异常","title_tokens":["类","基于","的","异常","使用"]},{"location":"archives/ABAP-guide-zh/#_91","text":"ABAP 整洁之道 > 目录 > 错误处理 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","处理","本","错误处理","错误","节"],"title":"抛出","title_tokens":["抛出"]},{"location":"archives/ABAP-guide-zh/#_92","text":"ABAP 整洁之道 > 目录 > 错误处理 > 抛出 > 本节 CLASS cx_fra_static_check DEFINITION ABSTRACT INHERITING FROM cx_static_check . CLASS cx_fra_no_check DEFINITION ABSTRACT INHERITING FROM cx_no_check . 考虑为应用程序的每种异常类型创建抽象超类，而不是直接对基础类进行子类化。允许您对_自己的_所有异常执行 CATCH 。使您可以向所有异常添加通用功能，例如特殊文本处理。 ABSTRACT 防止人们意外地直接使用这些非描述性错误。","text_tokens":["直接","类型","不是","异常","类化","功能","非","文本处理","执行",">","进行","目录","处理","可以","防止","应用","错误","特殊","通用","的","class","对","允许","您","添加","而","本","例如","所有","。","abstract","向","from","catch","文本","类","超类","这些","描述","之道","no","考虑","check","子","为","人们","错误处理","抛出","_","程序","每种","描述性","，","cx","基础","abap","使","意外","整洁","使用"," ","创建","抽象","本处","static","自己","fra",".","应用程序","地","inheriting","definition","节"],"title":"使用各自的超类","title_tokens":["的","使用","各自","超类"]},{"location":"archives/ABAP-guide-zh/#_93","text":"ABAP 整洁之道 > 目录 > 错误处理 > 抛出 > 本节 METHODS generate RAISING cx_generation_error . 在绝大多数情况下，抛出多种类型的异常没有任何用处。调用者通常既不感兴趣，也没法区分错误情况，因此经常会以相同的方式处理它们——既然如此，为什么一开始要区分它们呢？ \" anti-pattern METHODS generate RAISING cx_abap_generation cx_hdbr_access_error cx_model_read_error . 识别不同错误情况的更好解决方案是使用一种异常类型，但添加允许（但不要求）对个别错误情况做出反应的子类，如 使用子类以便调用者能够区分错误情况 中所述。","text_tokens":["异常",">","既","目录","处理","如此","情况","它们","区分","也","methods","添加","本","用者","识别","会以","用处","？","错误处理","，","read","调用","相同","整洁"," ",".","既然","所述","下","是","反应","\"","允许","要求","。","generate","通常","方式","pattern","抛出","_","error","但","任何","要","使用","不同","没有","能够","多数","anti","节","解决方案","类型","更好","绝大","一","因此","做出","为什么","generation","在","model","的","调用者","感兴趣","个别","感兴","绝大多数","以便","-","—","方案","中","hdbr","子类","没法","种类","多种类型","一种","raising","错误","不感兴趣","access","对","经常","开始","（","呢","多种","）","之道","大多数","大多","cx","解决","abap","什么","不","既然如此","如","兴趣"],"title":"抛出一种类型的异常","title_tokens":["类型","的","异常","抛出","一种"]},{"location":"archives/ABAP-guide-zh/#_94","text":"ABAP 整洁之道 > 目录 > 错误处理 > 抛出 > 本节 CLASS cx_bad_generation_variable DEFINITION INHERITING FROM cx_generation_error . CLASS cx_bad_code_composer_template DEFINITION INHERITING FROM cx_generation_error . TRY . generator -> generate ( ). CATCH cx_bad_generation_variable . log_failure ( ). CATCH cx_bad_code_composer_template INTO DATA ( bad_template_exception ). show_error_to_user ( bad_template_exception ). CATCH cx_generation_error INTO DATA ( other_exception ). RAISE EXCEPTION NEW cx_application_error ( previous = other_exception ). ENDTRY . 如果有许多不同的错误情况，则改用错误代码： CLASS cx_generation_error DEFINITION ... PUBLIC SECTION . TYPES error_code_type TYPE i . CONSTANTS : BEGIN OF error_code_enum , bad_generation_variable TYPE error_code_type VALUE 1 , bad_code_composer_template TYPE error_code_type VALUE 2 , ... END OF error_code_enum . DATA error_code TYPE error_code_type . TRY . generator -> generate ( ). CATCH cx_generation_error INTO DATA ( exception ). CASE exception -> error_code . WHEN cx_generation_error => error_code_enum - bad_generation_variable . WHEN cx_generation_error => error_code_enum - bad_code_composer_variable . ... ENDCASE . ENDTRY .","text_tokens":["case","show","则","into",">","目录","处理","情况","本",",","section","enum","other","错误处理","=","bad","，","整洁","when"," ",".","1","log","generator","types",")","definition","(","class","type","raise","如果","generate","user","data","code","抛出","_","error","不同","节","constants","generation","endcase","许多","改用","的","i","exception","from","catch","：","public","-","to","代码","value","begin","new","endtry","inheriting",":","composer","end","variable","template","...","错误","previous","application","failure","之道","错误代码","cx","of","有","abap","2","try"],"title":"使用子类以便调用者能够区分错误情况","title_tokens":["用者","调用者","区分","以便","调用","使用","子类","情况","能够","错误"]},{"location":"archives/ABAP-guide-zh/#cx_static_check","text":"ABAP 整洁之道 > 目录 > 错误处理 > 抛出 > 本节 如果预期会出现异常并可由接收者合理处理，则抛出继承自 CX_STATIC_CHECK 的可控异常：用户输入验证失败，缺少存在后备的资源，等等。 CLASS cx_file_not_found DEFINITION INHERITING FROM cx_static_check . METHODS read_file IMPORTING file_name_enterd_by_user TYPE string RAISING cx_file_not_found . 这种异常类型_必须_在方法签名中给出，并且_必须_被捕获或转发以避免语法错误。这样，用户便能够清楚看到这种异常类型，确保其不会因意外的异常而感到惊讶，并负责对错误情况做出反应。 这与 ABAP Programming Guidelines 一致，但与 Robert C. Martin 所著的 Clean Code （其中建议优先使用不可控异常）相矛盾； 异常 说明了其中的原因。","text_tokens":["出现","转发","异常","则",">","缺少","目录","处理","确保","情况","enterd","以","这样","methods","这","本","；","并且","语法","后备","给出","等等","失败","相","一致","错误处理","c","found","，","read","捕获","string","整洁"," ","by",".","继承","接收者","反应","出现异常","可控","class","合理","type","而","。","如果","建议","必须","这种","可","由","user","说明","code","优先","语法错误","抛出","负责","_","但","name","避免","其中","因","使用","验证","签名","static","方法","能够","节","资源","类型","做出","便","importing","所著","在","不会","感到","其","的","会","了","矛盾","from","robert","：","clean","check","中","惊讶","存在","意外","用户","inheriting","martin","或","file","看到","原因","自","错误","raising","对","并","（","与","programming","）","接收","之道","被","输入","cx","abap","guidelines","预期","不","not","definition","清楚"],"title":"针对可应对的异常抛出 CX_STATIC_CHECK","title_tokens":["的","cx","应对","异常","check"," ","针对","抛出","static","_","可"]},{"location":"archives/ABAP-guide-zh/#cx_no_check","text":"ABAP 整洁之道 > 目录 > 错误处理 > 抛出 > 本节 如果异常严重到使接收端不太可能恢复正常工作，则使用 CX_NO_CHECK ：无法读取必备资源，无法解决请求的依赖项等。 CLASS cx_out_of_memory DEFINITION INHERITING FROM cx_no_check . METHODS create_guid RETURNING VALUE ( result ) TYPE / bobf / conf_key . CX_NO_CHECK _不能_在方法签名中声明，因此它的出现会使用户感到意外。在无法恢复的情况下，这是可以接受的，因为用户无论如何都无法采取有效的操作。 但是，在某些情况下，用户实际上_可能_希望识别并应对这种故障。例如，如果依赖的管理器无法为请求的接口提供一个实现，则会抛出 CX_NO_CHECK ，因为常规应用程序代码将无法继续执行。但是，可能某个测试报告试图实例化所有事物，以查看其是否有效，并且会简单地将失败报告为列表中的红色条目——该服务应该能够捕获并忽略异常，而不是被强制转储。","text_tokens":["出现","但是","该","异常","则","理器","不是","到",">","目录","处理","情况","报告","继续","以","这是","methods","查看","本","接受","项","并且","它","识别","故障","实际上","为","事物","失败","错误处理","无论","程序","，","常规","捕获","conf","整洁","无法"," ","等",".","下","接口","实例","某些","采取有效","服务",")","(","有效","class","type","create","而","例如","。","某个","如果","这种","memory","强制","抛出","红色","_","应该","使","使用","签名","/","方法","能够","采取","bobf","程序代码","节","result","资源","returning","实现","因此","执行","不能","可以","在","管理","感到","请求","依赖","其","的","恢复","可能","会","化","正常","from","：","忽略","no","check","条目","—","中","代码","value","意外","key","读取","都","提供","测试报告","用户","out","继续执行","地","试图","inheriting","无论如何","操作","将","列表","接收端","guid","是否","因为","应用","错误","应对","实际","并","所有","测试","严重","简单","必备","声明","希望","转储","接收","之道","一个","被","不太可能","恢复正常","cx","of","如何","解决","abap","管理器","工作","definition"],"title":"针对通常不可恢复的情况抛出 CX_NO_CHECK","title_tokens":["的","cx","恢复","no","通常","check"," ","针对","情况","抛出","不可","_"]},{"location":"archives/ABAP-guide-zh/#cx_dynamic_check","text":"ABAP 整洁之道 > 目录 > 错误处理 > 抛出 > 本节 CX_DYNAMIC_CHECK 的用例很少见，通常我们建议使用其他异常类型。但是，如果调用者对是否可能发生异常完全自主控制，您可能要考虑使用这种异常来代替 CX_STATIC_CHECK 。 DATA value TYPE decfloat . value = '7.13' . cl_abap_math => get_db_length_decs ( EXPORTING in = value IMPORTING length = DATA ( length ) ). 例如，使用 cl_abap_math 类的 get_db_length_decs 方法，它告诉您十进制浮点数的位数和小数位数。如果输入参数未反映十进制浮点数，此方法会引发动态异常 cx_parameter_invalid_type 。通常，将为完全静态类型的变量调用此方法，以便开发人员知道该异常是否会发生。在这种情况下，动态异常能够让调用者省略不必要的 CATCH 子句。","text_tokens":["但是","该","异常","十进制",">","目录","处理","告诉您","情况","开发","发生","您","本","decs","点数","浮点数","7.13","必要","它","告诉","用者","考虑","发人","get","为","错误处理","decfloat","=","，","调用","整洁"," ","静态","见","省略",".","下","自主","开发人员","in","控制","dynamic",")","(","type","例如","来","。","如果","建议","这种","子句","length","data","通常","引发","抛出","'","位数","_","其他","math","要","使用","代替","不必","static","方法","能够","小数","节","类型","cl","importing","在","的","调用者","用例","可能","会","catch","和","以便","不必要","知道","check","小数位","exporting","数","value","变量","让","进制","人员","db","反映","parameter","很少","将","此","是否","错误","我们","对","浮点","invalid","类","完全","数位","之道","输入","cx","abap","未","参数","动态"],"title":"针对可避免的异常考虑 CX_DYNAMIC_CHECK","title_tokens":["避免","的","cx","异常","考虑","check"," ","针对","dynamic","_","可"]},{"location":"archives/ABAP-guide-zh/#_95","text":"ABAP 整洁之道 > 目录 > 错误处理 > 抛出 > 本节 如果情况严重到可以完全确定接收者不太可能从中恢复，或者清楚地表明了编程错误，请转储而不是抛出异常：获取内存失败，对必须填充的表读取索引失败等。 RAISE SHORTDUMP TYPE cx_sy_create_object_error . \" >= NW 7.53 MESSAGE x666 ( general ). \" < NW 7.53 这种行为将阻止任何类型的用户事后执行任何有用的操作。请仅在确定时使用此功能。","text_tokens":["不是","异常","到",">","内存","目录","处理","情况","本","有用","失败","错误处理","时","=","，","整洁"," ","表","等","事后",".","接收者","message",")","\"","(","确定","type","raise","create","表明","而","。","如果","必须","这种","x666","或者","general","从中","抛出","_","error","填充","任何","sy","使用","节","类型","功能","请","执行","可以","索引","在","的","行为","恢复","可能","了","：","获取","<","读取","用户","nw","请仅","地","7.53","操作","将","此","错误","编程","对","object","严重","情况严重","转储","完全","接收","之道","不太可能","shortdump","cx","abap","阻止","清楚"],"title":"针对完全不可恢复的情况进行转储","title_tokens":["转储","的","完全","恢复","进行","针对","情况","不可"]},{"location":"archives/ABAP-guide-zh/#raise-exception-new-raise-exception-type","text":"ABAP 整洁之道 > 目录 > 错误处理 > 抛出 > 本节 注：自 NW 7.52 起可用。 RAISE EXCEPTION NEW cx_generation_error ( previous = exception ). 通常短于毫无必要加长的 RAISE EXCEPTION TYPE cx_generation_error EXPORTING previous = exception . 但是，如果大量添加 MESSAGE ，可能需要坚持使用 TYPE 变式： RAISE EXCEPTION TYPE cx_generation_error EXPORTING previous = exception MESSAGE e136 ( messages ).","text_tokens":["但是","毫无",">","目录","处理","起","generation","message","自","错误",")","(","e136","previous","的","7.52","type","raise","可能","加长","添加","本","需要","变式","exception","。","如果","messages","：","必要","注","之道","通常","错误处理","抛出","exporting","=","可用","_","error","，","cx","new","坚持","abap","使用","整洁"," ","短于","nw",".","节","大量"],"title":"RAISE EXCEPTION NEW 优于 RAISE EXCEPTION TYPE","title_tokens":["new","优于","type","raise"," ","exception"]},{"location":"archives/ABAP-guide-zh/#_96","text":"ABAP 整洁之道 > 目录 > 错误处理 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","处理","本","错误处理","错误","节"],"title":"捕获","title_tokens":["捕获"]},{"location":"archives/ABAP-guide-zh/#_97","text":"ABAP 整洁之道 > 目录 > 错误处理 > 捕获 > 本节 METHODS generate RAISING cx_generation_failure . METHOD generate . TRY . generator -> generate ( ). CATCH cx_amdp_generation_failure INTO DATA ( exception ). RAISE EXCEPTION NEW cx_generation_failure ( previous = exception ). ENDTRY . ENDMETHOD . 得墨忒耳律 建议将事物解耦，而转发来自其他组件的异常是违反了这一原则的。通过捕获这些异常并将其封装在自己的异常类型中，使自己独立于外部代码。 \" anti-pattern METHODS generate RAISING cx_sy_gateway_failure . METHOD generate . generator -> generate ( ). ENDMETHOD .","text_tokens":["转发","异常","into",">","目录","处理","外部","methods","这","本","耦","事物","错误处理","amdp","=","组件","，","捕获","整洁"," ",".","是","generator","原则",")","\"","(","raise","而","method","。","墨忒耳","建议","generate","这些","data","pattern","_","其他","sy","使","通过","anti","节","类型","一","违反","generation","独立","在","其","的","封装","exception","了","得","catch","endmethod","-","律","中","代码","new","自己","endtry","将","gateway","解","raising","错误","previous","并","failure","之道","来自","于","cx","abap","try"],"title":"包裹外来异常而非任其侵入代码","title_tokens":["其","外来","异常","非任","而","包裹","侵入","代码"]},{"location":"archives/ABAP-guide-zh/#_98","text":"ABAP 整洁之道 > 目录 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","节"],"title":"注释","title_tokens":["注释"]},{"location":"archives/ABAP-guide-zh/#_99","text":"ABAP 整洁之道 > 目录 > 注释 > 本节 METHOD correct_day_to_last_in_month . WHILE is_invalid ( date ). reduce_day_by_one ( CHANGING date = date ). ENDWHILE . ENDMETHOD . METHOD is_invalid . DATA zero_if_invalid TYPE i . zero_if_invalid = date . result = xsdbool ( zero_if_invalid = 0 ). ENDMETHOD . METHOD reduce_day_by_one . date + 6 ( 2 ) = date + 6 ( 2 ) - 1 . ENDMETHOD . 而不是 \" anti-pattern \" correct e.g. 29.02. in non-leap years as well as result of a date calculation would be \" something like e.g. the 31.06. that example has to be corrected to 30.06. METHOD fix_day_overflow . DO 3 TIMES . \" 31 - 28 = 3 => this correction is required not more than 3 times lv_dummy = cv_date . \" lv_dummy is 0 if the date value is a not existing date - ABAP specific implementation IF ( lv_dummy EQ 0 ). cv_date + 6 ( 2 ) = cv_date + 6 ( 2 ) - 1 . \" subtract 1 day from the given date ELSE . \" date exists => no correction required EXIT . ENDIF . ENDDO . ENDMETHOD . 整洁代码_并不是_禁止您为代码写注释，而是鼓励您想出_更好的_替代方法。只有想不出替代方法时才使用注释。 从性能的角度来看，这个例子受到了质疑，因为将方法缩减到如此之短会严重降低性能。样本测量表明，在运行速度上，重构代码要比原始的脏代码慢 2.13 倍。整洁代码修复输入 31-02-2018 需要 9.6 微秒，而脏代码只需 4.5 微秒。当频繁在高性能应用程序中运行此方法时，可能会对性能造成影响；但对于常规用户输入验证，应该是可以接受的。请参阅 顾及性能 一节以处理整洁代码和性能问题。","text_tokens":["参阅","不是",">","目录","如此","处理","比","be","请参阅","do","频繁","2.13","exists","这个","注释","以","non","您","本","this","一节","reduce","28","；","接受","当","xsdbool","enddo","之短会","为","implementation","替代","出","时","day","=","角度","month","受到","原始","程序","well","，","has","0","cv","specific","常规","整洁","微秒"," ","by","02",".","6","1","2018","是","样本","something","速度","in","more","one",")","\"","(","correction","而脏","type","is","correct","method","而","表明","。","while","data","pattern","造成","_","但","应该","要","9.6","高性能","修复","时才","使用","验证","不出","倍","需","从","方法","anti","节","上","result","the","更好","重构","31","if","可以","在","问题","overflow","顾及","existing","的","eq","exit","31.06","i","可能","会","leap","as","了","fix","from","性能","和","endmethod","to","-","no","降低","calculation","like","代码","3","value","中","写","times","a","缩减到","required","subtract","example","脏","用户","else","减到","+","慢","应用程序","that","endwhile","e","g","将","changing","此","因为","dummy","应用","高性","4.5","对","鼓励","需要","只有","并","corrected","invalid","严重","29.02","lv","缩减","禁止","对于","运行","之道","30.06","测量","例子","输入","given","years","来看","而是","影响","只","of","想不出","zero","abap","last","想","质疑","2","date","would","not","endif","than"],"title":"用代码表达自己而不是靠注释","title_tokens":["不是","注释","用","表达","靠","而","自己","代码"]},{"location":"archives/ABAP-guide-zh/#_100","text":"ABAP 整洁之道 > 目录 > 注释 > 本节 DATA ( input_has_entries ) = has_entries ( input ). 与其解释那些坏名称的真正含义或者您选择坏名称的原因，不如去实际改良名称。 \" anti-pattern \" checks whether the table input contains entries DATA ( result ) = check_table ( input ).","text_tokens":["result","the","不如","坏",">","与其","目录","原因",")","\"","(","的","注释","实际","checks","您","本","。","解释","table","真正","那些","entries","data","之道","-","contains","check","或者","改良","pattern","whether","选择","含义","=","_","去","，","has","abap","整洁"," ","名称","input",".","anti","节"],"title":"注释绝非坏名称的借口","title_tokens":["的","注释","坏","绝非","名称","借口"]},{"location":"archives/ABAP-guide-zh/#_101","text":"ABAP 整洁之道 > 目录 > 注释 > 本节 DATA ( statement ) = build_statement ( ). DATA ( data ) = execute_statement ( statement ). 这样不但能够更加清晰地体现代码的意图、结构和依赖关系，同时还能避免在块与块之间因临时变量未清空引起的错误。 \" anti-pattern \" ----------------- \" Build statement \" ----------------- DATA statement TYPE string . statement = | SELECT * FROM d_document_roots |. \" ----------------- \" Execute statement \" ----------------- DATA ( result_set ) = adbc -> execute_sql_query ( statement ). result_set -> next_package ( IMPORTING data = data ).","text_tokens":["result","意图","不但",">","目录","之间","importing","|","在","package",")","引起","临时","错误","(","依赖","还","\"","的","注释","build","、","这样","清晰","type","statement","本","。","关系","from","与","sql","清空","select","更加","和","能","data","之道","-","-----------------","execute","set","pattern","document","roots","next","结构","=","_","代码","*","，","避免","变量","同时","因","abap","未","string","整洁","d"," ","块","adbc","query",".","能够","地","体现","anti","节"],"title":"使用方法而非注释来对代码分段","title_tokens":["对","非","注释","使用","而","来","分段","方法","代码"]},{"location":"archives/ABAP-guide-zh/#_102","text":"ABAP 整洁之道 > 目录 > 注释 > 本节 \" can't fail, existence of >= 1 row asserted above DATA ( first_line ) = table [ 1 ]. 没人需要用自然语言重复代码 \" anti-pattern \" select alert root from database by key SELECT * FROM d_alert_root WHERE key = key .","text_tokens":["重复","用","没",">","目录","root",")","can","\"","(","注释","需要","本","asserted",",","where","table","from","above","select","]","data","之道","first","-","pattern","[","语言","人","'","=","_","自然","代码","*","of","existence","自然语言","abap","line","alert","整洁","fail"," ","row","t","by","database","key","d","1",".","anti","节"],"title":"写注释是要解释为什么而非是什么","title_tokens":["写","要","是","非","注释","为什么","什么","而","解释"]},{"location":"archives/ABAP-guide-zh/#_103","text":"ABAP 整洁之道 > 目录 > 注释 > 本节 \" anti-pattern \" This class serves a double purpose. First, it does one thing. Then, it does another thing. \" It does so by executing a lot of code that is distributed over the local helper classes. \" To understand what's going on, let us at first ponder the nature of the universe as such. \" Have a look at this and that to get the details. 没人会认真读——真的。如果人们需要阅读教科书才能使用代码，这可能说明您的代码存在严重的设计问题，应通过其他方式解决。有些代码_确实_需要解释，而不仅仅是一行注释；在这种情况下，请考虑链接设计文档。","text_tokens":[">","目录","没人会","universe","情况","确实","注释","您","这","本","this","一行",",","；","考虑","does","get","人们","，","真的","整洁"," ","by",".","下","是","purpose","one","nature","\"","class","is","而","。","let","如果","不仅","解释","这种","serves","说明","details","code","方式","pattern","'","thing","such","_","其他","executing","使用","then","us","通过","ponder","anti","教科书","节","the","请","it","helper","问题","在","another","的","look","链接","可能","have","double","as","going","s","on","-","to","教科","and","—","应","what","代码","so","存在","a","阅读","没人","that","设计","classes","distributed","仅仅","需要","文档","严重","不仅仅","才能","之道","first","lot","at","over","读","有些","of","认真","解决","abap","understand","local"],"title":"设计应放到设计文档里而不是代码里","title_tokens":["里","设计","不是","文档","而","应","放到","代码"]},{"location":"archives/ABAP-guide-zh/#_104","text":"ABAP 整洁之道 > 目录 > 注释 > 本节 加引号的注释及其注释语句一同缩进 METHOD do_it . IF input IS NOT INITIAL . \" delegate pattern output = calculate_result ( input ). ENDIF . ENDMETHOD . 加星号的注释往往造成缩进异常 \" anti-pattern METHOD do_it . IF input IS NOT INITIAL . * delegate pattern output = calculate_result ( input ). ENDIF . ENDMETHOD .","text_tokens":["result","异常","星号",">","it","目录","if","delegate","一同",")","\"","do","加","(","的","注释","缩进","is","本","method","及其","output","语句","endmethod","之道","-","calculate","pattern","initial","造成","=","_","*","往往","abap","整洁"," ","引号","not",".","input","endif","anti","节"],"title":"用 \" 而非 * 加注释","title_tokens":["非","注释","用"," ","而","*","\"","加"]},{"location":"archives/ABAP-guide-zh/#_105","text":"ABAP 整洁之道 > 目录 > 注释 > 本节 \" delegate pattern output = calculate_result ( input ). 整洁性强于 \" anti-pattern output = calculate_result ( input ). \" delegate pattern 且唐突的程度低于 output = calculate_result ( input ). \" delegate pattern","text_tokens":["result","唐突","程度",">","目录",")","\"","(","的","注释","本","output","强于","性","-","之道","calculate","pattern","且","=","_","abap","整洁"," ","低于","input","delegate",".","anti","节"],"title":"将注释放在与其相关的语句前面","title_tokens":["放在","的","注释","将","语句","相关","与其","前面"]},{"location":"archives/ABAP-guide-zh/#_106","text":"ABAP 整洁之道 > 目录 > 注释 > 本节 \" anti-pattern * output = calculate_result( input ). 当您发现类似内容时，请将其删除。这里显然不需要代码，因为应用程序顺利运行并且所有测试都通过了。以后可根据版本历史记录再生删除的代码。如果需要永久保留某一段代码，请将其复制到文件或 $TMP 或 HOME 对象中。","text_tokens":["result","删除","或","将","请","home","根据",">","复制到","目录","发现","$","因为","版本","应用",")","\"","某","再生","(","其","这里","的","注释","tmp","您","类似","需要","本","以后","所有","。","了","如果","测试","output","历史","并且","一段","可","当","史记","-","之道","内容","显然","运行","记录","calculate","pattern","文件","对象","时","历史记录","=","*","_","代码","程序","永久","中","，","abap","都","整洁"," ","不","复制","input",".","应用程序","通过","anti","节","保留","顺利"],"title":"删除代码而非将其注释掉","title_tokens":["其","删除","掉","非","将","注释","而","代码"]},{"location":"archives/ABAP-guide-zh/#fixmetodo-xxx","text":"ABAP 整洁之道 > 目录 > 注释 > 本节 METHOD do_something . \" XXX FH delete this method - it does nothing ENDMETHOD . FIXME 指向内部事件正在形成的过小或过大的错误。 TODO 是您要在不久之后编写代码的地方。 XXX 标记出有效但还可以进一步优化的代码。 输入这类注释时，请添加昵称、姓名缩写或用户，这样可方便共同开发者与您联系并可以在不清楚注释的意图时向您询问问题。","text_tokens":["进一步",">","目录","do","还","开发","小","指向","注释","这样","您","这","添加","本","this","does","出","时","，","整洁"," ","内部","todo",".","fixme","fh","是","something","\"","有效","联系","时向","method","昵称","。","可","大","xxx","询问","_","共同","但","标记","要","优化","方便","编写","缩写","节","请","姓名","it","可以","在","问题","的","过","delete","之后","endmethod","-","nothing","一步","代码","用户","意图","或","开发者","错误","、","并","与","类","之道","不久","正在","事件","输入","地方","abap","不","形成","清楚"],"title":"使用 FIXME、TODO 和 XXX 并添加自己的标识","title_tokens":["的","和","标识","、","使用","添加"," ","并","自己","todo","xxx","fixme"]},{"location":"archives/ABAP-guide-zh/#_107","text":"ABAP 整洁之道 > 目录 > 注释 > 本节 方法签名注释对任何人都没有帮助。 \" anti-pattern * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Static Public Method CALIBRATION_KPIS=>CALCULATE_KPI * +-------------------------------------------------------------------------------------------------+ * | [--->] STRATEGY_ID TYPE STRATEGY_ID * | [--->] THRESHOLD TYPE STRATEGY_THRESHOLD * | [--->] DETECTION_OBJECT_SCORE TYPE T_HIT_RESULT * | [<---] KPI TYPE T_SIMULATED_KPI * +--------------------------------------------------------------------------------------</SIGNATURE> 几十年前，当在检查代码或处理数十页的打印输出内容时，如果看不到方法签名，这些注释可能会对您大有帮助。但现在，所有 ABAP IDE（SE24、SE80、ADT）都可以轻松显示方法签名，因此这些注释只是干扰而已。 在基于表单的编辑器 SE24/SE80 中，按_签名_按钮。在 ABAP 开发工具中，选中方法名称然后按 F2，或将 _ABAP 元素信息_视图添加到您的透视图中。 同样，注释结尾也是多余的。几十年前，当程序和函数以及内部嵌套的 IF 长度达到数百行代码时，这些注释可能很有用。但如今的编码风格发生了变化，方法非常简短，可以轻松看到 ENDIF 或 ENDMETHOD 属于哪个开头语句： \" anti-pattern METHOD get_kpi_calc . IF has_entries = abap_false . result = 42 . ENDIF . \" IF has_entries = abap_false ENDMETHOD . \" get_kpi_calc","text_tokens":["嵌套","到",">","目录","处理","选中","以及","函数","开发","id","注释","发生","也","您","---","添加","本","se24","calibration","calc","当","十年","结尾","语句","有用","get","非常","[","属于","时","大有","=","kpi","程序","，","开头","has","任何人","整洁"," ","simulated","如今","名称","内部","行",".","42","是","数百","打印","+-------------------------------------------------------------------------------------------------+","\"","type","只是","signature","干扰","method","帮助","。","如果","score","数十页","f2","这些","达到","pattern","+--------------------------------------------------------------------------------------","kpis","_","但","任何","hit","签名","轻松","t","/","endif","static","方法","没有","anti","几十","节","result","显示","变化","前","因此","何人","if","元素","按","哪个","|","在","可以","多余","的","工具","风格","strategy","不到","可能","会","长度","false","表单","了","开发工具","看不到","：","基于","entries","public","]","和","-","很","endmethod","adt","calculate","detection","<","编辑","代码","中","编码","现在","检查","十页","都","se80","输出","透视图","ide","或","将","看到","---------------------------------------------------------------------------------------+","几十年","简短","对","、","所有","（","同样","打印输出","）","内容","之道","透视","按钮","*","数十","视图","abap","然后","threshold","而已","编辑器","信息","object"],"title":"勿添加方法签名和注释结尾","title_tokens":["结尾","和","注释","签名","添加","勿","方法"]},{"location":"archives/ABAP-guide-zh/#_108","text":"ABAP 整洁之道 > 目录 > 注释 > 本节 \" anti-pattern \" alert category not filled MESSAGE e003 INTO dummy . 消息独立于您的代码而变化，没有人会记得调整注释，这样注释将很快过时甚至变得有误导性，却没有引起任何人注意。 在现代 IDE 中，您可以轻松查看消息背后的文本，例如在 ABAP 开发工具中，选中消息标识并按 Shift+F2。 如果您希望消息更准确，请考虑将消息提取到其自身的方法。 METHOD create_alert_not_found_message . MESSAGE e003 INTO dummy . ENDMETHOD .","text_tokens":["into","到",">","目录","人会","category","选中","准确","提取","开发","注释","这样","您","查看","本","文本","记得","考虑","filled","found","，","标识","alert","任何人","整洁"," ","调整",".","shift","message","\"","过时","create","而","method","例如","。","如果","f2","pattern","_","任何","轻松","变得","更","背后","没有","方法","anti","节","变化","请","何人","按","独立","可以","在","误导","其","的","工具","现代","却","开发工具","很快","-","endmethod","e003","代码","中","消息","+","ide","将","dummy","引起","甚至","注意","并","希望","之道","于","有","abap","自身","误导性","not"],"title":"勿复制消息文本作为注释","title_tokens":["注释","勿","消息","复制","文本","作为"]},{"location":"archives/ABAP-guide-zh/#abap-api","text":"ABAP 整洁之道 > 目录 > 注释 > 本节 编写 ABAP 文档来记录公共 API，这意味着这些 API 可供其他团队或应用程序的开发人员使用。不要为内部内容编写 ABAP 文档。 ABAP 文档与所有注释一样都有相同的弱点，也就是说，它很快会过时，然后会变得有误导性。因此，您应该只在有意义的情况下使用，而不要为一切内容强制编写 ABAP 文档。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 4: Good Comments: Javadocs in Public APIs 和 Chapter 4: Bad Comments: Javadocs in Nonpublic Code 。","text_tokens":["参阅","就是",">","目录","情况","开发","注释","您","这","就是说","本","apis","它","发人","记录","为","c","弱点","程序","bad","，","相同","整洁"," ","内部","nonpublic",".","意味","下","意义","开发人员","in","团队","一切","过时","供","chapter","而","来","。","javadocs","可","这些","code","强制","其他","应该","使用","变得","更","编写","节","因此","一样","所著","在","误导","的","会","也就是说","robert","public","和","很快","api","clean","中","都","意味着","应用程序","人员",":","martin","或","应用","多","文档","所有","与","不要","之道","内容","公共","good","comments","只","有","abap","然后","误导性","信息","4"],"title":"ABAP 文档仅适用于公共 API","title_tokens":["仅","abap","api","文档"," ","公共","适用","于"]},{"location":"archives/ABAP-guide-zh/#_109","text":"ABAP 整洁之道 > 目录 > 注释 > 本节 优先使用编译指示而不是伪注释来抑制 ATC 识别的无关警告和错误。伪注释大部分已过时，并已替换为编译指示。 \" pattern MESSAGE e001 ( ad ) INTO DATA ( message ) ##NEEDED . \" anti-pattern MESSAGE e001 ( ad ) INTO DATA ( message ). \"#EC NEEDED 使用 ABAP_SLIN_PRAGMAS 程序或 SLIN_DESC 表查找过时伪注释与已替换这些伪注释的编译指示之间的映射。","text_tokens":["已","pragmas","不是","或","into",">","目录","指示","##","部分","大部","message","之间",")","错误","\"","大部分","(","ec","过时","的","编译","注释","而","本","atc","来","警告","。","并","替换","与","映射","查找","无关","识别","和","这些","data","之道","-","优先","slin","ad","为","抑制","pattern","#","_","程序","伪","，","e001","needed","abap","使用","整洁"," ","表",".","anti","节","desc"],"title":"编译指示优于伪注释","title_tokens":["编译","优于","注释","指示","伪"]},{"location":"archives/ABAP-guide-zh/#_110","text":"ABAP 整洁之道 > 目录 > 本节 下面的建议 为阅读而不是书写进行优化 。由于 ABAP 的格式优化器没有涵盖它们，其中的部分建议会产生额外的人工工作，以在名称长度等发生变化时重新格式化语句；如果要避免这种情况，请考虑放弃这些规则，例如 对齐同一对象而非不同对象的赋值 。","text_tokens":["额外","变化","不是","非","请",">","进行","目录","部分","情况","在","它们","赋值","书写","的","格式化","同一","生变","人工","以","发生","会","而","本","长度","例如","对齐","。","由于","规则","；","如果","产生","建议","这种","放弃","器","这些","语句","之道","格式","考虑","为","发生变化","对象","时","涵盖","，","其中","要","避免","abap","阅读","整洁"," ","工作","下面","等","不同","优化","没有","名称","重新","节"],"title":"格式化","title_tokens":["格式","格式化"]},{"location":"archives/ABAP-guide-zh/#_111","text":"ABAP 整洁之道 > 目录 > 本节 以相同的方式格式化项目的所有代码。让所有团队成员使用相同的格式化风格。 如果要编辑外来代码，请遵循该项目的格式化风格，而不要坚持自己的个人风格。 如果要随时间更改格式化规则，请使用 重构最佳实践 随时间更新代码。","text_tokens":["时间","重构","实践","请",">","目录","团队","遵循","目的","格式化","的","风格","以","随","而","本","所有","。","规则","如果","成员","更改","外来","不要","之道","格式","最佳","方式","编辑","代码","该项","，","要","项目","坚持","让","abap","使用","相同","整洁"," ","个人","自己","个人风格","节","更新"],"title":"保持一致","title_tokens":["一致","保持","保持一致"]},{"location":"archives/ABAP-guide-zh/#_112","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 开发人员花费大量时间_阅读_代码。实际上，一天中_编写_代码所占的比例要小得多。 因此，应针对读取和调试（而非编写）来优化代码格式。 例如，应该优先采用 DATA : a TYPE b , c TYPE d , e TYPE f . 而不是 \" anti-pattern DATA : a TYPE b , c TYPE d , e TYPE f .","text_tokens":["时间","花费","e","非","不是","因此","开发人员",">","目录","\"","采用","开发","格式化","的","type","实际","而","本","例如","来","。","（","b",",",":","和","）","data","之道","格式","发人","实际上","调试","优先","-","pattern","f","应","c","所","代码","_","中","应该","，","要","比例","a","abap","小得多","阅读","整洁","读取"," ","一天","占","针对","d","anti","优化",".","人员","编写","节","大量"],"title":"为阅读而不是书写进行优化","title_tokens":["书写","不是","阅读","而","为","进行","优化"]},{"location":"archives/ABAP-guide-zh/#_113","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 在激活对象前应用格式优化器——SE80、SE24 和 ADT 中的 Shift+F1。 如果修改一个大型未格式化旧代码库，可能需要仅对选定行应用格式优化器，以避免产生大量的变更项和传输依赖项。请考虑在单独的传输请求或注释中整齐打印完整的开发对象。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 5: Formatting: Team Rules 。","text_tokens":["参阅",">","目录","开发","格式化","注释","以","本","se24","修改","项","考虑","库","c","变更","单独","，","整洁"," ","行",".","shift","打印","整齐","chapter","完整","。","如果","器","rules","格式","code","传输","避免","更","优化","激活","节","大量","前","f1","请","所著","在","请求","依赖","的","旧","大型","可能","产生","robert","和","clean","adt","对象","—","中","代码","formatting","仅","se80","+",":","martin","或","应用","team","多","5","对","、","需要","之道","一个","abap","未","信息","选定"],"title":"激活前使用格式优化器","title_tokens":["前","格式","使用","优化","激活","器"]},{"location":"archives/ABAP-guide-zh/#_114","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 始终使用团队设置。在_菜单_ > 实用程序 > 设置 ... > ABAP 编辑器 > _格式优化器_下进行指定。 按照团队的协商设置_缩进_和_转换大写/小写_ > 大写关键字 。 大写字母与小写字母 解释了为什么我们没有为关键字的大小写提供明确的指导。 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 5: Formatting: Team Rules 。","text_tokens":["martin","参阅","大写","字母","大小写","转换","为什么",">","进行","目录","团队","信息","所著","...","在","team","多","我们","格式化","的","5","缩进","小写字母","chapter","本","大小","。","了","解释","与","robert",":","器","小写","和","rules","关键","之道","格式","实用","实用程序","clean","code","为","始终","明确","c","编辑","指导","按照","_","程序","关键字","中","formatting","设置","abap","使用","菜单","整洁","提供"," ","大写字母","/","写字","什么","协商","指定","优化","编辑器","没有","更",".","下","节"],"title":"使用格式优化器团队设置","title_tokens":["设置","格式","使用","团队","优化","器"]},{"location":"archives/ABAP-guide-zh/#_115","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA do_this TYPE i . do_this = input + 3 . 即使某些情况可能使您误以为这是可读的： \" anti-pattern DATA do_this TYPE i . do_this = input + 3 .","text_tokens":["某些",">","可读","目录","误以为","情况","\"","do","格式化","的","type","这是","您","可能","i","本","this","：","data","之道","格式","即使","-","pattern","=","_","3","以为","abap","使","整洁"," ",".","input","+","anti","节"],"title":"每行只有一条语句","title_tokens":["一条","只有","每行","语句"]},{"location":"archives/ABAP-guide-zh/#_116","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 遵守最多 120 个字符的行长度。 如果行距不是很宽，人眼可以更舒适地阅读文字——请在UI 设计师或眼动研究人员建议下做出您的选择。在调试或比较相邻的两行源代码时，如果代码行更窄一些，您会心生感激之情的。 老的终端设备的 80 个甚至 72 个字符的限制太过严格了。虽然通常建议使用 100 个字符（这是一个可行的选择），但对于 ABAP 来说，最好使用 120 个字符，这可能是因为这种语言一般较为冗长。 提醒一下，您可以在 ADT 中将打印边距配置为 120 个字符，然后在代码视图中将其显示为垂直线。在_菜单_ > 窗口 > 首选项 > 常规 > 编辑器 > _文本编辑器_下进行配置。","text_tokens":["不是","相邻","行距",">","目录","一般","中将","宽","一下","格式化","窄","这是","您","这","本","最","可行","边距","文本","调试","最好","为","时","会心","虽然","，","常规","严格","菜单","整洁","限制"," ","行","下","来说","研究","打印","垂直线","一些","72","设备","文本编辑","。","窗口","如果","源代码","建议","这种","器","人眼","格式","通常","120","语言","之情","配置","_","但","使用","更","100","节","显示","眼动","首选项","做出","请","文字","可以","在","生","终端设备","其","的","可能","长度","舒适","了","ui","两行","很","adt","—","选择","编辑","代码","个","阅读","选项","个字符","比较","人员","地","设计","首选","或","进行","直线","设计师","因为","多","甚至","80","感激","（","提醒","对于","终端","）","之道","太过","一个","字符","较为","老","视图","垂直","abap","然后","冗长","编辑器","遵守","是因为"],"title":"恪守合理的行长度","title_tokens":["的","合理","恪守","长度","行"]},{"location":"archives/ABAP-guide-zh/#_117","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA ( result ) = calculate ( items ). 而不是添加不必要的空格 \" anti-pattern DATA ( result ) = calculate ( items = items ) .","text_tokens":["result","不是",">","目录",")","\"","items","(","格式化","的","添加","而","本","必要","不必要","data","之道","格式","-","calculate","pattern","空格","=","abap","整洁"," ","不必",".","anti","节"],"title":"紧缩代码","title_tokens":["代码","紧缩"]},{"location":"archives/ABAP-guide-zh/#_118","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA ( result ) = do_something ( ). DATA ( else ) = calculate_this ( result ). 强调这两条语句做的是不同的事情。但没必要 \" anti-pattern DATA ( result ) = do_something ( ). DATA ( else ) = calculate_this ( result ). 添加分隔空行可能表明您的方法没有在 做一件事 。","text_tokens":["result","强调","一件","是","没","something",">","目录","在",")","\"","do","两条","(","格式化","的","做","这","添加","可能","本","this","表明","您","。","必要","语句","data","之道","格式","-","calculate","pattern","事","分隔","=","_","但","空行","abap","事情","整洁"," ","不同","else","方法",".","没有","anti","节"],"title":"添加单一空行来分隔内容，而不要添加多行","title_tokens":["，","空行","内容","单一","不要","添加","而","多行","来","分隔"]},{"location":"archives/ABAP-guide-zh/#_119","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 METHOD do_something . do_this ( ). then_that ( ). ENDMETHOD . 没有理由养成用空行将代码分开的坏习惯 \" anti-pattern METHOD do_something . do_this ( ). then_that ( ). ENDMETHOD . 空行实际上仅在您有跨越多行的语句时才有意义 METHOD do_something . do_this ( ). then_that ( EXPORTING variable = 'A' IMPORTING result = result ). ENDMETHOD .","text_tokens":["result","意义","将","variable","用","something",">","目录","多行","importing","理由","在",")","\"","do","(","格式化","的","实际","养成","您","本","method","this","跨越","endmethod","-","之道","格式","实际上","语句","pattern","坏习惯","exporting","'","代码","_","=","仅","空行","习惯","abap","分开","有","整洁","时才"," ","then","anti","a",".","没有","that","节"],"title":"勿因分隔空行产生困扰","title_tokens":["困扰","空行","因","勿","分隔","产生"]},{"location":"archives/ABAP-guide-zh/#_120","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 为了强调这些事物在某种程度上是属于一起的 structure - type = 'A' . structure - id = '4711' . 或者这样更好 structure = VALUE # ( type = 'A' id = '4711' ). 而对于那些彼此无关的事物，仍保留参差不齐的状态： customizing_reader = fra_cust_obj_model_reader => s_get_instance ( ). hdb_access = fra_hdbr_access => s_get_instance ( ). 更多信息参阅 Robert C. Martin 所著的 Clean Code 中的 Chapter 5: Formatting: Horizontal Alignment 。","text_tokens":["强调","参阅",">","目录","参差","id","格式化","structure","这样","本","一起","事物","get","属于","c","#","=","某种程度","，","整洁"," ",".","4711","是","为了",")","cust","(","obj","type","参差不齐","chapter","而","。","某种","状态","这些","horizontal","格式","code","或者","'","_","更","彼此","fra","instance","节","保留","上","更好","所著","在","model","的","robert","：","s","hdb","仍","-","clean","customizing","中","value","formatting","hdbr","reader","a",":","martin","程度","多","alignment","access","5","那些","无关","对于","之道","不齐","abap","信息"],"title":"对齐同一对象而非不同对象的赋值","title_tokens":["同一","的","非","而","对齐","对象","不同","赋值"]},{"location":"archives/ABAP-guide-zh/#_121","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 modify -> update ( node = if_fra_alert_c => node - item key = item -> key data = item changed_fields = changed_fields ). 而不是毫无必要地加长 \" anti-pattern modify -> update ( node = if_fra_alert_c => node - item key = item -> key data = item changed_fields = changed_fields ).","text_tokens":["不是","毫无",">","if","目录",")","\"","(","格式化","加长","而","本","fields","必要","-","之道","格式","data","pattern","changed","c","update","=","_","node","item","abap","alert","key","整洁"," ","modify","fra",".","地","anti","节"],"title":"在行尾关闭括号","title_tokens":["在","括号","行尾","关闭"]},{"location":"archives/ABAP-guide-zh/#_122","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA ( unique_list ) = remove_duplicates ( list ). remove_duplicates ( CHANGING list = list ). 而不是毫无必要地加长 \" anti-pattern DATA ( unique_list ) = remove_duplicates ( list ). DATA ( unique_list ) = remove_duplicates ( CHANGING list = list ).","text_tokens":["unique","不是","changing","毫无",">","目录",")","\"","(","格式化","加长","而","本","必要","data","之道","格式","-","pattern","=","_","remove","abap","list","duplicates","整洁"," ",".","地","anti","节"],"title":"保持单参数调用于一行","title_tokens":["单","用于","调","参数","一行","保持"]},{"location":"archives/ABAP-guide-zh/#_123","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA ( sum ) = add_two_numbers ( value_1 = 5 value_2 = 6 ). 如果这造成行很长，可以换行，将参数转到下一行： DATA ( sum ) = add_two_numbers ( value_1 = round_up ( input DIV 7 ) * 42 + round_down ( 19 * step_size ) value_2 = VALUE # ( ( `Calculation failed with a very weird result` ) ) ).","text_tokens":["result","将","round","down","weird",">","very","目录","size","可以",")","sum","(","格式化","5","这","很长","本","一行","add","如果","`","：","step","+","div","two","data","之道","格式","7","转到","calculation","造成","#","=","_","value","*","with","，","19","换行","a","abap","整洁","numbers"," ","参数","2","行","42","failed","1","6",".","input","下","up","节"],"title":"保持参数在调用后面","title_tokens":["后面","调用","参数","在","保持"]},{"location":"archives/ABAP-guide-zh/#_124","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA ( sum ) = add_two_numbers ( value_1 = 5 value_2 = 6 ). 在其他地方对齐参数将导致很难发现它们所属的对象： DATA ( sum ) = add_two_numbers ( value_1 = 5 value_2 = 6 ). 但是，如果要避免因名称长度更改而破坏格式，这就是最佳模式了。","text_tokens":["但是","就是","将",">","目录","发现","在",")","sum","它们","(","格式化","的","5","很难","这","长度","而","本","add","对齐","。","了","如果","模式","更改","：","所属","破坏","two","data","之道","格式","最佳","对象","=","_","value","其他","，","要","避免","地方","因","abap","整洁","numbers"," ","参数","2","名称","导致","1","6",".","节"],"title":"如果换行，则在调用下缩进参数","title_tokens":["，","换行","调用","则","缩进","参数","如果","在","下"]},{"location":"archives/ABAP-guide-zh/#_125","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA ( sum ) = add_two_numbers ( value_1 = 5 value_2 = 6 ). 是的，这浪费了空间。但是如果不这样，就很难确定一个参数在哪里结束而下一个在哪里开始： \" anti-pattern DATA ( sum ) = add_two_numbers ( value_1 = 5 value_2 = 6 ).","text_tokens":["是","但是",">","目录","难","在",")","sum","\"","(","格式化","的","5","就","确定","这样","这","而","本","add","开始","。","了","如果","：","浪费","two","data","之道","格式","很","-","一个","pattern","=","_","value","空间","，","abap","整洁","numbers"," ","参数","哪里","结束","2","不","1","6",".","下","anti","节"],"title":"将多个参数换行","title_tokens":["多个","参数","换行","将"]},{"location":"archives/ABAP-guide-zh/#_126","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 modify -> update ( node = if_fra_alert_c => node - item key = item -> key data = item changed_fields = changed_fields ). 边距参差不齐，使得很难看到参数的结束位置以及参数值的开始位置： \" anti-pattern modify -> update ( node = if_fra_alert_c => node - item key = item -> key data = item changed_fields = changed_fields ). 如果要避免因名称长度更改而破坏格式，这就是另一种最佳模式了。","text_tokens":["就是",">","if","目录","看到","一种","参差","位置","以及",")","\"","(","格式化","的","很难","参差不齐","数值","这","长度","而","本","开始","。","了","如果","边距","模式","更改","fields","：","破坏","另","-","之道","格式","data","最佳","pattern","changed","c","update","=","_","node","item","不齐","，","要","避免","参数值","因","abap","alert","key","整洁"," ","参数","结束","名称","modify","fra",".","anti","节","使得"],"title":"对齐参数","title_tokens":["对齐","参数"]},{"location":"archives/ABAP-guide-zh/#_127","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA ( some_super_long_param_name ) = if_some_annoying_interface~add_two_numbers_in_a_long_name ( value_1 = 5 value_2 = 6 ).","text_tokens":["annoying",">","if","目录","in",")","(","格式化","5","~","本","add","some","two","data","之道","格式","interface","long","_","=","param","value","super","name","a","abap","整洁","numbers"," ","2","1","6",".","节"],"title":"如果调用行过长则将其换行","title_tokens":["其","换行","调用","则","将","过长","行","如果"]},{"location":"archives/ABAP-guide-zh/#_128","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 将参数关键字缩进 2 个空格，并将参数缩进 4 个空格： DATA ( sum ) = add_two_numbers ( EXPORTING value_1 = 5 value_2 = 6 CHANGING errors = errors ). 如果没有关键字，则将参数缩进 4 个空格。 DATA ( sum ) = add_two_numbers ( value_1 = 5 value_2 = 6 ). 使用 Tab 键缩进。就算多加了一个空格也没有关系。（如果左侧 DATA(sum) = 部分的字符数非偶数，则会发生这种情况。）","text_tokens":["就算","将","则","changing","左侧",">","目录","4","数非","部分","情况","sum",")","(","格式化","的","5","缩进","发生","也","errors","会","偶数","本","并","add","。","多加","了","如果","关系","（","键","这种","：","two","关键","之道","格式","data","）","一个","字符","exporting","空格","=","_","value","关键字","个","，","abap","使用","整洁","numbers"," ","参数","tab","2","1","6",".","没有","节"],"title":"缩进并卡到制表位","title_tokens":["位","并卡到","制表","缩进"]},{"location":"archives/ABAP-guide-zh/#_129","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 按照与方法调用相同的方式，使用 VALUE 或 NEW 缩进内联声明： DATA ( result ) = merge_structures ( a = VALUE # ( field_1 = 'X' field_2 = 'A' ) b = NEW / clean / structure_type ( field_3 = 'C' field_4 = 'D' ) ).","text_tokens":["result","或",">","目录","4",")","(","格式化","的","merge","structure","缩进","type","内联","本","b","与","field","：","声明","data","之道","格式","clean","方式","c","'","#","按照","=","value","_","3","structures","，","x","new","调用","a","abap","使用","相同","整洁","d"," ","/","2","方法","1",".","节"],"title":"如同方法调用那样缩进内联声明","title_tokens":["如同","声明","那样","缩进","调用","内联","方法"]},{"location":"archives/ABAP-guide-zh/#_130","text":"ABAP 整洁之道 > 目录 > 格式化 > 本节 DATA name TYPE seoclsname . DATA reader TYPE REF TO / clean / reader . 变量及其类型属于同一类，因此从视觉上来说应将其分为一组。将 TYPE 子句对齐会使人们的分心，并建议这些变量形成一个垂直组，而它们的类型形成一个垂直组。对齐还会产生不必要的编辑开销，当最长变量名的长度发生变化时，需要调整所有的缩进。 \" anti-pattern DATA name TYPE seoclsname . DATA reader TYPE REF TO / clean / reader .","text_tokens":[">","目录","它们","格式化","发生","本","必要","当","人们","属于","时","，","ref","整洁"," ","一组","调整",".","来说","分心","\"","type","缩进","变量名","而","及其","。","对齐","建议","子句","这些","data","格式","pattern","name","使","不必","/","从","anti","节","上","类型","变化","因此","视觉","其","的","生变","会","长度","最长","产生","不必要","to","-","clean","应","编辑","变量","组","reader","还会","将","同","seoclsname","需要","并","所有","分为","之道","一个","发生变化","一类","垂直","abap","开销","形成"],"title":"勿对齐类型子句","title_tokens":["对齐","类型","勿","子句"]},{"location":"archives/ABAP-guide-zh/#_131","text":"ABAP 整洁之道 > 目录 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","节"],"title":"测试","title_tokens":["测试"]},{"location":"archives/ABAP-guide-zh/#_132","text":"ABAP 整洁之道 > 目录 > 测试 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","测试","节"],"title":"原则","title_tokens":["原则"]},{"location":"archives/ABAP-guide-zh/#_133","text":"ABAP 整洁之道 > 目录 > 测试 > 原则 > 本节 编写的所有代码应该允许您以自动方式测试。 如果需要重构您的代码，那就重构。并在开始添加其他功能之前重构。 如果添加到的旧代码结构过于混乱而无法测试，那么至少要对其进行重构到您新添加部分能够测试。","text_tokens":["重构","自动","功能","原则","新","到",">","进行","目录","那么","部分","在","其","就","的","旧","对","以","允许","您","需要","添加","本","并","开始","所有","。","而","如果","至少","测试","之道","混乱","方式","之前","过于","结构","代码","其他","应该","，","要","abap","整洁","无法"," ","那","能够","编写","节"],"title":"编写可测试的代码","title_tokens":["的","测试","代码","编写","可"]},{"location":"archives/ABAP-guide-zh/#_134","text":"ABAP 整洁之道 > 目录 > 测试 > 原则 > 本节 如果要编写供其他人使用的代码，请让他们能够为自己的代码编写单元测试，例如通过在所有对外交互的位置添加接口，提供有助于促进集成测试的测试替身，或应用依赖倒置使他们能够用测试配置替代生产配置。","text_tokens":["单元","或","原则","请","用",">","目录","他们","在","位置","应用","倒置","依赖","的","供","添加","本","例如","他人","所有","有助","。","如果","测试","助于","之道","其他人","为","替代","生产","集成","配置","代码","其他","替身","，","要","让","abap","使用","提供","整洁","促进"," ","有助于","使","单元测试","自己","对外","能够","通过","交互","编写","接口","节"],"title":"让他人能够进行模拟","title_tokens":["让","模拟","进行","他人","能够"]},{"location":"archives/ABAP-guide-zh/#_135","text":"ABAP 整洁之道 > 目录 > 测试 > 原则 > 本节 让您的测试代码比生产代码更具可读性。您可以通过有效的测试来处理糟糕的生产代码，但是，可能您甚至还未进行测试，就已经把自己弄懵了。 保持您的测试代码保持简单、傻瓜，这样您一年后仍然能够理解它。 遵守标准和模式，使您的同事能够快速了解代码。","text_tokens":["一年","但是","原则",">","可读","目录","处理","进行","比","糟糕","测试代码","可以","甚至","有效","还","就","的","、","这样","您","可能","把","快速","本","同事","来","。","懵","了","测试","简单","保持","模式","它","傻瓜","弄","和","之道","理解","已经","生产","标准","代码","了解","，","让","abap","未","使","整洁","后"," ","可读性","自己","通过","能够","遵守","更具","仍然","节"],"title":"可读性规则","title_tokens":["规则","可读","可读性"]},{"location":"archives/ABAP-guide-zh/#_136","text":"ABAP 整洁之道 > 目录 > 测试 > 原则 > 本节 不要通过制作一个开发对象的 $TMP 副本并反复研究来处理开发项。其他人不会注意到这些对象，因此不会知道您的工作状态。您可能会在一开始就浪费大量的时间来制作工作副本，之后您也可能会忘记删除副本，这些副本对于系统和依赖项来说是没用的垃圾。（不相信？立刻看看开发系统并检查一下 $TMP 。） 另外，不要一开始就编写以特定方式调用某些内容的测试报告，并重复此操作以验证您在运行代码时是否一切正常。这是糟糕的手动测试：手动重复测试报告，目视验证一切是否正常。往前迈一步，在单元测试中自动执行此报告，使用自动断言告诉您代码是否仍然正常运行。这样的好处有，，您不需要进行之后必须编写单元测试的工作。其次，您可以节省进行手动重复所用的大量时间，另外还可以避免感到无聊和疲劳。","text_tokens":["重复","到",">","目录","处理","$","立刻","告诉您","报告","一下","开发","还","tmp","以","也","您","这是","这样","本","他人","项","告诉","垃圾","其他人","？","时","，","其次","调用","整洁"," ","另外","来说","浪费","是","往前","原则","制作","研究","某些","断言","一切","特定","来","。","系统","必须","状态","这些","没用","方式","其他","避免","使用","验证","所用","检查一下","单元测试","通过","编写","节","相信","大量","单元","自动","一","因此","执行","反复","可以","在","不会","感到","依赖","就","的","可能","会","好处","正常","：","之后","和","忘记","知道","对象","一步","代码","中","检查","副本","手动","测试报告","仍然","看看","时间","删除","操作","疲劳","反复研究","此","进行","糟糕","是否","无聊","注意","一切正常","目视","迈","需要","并","开始","（","测试","节省","对于","）","不要","之道","内容","运行","一个","有","abap","工作","不"],"title":"勿制作副本或写测试报告","title_tokens":["写","副本","或","制作","勿","测试报告","测试","报告"]},{"location":"archives/ABAP-guide-zh/#_137","text":"ABAP 整洁之道 > 目录 > 测试 > 原则 > 本节 类的公共项部分，尤其是它们实现的接口，相当稳定并且不太可能发生更改。让您的单元测试仅验证公共项，使其稳定可靠，并最大程度地减少重构类时所需的工作量。相比之下，受保护的和私有的内部项可能会通过重构而快速变化，这样，每次重构都会不必要地中断您的测试。 测试私有方法或受保护方法的迫切需求可能是几个早期设计缺陷的警告信号。问问您自己以下问题： 您是否意外地在您的类中埋没了一个概念，这个概念本该公开到其自己的类并使用其专用测试套件？ 您是否忘记将域逻辑与粘合代码分开？例如，直接在类中实施作为操作、确定或验证插入到 BOPF 的域逻辑，或者由 SAP Gateway 作为 *_DPC_EXT 数据提供者生成的域逻辑，可能不是上策。 接口是不是太过复杂、请求过多无关的数据或者无法轻松进行模拟？","text_tokens":["直接","不是","到",">","目录","每次","插入","它们","减少","粘合","私有","这个","尤其","发生","这样","您","本","保护","项","并且","相比之下","相当","必要","上策","？","，","整洁","无法"," ","内部","专用","接口","是","概念","原则","模拟","部分","数据","域","确定","快速","实施","而","例如","套件","。","工作量","bopf","由","sap","过多","供者","或者","所","_","作为","以下","使","使用","验证","轻松","不必","可靠","单元测试","需","逻辑","提供者","方法","通过","是不是","节","重构","单元","变化","实现","复杂","问题","在","请求","其","的","需求","信号","可能","会","生成","了","更改","之下","：","和","不必要","忘记","受","中","代码","问问","仅","几个","让","意外","都","提供","缺陷","迫切","自己","地","早期","设计","操作","ext","或","程度","gateway","进行","是否","将域","相比","、","警告","并","中断","测试","与","dpc","公开","类","最大","无关","之道","一个","太过","公共","不太可能","*","稳定","abap","类时","埋没","分开","工作","本该"],"title":"测试公共项而非私有内部项","title_tokens":["而非","私有","项而非","内部","公共","测试","项"]},{"location":"archives/ABAP-guide-zh/#_138","text":"ABAP 整洁之道 > 目录 > 测试 > 原则 > 本节 代码覆盖范围可以帮助您找到忘记测试的代码，而不是满足某些随机的 KPI： 不要仅为了达到覆盖范围而在包含或不含虚拟断言的情况下编写测试。最好保留未经测试的内容，以表明您不能安全地进行重构。您可以拥有小于 100％ 的覆盖范围，并且仍然可以进行完美的测试。在某些情况下，例如在构造函数中使用 IF 插入测试替身时，可能无法达到 100％。好的测试往往会针对不同的分支和条件多次覆盖同一条语句。实际上，这些测试的假想覆盖率大于 100％。","text_tokens":["找到","不是",">","目录","情况","插入","函数","含","以","您","覆盖率","本","并且","语句","实际上","最好","时","kpi","，","整洁","％"," ","无法","下","原则","某些","为了","断言","好","而","表明","例如","帮助","。","这些","达到","范围","条件","往往","使用","100","不同","编写","构造","节","保留","重构","if","构造函数","不能","可以","在","覆盖","的","可能","会","覆盖范围","拥有","：","和","忘记","多次","包含","代码","未经","中","替身","假想","仅","一条","虚拟","针对","地","仍然","或","同","进行","小于","大于","分支","随机","实际","测试","安全","不要","之道","内容","abap","满足","不","完美"],"title":"勿困扰于覆盖范围","title_tokens":["困扰","勿","覆盖","覆盖范围","范围","于"]},{"location":"archives/ABAP-guide-zh/#_139","text":"ABAP 整洁之道 > 目录 > 测试 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","测试","节"],"title":"测试类","title_tokens":["类","测试"]},{"location":"archives/ABAP-guide-zh/#_140","text":"ABAP 整洁之道 > 目录 > 测试 > 测试类 > 本节 CLASS ltc_unit_tests DEFINITION FOR TESTING ... . CLASS ltc_integration_tests DEFINITION FOR TESTING ... . CLASS ltc_unit_tests_with_mocks DEFINITION FOR TESTING ... . 良好的名称可以揭示测试的级别以及公有设置部分。 \" anti-patterns CLASS ltc_fra_online_detection_api DEFINITION FOR TESTING ... . \" We know that's the class under test - why repeat it? CLASS ltc_test DEFINITION FOR TESTING .... \" Of course it's a test, what else should it be?","text_tokens":["the","级别","we","repeat","?","....",">","it","目录","mocks","部分","...","可以","以及","online","be","\"","patterns","ltc","integration","的","class","for","本","unit","。",",","测试","test","类","揭示","know","that","s","-","之道","api","under","course","should","detection","'","公有","with","what","_","testing","良好","设置","of","a","abap","整洁","why"," ","tests","else",".","名称","fra","anti","definition","节"],"title":"按用途调用局部测试类","title_tokens":["类","用途","局部","调用","按","测试"]},{"location":"archives/ABAP-guide-zh/#_141","text":"ABAP 整洁之道 > 目录 > 测试 > 测试类 > 本节 将单元测试放入被测类的局部测试包含文件中。这样可以确保人们在重构该类时能够找到这些测试，并允许他们通过按一次按键运行所有相关的测试，如 如何执行测试类 中所述。 将组件测试、集成测试和系统测试放入包含单独全局类的局部测试中。它们与被测的单个类没有直接关系，因此不应随意将它们放在某个相关类中，而是应放在一个单独的类中。将此全局测试类标记为 FOR TESTING 和 ABSTRACT ，以避免在生产代码中意外地引用该类。将测试放到其他类中存在这样的危险，即人们在重构所涉及的类时忽略并忘记运行这些测试。 因此，使用*测试关系*来记录已测试的对象是有好处的。在下面的例子中，可以在类 recruting 或 candidate 中或通过快捷键 Shift-Crtl-F12 (Windows) 或 Cmd-Shift-F12 (macOS) 执行测试类 hiring_test 。 \"! @testing recruting \"! @testing candidate class hiring_test defintion for testing risk level dangerous duration medium abstract . ... endclass .","text_tokens":["直接","找到",">","目录","确保","它们","dangerous","以","这样","for","risk","本","类中","hiring","记录","为","人们","时","组件","单独","测","，","macos","整洁"," ","下面",".","所述","即","引用","shift","是","已","他们",")","\"","duration","(","class","允许","放入","相关","来","。","某个","系统","test","这些","recruting","level","生产","测类","全局","所","_","其他","标记","避免","使用","单元测试","快捷","能够","通过","没有","windows","节","重构","单元","因此","执行","medium","按","可以","在","endclass","按键","放在","的","危险","好处","关系","放到","和","忽略","单个","忘记","-","cmd","包含","文件","对象","集成","应","defintion","中","代码","存在","!","crtl","意外","地","或","将","此","f12","...","局部","、","并","该类","所有","快捷键","abstract","@","随意","测试","与","类","运行","之道","一个","被","*","testing","例子","而是","如何","有","abap","类时","涉及","一次","不","candidate","如"],"title":"将测试放在局部类","title_tokens":["类","放在","局部","将","测试"]},{"location":"archives/ABAP-guide-zh/#_142","text":"ABAP 整洁之道 > 目录 > 测试 > 测试类 > 本节 将若干测试类使用的帮助方法放在帮助类中。通过继承（关系）或委托（具有关系）使帮助方法可用。 \" inheritance example CLASS lth_unit_tests DEFINITION ABSTRACT FOR TESTING DURATION SHORT RISK LEVEL HARMLESS . PROTECTED SECTION . CLASS-METHODS assert_activity_entity IMPORTING actual_activity_entity TYPE REF TO zcl_activity_entity expected_activity_entity TYPE REF TO zcl_activity_entity . ... ENDCLASS . CLASS lth_unit_tests IMPLEMENTATION . METHOD assert_activity_entity . ... ENDMETHOD . ENDCLASS . CLASS ltc_unit_tests DEFINITION INHERITING FROM lth_unit_tests FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS . ... ENDCLASS .","text_tokens":["或","将","final",">","目录","importing","...","zcl","duration","\"","endclass","protected","short","放在","ltc","的","expected","class","type","for","risk","methods","本","method","帮助","若干","。","（","unit","abstract","关系","测试","from","委托","类","section","）","类中","之道","-","to","endmethod","implementation","level","actual","可用","_","testing","inheritance","entity","ref","harmless","activity","abap","使用","使","整洁","example"," ","tests","assert","lth","方法","通过","具有",".","继承","inheriting","definition","节"],"title":"将帮助方法放在帮助类","title_tokens":["类","放在","将","帮助","方法"]},{"location":"archives/ABAP-guide-zh/#_143","text":"ABAP 整洁之道 > 目录 > 测试 > 测试类 > 本节 在 ABAP 开发工具中，按 Ctrl+Shift+F10 运行某个类中的所有测试。按 Ctrl+Shift+F11 以包括覆盖范围测量。按 Ctrl+Shift+F12 还可运行作为测试关系维护的其他类中的测试。 在 macOS 中，使用 Cmd 而不是 Ctrl 。","text_tokens":["shift","不是",">","f12","目录","按","在","覆盖","f11","开发","还","的","工具","以","而","本","覆盖范围","所有","。","某个","ctrl","关系","测试","开发工具","可","类","运行","之道","类中","cmd","测量","f10","中","范围","维护","其他","作为","，","macos","abap","使用","整洁"," ","+","包括","节"],"title":"如何执行测试类","title_tokens":["类","测试","执行","如何"]},{"location":"archives/ABAP-guide-zh/#_144","text":"ABAP 整洁之道 > 目录 > 测试 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","测试","节"],"title":"被测代码","title_tokens":["被测","代码"]},{"location":"archives/ABAP-guide-zh/#cut","text":"ABAP 整洁之道 > 目录 > 测试 > 被测代码 > 本节 为被测代码的变量提供一个有意义的名称： DATA blog_post TYPE REF TO ... 不要只使用类名称的所有无价值的命名空间和前缀来重复类名称： \" anti-pattern DATA clean_fra_blog_post TYPE REF TO ... 如果您具有不同的测试设置，且对描述对象的变化状态可能会有所帮助： DATA empty_blog_post TYPE REF TO ... DATA simple_blog_post TYPE REF TO ... DATA very_long_blog_post TYPE REF TO ... 如果想不到起什么名称有意义，请使用缺省名称 cut 。该缩写代表“code under test”。 DATA cut TYPE REF TO ... 特别是在不整洁且令人困惑的测试中，调用变量 cut 可以暂时帮助读者查看实际测试的内容。然而，从长远来看，整理测试才是真正有效的方法。","text_tokens":["重复","该",">","目录","长远","前缀","有所","价值","您","查看","本","缺省","为","空间","测","，","设置","ref","调用","整洁"," ","代表","是","意义","令人","\"","有效","type","来","帮助","。","如果","test","不整洁","状态","data","empty","under","code","pattern","_","“","使用","不同","从","方法","fra","具有","anti","缩写","节","blog","变化","请","simple","可以","在","命名","的","无","cut","不到","可能","会","想不到","：","和","特别","to","-","clean","且","对象","整理","代码","”","中","变量","提供","post","才","very","起","令人困惑","...","被测","对","实际","所有","测试","读者","真正","类","描述","不要","之道","内容","然而","一个","被","long","来看","困惑","只","有","abap","什么","暂时","名称"],"title":"赋予被测代码有意义的名称，或使用缺省名称 CUT","title_tokens":["，","的","或","意义","缺省","有","cut","使用"," ","被测","名称","赋予","代码"]},{"location":"archives/ABAP-guide-zh/#_145","text":"ABAP 整洁之道 > 目录 > 测试 > 被测代码 > 本节 测试公共项而非私有内部项 的实际结果是，使用_接口_输入您的被测代码 DATA code_under_test TYPE REF TO some_interface . 而不是_类_ \" anti-pattern DATA code_under_test TYPE REF TO some_class .","text_tokens":["项而非","是","不是",">","目录","输入您","被测","\"","私有","的","class","type","实际","而","本","some","测试","项","test","类","而非","data","之道","under","code","to","-","interface","pattern","公共","被","代码","_","输入","测","，","结果","ref","abap","使用","整洁"," ","内部",".","anti","接口","节"],"title":"测试接口而非类","title_tokens":["测试","接口","而","非类"]},{"location":"archives/ABAP-guide-zh/#_146","text":"ABAP 整洁之道 > 目录 > 测试 > 被测代码 > 本节 如果要测试的方法需要大量参数或准备好的数据，有必要将对它的调用提取到它自己的帮助方法中，该方法预设了不那么重要的参数： METHODS map_xml_to_itab IMPORTING xml_string TYPE string config TYPE / clean / xml2itab_config DEFAULT default_config format TYPE / clean / xml2itab_format DEFAULT default_format . METHOD map_xml_to_itab . result = cut -> map_xml_to_itab ( xml_string = xml_string config = config format = format ). ENDMETHOD . DATA ( itab ) = map_xml_to_itab ( '<xml></xml>' ). 直接调用原始方法会让您的测试陷入很多无意义的细枝末节： \" anti-pattern DATA ( itab ) = cut -> map_xml_to_itab ( xml_string = '<xml></xml>' config = VALUE # ( 'some meaningless stuff' ) format = VALUE # ( 'more meaningless stuff' ) ).","text_tokens":["直接","该","到",">","目录","那么","很多","itab","提取","您","methods","本","stuff","必要","它","xml2itab","meaningless","准备","=","#","原始","，","调用","重要","string","整洁","map"," ",".","意义","more","数据",")","\"","(","default","好","type","method","帮助","如果","陷入","data","pattern","'","_","要","/","方法","anti","节","大量","result","importing","的","无","cut","会","了","：","endmethod","to","-","clean","<","代码","中","value","让","自己","或","预设","将","被测","对","format","需要","some","测试","末节","细枝","之道","config","细枝末节","xml","有","abap","参数","不"],"title":"将被测代码的调用提取到自身的方法","title_tokens":["的","将","调用","到","自身","方法","被","代码","提取","测"]},{"location":"archives/ABAP-guide-zh/#_147","text":"ABAP 整洁之道 > 目录 > 测试 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","测试","节"],"title":"注入","title_tokens":["注入"]},{"location":"archives/ABAP-guide-zh/#_148","text":"ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 依赖倒置意味着您将所有依赖项传递给构造函数： METHODS constructor IMPORTING customizing_reader TYPE REF TO if_fra_cust_obj_model_reader . METHOD constructor . me -> customizing_reader = customizing_reader . ENDMETHOD . 不要使用 setter 注入，这样做会以非预期方式使用生产代码： \" anti-pattern METHODS set_customizing_reader IMPORTING customizing_reader TYPE REF TO if_fra_cust_obj_model_reader . METHOD do_something . object -> set_customizing_reader ( a ). object -> set_customizing_reader ( b ). \" would you expect that somebody does this? ENDMETHOD . 不要使用 FRIENDS 注入，这会在替换生产依赖项之前对其进行初始化，产生意想不到的后果。当您重命名内部项后，它将立即中断。它还会绕过构造函数中的初始化。 \" anti-pattern METHOD setup . cut = NEW fra_my_class ( ). \" <- builds a productive customizing_reader first - what will it break with that? cut -> customizing_reader ?= cl_abap_testdouble => create ( 'if_fra_cust_obj_model_reader' ). ENDMETHOD . METHOD constructor . customizing_reader = fra_cust_obj_model_reader => s_get_instance ( ). customizing_reader -> fill_buffer ( ). \" <- won't be called on your test double, so no chance to test this ENDMETHOD .","text_tokens":["will","意想","?",">","目录","your","testdouble","倒置","be","函数","do","expect","还","注入","这样","您","methods","本","this",",","项","当","它","初始","does","get","with","=","，","ref","整洁"," ","内部",".","绕过","意味","做会","立即","something","buffer","给",")","\"","cust","break","obj","(","这会","重命名","class","type","create","method","替换","b","。","test","方式","pattern","chance","生产","my","'","_","使用","后果","t","fra","anti","构造","节","instance","cl","if","it","构造函数","importing","以非","初始化","在","somebody","命名","model","依赖","其","的","cut","意想不到","不到","won","会","想不到","double","产生","：","s","friends","endmethod","to","-","on","set","no","传递","customizing","<","what","代码","中","productive","you","so","new","reader","a","意味着","constructor","that","之前","me","将","进行","对","中断","所有","setup","测试","setter","不要","之道","first","fill","项后","abap","called","预期","would","builds","object"],"title":"使用依赖倒置注入测试替身","title_tokens":["注入","使用","测试","倒置","替身","依赖"]},{"location":"archives/ABAP-guide-zh/#abap_1","text":"ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 DATA ( customizing_reader ) = CAST / clean / customizing_reader ( cl_abap_testdouble => create ( '/clean/default_custom_reader' ) ). cl_abap_testdouble => configure_call ( customizing_reader ) -> returning ( sub_claim_customizing ). customizing_reader -> read ( 'SOME_ID' ). 与自定义测试替身相比，更短、更容易理解： \" anti-pattern CLASS / dirty / default_custom_reader DEFINITION FOR TESTING CREATE PUBLIC . PUBLIC SECTION . INTERFACES / dirty / customizing_reader . DATA customizing TYPE / dirty / customizing_table . ENDCLASS . CLASS / dirty / default_custom_reader IMPLEMENTATION . METHOD / dirty / customizing_reader~read . result = customizing . ENDMETHOD . ENDCLASS . METHOD test_something . DATA ( customizing_reader ) = NEW / dirty / customizing_reader ( ). customizing_reader -> customizing = sub_claim_customizing . ENDMETHOD .","text_tokens":["result","returning","sub","cl","custom",">","something","目录","testdouble","定义",")","claim","\"","endclass","(","id","default","相比","class","call","注入","、","for","type","create","~","本","method","some","cast","测试","自定","与","table","test","：","容易","section","public","endmethod","data","之道","clean","-","理解","pattern","implementation","dirty","customizing","自定义","短","'","=","_","替身","testing","，","read","interfaces","new","reader","abap","整洁","configure"," ","/","更",".","anti","definition","节"],"title":"考虑使用 ABAP 测试替身工具","title_tokens":["工具","abap","考虑","使用"," ","测试","替身"]},{"location":"archives/ABAP-guide-zh/#_149","text":"ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 一般来说，整洁的编程风格可以让您使用标准 ABAP 单元测试和测试替身完成大部分工作。但是，有些工具可以让您以优雅的方式处理更棘手的情况: 使用 CL_OSQL_REPLACE 服务测试复杂的 OpenSQL 语句，方法是将这些语句重定向到可在不影响系统其余部分的情况下填充测试数据的测试数据仓。 使用 CDS 测试框架来测试您的 CDS 视图。","text_tokens":["单元","是","其余部分","但是","复杂","将","cl","一般来说","棘手",">","定向","目录","处理","到","测试数据","部分","一般","大部","情况","可以","服务","在","数据","大部分","的","编程","风格","工具","注入","以","您","本","来","。","osql","系统","测试",":","可","框架","这些","和","语句","cds","之道","完成","方式","余部","重定向","标准","优雅","_","替身","填充","仓","影响","，","有些","replace","视图","让","abap","使用","opensql","整洁"," ","工作","单元测试","更","不","其余","方法","下","来说","节"],"title":"利用测试工具","title_tokens":["工具","利用","试工","测试","测试工具"]},{"location":"archives/ABAP-guide-zh/#_150","text":"ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 如果所有其他技术都失败了，或者处于旧代码可能无法正常运行的情况下，应避免使用 测试缝隙 来增加可测试性。 尽管第一眼看上去很舒服，但测试接缝是侵入性的，而且容易与私有依赖项纠缠在一起，从长远来看，它们很难保持活性和稳定性。 因此，我们建议避免仅将测试接缝作为一种临时解决方法以将代码重构为更易于测试的形式。","text_tokens":["看上去",">","目录","接缝","情况","一眼","它们","形式","第一","长远","私有","注入","以","本","增加","项","保持","容易","一起","失败","为","，","整洁","无法"," ","下","是","易于","活性","技术","来","。","如果","建议","可","第一眼","性","或者","其他","但","作为","定性","避免","使用","更","从","方法","尽管","节","重构","处于","而且","因此","在","舒服","依赖","的","旧","可能","了","正常","和","很","应","代码","上去","仅","缝隙","都","稳定性","将","侵入","一种","我们","很难","所有","测试","与","运行","之道","看上","纠缠","来看","稳定","解决","abap","临时"],"title":"使用测试缝隙作为临时解决办法","title_tokens":["缝隙","解决","使用","解决办法","办法","测试","临时","作为"]},{"location":"archives/ABAP-guide-zh/#local-friends","text":"ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 CLASS / clean / unit_tests DEFINITION . PRIVATE SECTION . DATA cut TYPE REF TO / clean / interface_under_test . METHODS setup . ENDCLASS . CLASS / clean / class_under_test DEFINITION LOCAL FRIENDS unit_tests . CLASS unit_tests IMPLEMENTATION . METHOD setup . DATA ( mock ) = cl_abap_testdouble => create ( '/clean/some_mock' ). \" /clean/class_under_test is CREATE PRIVATE \" so this only works because of the LOCAL FRIENDS cut = NEW / clean / class_under_test ( mock ). ENDMETHOD . ENDCLASS .","text_tokens":["the","cl","because",">","目录","testdouble","endclass",")","\"","(","class","cut","注入","type","is","methods","create","only","本","method","this","unit","setup","some","测试","test","section","friends","endmethod","data","之道","clean","to","under","interface","implementation","'","=","_","so","ref","mock","of","new","private","abap","整洁"," ","tests","/","works",".","local","definition","节"],"title":"使用 LOCAL FRIENDS 访问依赖倒置的构造函数","title_tokens":["的","friends","使用","访问"," ","构造函数","local","倒置","构造","函数","依赖"]},{"location":"archives/ABAP-guide-zh/#local-friends_1","text":"ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 访问私有成员和受保护成员以插入模拟数据的单元测试很脆弱：当测试代码的内部结构发生变化时，它们会中断。 \" anti-pattern CLASS / dirty / class_under_test DEFINITION LOCAL FRIENDS unit_tests . CLASS unit_tests IMPLEMENTATION . METHOD returns_right_result . cut -> some_private_member = 'AUNIT_DUMMY' . ENDMETHOD . ENDCLASS .","text_tokens":["内部结构","result","单元","变化","模拟",">","right","目录","member","测试代码","数据","dummy","endclass","插入","它们","\"","definition","returns","私有","的","class","生变","注入","以","访问","发生","cut","会","本","中断","method","aunit","保护","。","unit","成员","some","测试","test","：","当","和","friends","很","之道","-","under","受","endmethod","pattern","implementation","发生变化","dirty","时","'","结构","代码","_","=","，","abap","private","整洁"," ","tests","/","单元测试","内部",".","local","anti","脆弱","节"],"title":"勿滥用 LOCAL FRIENDS 侵入被测代码","title_tokens":["friends","滥用","勿"," ","侵入","local","被测","代码"]},{"location":"archives/ABAP-guide-zh/#_151","text":"ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 \" anti-pattern IF me -> in_test_mode = abap_true .","text_tokens":["me",">","if","目录","in","\"","true","注入","本","test","测试","-","之道","mode","pattern","=","_","abap","整洁"," ",".","anti","节"],"title":"勿更改生产代码来使代码可测试","title_tokens":["使","勿","来","生产","测试","代码","更改","可"]},{"location":"archives/ABAP-guide-zh/#_152","text":"ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 不要在单元测试中通过子类化和覆盖方法来模拟方法。尽管这是可行的，但这样的方法很脆弱，在重构代码时测试很容易中断。而且真正的使用者还可能继承您的类， 如果没有明确设计此功能，这可能会令您措手不及 。 \" anti-pattern CLASS unit_tests DEFINITION INHERITING FROM / dirty / real_class FOR TESTING [...]. PROTECTED SECTION . METHODS needs_to_be_mocked REDEFINITION . 要获取旧被测代码，请 改用测试接缝 。测试接缝同样脆弱，但至少不会改变类的生产行为（如通过删除先前的 FINAL 标志或将方法的作用域从 PRIVATE 更改为 PROTECTED 来启用继承时可能发生的行为），仍不失为一种更为整洁的方式。 在编写新代码时，在设计类时应直接考虑此可测试性问题，并找到其他更好的方法。常见的最佳做法包括 求助于其他测试工具 并将问题方法提取到本身具有接口的单独类中。 勿更改生产代码来使代码可测试 的更具体的变化形式。","text_tokens":["直接","找到","具体","到",">","不及","目录","接缝","be","脆弱","提取","形式","还","redefinition","注入","发生","这是","这样","您","这","for","本","methods","可行","至少","不失为","容易","section","用者","类中","考虑","子","[","时","测","单独","，","作用","private","整洁"," ","做法",".","继承","needs","会令","接口","mocked","类化","模拟","real","final","求助","\"","求助于","class","来","。","如果","测试工具","可","措手","标志","性","最佳","方式","pattern","生产","_","其他","但","要","使","使用","/","单元测试","更","从","方法","通过","没有","尽管","使用者","常见","anti","编写","节","包括","具有","重构","单元","更好","变化","功能","而且","请","问题","在","覆盖","不会","protected","改用","的","旧","行为","工具","可能","启用","unit","更为","from","助于","更改","和","]","很","-","to","仍","获取","明确","应","本身","中","代码","tests","作用域","inheriting","设计","删除","或","将","此","...","一种","并","中断","（","先前","不失","测试","同样","真正","类","改变","）","不要","之道","勿","dirty","措手不及","被","testing","abap","类时","试工","新","definition","改为","如"],"title":"勿子类化来模拟方法","title_tokens":["类化","模拟","来","方法","勿子"]},{"location":"archives/ABAP-guide-zh/#_153","text":"ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 cut = NEW / clean / class_under_test ( db_reader = db_reader config = VALUE # ( ) writer = VALUE # ( ) ). 尽可能精确地定义给定条件：不要设置测试不需要的数据，也不要模拟永远不会调用的对象。这些内容会分散读者对真实运行情况的注意力。 \" anti-pattern cut = NEW / dirty / class_under_test ( db_reader = db_reader config = config writer = writer ). 在某些情况下，根本不需要模拟某些内容，数据结构和数据容器通常就是这种情况。例如，您的单元测试可以使用 transient_log 生产版本正常运行，因为该版本只存储数据而不会产生其他影响。","text_tokens":["就是","该",">","目录","定义","情况","尽可","注入","也","您","本","结构","#","=","，","分散","设置","调用","整洁"," ",".","log","下","存储","模拟","某些","版本","数据",")","\"","根本","(","class","而","例如","。","精确","test","这种","这些","under","容器","通常","pattern","生产","_","其他","条件","使用","/","单元测试","transient","anti","节","单元","可以","在","不会","的","cut","可能","会","产生","正常","：","数据结构","和","-","clean","对象","value","注意力","new","reader","真实","尽可能","地","db","因为","对","注意","需要","测试","读者","给定","不要","之道","内容","运行","config","writer","dirty","永远","影响","只","abap","不"],"title":"勿模拟不需要的东西","title_tokens":["东西","的","模拟","勿","需要","不"]},{"location":"archives/ABAP-guide-zh/#_154","text":"ABAP 整洁之道 > 目录 > 测试 > 注入 > 本节 与集成测试不同，单元测试涉及数据输入和数据输出，所有测试数据都是根据需要动态定义的。 cl_abap_testdouble => configure_call ( test_double ) -> returning ( data ). 不要开始构建用于区分“ 测试案例标识 ”的框架来决定要提供的数据。生成的代码将会如此冗长而复杂，以至于您无法长期保留这些测试。 \" anti-pattern test_double -> set_test_case ( 1 ). CASE me -> test_case . WHEN 1 . WHEN 2 . ENDCASE .","text_tokens":["case","长期","测试数据",">","目录","如此","testdouble","定义","区分","注入","您","本","决定","=","，","标识","整洁","无法"," ","以至","when",".","1","是","数据",")","案例","\"","(","call","而","来","。","test","这些","data","pattern","_","“","要","构建","configure","单元测试","不同","anti","节","保留","单元","returning","复杂","cl","endcase","的","double","生成","和","-","用于","set","集成","”","代码","都","提供","输出","将会","me","根据","至于","需要","开始","所有","测试","与","框架","不要","之道","输入","abap","涉及","冗长","2","以至于","动态"],"title":"勿构建测试框架","title_tokens":["构建","测试","勿","框架"]},{"location":"archives/ABAP-guide-zh/#_155","text":"ABAP 整洁之道 > 目录 > 测试 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","测试","节"],"title":"测试方法","title_tokens":["测试","测试方法","方法"]},{"location":"archives/ABAP-guide-zh/#_156","text":"ABAP 整洁之道 > 目录 > 测试 > 测试方法 > 本节 好的名称可以反映出测试的设想内容和预期结果： METHOD reads_existing_entry . METHOD throws_on_invalid_key . METHOD detects_invalid_input . 不恰当的名称则反映操作内容，重复无意义的事实或含糊不清： \" anti-patterns \" What's expected, success or failure? METHOD get_conversion_exits . \" It's a test method, what else should it do but \"test\"? METHOD test_loop . \" So it's parameterized, but what is its aim? METHOD parameterized_test . \" What's \"_wo_w\" supposed to mean and will you still remember that in a year from now? METHOD get_attributes_wo_w . 由于 ABAP 只允许方法名称使用 30 个字符，如果名称过短而无法表达足够的含义，那么添加注释是合理的。在 ABAP 文档中或在测试方法的第一行添加注释都是不错的选择。 如果有很多名称过长的测试方法，这可能意味着您应该将单个测试类拆分为多个测试类，并在类名称中的给定部分予以区别。","text_tokens":["will","重复","?","则",">","w","目录","那么","parameterized","很多","exits","do","第一","区别","attributes","注释","now","您","这","添加","本","一行","由于",",","still","get","loop","出","，","整洁","无法"," ","足够","its",".","意味","success","conversion","是","意义","supposed","in","部分","\"","事实","好","合理","测试方法","允许","is","aim","而","method","。","如果","throws","test","mean","含义","'","_","应该","结果","使用","方法","input","but","anti","节","多个","it","可以","在","不错","existing","的","恰当","无","expected","含糊不清","过","可能","第一行","过长","from","：","s","和","on","-","to","year","单个","should","and","选择","what","中","you","so","a","detects","key","都","表达","else","意味着","个字符","that","反映","操作","或","将","拆","patterns","文档","并","invalid","测试","含糊","分为","reads","类","给定","failure","wo","内容","之道","字符","30","短","or","设想","只","有","abap","预期","entry","remember","不","名称","予以"],"title":"测试方法名称：反映出设想和预期的情形","title_tokens":["的","和","情形","测试方法","预期","方法","出","名称","测试","设想","：","反映"]},{"location":"archives/ABAP-guide-zh/#given-when-then","text":"ABAP 整洁之道 > 目录 > 测试 > 测试方法 > 本节 按照 given-when-then 范式组织测试代码：首先，初始化给定部分中的内容 (\"given\")，其次调用实际测试的内容 (\"when\")，再次验证结果 (\"then\")。 如果 given 或 then 部分过长，您无法再从视觉上区分这三个部分，请提取子方法。空行或注释作为分隔符乍一看可能还不错，但并不能真正减少视觉混乱。尽管如此，空行或注释对于读者和测试新手区分这三个部分还是有所帮助的。","text_tokens":[">","目录","如此","提取","减少","还","区分","有所","注释","您","这","本","乍一看","初始","子","分隔","，","其次","调用","整洁","when"," ","无法","组织","部分","测试代码","范式",")","\"","(","测试方法","再","尽管如此","帮助","。","如果","按照","但","作为","结果","验证","then","从","方法","首先","尽管","节","上","请","视觉","还是","初始化","不能","不错","的","可能","过长","三个","：","和","-","代码","中","再次","或","新手","实际","并","测试","分隔符","读者","真正","给定","对于","内容","之道","混乱","given","空行","abap"],"title":"使用 given-when-then","title_tokens":["-","使用","when"," ","then","given"]},{"location":"archives/ABAP-guide-zh/#when","text":"ABAP 整洁之道 > 目录 > 测试 > 测试方法 > 本节 确保测试方法的 \"when\" 部分仅包含对被测类的一次调用： METHOD rejects_invalid_input . \" when DATA ( is_valid ) = cut -> is_valid_input ( 'SOME_RANDOM_ENTRY' ). \" then cl_abap_unit_assert => assert_false ( is_valid ). ENDMETHOD . 调用多个对象表明该方法没有明确的焦点，测试内容过多。这使得测试失败时更难以找到原因：是第一次、第二次还是第三次调用导致了失败？这也使读者感到困惑，因为他不确定确切的被测功能是什么。","text_tokens":["random","找到","该",">","目录","确保","第一","也","这","本","失败","第三","？","时","=","难以","测","，","调用","整洁","when"," ","assert","导致",".","二次","使得","是","第三次","部分",")","\"","(","确定","测试方法","is","表明","method","。","焦点","过多","data","测类","'","_","他","第二次","使","then","更","rejects","方法","input","没有","确切","节","多个","功能","cl","还是","感到","第二","的","cut","false","unit","了","：","endmethod","-","包含","对象","明确","仅","valid","原因","三次","因为","对","、","invalid","some","测试","读者","内容","之道","第一次","被","困惑","abap","entry","什么","一次","不"],"title":"\"When\" 恰为一个调用","title_tokens":["调用","when"," ","一个","恰为","\""]},{"location":"archives/ABAP-guide-zh/#teardown","text":"ABAP 整洁之道 > 目录 > 测试 > 测试方法 > 本节 通常只需要使用 teardown 方法来清除数据库条目或集成测试中的其他外部资源。 重置测试类的成员（尤其是 cut 和所用的测试替身）是多余的操作；在启动下一个测试方法之前，这些成员就会由 setup 方法覆盖。","text_tokens":["资源","是","操作","或",">","目录","数据","多余","在","覆盖","就","的","重置","cut","外部","测试方法","尤其","数据库","需要","会","本","来","。","（","；","成员","setup","测试","由","类","启动","这些","和","）","之道","清除","通常","条目","teardown","一个","集成","中","其他","替身","，","只","据库","abap","使用","所用","整洁"," ","方法","下","之前","节"],"title":"除非真正需要否则勿添加 TEARDOWN","title_tokens":["勿","需要","添加"," ","teardown","否则","除非","真正"]},{"location":"archives/ABAP-guide-zh/#_157","text":"ABAP 整洁之道 > 目录 > 测试 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","测试","节"],"title":"测试数据","title_tokens":["数据","测试","测试数据"]},{"location":"archives/ABAP-guide-zh/#_158","text":"ABAP 整洁之道 > 目录 > 测试 > 测试数据 > 本节 在单元测试中，您希望能够快速判断出哪些数据和替身是需要关注的内容，哪些内容的作用只是为了防止代码崩溃。通过为没有含义的内容起一个显眼的名称和值来支持此功能，例如： DATA ( alert_id ) = '42' . \" well-known meaningless numbers DATA ( detection_object_type ) = '?=/\"&' . \" 'keyboard accidents' CONSTANTS some_random_number TYPE i VALUE 782346 . \" revealing variable names 不要欺骗人们相信某些内容可以与真实的对象或真实的定制联系起来（如果没有联系）： \" anti-pattern DATA ( alert_id ) = '00000001223678871' . \" this alert really exists DATA ( detection_object_type ) = 'FRA_SCLAIM' . \" this detection object type, too CONSTANTS memory_limit TYPE i VALUE 4096 . \" this number looks carefully chosen","text_tokens":["random","revealing","?","支持","定制","测试数据",">","目录","防止","id","exists","您","本","this",",","4096","really","为","人们","meaningless","出","=","哪些","，","well","作用","&","alert","整洁"," ","42",".","是","某些","为了","数据",")","\"","keyboard","(","只是","type","快速","联系","too","例如","。","如果","data","memory","关注","782346","pattern","含义","'","carefully","_","/","单元测试","looks","能够","通过","没有","fra","anti","节","相信","单元","constants","起来","功能","可以","在","欺骗","的","i","chosen","：","和","-","对象","detection","中","代码","替身","value","真实","崩溃","known","或","variable","此","number","limit","起","accidents","需要","（","00000001223678871","some","测试","与","判断","显眼","names","希望","sclaim","）","内容","之道","不要","一个","值来","abap","numbers","名称","object"],"title":"使其易于辨明含义","title_tokens":["其","辨明","易于","使","含义"]},{"location":"archives/ABAP-guide-zh/#_159","text":"ABAP 整洁之道 > 目录 > 测试 > 测试数据 > 本节 exp_parameter_in = VALUE # ( ( parameter_name = '45678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789END1' ) ( parameter_name = '45678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789END2' ) ). 不要强迫读者去比较长且无意义的字符串来发现细微的差别。","text_tokens":["parameter","45678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789end1","意义","测试数据",">","in","目录","发现","数据",")","(","的","差别","无","本","来","。","长且","测试","读者","不要","之道","字符串","字符","'","#","=","_","value","45678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789end2","去","name","细微","abap","整洁","exp"," ",".","比较","强迫","节"],"title":"使其易于辨明差异","title_tokens":["其","辨明","易于","使","差异"]},{"location":"archives/ABAP-guide-zh/#_160","text":"ABAP 整洁之道 > 目录 > 测试 > 测试数据 > 本节 CONSTANTS some_nonsense_key TYPE char8 VALUE 'ABCDEFGH' . METHOD throws_on_invalid_entry . TRY . \" when cut -> read_entry ( some_nonsense_key ). cl_abap_unit_assert => fail ( ). CATCH / clean / customizing_reader_error . \" then ENDTRY . ENDMETHOD .","text_tokens":["constants","cl","测试数据",">","目录","数据","char8",")","\"","(","type","cut","本","method","unit","some","abcdefgh","测试","throws","invalid","nonsense","catch","on","endmethod","-","之道","clean","customizing","'","=","_","value","error","read","reader","abap","key","整洁","entry"," ","when","fail","/","assert","then",".","endtry","try","节"],"title":"使用常量描述测试数据的用途和重要性","title_tokens":["用途","常量","的","和","描述","重要性","使用","重要","测试数据","数据","测试"]},{"location":"archives/ABAP-guide-zh/#_161","text":"ABAP 整洁之道 > 目录 > 测试 > 本节","text_tokens":["abap","之道","整洁",">"," ","目录","本","测试","节"],"title":"断言","title_tokens":["断言"]},{"location":"archives/ABAP-guide-zh/#_162","text":"ABAP 整洁之道 > 目录 > 测试 > 断言 > 本节 仅使用少量断言，准确地断言测试方法的内容。 METHOD rejects_invalid_input . \" when DATA ( is_valid ) = cut -> is_valid_input ( 'SOME_RANDOM_ENTRY' ). \" then cl_abap_unit_assert => assert_false ( is_valid ). ENDMETHOD . 断言过多表明该方法没有明确的重点。这会在很多地方将生产和测试代码耦合在一起：更改功能将需要重写大量的测试，尽管它们实际上并未涉及更改后的功能。各种各样的断言使读者感到困惑，难以辨别其中最重要的那个断言。 \" anti-pattern METHOD rejects_invalid_input . \" when DATA ( is_valid ) = cut -> is_valid_input ( 'SOME_RANDOM_ENTRY' ). \" then cl_abap_unit_assert => assert_false ( is_valid ). cl_abap_unit_assert => assert_not_initial ( log -> get_messages ( ) ). cl_abap_unit_assert => assert_equals ( act = sy - langu exp = 'E' ). ENDMETHOD .","text_tokens":["random","该",">","目录","很多","准确","它们","本","最","messages","一起","辨别","实际上","get","initial","=","难以","那个","，","重要","整洁","when"," ","assert",".","log","断言","测试代码",")","\"","(","这会","测试方法","is","表明","method","。","耦合","过多","data","pattern","重写","生产","'","_","其中","sy","使","使用","then","重点","rejects","少量","方法","input","尽管","没有","各种各样","anti","节","大量","功能","cl","在","感到","的","langu","cut","false","unit","更改","：","和","endmethod","-","明确","代码","仅","后","equals","exp","valid","地","e","将","各样","并未","实际","需要","invalid","some","测试","读者","内容","之道","困惑","地方","abap","act","entry","涉及","not","各种"],"title":"少而精的断言","title_tokens":["的","断言","少而精"]},{"location":"archives/ABAP-guide-zh/#_163","text":"ABAP 整洁之道 > 目录 > 测试 > 断言 > 本节 cl_abap_unit_assert => assert_equals ( act = table exp = test_data ). 断言的作用往往不止表面看到的那些，例如 assert_equals 包括类型匹配，如果值不同，还能提供准确的描述。使用错误的、过于常见的断言将迫使您立即进入调试器，而不是让您直接从错误消息中看到问题所在。 \" anti-pattern cl_abap_unit_assert => assert_true ( xsdbool ( act = exp ) ).","text_tokens":["直接","类型","调试器","不是","将","cl","立即",">","断言","目录","看到","问题所在","准确","问题",")","错误","\"","true","(","还","的","、","您","而","本","例如","unit","。","迫使","如果","测试","table","test","那些","表面","data","之道","能","描述","调试","-","xsdbool","pattern","不止","过于","值","=","_","匹配","常见","中","，","作用","往往","让","abap","使用","act","整洁","equals"," ","exp","提供","所在","assert","不同","进入","从",".","消息","包括","anti","节"],"title":"使用恰当的断言类型","title_tokens":["类型","的","恰当","使用","断言"]},{"location":"archives/ABAP-guide-zh/#_164","text":"ABAP 整洁之道 > 目录 > 测试 > 断言 > 本节 assert_contains_exactly ( actual = table expected = VALUE string_table ( ( `ABC` ) ( `DEF` ) ( `GHI` ) ) ). 如果可以表达期望的实际内容，就不要编写幻数数量断言。尽管仍然可以达到预期，但数字可能会有所不同。相反，尽管内容完全出乎意料，但数字可能会匹配。 \" anti-pattern assert_equals ( act = lines ( log_messages ) exp = 3 ).","text_tokens":["act","def",">","断言","目录","exp","可以","相反","数字",")","ghi","\"","(","就","expected","abc","的","数量","有所","实际","幻数","可能","会","本","。","`","如果","测试","table","出乎","messages","完全","内容","之道","不要","contains","达到","出乎意料","-","pattern","lines","exactly","actual","=","_","value","但","匹配","log","3","，","有所不同","abap","string","整洁","表达"," ","期望","预期","意料","assert","不同","anti","equals",".","尽管","编写","仍然","节"],"title":"断言内容而非数量","title_tokens":["数量","非","内容","而","断言"]},{"location":"archives/ABAP-guide-zh/#_165","text":"ABAP 整洁之道 > 目录 > 测试 > 断言 > 本节 如果您对结果的元质量感兴趣，但对实际内容本身不感兴趣，请使用合适的断言来表达： assert_all_lines_shorter_than ( actual_lines = table expected_max_length = 80 ). 断言精确的内容会掩盖您实际想要测试的内容。它还很脆弱，因为重构可能会产生一个不同但完全可以接受的结果，尽管它会中断所有过于精确的单元测试。 \" anti-pattern assert_equals ( act = table exp = VALUE string_table ( ( `ABC` ) ( `DEF` ) ( `GHI` ) ) ).","text_tokens":[">","目录","还","all","您","本","接受","table","它","lines","=","，","想要","string","整洁"," ","assert",".","def","元","断言",")","\"","(","来","掩盖","。","精确","如果","它会","`","length","pattern","合适","actual","_","但","结果","使用","单元测试","不同","尽管","anti","节","重构","单元","请","max","可以","ghi","的","expected","abc","感兴趣","可能","会","产生","感兴","：","质量","很","-","本身","value","表达","equals","exp","shorter","因为","不感兴趣","对","实际","80","中断","所有","测试","兴趣","完全","内容","之道","一个","过于","abap","act","脆弱","than"],"title":"断言质量而非内容","title_tokens":["质量","非","内容","而","断言"]},{"location":"archives/ABAP-guide-zh/#fail","text":"ABAP 整洁之道 > 目录 > 测试 > 断言 > 本节 METHOD throws_on_empty_input . TRY . \" when cut -> do_something ( '' ). cl_abap_unit_assert => fail ( ). CATCH / clean / some_exception . \" then ENDTRY . ENDMETHOD .","text_tokens":["cl","something",">","断言","目录",")","\"","do","(","cut","本","method","endtry","exception","unit","some","throws","测试","catch","on","endmethod","empty","之道","-","clean","'","=","_","abap","整洁","when"," ","fail","/","then","assert","input",".","try","节"],"title":"使用 FAIL 检查是否出现预期异常","title_tokens":["检查","出现","异常","使用","fail","预期"," ","是否"]},{"location":"archives/ABAP-guide-zh/#_166","text":"ABAP 整洁之道 > 目录 > 测试 > 断言 > 本节 METHODS reads_entry FOR TESTING RAISING / clean / some_exception . METHOD reads_entry . \"when DATA ( entry ) = cut -> read_something ( ). \"then cl_abap_unit_assert => assert_not_initial ( entry ). ENDMETHOD . 与以下代码相比，您的测试代码始终专注于愉快路径，因此更易于阅读和理解： \" anti-pattern METHOD reads_entry . TRY . DATA ( entry ) = cut -> read_something ( ). CATCH / clean / some_exception INTO DATA ( unexpected_exception ). cl_abap_unit_assert => fail ( unexpected_exception -> get_text ( ) ). ENDTRY . cl_abap_unit_assert => assert_not_initial ( entry ). ENDMETHOD .","text_tokens":["fail","易于","cl","因此","into","something",">","断言","目录","专注","愉快","测试代码",")","raising","\"","unexpected","(","相比","的","cut","for","您","methods","本","method","exception","unit","some","测试","与","：","reads","catch","和","endmethod","data","之道","clean","-","理解","text","get","pattern","initial","始终","=","_","testing","代码","于","以下","，","read","abap","路径","整洁","entry"," ","when","/","then","assert","更","阅读","not",".","endtry","anti","try","节"],"title":"转发意外异常而非捕获就失败","title_tokens":["就","转发","捕获","非","异常","意外","而","失败"]},{"location":"archives/ABAP-guide-zh/#_167","text":"ABAP 整洁之道 > 目录 > 测试 > 断言 > 本节 METHODS assert_contains IMPORTING actual_entries TYPE STANDARD TABLE OF entries_tab expected_key TYPE key_structure . METHOD assert_contains . TRY . actual_entries [ key = expected_key ]. CATCH cx_sy_itab_line_not_found . cl_abap_unit_assert => fail ( | Couldn't find the key { expected_key }| ). ENDTRY . ENDMETHOD . 而不是一遍又一遍地复制粘贴。","text_tokens":["the","}","不是","cl","find",">","断言","目录","standard","importing","|","itab",")","(","couldn","expected","structure","type","methods","而","本","method","unit","。","测试","table","复制粘贴","catch","entries","一遍","]","endmethod","之道","contains","{","[","'","又","actual","=","_","found","cx","of","sy","abap","key","line","整洁","fail"," ","tab","t","粘贴","assert","not",".","endtry","复制","地","try","节"],"title":"编写自定义断言以缩短代码和避免重复","title_tokens":["重复","避免","缩短","和","以","断言","定义","自定义","自定","代码","编写"]},{"location":"docs/backup/171216/","text":"软件版本 ¶ CentOS 6.7 LAMP PHP 5.6 MySql Apache OwnCloud 9.0.10 安装MySql ¶ [~]# yum -y install mysql mysql-server mysql-devel 配置MySql开机自启动服务 ¶ [~]# chkconfig mysqld on #设置mysql服务随开机启动 [~]# service mysqld start #启动mysql服务 [~]# service mysqld start #启动mysql服务 [~]# chkconfig --list | grep mysqld #检查自启动服务是否处于开启on状态 安装PHP环境 ¶ [~]# yum -y update [~]# rpm -Uvh dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm # 链接测试 [~]# rpm -Uvh mirror.webtatic.com/yum/el6/latest.rpm # 链接测试 [~]# yum install -y php56w.x86_64 php56w-cli.x86_64 php56w-common.x86_64 php56w-gd.x86_64 php56w-ldap.x86_64 php56w-mbstring.x86_64 php56w-mcrypt.x86_64 php56w-mysql.x86_64 php56w-pdo.x86_64 #安装不成功，尝试换顺序 [~]# yum install -y php56w-xml 调试PHP环境 ¶ [~]# chkconfig httpd on #httpd服务加入自启动 [~]# chkconfig --list | grep httpd #检查启动httpd服务 [~]# service httpd restart #重启httpd服务 验证httpd服务 ¶ 打开浏览器,访问http://192.168.XXX.XXX 安装owncloud ¶ [~]# wget download.owncloud.org/community/owncloud-9.0.10.tar.bz2 # 链接测试 [~]# tar -jxf owncloud-9.0.10.tar.bz2 [~]# mv owncloud /var/www/html [~]# cd /var/www/html # 检查解压文件路径是否正确 [html]# ls [html]# pwd [html]# chown -R apache:apache /var/www/html/owncloud/ # 更改owncloud文件夹所属用户组 [~]# chmod 777 /var/www/html/owncloud/config/ 浏览器访问 192.168.XXX.XXX/owncloud 验证安装,并配置管理员用户 owncloud安装完成,简单配置语言 完成 参考链接 ¶ CentOS 6.7 安装私有云owncloud","text_tokens":["devel","wget","环境","x86","开启","uvh","安装","私有","jxf","访问","随","rpm","php56w","64","pwd","pdo","文件夹",",","noarch","org","9.0","启动","www","调试","common","[","--","mcrypt","¶","chown","#","用户组","，","管理员","设置","list"," ","gd","y",".","6","正确","apache","6.7","dl","服务","版本","yum","mbstring","成功","install","重启","尝试","10","浏览","ls","lamp","所属","开机","状态","mirror","server","owncloud","chmod","解压","语言","xxx","配置","html","_","com","192.168","download","验证","自启动","/","restart","httpd","处于","mv","ldap","tar","cd","|","管理","加入","webtatic","~","start","链接","顺序","service","777","mysql","更改","php","grep","]","on","-","完成","文件","浏览器","打开","update","latest","epel","检查","换","路径","chkconfig","用户","fedoraproject","community",":","mysqld","是否","件夹","云","centos","并","测试","简单","5.6","bz2","r","pub","config","软件","el6","xml","http","release","参考","cli","不","var"],"title":"CentOs 6.7 安装 owncloud","title_tokens":["owncloud","6.7"," ","centos","安装"]},{"location":"docs/backup/171216/#_1","text":"CentOS 6.7 LAMP PHP 5.6 MySql Apache OwnCloud 9.0.10","text_tokens":["9.0","apache","5.6","owncloud","6.7"," ","centos","mysql","10",".","lamp","php"],"title":"软件版本","title_tokens":["软件","版本"]},{"location":"docs/backup/171216/#mysql","text":"[~]# yum -y install mysql mysql-server mysql-devel","text_tokens":["install","server","]","-","devel","~"," ","[","mysql","y","#","yum"],"title":"安装MySql","title_tokens":["mysql","安装"]},{"location":"docs/backup/171216/#mysql_1","text":"[~]# chkconfig mysqld on #设置mysql服务随开机启动 [~]# service mysqld start #启动mysql服务 [~]# service mysqld start #启动mysql服务 [~]# chkconfig --list | grep mysqld #检查自启动服务是否处于开启on状态","text_tokens":["处于","mysqld","开启","服务","是否","|","~","随","start","service","mysql","grep","开机","启动","状态","]","on","[","--","#","检查","设置","list","chkconfig"," ","自启动"],"title":"配置MySql开机自启动服务","title_tokens":["开机","启动","自启动","服务","mysql","配置"]},{"location":"docs/backup/171216/#php","text":"[~]# yum -y update [~]# rpm -Uvh dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm # 链接测试 [~]# rpm -Uvh mirror.webtatic.com/yum/el6/latest.rpm # 链接测试 [~]# yum install -y php56w.x86_64 php56w-cli.x86_64 php56w-common.x86_64 php56w-gd.x86_64 php56w-ldap.x86_64 php56w-mbstring.x86_64 php56w-mcrypt.x86_64 php56w-mysql.x86_64 php56w-pdo.x86_64 #安装不成功，尝试换顺序 [~]# yum install -y php56w-xml","text_tokens":["ldap","dl","x86","uvh","安装","yum","mbstring","成功","install","webtatic","~","rpm","链接","php56w","64","顺序","pdo","尝试","mysql","测试","org","noarch","mirror","]","-","pub","common","[","mcrypt","update","latest","epel","#","_","com","el6","，","xml","换","release"," ","/","cli","gd","不","y",".","fedoraproject","6"],"title":"安装PHP环境","title_tokens":["环境","安装","php"]},{"location":"docs/backup/171216/#php_1","text":"[~]# chkconfig httpd on #httpd服务加入自启动 [~]# chkconfig --list | grep httpd #检查启动httpd服务 [~]# service httpd restart #重启httpd服务","text_tokens":["httpd","服务","|","加入","~","重启","service","grep","启动","]","on","[","--","#","检查","list","chkconfig"," ","自启动","restart"],"title":"调试PHP环境","title_tokens":["调试","环境","php"]},{"location":"docs/backup/171216/#httpd","text":"打开浏览器,访问http://192.168.XXX.XXX","text_tokens":["http","192.168","访问","/","浏览","浏览器","打开",",",".","xxx",":"],"title":"验证httpd服务","title_tokens":["httpd","验证","服务"]},{"location":"docs/backup/171216/#owncloud","text":"[~]# wget download.owncloud.org/community/owncloud-9.0.10.tar.bz2 # 链接测试 [~]# tar -jxf owncloud-9.0.10.tar.bz2 [~]# mv owncloud /var/www/html [~]# cd /var/www/html # 检查解压文件路径是否正确 [html]# ls [html]# pwd [html]# chown -R apache:apache /var/www/html/owncloud/ # 更改owncloud文件夹所属用户组 [~]# chmod 777 /var/www/html/owncloud/config/ 浏览器访问 192.168.XXX.XXX/owncloud 验证安装,并配置管理员用户 owncloud安装完成,简单配置语言 完成","text_tokens":["apache","mv","wget","tar","cd","是否","安装","管理","件夹","jxf","访问","~","链接","并","pwd","文件夹","777","10","浏览",",","ls","测试","简单","更改","org","所属","9.0","www","]","owncloud","-","bz2","chmod","r","解压","完成","config","文件","[","浏览器","语言","xxx","chown","#","html","配置","用户组","检查","管理员","192.168","download","路径","验证"," ","/","用户",".","var","正确","community",":"],"title":"安装owncloud","title_tokens":["安装","owncloud"]},{"location":"docs/backup/171216/#_2","text":"CentOS 6.7 安装私有云owncloud","text_tokens":["私有","云","owncloud","6.7"," ","centos","安装"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"docs/backup/171231/","text":"常用 ¶ 技术搜索 ¶ 内容 site:segmentfault.com OR site:.github.com OR blog.csdn.net OR site:cnblogs.com OR site:jianshu.com OR site:stackoverflow.com OR site:.blog.* OR site:infoq.com OR .ibm.com 排除网页 ¶ 百度 -site:baidu.com 注意 ¶ Google 搜索通常会忽略不属于搜索运算符的标点符号。 请勿在符号/字词和搜索字词之间加上空格。例如，site:nytimes.com 可以正常发挥作用，但 site: nytimes.com 则不行。 常用搜索技巧 ¶ 搜索社交媒体 ¶ 在用于搜索社交媒体的字词前加上 @。例如： @twitter 。 搜索特定价格 ¶ 在数字前加上 $。例如：camera $400。 搜索 # 标签 ¶ 在字词前加上 #。例如：#throwbackthursday 从搜索结果中排除特定字词 ¶ 在您要排除的字词前加上 -。例如：jaguar speed -car 搜索完全匹配的结果 ¶ 为字词或短语加上引号。例如：\"tallest building\"。 搜索通配符或未知字词 ¶ 在字词或短语中您要放置占位符的地方加上 *。例如：\"largest * in the world\"。 在某个数字范围内执行搜索 ¶ 在两个数字之间加上 ..。例如：camera 50.. 50.. 100。 组合搜索 ¶ 在各个搜索查询之间加上“OR”。例如：marathon OR race。 搜索特定网站 ¶ 在相应网站或域名前加上“site:”。例如：site:youtube.com 或 site:.gov。 搜索相关网站 ¶ 在已知网址前加上“related:”。例如：related:time.com。 获取网站详情 ¶ 在相应网址前加上“info:”。 查看网站的 Google 缓存版本 ¶ 在相应网址前加上“cache:”。 TOP","text_tokens":["segmentfault","info","则","算符","$","..","twitter","运算","您","查看","stackoverflow","发挥","标点","技巧","youtube","排除","为","top","related","属于","¶","#","网址","，","作用"," ","引号","短语","社交","网站",".","cnblogs","请勿","符","域名","in","ibm","版本","两个","car","\"","google","site","技术","特定","world","查询","camera","speed","运算符","csdn","例如","相关","。","已知","某个","time","详情","占位","搜索","通常","空格","范围","com","加上","但","“","jianshu","要","结果","/","100","从","github","the","blog","前","cache","执行","可以","在","通配符","价格","的","building","内","会","符号","标签","正常","：","组合","infoq","标点符号","-","忽略","和","常用","用于","获取","中","匹配","”","缓存","marathon","400","各个","gov","放置",":","或","网页","nytimes","net","largest","之间","throwbackthursday","race","数字","jaguar","百度","注意","50","未知","@","tallest","完全","内容","字词","发挥作用","媒体","*","or","baidu","地方","相应","不","不行"],"title":"谷歌高级搜索","title_tokens":["高级","谷歌","搜索"]},{"location":"docs/backup/171231/#_1","text":"","text_tokens":[],"title":"常用","title_tokens":["常用"]},{"location":"docs/backup/171231/#_2","text":"内容 site:segmentfault.com OR site:.github.com OR blog.csdn.net OR site:cnblogs.com OR site:jianshu.com OR site:stackoverflow.com OR site:.blog.* OR site:infoq.com OR .ibm.com","text_tokens":["site","segmentfault","jianshu","blog","infoq","内容","net"," ","csdn","stackoverflow","ibm",".","cnblogs","*","github","or","com",":"],"title":"技术搜索","title_tokens":["技术","搜索"]},{"location":"docs/backup/171231/#_3","text":"百度 -site:baidu.com","text_tokens":["百度","site","baidu","-"," ",".","com",":"],"title":"排除网页","title_tokens":["网页","排除"]},{"location":"docs/backup/171231/#_4","text":"Google 搜索通常会忽略不属于搜索运算符的标点符号。 请勿在符号/字词和搜索字词之间加上空格。例如，site:nytimes.com 可以正常发挥作用，但 site: nytimes.com 则不行。","text_tokens":["则","nytimes","算符","之间","可以","在","google","site","的","运算","会","运算符","符号","例如","发挥","。","标点","正常","搜索","标点符号","忽略","和","通常","字词","发挥作用","属于","空格","com","加上","但","，","作用"," ","/","不",".","请勿","不行",":"],"title":"注意","title_tokens":["注意"]},{"location":"docs/backup/171231/#_5","text":"","text_tokens":[],"title":"常用搜索技巧","title_tokens":["技巧","常用","搜索"]},{"location":"docs/backup/171231/#_6","text":"在用于搜索社交媒体的字词前加上 @。例如： @twitter 。","text_tokens":["twitter","的","搜索","前","用于"," ","字词","例如","社交","媒体","。","@","在","加上","："],"title":"搜索社交媒体","title_tokens":["社交","媒体","搜索"]},{"location":"docs/backup/171231/#_7","text":"在数字前加上 $。例如：camera $400。","text_tokens":["前","400","camera"," ","例如","$","。","在","数字","加上","："],"title":"搜索特定价格","title_tokens":["价格","特定","搜索"]},{"location":"docs/backup/171231/#_8","text":"在字词前加上 #。例如：#throwbackthursday","text_tokens":["前"," ","字词","例如","。","throwbackthursday","在","#","加上","："],"title":"搜索 # 标签","title_tokens":["标签","#"," ","搜索"]},{"location":"docs/backup/171231/#_9","text":"在您要排除的字词前加上 -。例如：jaguar speed -car","text_tokens":["要","的","jaguar","前","-","car","您","speed","排除","字词"," ","例如","。","在","加上","："],"title":"从搜索结果中排除特定字词","title_tokens":["结果","搜索","特定","排除","字词","从","中"]},{"location":"docs/backup/171231/#_10","text":"为字词或短语加上引号。例如：\"tallest building\"。","text_tokens":["building","或"," ","字词","为","短语","引号","。","例如","tallest","\"","加上","："],"title":"搜索完全匹配的结果","title_tokens":["的","完全","结果","搜索","匹配"]},{"location":"docs/backup/171231/#_11","text":"在字词或短语中您要放置占位符的地方加上 *。例如：\"largest * in the world\"。","text_tokens":["the","符","或","in","largest","在","\"","的","world","您","例如","。","占位","：","字词","中","*","加上","要","地方"," ","放置","短语"],"title":"搜索通配符或未知字词","title_tokens":["或","搜索","未知","字词","通配符"]},{"location":"docs/backup/171231/#_12","text":"在两个数字之间加上 ..。例如：camera 50.. 50.. 100。","text_tokens":["50","camera"," ","例如","之间","100","..","。","两个","在","数字","加上","："],"title":"在某个数字范围内执行搜索","title_tokens":["内","搜索","执行","某个","在","数字","范围"]},{"location":"docs/backup/171231/#_13","text":"在各个搜索查询之间加上“OR”。例如：marathon OR race。","text_tokens":["marathon","race","搜索","各个","查询"," ","例如","之间","：","。","在","”","or","加上","“"],"title":"组合搜索","title_tokens":["搜索","组合"]},{"location":"docs/backup/171231/#_14","text":"在相应网站或域名前加上“site:”。例如：site:youtube.com 或 site:.gov。","text_tokens":["或","前","域名","在","site","例如","。","：","youtube","”","com","加上","“","gov"," ","相应","网站",".",":"],"title":"搜索特定网站","title_tokens":["网站","特定","搜索"]},{"location":"docs/backup/171231/#_15","text":"在已知网址前加上“related:”。例如：related:time.com。","text_tokens":[":","前","“","例如","：","related","。","已知","time",".","在","”","com","加上","网址"],"title":"搜索相关网站","title_tokens":["网站","相关","搜索"]},{"location":"docs/backup/171231/#_16","text":"在相应网址前加上“info:”。","text_tokens":[":","info","前","“","相应","。","在","”","加上","网址"],"title":"获取网站详情","title_tokens":["网站","获取","详情"]},{"location":"docs/backup/171231/#google","text":"在相应网址前加上“cache:”。 TOP","text_tokens":[":","前","cache","“","相应"," ","top","。","在","”","加上","网址"],"title":"查看网站的 Google 缓存版本","title_tokens":["的","查看"," ","网站","版本","缓存","google"]},{"location":"docs/backup/180102/","text":"本机IP ¶ 192.168.1.11 测试机IP ¶ 192.168.1.12 网关 ¶ 192.168.1.1 解析域名 ¶ www.hengxia.top CentOS 6.7上yum安装BIND,并启动 ¶ [~]# service iptables stop #关闭防火墙 [~]# yum -y install bind #yum安装bind [~]# rpm -ql bind #查看安装版本 [~]# service named restart #重启bind [~]# chkconfig named on #设置成开机启动 在CentOS 6.7配置BIND ¶ [~]# yum -y install telnet [~]# telnet 192.168.1.11 53 #测试本机IP能否访问端口53，端口53是BIND默认端口 [~]# cp -p /etc/named.conf{,.bak} # 备份named.conf并修改 ，备份文件文件后缀为.bak [~]# vi /etc/named.conf #编辑bind主配置文件 #listen-on port 53 { 127.0.0.1; }; 将此行注释掉 * [~]# service named restart #重启bind服务，主要为了重新读取配置文件 * [~]# vi /etc/sysconfig/network-scripts/ifcfg-eth0 #编辑网卡配置文件，编辑配置好静态IP的，只需修改下面这行，即DNS1 DNS1 = \"127.0.0.1\" # 因为CentOS6.7自己为DNS服务器，所以设自己为DNS服务器 * [~]# service network restart * [~]# cat /etc/resolv.conf # 查看默认DNS # Generated by NetworkManager search top # 搜索top域名，例如com、cn nameserver 127 .0.0.1 * [~]# vi /etc/named.conf # allow-query { localhost; } #注释掉该行，即默认同意所有IP访问 * [~]# named-checkconf # 检查配置文件named.conf,服务-checkconf命令检查服务的配置文件 * [~]# service named restrart #重启bind，重读配置文件 在CentOS 6.7上DNS搭建自己的域，让当前DNS解析www.hengxia.top域 ¶ [~]# vi /etc/named.rfc1912.zones # 编辑区域解析库文件 zone \"hengxia.top\" IN { # hengxia.top是域名 type master ; # 表示权威DNS，即第一个 file \"hengxia.top.zone\" ; # 域数据库，默认位于/var/named/下面，只需告知文件名 hengxia.top.zone是库文件名 } ; [~]# cd /var/named [~]# ls [named]# cp -p named.localhost hengxia.top.zone /# 注意cp -p 保持原有属性， 用cp 要用 chgrp named hengxia.top.zone /# 复制配置文件， [named]# cat hengxia.top.zone # 解析区域数据库格式，存放名字与IP的对应关系 $TTL 1D # 统一定义TTL(过期时间、缓存时间） @ IN SOA @ rname.invalid. ( # SOA记录 IN internet技术 IN第一条要写，后面可以省略，可继承第一条IN rname.invalid. 资源的类型 0 ; serial 1D ; refresh 1H ; retry 1W ; expire 3H ) ; minimum NS @ # 代表当前配置域，例如配置hengxia.top，就代表hengxia.top A 127 .0.0.1 # A记录 名字 到 IP 对应IPv4地址 AAAA ::1 # A记录 名字 到 IP 对应IPv6地址 [named]# vi hengxia.top.zone #配置后文件如下 $TTL 1D @ IN SOA dns1.hengxia.top dnsadmin.hengxia.top. ( 201707262051 ; serial 10M ; refresh 3M ; retry 1D ; expire 3D ) ; minimum NS dns1 NS dns2 dns1 A 192 .168.1.11 # 本机IP dns2 A 192 .168.1.11 # 测试机IP websrv A 1 .1.1.1 ftpsrv A 2 .2.2.2 [named]# named-checkconf # 检查/etc/下与named有关文件 [named]# named-checkzone hengxia.top /var/named/hengxia.top.zone # 检查域数据库文件 dns_rdata_fromtext: /var/named/hengxia.top.zone:2: near '201707262051' : out of range # 序列号超出范围 zone hengxia.top/IN: loading from master file /var/named/hengxia.top.zone failed: out of range zone hengxia.top/IN: not loaded due to errors. [named]# vi hengxia.top.zone [named]# named-checkzone hengxia.top /var/named/hengxia.top.zone zone hengxia.top/IN: loaded serial 2017072601 [ OK ] [named]# service named restart 在另一台CentOS 6.7上测试DNS ¶ [~]# yum -y install bind bind-utils # 测试工具 dig host nslookup 来自 bind-utils包 [~]# dig www.hengxia.top @192 .168.1.11 # 本机IP ; <<>> DiG 9 .8.2rc1-RedHat-9.8.2-0.62.rc1.el6 <<>> www.hengxia.top @192.168.1.11 ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opcode: QUERY, status: SERVFAIL, id: 53941 ;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 0 ;; QUESTION SECTION: ;www.hengxia.top . IN A ;; Query time: 7 msec ;; SERVER: 172 .16.252.77#53 ( 192 .168.1.11 ) ;; WHEN: Wed Jul 26 19 :13:37 2017 ;; MSG SIZE rcvd: 33 [~]# dig websrv.hengxia.top @192 .168.1.11 # 测试成功，说明CentOS 6.7上的域搭建成功 ; <<>> DiG 9 .8.2rc1-RedHat-9.8.2-0.62.rc1.el6 <<>> websrv.hengxia.top @192.168.1.11 ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opcode: QUERY, status: NOERROR, id: 49446 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 2, ADDITIONAL: 2 # aa 说明是权威结果 ;; QUESTION SECTION: ;websrv.hengxia.top . IN A ;; ANSWER SECTION: websrv.hengxia.top. 86400 IN A 1 .1.1.1 ;; AUTHORITY SECTION: hengxia.top. 86400 IN NS dns1.hengxia.top. hengxia.top. 86400 IN NS dns2.hengxia.top. ;; ADDITIONAL SECTION: dns1.hengxia.top. 86400 IN A 192 .168.1.11 dns2.hengxia.top. 86400 IN A 192 .168.1.12 # 端口85400 ;; Query time: 3 msec ;; SERVER: 172 .16.252.77#53 ( 192 .168.1.11 ) ;; WHEN: Wed Jul 26 19 :17:38 2017 ;; MSG SIZE rcvd: 122 参考链接 ¶ CentOS 7.3使用BIND配置DNS服务器","text_tokens":["到","rfc1912","本机","注释","访问","这","查看","权威","1h","启动","www","7","记录","13","超出范围","名字","allow","conf","when"," ","省略","1","即","重新","16.252","}","26","同意","为了","ipv4","size","好","3m","例如","time","ls","listen","0.62","格式","配置","要","结果","etc","能否","restart","上","备份","类型","1d","可以","1.12","~","网卡","关系","zones","from","服务器","websrv","掉","internet","noerror","jul","3d","authority","2.2","写","aaaa","zone","sysconfig","让","a","ttl","读取","后","near","bak","ifcfg","ok",":","dig","2017072601","errors","centos","所有","@","eth0","过期","centos6.7","dnsadmin","*","192","scripts","bind","resolv","2017","localhost","37","$","安装","防火墙","第一","cat","地址",",","master","保持","stop","38","库","#","ip","属性","设置","0","所以","表示","by","failed","复制",".","rdata","query","继承","qr","77","区域","版本","yum","成功","(","dns1","7.3","122","第一个","10m","可","server","搜索","127.0","{","host","restrart","_","networkmanager","nameserver","需","资源","201707262051","的","工具","cp","链接","备份文件","成","该行","份文件","ipv6","0.0","]","主","1.11","缓存","soa","additional","务器","一条","chkconfig","火墙","out","telnet","后缀","refresh","因为","9.8","nslookup","、","并","serial","9","search","）","一个","port","1.1","el6","hengxia","只","of","33","var","12","85400","如下","3h","options",">","iptables","id","rcvd","数据库","rpm","checkconf","range","minimum","ql","section","[","，","位于","静态","统一","主要","fromtext","6.7","服务",")","\"","技术","重启","此行","aa","当前","msec","范围","com","rname","/","named","checkzone",";","cd","在","17","就","超出","rc1","dns2","service","answer","dns","172","-","网关","to","cmd","机","文件","包","有关","loading","status","127","序列","0.1","自己","+","时间","将","file","expire","ns","默认","invalid","测试","与","loaded","vi","rd","2","试工","关闭","redhat","53","存放","定义","generated","修改","解析","序列号","为","top","¶","due","=","msg","下面","行","代表","y","168.1","下","是","p","域名","in","cn","retry","数据","域","对应","设","install","type","命令","测试工具","开机","说明","'","原有","network","192.168","使用","49446","chgrp","question","第一条","文件名","53941","on","opcode","配置文件","<","编辑","ra","3","检查","19","据库","got","另一台","一台","后面","用","防火","86400","servfail","注意","8.2","1w","ftpsrv","11","重读","来自","header","global","端口","告知","utils","搭建","参考","wed","not","flags"],"title":"CentOS 6.7 安装 bind","title_tokens":["6.7","bind"," ","centos","安装"]},{"location":"docs/backup/180102/#ip","text":"192.168.1.11","text_tokens":[".","1.11","192.168"],"title":"本机IP","title_tokens":["ip","本机"]},{"location":"docs/backup/180102/#ip_1","text":"192.168.1.12","text_tokens":[".","1.12","192.168"],"title":"测试机IP","title_tokens":["测试","ip","机"]},{"location":"docs/backup/180102/#_1","text":"192.168.1.1","text_tokens":["1.1",".","192.168"],"title":"网关","title_tokens":["网关"]},{"location":"docs/backup/180102/#_2","text":"www.hengxia.top","text_tokens":["top","hengxia","www","."],"title":"解析域名","title_tokens":["解析","域名"]},{"location":"docs/backup/180102/#centos-67yumbind","text":"[~]# service iptables stop #关闭防火墙 [~]# yum -y install bind #yum安装bind [~]# rpm -ql bind #查看安装版本 [~]# service named restart #重启bind [~]# chkconfig named on #设置成开机启动","text_tokens":["防火","安装","版本","iptables","yum","防火墙","install","~","rpm","查看","重启","service","成","ql","stop","开机","启动","]","on","-","[","#","设置","bind","chkconfig"," ","火墙","restart","y","named","关闭"],"title":"CentOS 6.7上yum安装BIND,并启动","title_tokens":["启动","6.7","bind"," ","centos","并","安装",",","yum","上"]},{"location":"docs/backup/180102/#centos-67bind","text":"[~]# yum -y install telnet [~]# telnet 192.168.1.11 53 #测试本机IP能否访问端口53，端口53是BIND默认端口 [~]# cp -p /etc/named.conf{,.bak} # 备份named.conf并修改 ，备份文件文件后缀为.bak [~]# vi /etc/named.conf #编辑bind主配置文件 #listen-on port 53 { 127.0.0.1; }; 将此行注释掉 * [~]# service named restart #重启bind服务，主要为了重新读取配置文件 * [~]# vi /etc/sysconfig/network-scripts/ifcfg-eth0 #编辑网卡配置文件，编辑配置好静态IP的，只需修改下面这行，即DNS1 DNS1 = \"127.0.0.1\" # 因为CentOS6.7自己为DNS服务器，所以设自己为DNS服务器 * [~]# service network restart * [~]# cat /etc/resolv.conf # 查看默认DNS # Generated by NetworkManager search top # 搜索top域名，例如com、cn nameserver 127 .0.0.1 * [~]# vi /etc/named.conf # allow-query { localhost; } #注释掉该行，即默认同意所有IP访问 * [~]# named-checkconf # 检查配置文件named.conf,服务-checkconf命令检查服务的配置文件 * [~]# service named restrart #重启bind，重读配置文件","text_tokens":["53","本机","cat","generated","注释","访问","这","查看","checkconf",",","修改","为","top","[","#","=","ip","，","所以","allow","conf"," ","by","下面","静态","行","y",".","主要","1","query","即","重新","}","是","p","同意","为了","域名","服务","cn","yum","\"","dns1","install","设","好","重启","例如","命令","listen","此行","搜索","127.0","{","restrart","配置","com","network","192.168","etc","networkmanager","能否","nameserver","/","restart","需","named","备份",";","的","cp","~","备份文件","service","dns","该行","份文件","网卡","服务器","0.0","掉","]","on","-","文件","配置文件","主","编辑","1.11","务器","检查","sysconfig","127","读取","bak","0.1","ifcfg","自己","将","telnet","后缀","因为","、","并","默认","所有","测试","search","vi","eth0","centos6.7","port","重读","*","只","端口","scripts","bind","resolv","localhost"],"title":"在CentOS 6.7配置BIND","title_tokens":["6.7","bind"," ","centos","在","配置"]},{"location":"docs/backup/180102/#centos-67dnsdnswwwhengxiatop","text":"[~]# vi /etc/named.rfc1912.zones # 编辑区域解析库文件 zone \"hengxia.top\" IN { # hengxia.top是域名 type master ; # 表示权威DNS，即第一个 file \"hengxia.top.zone\" ; # 域数据库，默认位于/var/named/下面，只需告知文件名 hengxia.top.zone是库文件名 } ; [~]# cd /var/named [~]# ls [named]# cp -p named.localhost hengxia.top.zone /# 注意cp -p 保持原有属性， 用cp 要用 chgrp named hengxia.top.zone /# 复制配置文件， [named]# cat hengxia.top.zone # 解析区域数据库格式，存放名字与IP的对应关系 $TTL 1D # 统一定义TTL(过期时间、缓存时间） @ IN SOA @ rname.invalid. ( # SOA记录 IN internet技术 IN第一条要写，后面可以省略，可继承第一条IN rname.invalid. 资源的类型 0 ; serial 1D ; refresh 1H ; retry 1W ; expire 3H ) ; minimum NS @ # 代表当前配置域，例如配置hengxia.top，就代表hengxia.top A 127 .0.0.1 # A记录 名字 到 IP 对应IPv4地址 AAAA ::1 # A记录 名字 到 IP 对应IPv6地址 [named]# vi hengxia.top.zone #配置后文件如下 $TTL 1D @ IN SOA dns1.hengxia.top dnsadmin.hengxia.top. ( 201707262051 ; serial 10M ; refresh 3M ; retry 1D ; expire 3D ) ; minimum NS dns1 NS dns2 dns1 A 192 .168.1.11 # 本机IP dns2 A 192 .168.1.11 # 测试机IP websrv A 1 .1.1.1 ftpsrv A 2 .2.2.2 [named]# named-checkconf # 检查/etc/下与named有关文件 [named]# named-checkzone hengxia.top /var/named/hengxia.top.zone # 检查域数据库文件 dns_rdata_fromtext: /var/named/hengxia.top.zone:2: near '201707262051' : out of range # 序列号超出范围 zone hengxia.top/IN: loading from master file /var/named/hengxia.top.zone failed: out of range zone hengxia.top/IN: not loaded due to errors. [named]# vi hengxia.top.zone [named]# named-checkzone hengxia.top /var/named/hengxia.top.zone zone hengxia.top/IN: loaded serial 2017072601 [ OK ] [named]# service named restart","text_tokens":["如下","3h","到","rfc1912","$","存放","定义","第一","本机","cat","地址","数据库","checkconf","权威","range","minimum","解析","master","保持","1h","序列号","记录","库","top","[","超出范围","due","#","ip","属性","，","名字","0"," ","表示","下面","位于","failed","省略","复制",".","统一","代表","1","即","继承","168.1","下","rdata","}","是","fromtext","p","区域","ipv4","域名","in","retry","数据","域",")","\"","(","对应","技术","dns1","type","3m","第一个","10m","例如","ls","可","格式","当前","{","'","配置","_","范围","原有","要","etc","rname","/","restart","需","named","资源","类型","checkzone",";","cd","201707262051","1d","chgrp","可以","第一条","就","的","超出","cp","文件名","~","dns2","service","dns","关系","zones","from","websrv","ipv6","0.0","]","internet","-","to","机","文件","配置文件","3d","编辑","有关","loading","缓存","soa","2.2","检查","写","aaaa","据库","zone","一条","a","ttl","127","后","near","序列","out","ok",":","时间","后面","file","用","refresh","2017072601","expire","注意","、","errors","ns","1w","默认","serial","@","invalid","测试","与","ftpsrv","loaded","vi","）","过期","一个","11","dnsadmin","1.1","hengxia","192","只","告知","of","localhost","2","not","var"],"title":"在CentOS 6.7上DNS搭建自己的域，让当前DNS解析www.hengxia.top域","title_tokens":["，","hengxia","的","www","让","当前","6.7","搭建","解析"," ","centos","top","dns","自己",".","在","域","上"]},{"location":"docs/backup/180102/#centos-67dns","text":"[~]# yum -y install bind bind-utils # 测试工具 dig host nslookup 来自 bind-utils包 [~]# dig www.hengxia.top @192 .168.1.11 # 本机IP ; <<>> DiG 9 .8.2rc1-RedHat-9.8.2-0.62.rc1.el6 <<>> www.hengxia.top @192.168.1.11 ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opcode: QUERY, status: SERVFAIL, id: 53941 ;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 0 ;; QUESTION SECTION: ;www.hengxia.top . IN A ;; Query time: 7 msec ;; SERVER: 172 .16.252.77#53 ( 192 .168.1.11 ) ;; WHEN: Wed Jul 26 19 :13:37 2017 ;; MSG SIZE rcvd: 33 [~]# dig websrv.hengxia.top @192 .168.1.11 # 测试成功，说明CentOS 6.7上的域搭建成功 ; <<>> DiG 9 .8.2rc1-RedHat-9.8.2-0.62.rc1.el6 <<>> websrv.hengxia.top @192.168.1.11 ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opcode: QUERY, status: NOERROR, id: 49446 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 2, ADDITIONAL: 2 # aa 说明是权威结果 ;; QUESTION SECTION: ;websrv.hengxia.top . IN A ;; ANSWER SECTION: websrv.hengxia.top. 86400 IN A 1 .1.1.1 ;; AUTHORITY SECTION: hengxia.top. 86400 IN NS dns1.hengxia.top. hengxia.top. 86400 IN NS dns2.hengxia.top. ;; ADDITIONAL SECTION: dns1.hengxia.top. 86400 IN A 192 .168.1.11 dns2.hengxia.top. 86400 IN A 192 .168.1.12 # 端口85400 ;; Query time: 3 msec ;; SERVER: 172 .16.252.77#53 ( 192 .168.1.11 ) ;; WHEN: Wed Jul 26 19 :17:38 2017 ;; MSG SIZE rcvd: 122","text_tokens":["37","options","redhat",">","53","本机","id","rcvd","权威",",","section","38","www","7","top","13","[","#","ip","msg","，","0","when"," ","y",".","1","168.1","query","qr","16.252","是","77","26","6.7","in","size","yum",")","域","成功","(","dns1","install","122","time","测试工具","aa","server","说明","0.62","msec","host","结果","192.168","上","49446",";","17","question","的","工具","rc1","~","answer","dns2","53941","websrv","172","]","noerror","-","cmd","opcode","jul","包","<","ra","1.11","3","additional","authority","19","status","got","a","+",":","dig","86400","servfail","9.8","nslookup","ns","centos","8.2","@","9","测试","11","rd","来自","header","global","1.1","el6","hengxia","192","端口","utils","33","bind","2017","搭建","wed","2","flags","试工","12","85400"],"title":"在另一台CentOS 6.7上测试DNS","title_tokens":["一台","另一台","6.7"," ","centos","dns","在","测试","上"]},{"location":"docs/backup/180102/#_3","text":"CentOS 7.3使用BIND配置DNS服务器","text_tokens":["7.3","使用","bind"," ","centos","dns","服务","配置","服务器","务器"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"docs/backup/180103/","text":"测试点 ¶ ```python {.line-numbers} server1: 192.168.1.11:7000 192.168.1.11:7001 192.168.1.11:7002 server2： 192.168.1.18:7003 192.168.1.18:7004 192.168.1.18:7005 ###安装需要的依赖包 ```python {.line-numbers} [root@localhost ~]# yum install gcc gcc-c++ kernel-devel automake autoconf libtool make wget tcl vim ruby rubygems unzip git -y 两台机器分别下载redis并安装 ¶ bash {.line-numbers} [root@localhost src]# cd /usr/local/ [root@localhost local]# wget http://download.redis.io/releases/redis-3.0.6.tar.gz [root@localhost local]# tar xzf redis-3.0.6.tar.gz [root@localhost local]# cd redis-3.0.6 [root@localhost redis-3.0.6]# make ###创建集群需要的目录 ==Server1下== ```bash {.line-numbers} mkdir -p /usr/local/cluster cd /usr/local/cluster mkdir 7000 mkdir 7001 mkdir 7002 autoc ==Server2下== bash {.line-numbers} mkdir -p /usr/local/cluster cd /usr/local/cluster mkdir 7003 mkdir 7004 mkdir 7005 ```bash {.line-numbers} 修改配置文件redis.conf cp /usr/local/redis-3.0.6/redis.conf /usr/local/cluster cd /usr/local/cluster vi redis.conf ##注意每个实例的端口号不同 port 7000 daemonize yes cluster-enabled yes cluster-config-file nodes.conf cluster-node-timeout 5000 appendonly yes Server1下 ```bash {.line-numbers} cp /usr/local/cluster/redis.conf /usr/local/cluster/7000 cp /usr/local/cluster/redis.conf /usr/local/cluster/7001 cp /usr/local/cluster/redis.conf /usr/local/cluster/7002 ==Server2下== ```bash {.line-numbers} cp /usr/local/cluster/redis.conf /usr/local/cluster/7003 cp /usr/local/cluster/redis.conf /usr/local/cluster/7004 cp /usr/local/cluster/redis.conf /usr/local/cluster/7005 分别启动这6个redis实例，并查看是否成功：ps -ef|grep redis ¶ Server1下 ```bash {.line-numbers} [root@localhost cluster]# cd /usr/local/cluster/7000 [root@localhost 7000]# /usr/local/redis-3.0.6/src/redis-server redis.conf [root@localhost 7000]# cd /usr/local/cluster/7001 [root@localhost 7001]# /usr/local/redis-3.0.6/src/redis-server redis.conf [root@localhost 7001]# cd /usr/local/cluster/7002 [root@localhost 7002]# /usr/local/redis-3.0.6/src/redis-server redis.conf [root@localhost 7002]# ps -ef|grep redis root 2741 1 0 09:39 ? 00:00:00 redis-server *:7000 [cluster] root 2747 1 0 09:40 ? 00:00:00 redis-server *:7001 [cluster] root 2751 1 0 09:40 ? 00:00:00 redis-server *:7002 [cluster] root 2755 2687 0 09:40 pts/0 00:00:00 grep redis ==Server2下== ```bash {.line-numbers} [root@localhost cluster]# cd /usr/local/cluster/7003 [root@localhost 7003]# /usr/local/redis-3.0.6/src/redis-server redis.conf [root@localhost 7003]# cd /usr/local/cluster/7004 [root@localhost 7004]# /usr/local/redis-3.0.6/src/redis-server redis.conf [root@localhost 7004]# cd /usr/local/cluster/7005 [root@localhost 7005]# /usr/local/redis-3.0.6/src/redis-server redis.conf [root@localhost 7005]# ps -ef|grep redis root 1619 1 0 09:40 ? 00:00:00 redis-server *:7003 [cluster] root 1623 1 0 09:40 ? 00:00:00 redis-server *:7004 [cluster] root 1627 1 0 09:41 ? 00:00:00 redis-server *:7005 [cluster] root 1631 1563 0 09:41 pts/0 00:00:00 grep redis 执行redis的创建集群命令创建集群（注意ip地址和端口号） ¶ ``bash {.line-numbers} [root@localhost src]# ./redis-trib.rb create --replicas 1 192.168.1.11:7000 192.168.1.11:7001 192.168.1.11:7002 192.168.1.18:7003 192.168.1.18:7004 192.168.1.18:7005 ==错误内容：== /usr/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:31:in gem_original_require': no such file to load -- redis (LoadError) from /usr/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:31:in `require' from ./redis-trib.rb:25 ==解决：== ```bash {.line-numbers} gem update --system gem install redis -v 3.3.5 再次执行第6步的命令，正常执行，提示是否允许修改配置文件，输入yes，然后整个集群配置完成！ ¶ ```bash {.line-numbers} [root@localhost src]# ./redis-trib.rb create --replicas 1 192.168.1.11:7000 192.168.1.11:7001 192.168.1.11:7002 192.168.1.18:7003 192.168.1.18:7004 192.168.1.18:7005 Creating cluster Performing hash slots allocation on 6 nodes... Using 3 masters: 192.168.1.199:7003 192.168.1.198:7000 192.168.1.199:7004 Adding replica 192.168.1.198:7001 to 192.168.1.199:7003 Adding replica 192.168.1.199:7005 to 192.168.1.198:7000 Adding replica 192.168.1.198:7002 to 192.168.1.199:7004 M: 2f70e9f2b4a06a846e46d7034a54e0fe6971beea 192.168.1.198:7000 slots:5461-10922 (5462 slots) master S: e60f49920cf8620927b200b0001892d08067d065 192.168.1.198:7001 replicates 02f1958bd5032caca2fd47a56362c8d562d7e621 S: 26101db06b5c2d4431ca8308cf43d51f6939b4fc 192.168.1.198:7002 replicates 6c4f18b9e8729c3ab5d43b00b0bc1e2ee976f299 M: 02f1958bd5032caca2fd47a56362c8d562d7e621 192.168.1.199:7003 slots:0-5460 (5461 slots) master M: 6c4f18b9e8729c3ab5d43b00b0bc1e2ee976f299 192.168.1.199:7004 slots:10923-16383 (5461 slots) master S: ebb27bd0a48b67a4f4e0584be27c1c909944e935 192.168.1.199:7005 replicates 2f70e9f2b4a06a846e46d7034a54e0fe6971beea Can I set the above configuration? (type 'yes' to accept): yes Nodes configuration updated Assign a different config epoch to each node Sending CLUSTER MEET messages to join the cluster Waiting for the cluster to join... Performing Cluster Check (using node 192.168.1.198:7000) M: 2f70e9f2b4a06a846e46d7034a54e0fe6971beea 192.168.1.198:7000 slots:5461-10922 (5462 slots) master M: e60f49920cf8620927b200b0001892d08067d065 192.168.1.198:7001 slots: (0 slots) master replicates 02f1958bd5032caca2fd47a56362c8d562d7e621 M: 26101db06b5c2d4431ca8308cf43d51f6939b4fc 192.168.1.198:7002 slots: (0 slots) master replicates 6c4f18b9e8729c3ab5d43b00b0bc1e2ee976f299 M: 02f1958bd5032caca2fd47a56362c8d562d7e621 192.168.1.199:7003 slots:0-5460 (5461 slots) master M: 6c4f18b9e8729c3ab5d43b00b0bc1e2ee976f299 192.168.1.199:7004 slots:10923-16383 (5461 slots) master M: ebb27bd0a48b67a4f4e0584be27c1c909944e935 192.168.1.199:7005 slots: (0 slots) master replicates 2f70e9f2b4a06a846e46d7034a54e0fe6971beea [OK] All nodes agree about slots configuration. Check for open slots... Check slots coverage... [OK] All 16384 slots covered. ###测试集群 #####server1上登录redis客户端并执行 ```bash {.line-numbers} [root@localhost src]# ./redis-cli -c -p 7000 #可执行文件 127.0.0.1:7000> get key -> Redirected to slot [12539] located at 192.168.1.199:7004 \"val\" 192.168.1.199:7004> set name test -> Redirected to slot [5798] located at 192.168.1.198:7000 OK 192.168.1.198:7000> set adress shanghai -> Redirected to slot [1562] located at 192.168.1.199:7003 OK 192.168.1.199:7003> server2上登录redis客户端并执行 ¶ bash {.line-numbers} [root@localhost src]# redis-cli -c -p 7003 127.0.0.1:7003> set key val -> Redirected to slot [12539] located at 192.168.1.199:7004 OK 192.168.1.199:7004> get keyv \"val\" 192.168.1.199:7004> set key2 val2 -> Redirected to slot [4998] located at 192.168.1.199:7003 OK 192.168.1.199:7003> get key2 \"val2\" 192.168.1.199:7003> 参考链接 ¶ Centos完美搭建redis3.0集群并附测试 Ruby Gem命令详解 Redis官网","text_tokens":["enabled","bash","?","1627","devel","wget","10922","creating",">","3.0","目录","nodes","loaderror","replicates","安装","00","server2","1563","all","val2","地址","mkdir","redis3.0","make","for","这","autoc","查看","详解","修改","gem","original","master","messages","io","c++","1.18","usr","2751","启动","试点","replicas","libtool","16384","get","configuration","join","lib","[","--","7005","¶","1.199","c","#","=","ip","agree","releases","，","git","7002","0","line","conf","updated"," ","2741","2755","y",".","6","1","different","下","ruby","26101db06b5c2d4431ca8308cf43d51f6939b4fc","key2","实例","}","提示","p","covered","in","meet","root","slots","12539","cluster","yum","端口号",")","each","成功","(","site","about","\"","install","daemonize","keyv","type","第","允许","create","整个","4998","下载","命令","`","每个","tcl","可执行文件","test","步","gcc","客户端","rb","1619","server","load","127.0","{","两台","appendonly","'","测试点","配置","7001","_","39","such","e60f49920cf8620927b200b0001892d08067d065","name","redis","v","192.168","download","allocation","rubygems","assign","redirected","val","located","7000","/","不同","masters","口号","vim","5798","上","the","5461","2687","02f1958bd5032caca2fd47a56362c8d562d7e621","shanghai","adress","tar","机器","cd","执行","31","check","ebb27bd0a48b67a4f4e0584be27c1c909944e935","|","unzip","open","can","依赖","附","的","cp","登录","~","链接","i","6c4f18b9e8729c3ab5d43b00b0bc1e2ee976f299","ps","accept","09","from","正常","5460","行文","：","grep","s","16383","1631","2f70e9f2b4a06a846e46d7034a54e0fe6971beea","客户","slot","]","和","-","no","to","完成","on","5462","set","pts","sending","文件","配置文件","包","epoch","集群","5000","update","10923","1.11","7003","node","performing","3","system","个","trib","1562","a","gz","2747","key","创建","0.1","server1","ok",":","kernel","再次","src","官网","file","custom","7004","timeout","xzf","###","python","##","是否","25","...","错误","ef","1623","注意","1.8","5","40","需要","并","automake","centos","（","@","测试","above","adding","vi","）","内容","1.198","！","config","autoconf","using","replica","at","require","yes","port","*","分别","输入","#####","coverage","waiting","端口","m","http","解决","41","搭建","numbers","localhost","然后","参考","cli","hash","local","3.3","完美"],"title":"CentOS 6.7 安装 redis","title_tokens":["redis","6.7"," ","centos","安装"]},{"location":"docs/backup/180103/#_1","text":"```python {.line-numbers} server1: 192.168.1.11:7000 192.168.1.11:7001 192.168.1.11:7002 server2： 192.168.1.18:7003 192.168.1.18:7004 192.168.1.18:7005 ###安装需要的依赖包 ```python {.line-numbers} [root@localhost ~]# yum install gcc gcc-c++ kernel-devel automake autoconf libtool make wget tcl vim ruby rubygems unzip git -y","text_tokens":["}","devel","wget","7004","root","###","python","安装","server2","unzip","yum","依赖","的","install","make","~","需要","automake","`","@","tcl","：","gcc","1.18","c++","]","-","{","libtool","autoconf","包","[","7005","#","7001","1.11","7003","git","7002","192.168","rubygems","line","numbers"," ","localhost","7000","y",".","server1","vim","ruby",":","kernel"],"title":"测试点","title_tokens":["测试点","测试","试点"]},{"location":"docs/backup/180103/#redis","text":"bash {.line-numbers} [root@localhost src]# cd /usr/local/ [root@localhost local]# wget http://download.redis.io/releases/redis-3.0.6.tar.gz [root@localhost local]# tar xzf redis-3.0.6.tar.gz [root@localhost local]# cd redis-3.0.6 [root@localhost redis-3.0.6]# make ###创建集群需要的目录 ==Server1下== ```bash {.line-numbers} mkdir -p /usr/local/cluster cd /usr/local/cluster mkdir 7000 mkdir 7001 mkdir 7002 autoc ==Server2下== bash {.line-numbers} mkdir -p /usr/local/cluster cd /usr/local/cluster mkdir 7003 mkdir 7004 mkdir 7005 ```bash {.line-numbers} 修改配置文件redis.conf cp /usr/local/redis-3.0.6/redis.conf /usr/local/cluster cd /usr/local/cluster vi redis.conf ##注意每个实例的端口号不同 port 7000 daemonize yes cluster-enabled yes cluster-config-file nodes.conf cluster-node-timeout 5000 appendonly yes Server1下 ```bash {.line-numbers} cp /usr/local/cluster/redis.conf /usr/local/cluster/7000 cp /usr/local/cluster/redis.conf /usr/local/cluster/7001 cp /usr/local/cluster/redis.conf /usr/local/cluster/7002 ==Server2下== ```bash {.line-numbers} cp /usr/local/cluster/redis.conf /usr/local/cluster/7003 cp /usr/local/cluster/redis.conf /usr/local/cluster/7004 cp /usr/local/cluster/redis.conf /usr/local/cluster/7005","text_tokens":["enabled","bash","wget","3.0","目录","nodes","server2","mkdir","make","autoc","修改","io","usr","[","7005","#","=","releases","7002","line","conf"," ",".","6","下","实例","}","p","root","cluster","端口号","daemonize","`","每个","{","appendonly","配置","7001","redis","download","/","7000","不同","口号","tar","cd","的","cp","]","-","文件","配置文件","集群","5000","7003","node","gz","创建","server1",":","src","file","7004","timeout","xzf","###","##","注意","需要","@","vi","config","yes","port","端口","http","numbers","localhost","local"],"title":"两台机器分别下载redis并安装","title_tokens":["redis","机器","并","两台","下载","安装","分别"]},{"location":"docs/backup/180103/#6redisps-efgrep-redis","text":"Server1下 ```bash {.line-numbers} [root@localhost cluster]# cd /usr/local/cluster/7000 [root@localhost 7000]# /usr/local/redis-3.0.6/src/redis-server redis.conf [root@localhost 7000]# cd /usr/local/cluster/7001 [root@localhost 7001]# /usr/local/redis-3.0.6/src/redis-server redis.conf [root@localhost 7001]# cd /usr/local/cluster/7002 [root@localhost 7002]# /usr/local/redis-3.0.6/src/redis-server redis.conf [root@localhost 7002]# ps -ef|grep redis root 2741 1 0 09:39 ? 00:00:00 redis-server *:7000 [cluster] root 2747 1 0 09:40 ? 00:00:00 redis-server *:7001 [cluster] root 2751 1 0 09:40 ? 00:00:00 redis-server *:7002 [cluster] root 2755 2687 0 09:40 pts/0 00:00:00 grep redis ==Server2下== ```bash {.line-numbers} [root@localhost cluster]# cd /usr/local/cluster/7003 [root@localhost 7003]# /usr/local/redis-3.0.6/src/redis-server redis.conf [root@localhost 7003]# cd /usr/local/cluster/7004 [root@localhost 7004]# /usr/local/redis-3.0.6/src/redis-server redis.conf [root@localhost 7004]# cd /usr/local/cluster/7005 [root@localhost 7005]# /usr/local/redis-3.0.6/src/redis-server redis.conf [root@localhost 7005]# ps -ef|grep redis root 1619 1 0 09:40 ? 00:00:00 redis-server *:7003 [cluster] root 1623 1 0 09:40 ? 00:00:00 redis-server *:7004 [cluster] root 1627 1 0 09:41 ? 00:00:00 redis-server *:7005 [cluster] root 1631 1563 0 09:41 pts/0 00:00:00 grep redis","text_tokens":["}","src","bash","?","2687","1627","cd","3.0","7004","root","local","00","cluster","|","server2","1563","ef","1623","40","ps","`","@","09","grep","usr","2751","1631","1619","server","]","-","{","pts","[","7005","#","7001","*","39","=","7003","redis","7002","0","line","conf","2747","numbers"," ","localhost","/","7000","2741","2755","41","server1",".","6","1","下",":"],"title":"分别启动这6个redis实例，并查看是否成功：ps -ef|grep redis","title_tokens":["实例","是否","|","成功","ef","这","查看","并","ps","：","grep","启动","-","分别","个","，","redis"," ","6"]},{"location":"docs/backup/180103/#redisip","text":"``bash {.line-numbers} [root@localhost src]# ./redis-trib.rb create --replicas 1 192.168.1.11:7000 192.168.1.11:7001 192.168.1.11:7002 192.168.1.18:7003 192.168.1.18:7004 192.168.1.18:7005 ==错误内容：== /usr/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:31:in gem_original_require': no such file to load -- redis (LoadError) from /usr/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:31:in `require' from ./redis-trib.rb:25 ==解决：== ```bash {.line-numbers} gem update --system gem install redis -v 3.3.5","text_tokens":["}","src","bash","file","31","custom","in","7004","loaderror","root","25",")","错误","(","site","install","5","1.8","create","`","@","gem","original","from","：","1.18","rb","usr","load","]","-","replicas","内容","{","no","to","lib","[","--","7005","require","'","such","#","1.11","7001","7003","=","_","update","system","3.3","redis","trib","192.168","7002","解决","rubygems","line","v","numbers"," ","localhost","/","7000",".","1","ruby",":"],"title":"执行redis的创建集群命令创建集群（注意ip地址和端口号）","title_tokens":["的","redis","注意","地址","和","端口","）","执行","创建","命令","（","集群","口号","端口号","ip"]},{"location":"docs/backup/180103/#6yes","text":"```bash {.line-numbers} [root@localhost src]# ./redis-trib.rb create --replicas 1 192.168.1.11:7000 192.168.1.11:7001 192.168.1.11:7002 192.168.1.18:7003 192.168.1.18:7004 192.168.1.18:7005 Creating cluster Performing hash slots allocation on 6 nodes... Using 3 masters: 192.168.1.199:7003 192.168.1.198:7000 192.168.1.199:7004 Adding replica 192.168.1.198:7001 to 192.168.1.199:7003 Adding replica 192.168.1.199:7005 to 192.168.1.198:7000 Adding replica 192.168.1.198:7002 to 192.168.1.199:7004 M: 2f70e9f2b4a06a846e46d7034a54e0fe6971beea 192.168.1.198:7000 slots:5461-10922 (5462 slots) master S: e60f49920cf8620927b200b0001892d08067d065 192.168.1.198:7001 replicates 02f1958bd5032caca2fd47a56362c8d562d7e621 S: 26101db06b5c2d4431ca8308cf43d51f6939b4fc 192.168.1.198:7002 replicates 6c4f18b9e8729c3ab5d43b00b0bc1e2ee976f299 M: 02f1958bd5032caca2fd47a56362c8d562d7e621 192.168.1.199:7003 slots:0-5460 (5461 slots) master M: 6c4f18b9e8729c3ab5d43b00b0bc1e2ee976f299 192.168.1.199:7004 slots:10923-16383 (5461 slots) master S: ebb27bd0a48b67a4f4e0584be27c1c909944e935 192.168.1.199:7005 replicates 2f70e9f2b4a06a846e46d7034a54e0fe6971beea Can I set the above configuration? (type 'yes' to accept): yes Nodes configuration updated Assign a different config epoch to each node Sending CLUSTER MEET messages to join the cluster Waiting for the cluster to join... Performing Cluster Check (using node 192.168.1.198:7000) M: 2f70e9f2b4a06a846e46d7034a54e0fe6971beea 192.168.1.198:7000 slots:5461-10922 (5462 slots) master M: e60f49920cf8620927b200b0001892d08067d065 192.168.1.198:7001 slots: (0 slots) master replicates 02f1958bd5032caca2fd47a56362c8d562d7e621 M: 26101db06b5c2d4431ca8308cf43d51f6939b4fc 192.168.1.198:7002 slots: (0 slots) master replicates 6c4f18b9e8729c3ab5d43b00b0bc1e2ee976f299 M: 02f1958bd5032caca2fd47a56362c8d562d7e621 192.168.1.199:7003 slots:0-5460 (5461 slots) master M: 6c4f18b9e8729c3ab5d43b00b0bc1e2ee976f299 192.168.1.199:7004 slots:10923-16383 (5461 slots) master M: ebb27bd0a48b67a4f4e0584be27c1c909944e935 192.168.1.199:7005 slots: (0 slots) master replicates 2f70e9f2b4a06a846e46d7034a54e0fe6971beea [OK] All nodes agree about slots configuration. Check for open slots... Check slots coverage... [OK] All 16384 slots covered. ###测试集群 #####server1上登录redis客户端并执行 ```bash {.line-numbers} [root@localhost src]# ./redis-cli -c -p 7000 #可执行文件 127.0.0.1:7000> get key -> Redirected to slot [12539] located at 192.168.1.199:7004 \"val\" 192.168.1.199:7004> set name test -> Redirected to slot [5798] located at 192.168.1.198:7000 OK 192.168.1.198:7000> set adress shanghai -> Redirected to slot [1562] located at 192.168.1.199:7003 OK 192.168.1.199:7003>","text_tokens":["bash","?","10922","creating",">","nodes","replicates","all","for","master","messages","1.18","replicas","16384","get","configuration","join","1.199","[","--","7005","c","located","5798","#","agree","0","7002","line","updated"," ",".","1","6","different","26101db06b5c2d4431ca8308cf43d51f6939b4fc","}","p","covered","meet","root","slots","12539","cluster",")","\"","each","(","about","type","create","`","可执行文件","test","客户端","rb","127.0","{","'","7001","e60f49920cf8620927b200b0001892d08067d065","name","redis","192.168","allocation","assign","redirected","val","/","7000","masters","上","the","5461","shanghai","02f1958bd5032caca2fd47a56362c8d562d7e621","adress","执行","ebb27bd0a48b67a4f4e0584be27c1c909944e935","open","can","登录","i","6c4f18b9e8729c3ab5d43b00b0bc1e2ee976f299","accept","5460","行文","16383","s","客户","2f70e9f2b4a06a846e46d7034a54e0fe6971beea","slot","]","on","-","to","5462","set","sending","check","文件","epoch","10923","集群","1.11","7003","performing","3","node","trib","1562","a","key","0.1","server1","ok",":","src","7004","###","...","并","@","测试","above","adding","1.198","config","using","replica","at","yes","#####","coverage","waiting","m","numbers","localhost","cli","hash"],"title":"再次执行第6步的命令，正常执行，提示是否允许修改配置文件，输入yes，然后整个集群配置完成！","title_tokens":["提示","执行","是否","的","第","允许","整个","命令","修改","正常","步","完成","！","文件","配置文件","集群","yes","配置","输入","，","然后","6","再次"]},{"location":"docs/backup/180103/#server2redis","text":"bash {.line-numbers} [root@localhost src]# redis-cli -c -p 7003 127.0.0.1:7003> set key val -> Redirected to slot [12539] located at 192.168.1.199:7004 OK 192.168.1.199:7004> get keyv \"val\" 192.168.1.199:7004> set key2 val2 -> Redirected to slot [4998] located at 192.168.1.199:7003 OK 192.168.1.199:7003> get key2 \"val2\" 192.168.1.199:7003>","text_tokens":["}","src","bash","p",">","7004","root","12539","\"","keyv","val2","4998","@","slot","]","-","127.0","to","{","set","get","at","located","[","1.199","c","#","7003","redis","192.168","redirected","line","key","val","numbers"," ","localhost","cli","0.1",".","ok",":","key2"],"title":"server2上登录redis客户端并执行","title_tokens":["客户","redis","登录","执行","并","server2","客户端","上"]},{"location":"docs/backup/180103/#_2","text":"Centos完美搭建redis3.0集群并附测试 Ruby Gem命令详解 Redis官网","text_tokens":["官网","redis","redis3.0","搭建"," ","centos","并","详解","命令","附","集群","gem","测试","ruby","完美"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"docs/backup/180510/","text":"IP地址 ¶ 192.168.1.11 网关 ¶ 192.168.1.1 在CentOS 6.7下搭建DHCP服务 ¶ [~]# yum install dhcpd #安装dhcp 0X01 配置服务器网络服务 首先我们要将本地的网络配置成静态地址，并重启网络服务 [~]# vi /etc/sysconfig/network-scripts/icf-eth0 #将本地的网络配置成静态地址，并重启网络服务 BOOTPROTO = static #之前很有可能是dhcp，现在我们修改它为静态 ONBOOT = yes #以前可能是no，改为yes、就是打开网络服务的时候启动这个网卡 IPADDR = 192 .168.1.11 #配置文件中可能没有这个，没有的话就自己添加这行 [~]# service network restart [~]# vi /etc/dhcp/dhcpd.conf #设置DHCP于DNS服务器的动态信息更新模式。初学时完全可以不理这个选项，但是全局设置中一定要有这个选项，否则DHCP服务不能成功启动。 ddns-update-style interim ; #下面开始分配子网，网段是192.168.1.11 子网掩码是 255.255.255.0 #不能理解网段和子网掩码的可以去网上查一下。简单的说网段规定了分配IP的段（分配哪一段IP给客户机），子网掩码规定了网段的大小 subnet 192 .168.1.11 netmask 255 .255.255.0 { range 192 .168.1.100 192 .168.1.199 ; #同一网段，分配给客户机的IP option routers 192 .168.1.1 ; #设置网关 default-lease-time 600 ; #默认租约时间 max-lease-time 7200 ; #最大租约时间 } 给特定MAC设置 ¶ [~]# vi /etc/dhcp/dhcpd.conf #添加如下 host Client { #名字随便起 hardware ethernet 08 :00:27:5e:04:27 ; #MAC地址 fixed-address 192 .168.1.123 ; #分配给它192.168.1.123的IP } [~]# service dhcpd restart Linux 下测试DHCP ¶ [~]# vi /etc/sysconfig/network-scripts/icf-eth0 DEVICE = eth0 BOOTPROTO = dhcp #dhcp ONBOOT = yes HWADDR = 08 :00:27:5e:04:27 #MAC [~]# service network restart 参考链接 ¶ CentOS 7.x 下配置 DHCP 服务器 基础篇","text_tokens":["如下","但是","就是","dhcpd","安装","00","一下","分配","onboot","这个","地址","这","添加","range","大小","段","修改","模式","它","启动","7","初学","理解","网络","为","[","¶","时","#","=","ip","随便","，","设置","0","名字","conf"," ","时候","下面","静态","行","规定",".","option","168.1","1","下","27","更新","}","是","lease","6.7","不理","服务","篇","给","yum","成功","default","install","特定","重启","子网","。","time","0x01","255","的话","5e","ddns","{","host","7200","全局","配置","要","network","device","192.168","哪","etc","199","mac","/","restart","100","hwaddr","static","客户机","没有","首先","否则","bootproto","ip地址","网上",";","max","不能","可以","在","就","的","同一","255.255","~","可能","链接","interim","service","成","dns","client","了","网卡","08","linux","hardware","服务器","客户","]","和","-","网关","很","no","style","文件","配置文件","打开","update","1.11","中","去","务器","现在","网段","x","sysconfig","选项","04","自己","查","dhcp","123","之前",":","时间","将","icf","ipaddr","起","本地","一定","fixed","routers","我们","、","subnet","netmask","centos","并","开始","默认","（","ethernet","网络服务","测试","简单","一段","最大","完全","vi","eth0","）","说","11","租约","yes","掩码","于","255.0","1.1","192","600","基础","有","scripts","搭建","参考","address","以前","1.123","信息","子网掩码","改为","动态"],"title":"CentOS 6.7 开启 DHCP 服务","title_tokens":["6.7"," ","centos","开启","服务","dhcp"]},{"location":"docs/backup/180510/#ip","text":"192.168.1.11","text_tokens":[".","1.11","192.168"],"title":"IP地址","title_tokens":["ip地址","地址"]},{"location":"docs/backup/180510/#_1","text":"192.168.1.1","text_tokens":["1.1",".","192.168"],"title":"网关","title_tokens":["网关"]},{"location":"docs/backup/180510/#centos-67dhcp","text":"[~]# yum install dhcpd #安装dhcp 0X01 配置服务器网络服务 首先我们要将本地的网络配置成静态地址，并重启网络服务 [~]# vi /etc/sysconfig/network-scripts/icf-eth0 #将本地的网络配置成静态地址，并重启网络服务 BOOTPROTO = static #之前很有可能是dhcp，现在我们修改它为静态 ONBOOT = yes #以前可能是no，改为yes、就是打开网络服务的时候启动这个网卡 IPADDR = 192 .168.1.11 #配置文件中可能没有这个，没有的话就自己添加这行 [~]# service network restart [~]# vi /etc/dhcp/dhcpd.conf #设置DHCP于DNS服务器的动态信息更新模式。初学时完全可以不理这个选项，但是全局设置中一定要有这个选项，否则DHCP服务不能成功启动。 ddns-update-style interim ; #下面开始分配子网，网段是192.168.1.11 子网掩码是 255.255.255.0 #不能理解网段和子网掩码的可以去网上查一下。简单的说网段规定了分配IP的段（分配哪一段IP给客户机），子网掩码规定了网段的大小 subnet 192 .168.1.11 netmask 255 .255.255.0 { range 192 .168.1.100 192 .168.1.199 ; #同一网段，分配给客户机的IP option routers 192 .168.1.1 ; #设置网关 default-lease-time 600 ; #默认租约时间 max-lease-time 7200 ; #最大租约时间 }","text_tokens":["但是","就是","dhcpd","安装","一下","分配","onboot","这个","地址","这","添加","range","大小","段","修改","模式","它","启动","初学","理解","网络","为","[","时","#","=","ip","，","设置","0","conf"," ","时候","下面","行","静态","规定",".","option","168.1","1","更新","}","是","lease","不理","服务","给","yum","成功","default","install","重启","子网","。","time","0x01","255","的话","ddns","{","7200","全局","配置","要","network","192.168","哪","etc","199","/","restart","100","static","客户机","没有","首先","否则","bootproto","网上",";","max","不能","可以","就","的","同一","255.255","~","可能","interim","service","成","dns","了","网卡","服务器","客户","]","和","-","很","no","style","网关","文件","配置文件","打开","update","中","1.11","去","务器","现在","网段","sysconfig","选项","自己","查","dhcp","之前","时间","将","icf","ipaddr","本地","一定","routers","我们","、","subnet","netmask","并","开始","默认","（","网络服务","简单","一段","最大","完全","vi","eth0","）","说","11","租约","yes","掩码","于","255.0","192","600","有","scripts","以前","信息","子网掩码","改为","动态"],"title":"在CentOS 6.7下搭建DHCP服务","title_tokens":["6.7","搭建"," ","centos","服务","在","dhcp","下"]},{"location":"docs/backup/180510/#mac","text":"[~]# vi /etc/dhcp/dhcpd.conf #添加如下 host Client { #名字随便起 hardware ethernet 08 :00:27:5e:04:27 ; #MAC地址 fixed-address 192 .168.1.123 ; #分配给它192.168.1.123的IP } [~]# service dhcpd restart","text_tokens":["}","如下","dhcpd",";","起","00","给","fixed","分配","的","地址","~","添加","service","client","ethernet","08","hardware","它","5e","1.123","vi","]","-","{","host","[","#","随便","ip","名字","192","192.168","etc","conf"," ","mac","/","address","04","restart",".","27","168.1","dhcp","123",":"],"title":"给特定MAC设置","title_tokens":["设置","mac","特定","给"]},{"location":"docs/backup/180510/#linux-dhcp","text":"[~]# vi /etc/sysconfig/network-scripts/icf-eth0 DEVICE = eth0 BOOTPROTO = dhcp #dhcp ONBOOT = yes HWADDR = 08 :00:27:5e:04:27 #MAC [~]# service network restart","text_tokens":["icf","00","onboot","~","service","08","5e","vi","eth0","]","-","[","yes","#","=","network","device","sysconfig","etc","scripts"," ","mac","/","restart","hwaddr","04","27","dhcp","bootproto",":"],"title":"Linux 下测试DHCP","title_tokens":["dhcp","测试"," ","linux","下"]},{"location":"docs/backup/180510/#_2","text":"CentOS 7.x 下配置 DHCP 服务器 基础篇","text_tokens":["x","7","基础"," ","centos","服务","篇",".","配置","dhcp","下","服务器","务器"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"docs/backup/180828_1/","text":"测试环境 ¶ Windows 10 64 位家庭版 JDK_1.8_64 配置环境变量 ¶ 配置环境变量如下： 变量名 变量值 JAVA_HOME C:\\Program Files\\Java\\jdk1.8.0_171 CLASSPATH .;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar; Path C:\\Program Files\\Java\\jdk1.8.0_171\\bin Path C:\\Program Files\\Java\\jdk1.8.0_171\\jre\\bin JDK 的安装路径为：C:\\Program Files\\Java\\jdk1.8.0_171 Path 的变量值不能带 %JAVA_HOME ,实测带的话 javac 命令不识别 注意 CLASSPATH 的变量值前面的点","text_tokens":["如下",";","home","环境","家庭版","前面","安装","不能","program","bin","的","注意","1.8","实测","变量名","java","64","files","命令","10",",","jre","%","测试","变量值","环境变","：","jdk","的话","tools","识别","\\","量值","位","为","javac","lib","¶","c","配置","_","jar","点","dt","变量","环境变量","0","jdk1.8","classpath","带","路径"," ","不","家庭","home%",".","171","windows","path",":","测试环境"],"title":"180828 1","title_tokens":["1"," ","180828"]},{"location":"docs/backup/180828_1/#_1","text":"Windows 10 64 位家庭版 JDK_1.8_64","text_tokens":["1.8"," ","位","64","家庭版","家庭","10","windows","_","jdk"],"title":"测试环境","title_tokens":["测试","环境","测试环境"]},{"location":"docs/backup/180828_1/#_2","text":"配置环境变量如下： 变量名 变量值 JAVA_HOME C:\\Program Files\\Java\\jdk1.8.0_171 CLASSPATH .;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar; Path C:\\Program Files\\Java\\jdk1.8.0_171\\bin Path C:\\Program Files\\Java\\jdk1.8.0_171\\jre\\bin JDK 的安装路径为：C:\\Program Files\\Java\\jdk1.8.0_171 Path 的变量值不能带 %JAVA_HOME ,实测带的话 javac 命令不识别 注意 CLASSPATH 的变量值前面的点","text_tokens":["如下",";","home","环境","前面","安装","不能","program","bin","的","注意","实测","变量名","java","files","命令",",","jre","%","变量值","环境变","：","jdk","的话","tools","识别","\\","量值","为","javac","lib","c","配置","_","jar","点","dt","变量","环境变量","0","jdk1.8","classpath","带","路径"," ","不","home%",".","171","path",":"],"title":"配置环境变量","title_tokens":["变量","环境变量","环境","配置","环境变"]},{"location":"docs/backup/180828_2/","text":"快速入门 ¶ 工程路径：F:\\Workplace\\Eclipse\\JavaHXJS 目标文件：F:\\Workplace\\Eclipse\\JavaHXJS\\src\\com\\aes\\Test.java 运行如下： F: \\W orkplace \\E clipse \\J avaHXJS>javac src \\c om \\a es \\T est.java F: \\W orkplace \\E clipse \\J avaHXJS>cd src F: \\W orkplace \\E clipse \\J avaHXJS \\s rc>java com.aes.Test Test successed","text_tokens":["src","如下","e","clipse","cd","w",">","eclipse","avahxjs","目标","successed","orkplace","快速","java","工程","入门","test","est","：","j","s","\\","workplace","运行","javahxjs","aes","javac","文件","f","¶","c","com","om","a","路径"," ","rc","t",".","es",":"],"title":"命令行编译 Eclipse 创建的 Java 程序","title_tokens":["的","编译"," ","java","命令行","创建","命令","eclipse","程序"]},{"location":"docs/backup/180828_2/#_1","text":"工程路径：F:\\Workplace\\Eclipse\\JavaHXJS 目标文件：F:\\Workplace\\Eclipse\\JavaHXJS\\src\\com\\aes\\Test.java 运行如下： F: \\W orkplace \\E clipse \\J avaHXJS>javac src \\c om \\a es \\T est.java F: \\W orkplace \\E clipse \\J avaHXJS>cd src F: \\W orkplace \\E clipse \\J avaHXJS \\s rc>java com.aes.Test Test successed","text_tokens":["src","如下","e","clipse","cd","w",">","eclipse","avahxjs","目标","successed","orkplace","java","工程","test","est","：","j","s","\\","workplace","运行","javahxjs","aes","javac","文件","f","c","com","om","a","路径"," ","rc","t",".","es",":"],"title":"快速入门","title_tokens":["快速","入门"]},{"location":"docs/backup/180915/","text":"快速入门 ¶ mermaidjs.github.io/flowchart.html 需要导入 js，可以在 markdown 里使用 甘特图 ¶ gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d 基本顺序图 ¶ sequenceDiagram Alice ->> Bob: Hello Bob, how are you? Bob-->>John: How about you John? Bob--x Alice: I am good thanks! Bob-x John: I am good thanks! Note right of John: Bob thinks a long<br/>long time, so long<br/>that the text does<br/>not fit on a row. Bob-->Alice: Checking with John... Alice->John: Yes... John, how are you? 基本流程图 ¶ graph LR A[Square Rect] -- Link text --> B((Circle)) A --> C(Round Rect) B --> D{Rhombus} C --> D 更大的带样式流程图 ¶ graph TB sq[Square shape] --> ci((Circle shape)) subgraph A subgraph od>Odd shape]-- Two line<br/>edge comment --> ro di{Diamond with <br/> line break} -.-> ro(Rounded<br>square<br>shape) di==>ro2(Rounded square shape) end %% Notice that no text in shape are added here instead that is appended further down e --> od3>Really long text with linebreak<br>in an Odd shape] %% Comments after double percent signs e((Inner / circle<br>and some odd <br>special characters)) --> f(,.?!+-*ز) cyr[Cyrillic]-->cyr2((Circle shape Начало)); classDef green fill:#9f6,stroke:#333,stroke-width:2px; classDef orange fill:#f96,stroke:#333,stroke-width:4px; class sq,e green class di orange Loops, alt and opt ¶ sequenceDiagram loop Daily query Alice->>Bob: Hello Bob, how are you? alt is sick Bob->>Alice: Not so good :( else is well Bob->>Alice: Feeling fresh like a daisy end opt Extra response Bob->>Alice: Thanks for asking end end Message to self in loop ¶ sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts<br/>prevail... John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good!","text_tokens":["?","更大","js",">","right","9f6","2014","jison","+-","2d","flowchart","for","des3","after","link","24h","feeling","入门","diagram",",","checking","ro","2px","jolly","io","task","section","self","des4","really","ز","text","des2","does","loop","am","--","[","f","¶","c","note","with","=","od3","#","renderer","，","well","line","d"," ","shape","done",".","crit","rect","query","gantt","here","thinks","}","implement","how","down","an","in","导入","ci","message","response","prevail","mermaid","%%",")","5d","break","instead","(","alice","about","dateformat","н","class","di","is","快速","create","opt","add","time","b","od","333","hypochondria","title","john","subgraph","two","cyr2","edge","{","inner","graph","stroke","are","asking","html","甘特图","characters","signs","流程","added","loops","使用","/","github","the",";","against","diamond","dd","1d","future","可以","在","tasks","completed","des1","width","01","的","percent","alt","ч","顺序","i","double","further","08","hello","notice","09","л","sequencediagram","br","on","-","to","]","no","fresh","great","circle","06","3d","active","and","green","<","fight","like","rational","you","mm","task2","里","so","critical","带","x","!","a","tb","healthcheck","tests","row","daisy","else","bob","ro2","that","linebreak",":","classdef","extra","end","e","odd","round","о","markdown","...","special","thoughts","daily","rounded","fit","流程图","cyrillic","需要","thanks","基本","sq","mermaidjs","rhombus","some","sick","图","а","square","adding","comment","样式","-.-","yes","4px","appended","good","long","comments","functionality","*","fill","orange","of","yyyy","participant","f96","not","cyr","lr","parser"],"title":"mermaid.js 使用","title_tokens":["js","使用"," ",".","mermaid"]},{"location":"docs/backup/180915/#_1","text":"mermaidjs.github.io/flowchart.html 需要导入 js，可以在 markdown 里使用","text_tokens":["里","，","flowchart","js","使用","需要"," ","/","mermaidjs","导入","html","markdown",".","可以","在","github","io"],"title":"快速入门","title_tokens":["快速","入门"]},{"location":"docs/backup/180915/#_2","text":"gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d","text_tokens":["the","implement","in","dd","2014","jison","1d","future","mermaid","completed","tasks","5d","des1","dateformat","01","2d","for","des3","parser","after","create","add","24h","diagram","08",",","09","task","section","title","adding","des4","-","to","des2","06","3d","active","and","functionality","mm","task2","renderer","critical","yyyy","a","line"," ","tests","done","crit","gantt",":"],"title":"甘特图","title_tokens":["甘特图"]},{"location":"docs/backup/180915/#_3","text":"sequenceDiagram Alice ->> Bob: Hello Bob, how are you? Bob-->>John: How about you John? Bob--x Alice: I am good thanks! Bob-x John: I am good thanks! Note right of John: Bob thinks a long<br/>long time, so long<br/>that the text does<br/>not fit on a row. Bob-->Alice: Checking with John... Alice->John: Yes... John, how are you?","text_tokens":["the","?","how",">","right","...","alice","about","fit","i","thanks","time","hello",",","checking","sequencediagram","john","br","text","-","on","does","are","am","--","<","note","with","good","long","yes","you","so","x","of","!","a"," ","row","/","not",".","bob","that",":","thinks"],"title":"基本顺序图","title_tokens":["顺序","图","基本"]},{"location":"docs/backup/180915/#_4","text":"graph LR A[Square Rect] -- Link text --> B((Circle)) A --> C(Round Rect) B --> D{Rhombus} C --> D","text_tokens":["}","round",">",")","(","link","rhombus","b","square","]","text","{","graph","circle","[","--","c","a","d"," ","rect","lr"],"title":"基本流程图","title_tokens":["流程","流程图","基本"]},{"location":"docs/backup/180915/#_5","text":"graph TB sq[Square shape] --> ci((Circle shape)) subgraph A subgraph od>Odd shape]-- Two line<br/>edge comment --> ro di{Diamond with <br/> line break} -.-> ro(Rounded<br>square<br>shape) di==>ro2(Rounded square shape) end %% Notice that no text in shape are added here instead that is appended further down e --> od3>Really long text with linebreak<br>in an Odd shape] %% Comments after double percent signs e((Inner / circle<br>and some odd <br>special characters)) --> f(,.?!+-*ز) cyr[Cyrillic]-->cyr2((Circle shape Начало)); classDef green fill:#9f6,stroke:#333,stroke-width:2px; classDef orange fill:#f96,stroke:#333,stroke-width:4px; class sq,e green class di orange","text_tokens":["?",">","9f6","+-","after","2px","ro",",","ز","really","text","[","--","f","od3","with","=","#","line"," ","shape",".","here","}","down","an","in","ci","f96","%%",")","break","instead","(","н","class","di","is","od","333","subgraph","two","cyr2","edge","{","inner","graph","stroke","are","characters","signs","added","/",";","diamond","width","percent","ч","double","further","notice","л","]","br","-","no","circle","and","green","<","!","tb","a","linebreak","ro2","that","classdef",":","end","e","odd","о","special","rounded","cyrillic","sq","some","а","square","comment","-.-","4px","appended","long","comments","*","fill","orange","cyr"],"title":"更大的带样式流程图","title_tokens":["带","的","流程图","更大","样式","流程"]},{"location":"docs/backup/180915/#loops-alt-and-opt","text":"sequenceDiagram loop Daily query Alice->>Bob: Hello Bob, how are you? alt is sick Bob->>Alice: Not so good :( else is well Bob->>Alice: Feeling fresh like a daisy end opt Extra response Bob->>Alice: Thanks for asking end end","text_tokens":["end","?","how",">","response","daily","(","alice","alt","for","is","opt","thanks","feeling","hello",",","sick","sequencediagram","-","asking","loop","are","like","good","you","so","well","a"," ","query","daisy","else","not","bob","extra","fresh",":"],"title":"Loops, alt and opt","title_tokens":["loops","alt","opt"," ","and",","]},{"location":"docs/backup/180915/#message-to-self-in-loop","text":"sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts<br/>prevail... John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good!","text_tokens":["end","?","how","against",">","right","...","prevail","thoughts","alice","about","hello",",","jolly","sequencediagram","hypochondria","john","br","-","great","are","loop","--","fight","note","rational","<","good","you","of","healthcheck","!","participant"," ","/","bob",":"],"title":"Message to self in loop","title_tokens":["self","to"," ","in","loop","message"]},{"location":"docs/backup/181001_1/","text":"git config --global core.autocrlf true","text_tokens":["git","autocrlf"," ","config","core","--","true",".","global"],"title":"解决 git LF 和 CFLF 换行问题","title_tokens":["git","换行","和","解决","cflf"," ","lf","问题"]},{"location":"docs/backup/181003_1/","text":"error ¶ vscode 的 run code 插件无法使用，原因是控制台的编码问题 usage ¶ github vscode-code-runner issues","text_tokens":["是","控制","控制台","原因","问题","的","usage","run","issues","-","code","vscode","¶","编码","error","runner","，","插件","使用","无法"," ","github"],"title":"vscode 控制台输出编码问题","title_tokens":["vscode"," ","输出","控制","控制台","问题","编码"]},{"location":"docs/backup/181003_1/#error","text":"vscode 的 run code 插件无法使用，原因是控制台的编码问题","text_tokens":["，","的","是","插件","run","使用","code","vscode","无法"," ","控制","控制台","原因","问题","编码"],"title":"error","title_tokens":["error"]},{"location":"docs/backup/181003_1/#usage","text":"github vscode-code-runner issues","text_tokens":["runner","-","code","vscode","issues"," ","github"],"title":"usage","title_tokens":["usage"]},{"location":"docs/backup/181004_4/","text":"快速入门 ¶ 查找 vim 配置文件在哪 :version echo $vim vim 插件管理器 bundle PluginInstall 安装插件，要先写配置文件，bash 的 vim 配置文件在 Git 安装路径里面。","text_tokens":["bash","理器","$","安装","在","管理","echo","的","快速","plugininstall","。","入门","里面","先","查找","文件","配置文件","¶","配置","，","要","写","git","bundle","哪","插件","路径"," ","管理器","version","vim",":"],"title":"vim 配置","title_tokens":["配置","vim"," "]},{"location":"docs/backup/181004_4/#_1","text":"查找 vim 配置文件在哪 :version echo $vim vim 插件管理器 bundle PluginInstall 安装插件，要先写配置文件，bash 的 vim 配置文件在 Git 安装路径里面。","text_tokens":["bash","理器","$","安装","在","管理","echo","的","plugininstall","。","里面","先","查找","文件","配置文件","配置","，","要","写","git","bundle","哪","插件","路径"," ","管理器","version","vim",":"],"title":"快速入门","title_tokens":["快速","入门"]},{"location":"docs/backup/181208_1/","text":"简介 ¶ hy 在 eclipse 导入一个 jsp 工程时，因为里面的 jsp 页面使用了 jsp 的 c 语句导致运行时抛出如下异常： The absolute uri: http://java.sun.com/jsp/jstl/core cannot be resolved in either web.xml or the jar files deployed with this application org.apache.jasper.JasperException: The absolute uri: http://java.sun.com/jsp/jstl/core cannot be resolved in either web.xml or the jar files deployed with this application 快速上手 ¶ 这个问题的可能原因之一是找不到 jstl 的 jar 包，需要两个包 jstl.jar 和 standar.jar。 下载地址： - jstl - standard","text_tokens":["如下","jasperexception","异常","standard","be","这个","地址","java","files","this","jstl","org","语句","之一","¶","时","c","with","，"," ","手","导致",".","是","apache","in","core","导入","两个","简介","either","快速","。","下载","standar","deployed","页面","抛出","com","jar","使用","/","上","the","问题","在","sun","的","不到","可能","了","jasper","里面","：","和","-","包","hy","uri",":","因为","原因","jsp","eclipse","resolved","需要","application","工程","运行","一个","or","xml","http","absolute","找","cannot","web"],"title":"j2ee 的 jstl 找不到包","title_tokens":["j2ee","的","不到"," ","包","jstl","找"]},{"location":"docs/backup/181208_1/#_1","text":"hy 在 eclipse 导入一个 jsp 工程时，因为里面的 jsp 页面使用了 jsp 的 c 语句导致运行时抛出如下异常： The absolute uri: http://java.sun.com/jsp/jstl/core cannot be resolved in either web.xml or the jar files deployed with this application org.apache.jasper.JasperException: The absolute uri: http://java.sun.com/jsp/jstl/core cannot be resolved in either web.xml or the jar files deployed with this application","text_tokens":["the","如下","cannot","jasperexception","apache","异常","in","core","导入","因为","在","jsp","eclipse","sun","be","resolved","either","的","java","application","files","this","工程","了","jstl","jasper","里面","：","org","语句","运行","deployed","页面","一个","抛出","时","c","with","com","or","jar","，","xml","http","hy","使用","absolute"," ","/","导致",".","uri",":","web"],"title":"简介","title_tokens":["简介"]},{"location":"docs/backup/181208_1/#_2","text":"这个问题的可能原因之一是找不到 jstl 的 jar 包，需要两个包 jstl.jar 和 standar.jar。 下载地址： - jstl - standard","text_tokens":["是","standard","原因","两个","问题","的","这个","地址","不到","可能","需要","。","下载","jstl","：","standar","和","-","包","之一","jar","，"," ",".","找"],"title":"快速上手","title_tokens":["手","快速","上"]},{"location":"docs/backup/200206_1/","text":"PS：机翻 在所有合法的语法位置上，海象运算符 groups 更接近逗号，不接近其他所有运算符（包括 or，and，not，以及条件表达式（A if C else B）。 如上文”例外情况”部分所述，绝不允许与 = 相同的 group。 如果需要不同的分组，则应使用括号。 海象运算符可以直接在位置函数调用参数中使用，但是它在关键字参数中是无效的。 面是一些例子来说明什么在技术上是有效的或者无效的: # INVALID x := 0 # Valid alternative ( x := 0 ) # INVALID x = y := 0 # Valid alternative x = ( y := 0 ) # Valid len ( lines := f . readlines ()) # Valid foo ( x := 3 , cat = 'vector' ) # INVALID foo ( cat = category := 'vector' ) # Valid alternative foo ( cat = ( category := 'vector' )) 上面的大多数“有效”示例都不推荐，因为阅读 Python 源代码的人在快速浏览某些代码时可能会忽略其中的区别。 但简单的情况并不令人反感: # Valid if any ( len ( longline := line ) >= 100 for line in lines ): print ( \"Extremely long line:\" , longline ) 这个 PEP 建议总是在: 左右放置空格，类似于 PEP 8对用于分配的建议，而后者不允许在关键字参数周围使用空格 附录 ¶ 捕蛇者说 | Ep 05. 聊聊单元测试最佳实践和 PEP 572 pep-0572/#relative-precedence-of","text_tokens":["直接","pep","但是","则",">","算符","情况","category","以及","函数","上面","区别","cat","分配","运算","这个","函数调用","for","类似",",","语法","它","lines","f","人","c","时","周围","逗号","=","#","总是","关键字","¶","，","0","调用","line","相同"," ","any","print","表达式","y",".","所述","捕蛇者","绝不允许","机翻","是","聊聊","某些","例外情况","一些","in","部分","令人","位置",")","\"","vector","(","有效","技术","附录","允许","foo","无效","快速","而","运算符","来","b","。","浏览","如果","海象","源代码","建议","8","说明","最佳","或者","绝不","合法","接近","'","空格","其他","但","“","如上","其中","条件","使用","/","单元测试","更","不同","100","多数","包括","上","单元","group","反感","在技术上","if","可以","在","面是","|","的","可能","会","0572","ps","：","relative","括号","和","忽略","用于","-","572","and","longline","应","”","中","中是","3","代码","x","a","extremely","文","都","表达","阅读","放置","else","valid","分组",":","实践","python","因为","alternative","len","后者","对","precedence","readlines","需要","并","推荐","所有","（","invalid","测试","简单","与","）","关键","达式","说","大多数","long","例子","or","大多","于","groups","of","ep","示例","例外","什么","参数","不","05","not","左右"],"title":"python Relative precedence of := 海象运算符 翻译","title_tokens":["precedence","of","运算","翻译"," ","运算符","算符","python","海象","=",":","relative"]},{"location":"docs/backup/200206_1/#_1","text":"捕蛇者说 | Ep 05. 聊聊单元测试最佳实践和 PEP 572 pep-0572/#relative-precedence-of","text_tokens":["单元","pep","聊聊","实践","|","precedence","0572","测试","relative","和","-","说","最佳","572","#","of","ep"," ","/","单元测试","05","捕蛇者","."],"title":"附录","title_tokens":["附录"]},{"location":"docs/command/bash-cheatsheet/","text":"bash chaet sheet ¶ fliptheweb/bash-shortcuts-cheat-sheet","text_tokens":["bash","shortcuts","-","fliptheweb","cheat"," ","/","¶","chaet","sheet"],"title":"bash chaet sheet","title_tokens":["chaet","bash","sheet"," "]},{"location":"docs/command/bash-cheatsheet/#bash-chaet-sheet","text":"fliptheweb/bash-shortcuts-cheat-sheet","text_tokens":["bash","shortcuts","-","fliptheweb","cheat","/","sheet"],"title":"bash chaet sheet","title_tokens":["chaet","bash","sheet"," "]},{"location":"docs/command/funny/","text":"funny ¶ absinthe@havoc who | grep -i \"brunette\" | talk ; cd ~ ; wine ; talk ; touch ; unzip ; touch ; strip ; gasp ; finger ; gasp ; mount ; fsck ; more ; yes ; gasp ; umount ; make clean ; sleep Code is art","text_tokens":["sleep",";","strip","cd","more","wine","|","unzip","havoc","\"","talk","brunette","make","~","is","i","fsck","@","gasp","grep","art","-","clean","code","mount","absinthe","who","touch","¶","yes","umount"," ","finger","funny"],"title":"funny","title_tokens":["funny"]},{"location":"docs/command/funny/#funny","text":"absinthe@havoc who | grep -i \"brunette\" | talk ; cd ~ ; wine ; talk ; touch ; unzip ; touch ; strip ; gasp ; finger ; gasp ; mount ; fsck ; more ; yes ; gasp ; umount ; make clean ; sleep Code is art","text_tokens":["sleep",";","strip","cd","more","wine","|","unzip","havoc","\"","talk","brunette","make","~","is","i","fsck","@","gasp","grep","art","-","clean","code","mount","who","absinthe","touch","yes","umount"," ","finger"],"title":"funny","title_tokens":["funny"]},{"location":"docs/command/cmd/about-wifi/","text":"wifi ¶ for /f \"skip=9 tokens=1,2 delims=:\" %i in ('netsh wlan show profiles') do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear 一键获取 wifi 密码","text_tokens":["skip","tokens","wifi","show","in","|",")","\"","netsh","profiles","(","do","echo","findstr","clear","for","i","密码",",","@","9","%","j","delims","-","获取","f","¶","'","=","v","key"," ","/","2","一键","1","wlan",":"],"title":"wifi","title_tokens":["wifi"]},{"location":"docs/command/cmd/about-wifi/#wifi","text":"for /f \"skip=9 tokens=1,2 delims=:\" %i in ('netsh wlan show profiles') do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear 一键获取 wifi 密码","text_tokens":["skip","tokens","wifi","show","in","|",")","\"","netsh","profiles","(","do","echo","findstr","clear","for","i","密码",",","@","9","%","j","delims","-","获取","f","'","=","v","key"," ","/","2","一键","1","wlan",":"],"title":"wifi","title_tokens":["wifi"]},{"location":"docs/command/cmd/chcp/","text":"chcp ¶ chcp 65001 换成utf-8代码页 chcp 936 换成默认的 gbk chcp 437 美国英语","text_tokens":["8","的","-","页","936","换成","美国"," ","65001","gbk","chcp","默认","¶","437","英语","代码","utf"],"title":"chcp","title_tokens":["chcp"]},{"location":"docs/command/cmd/chcp/#chcp","text":"chcp 65001 换成utf-8代码页 chcp 936 换成默认的 gbk chcp 437 美国英语","text_tokens":["8","的","-","页","936","换成","美国"," ","65001","gbk","chcp","默认","437","英语","代码","utf"],"title":"chcp","title_tokens":["chcp"]},{"location":"docs/command/cmd/clip/","text":"clip ¶ echo Hello | clip 将字符串 Hello 放入 Windows 剪贴板 dir | clip 将 dir 命令输出（当前目录列表）放入 Windows 剪贴板 clip < README.TXT 将 readme.txt 的文本放入 Windows 剪贴板 echo | clip 将一个空行放入 Windows 剪贴板，即清空 Windows 剪贴板","text_tokens":["将","列表","目录","|","贴板","echo","的","剪贴板","放入","clip","dir","命令","（","hello","当前目录","文本","txt","清空","）","当前","一个","字符串","字符","¶","<","，","空行"," ","输出","剪贴",".","windows","即","readme"],"title":"clip","title_tokens":["clip"]},{"location":"docs/command/cmd/clip/#clip","text":"echo Hello | clip 将字符串 Hello 放入 Windows 剪贴板 dir | clip 将 dir 命令输出（当前目录列表）放入 Windows 剪贴板 clip < README.TXT 将 readme.txt 的文本放入 Windows 剪贴板 echo | clip 将一个空行放入 Windows 剪贴板，即清空 Windows 剪贴板","text_tokens":["将","列表","目录","|","贴板","echo","的","剪贴板","放入","clip","dir","命令","（","hello","当前目录","文本","txt","清空","）","当前","一个","字符串","字符","<","，","空行"," ","输出","剪贴",".","windows","即","readme"],"title":"clip","title_tokens":["clip"]},{"location":"docs/command/cmd/fuck/","text":"!! ¶ 重复上一条命令","text_tokens":["重复","一条","!"," ","命令","¶","上"],"title":"!!","title_tokens":["!"]},{"location":"docs/command/cmd/fuck/#_1","text":"重复上一条命令","text_tokens":["重复","命令","一条","上"],"title":"!!","title_tokens":["!"]},{"location":"docs/command/cmd/gcc/","text":"gcc ¶ g++ test.cpp -o test test 运行 gcc test.c -o test test 运行","text_tokens":["g","-","cpp","运行","o"," ","¶",".","c","test","++","gcc"],"title":"gcc","title_tokens":["gcc"]},{"location":"docs/command/cmd/gcc/#gcc","text":"g++ test.cpp -o test test 运行 gcc test.c -o test test 运行","text_tokens":["g","-","cpp","运行"," ",".","c","test","++","gcc","o"],"title":"gcc","title_tokens":["gcc"]},{"location":"docs/command/cmd/javap/","text":"javap ¶ javap -verbose filename 查看 class 字节码文件","text_tokens":["码","verbose","filename","class","-","查看"," ","文件","字节","javap","¶"],"title":"javap","title_tokens":["javap"]},{"location":"docs/command/cmd/javap/#javap","text":"javap -verbose filename 查看 class 字节码文件","text_tokens":["码","verbose","filename","class","-","查看"," ","文件","字节","javap"],"title":"javap","title_tokens":["javap"]},{"location":"docs/command/cmd/netstat/","text":"netstat ¶ netstat -ano | findstr 8080 查看占用8080端口的进程","text_tokens":["findstr","ano","进程","的","端口","-","查看"," ","8080","占用","¶","netstat","|"],"title":"netstat","title_tokens":["netstat"]},{"location":"docs/command/cmd/netstat/#netstat","text":"netstat -ano | findstr 8080 查看占用8080端口的进程","text_tokens":["findstr","ano","进程","的","端口","-","查看"," ","8080","占用","netstat","|"],"title":"netstat","title_tokens":["netstat"]},{"location":"docs/command/cmd/ping/","text":"ping ¶ ping url -t -l 1000","text_tokens":["url","-","ping"," ","l","t","¶","1000"],"title":"ping","title_tokens":["ping"]},{"location":"docs/command/cmd/ping/#ping","text":"ping url -t -l 1000","text_tokens":["url","-","ping"," ","l","t","1000"],"title":"ping","title_tokens":["ping"]},{"location":"docs/command/cmd/set/","text":"set ¶ 获取环境变量 set path 获取 path 环境变量","text_tokens":["变量","环境变量","set","环境"," ","获取","¶","path","环境变"],"title":"set","title_tokens":["set"]},{"location":"docs/command/cmd/set/#set","text":"获取环境变量 set path 获取 path 环境变量","text_tokens":["变量","环境变量","set","环境"," ","获取","path","环境变"],"title":"set","title_tokens":["set"]},{"location":"docs/command/cmd/shutdown/","text":"shutdown ¶ shutdown -s -t 3600 一小时后关机 shutdown -a 取消关机","text_tokens":["s","-","3600","一","a","后"," ","取消","t","shutdown","¶","关机","小时"],"title":"shutdown","title_tokens":["shutdown"]},{"location":"docs/command/cmd/shutdown/#shutdown","text":"shutdown -s -t 3600 一小时后关机 shutdown -a 取消关机","text_tokens":["s","-","3600","一","a","后"," ","取消","t","shutdown","关机","小时"],"title":"shutdown","title_tokens":["shutdown"]},{"location":"docs/command/cmd/taskkill/","text":"taskkill ¶ taskkill /pid 68560 /f 将上面显示的进程号，结束掉","text_tokens":["，","上面","显示","的","进程","掉","taskkill","将","号"," ","结束","/","f","¶","pid","68560"],"title":"taskkill","title_tokens":["taskkill"]},{"location":"docs/command/cmd/taskkill/#taskkill","text":"taskkill /pid 68560 /f 将上面显示的进程号，结束掉","text_tokens":["，","上面","显示","的","进程","掉","taskkill","将","号"," ","结束","/","f","pid","68560"],"title":"taskkill","title_tokens":["taskkill"]},{"location":"docs/command/cmd/wireshark/","text":"wireshark ¶ route add 10.10.100.192 mask 255.255.255.255 10.10.100.1 metric 1 route delete 10.10.100.192 mask 255.255.255.255 10.10.100.1 metric 1","text_tokens":["wireshark","100.192","255.255"," ","10.10","add","delete","mask","¶",".","1","metric","100.1","route"],"title":"wireshark","title_tokens":["wireshark"]},{"location":"docs/command/cmd/wireshark/#wireshark","text":"route add 10.10.100.192 mask 255.255.255.255 10.10.100.1 metric 1 route delete 10.10.100.192 mask 255.255.255.255 10.10.100.1 metric 1","text_tokens":["100.192","255.255"," ","10.10","add","delete","mask",".","1","metric","100.1","route"],"title":"wireshark","title_tokens":["wireshark"]},{"location":"docs/command/cmd/wmic/","text":"wmic ¶ wmic /output:D:\\InstalledSoftwareList.txt product get name,version 导出安装的软件列表","text_tokens":["列表","product","安装","的","导出",",","output","txt","\\","get","软件","installedsoftwarelist","¶","wmic","name","d"," ","/","version",".",":"],"title":"wmic","title_tokens":["wmic"]},{"location":"docs/command/cmd/wmic/#wmic","text":"wmic /output:D:\\InstalledSoftwareList.txt product get name,version 导出安装的软件列表","text_tokens":["列表","product","安装","的","导出",",","output","txt","\\","get","软件","installedsoftwarelist","wmic","name","d"," ","/","version",".",":"],"title":"wmic","title_tokens":["wmic"]},{"location":"docs/command/cmd/wsl/","text":"wsl ¶ windows terminal reboot wsl # root Get-Service LxssManager | Restart-Service","text_tokens":["wsl","-","reboot"," ","get","terminal","root","service","restart","¶","|","windows","#","lxssmanager"],"title":"wsl","title_tokens":["wsl"]},{"location":"docs/command/cmd/wsl/#wsl","text":"windows terminal reboot wsl # root Get-Service LxssManager | Restart-Service","text_tokens":["wsl","-","reboot"," ","get","terminal","root","service","restart","|","windows","#","lxssmanager"],"title":"wsl","title_tokens":["wsl"]},{"location":"docs/command/linux/cat/","text":"cat ¶ 读取文件 cat SB0* > foo2.txt 合并文件 cat SB0?????? > foo2.txt 合并文件","text_tokens":["cat","txt","合并","?","读取","foo2",">"," ","文件","¶",".","sb0","*"],"title":"cat","title_tokens":["cat"]},{"location":"docs/command/linux/cat/#cat","text":"读取文件 cat SB0* > foo2.txt 合并文件 cat SB0?????? > foo2.txt 合并文件","text_tokens":["cat","txt","合并","?","读取","foo2",">"," ","文件",".","sb0","*"],"title":"cat","title_tokens":["cat"]},{"location":"docs/command/linux/csplit/","text":"csplit ¶ 分割文件 csplit {{src}} {{I:begin - line}} {{I: end - line}} 在这两行作为分割点将文件分割为三个文件 csplit 5 { 4 } 分割四次五行数据，剩余的留到最后 csplit - k -- prefix = mine foo.txt 5 {*} - k 忽略错误提示 -- prefix = mine 设置文件前缀为 mine 5 {*} 将可能 5 行等分文件，不能等分会报错 csplit - n 3 -- prefix = mine foo.txt 5 { 4 } - n 可以改变文件命名的数字 输出： mine000 mine001 mine002 mine003 mine004 mine005 csplit foo.xt /fie/ 每次出现 fie 的时候分割文件 * /fie/ * 是正则表达式 csplit foo.txt /fie/ { 5 } 前五次出现的地方分割","text_tokens":["出现","四次","剩余","每次","正则表达式","点将","xt","前缀","行等分","mine","这","最后","分割","为","留到","--","¶","=","，","fie","设置","line"," ","时候","等","表达式",".","}","提示","是","报错","数据","foo","{","作为","/","mine003","前","n","mine001","不能","可以","在","csplit","命名","mine000","五次","的","正则","可能","i","mine002","三个","：","两行","-","忽略","分会","文件","五行","3","begin","k","表达","输出",":","src","end","将","prefix","数字","错误","mine004","5","txt","改变","达式","mine005","*","地方","4"],"title":"csplit","title_tokens":["csplit"]},{"location":"docs/command/linux/csplit/#csplit","text":"分割文件 csplit {{src}} {{I:begin - line}} {{I: end - line}} 在这两行作为分割点将文件分割为三个文件 csplit 5 { 4 } 分割四次五行数据，剩余的留到最后 csplit - k -- prefix = mine foo.txt 5 {*} - k 忽略错误提示 -- prefix = mine 设置文件前缀为 mine 5 {*} 将可能 5 行等分文件，不能等分会报错 csplit - n 3 -- prefix = mine foo.txt 5 { 4 } - n 可以改变文件命名的数字 输出： mine000 mine001 mine002 mine003 mine004 mine005 csplit foo.xt /fie/ 每次出现 fie 的时候分割文件 * /fie/ * 是正则表达式 csplit foo.txt /fie/ { 5 } 前五次出现的地方分割","text_tokens":["出现","四次","剩余","每次","正则表达式","点将","xt","前缀","行等分","mine","这","最后","分割","为","留到","--","=","，","fie","设置","line"," ","时候","等","表达式",".","}","提示","是","报错","数据","foo","{","作为","/","mine003","前","n","mine001","不能","可以","在","csplit","命名","mine000","五次","的","正则","可能","i","mine002","三个","：","两行","-","忽略","分会","文件","五行","3","begin","k","表达","输出",":","src","end","将","prefix","数字","错误","mine004","5","txt","改变","达式","mine005","*","地方","4"],"title":"csplit","title_tokens":["csplit"]},{"location":"docs/command/linux/dd/","text":"dd ¶ dd if=/dev/urandom of={{随机的文件}} bs=100 count=1 使用内核随机驱动程序生成一个 100 个随机字节的文件 dd if=/dev/zere of={{file_1GB}} bs=1024 count=1000000 测试一块硬盘的写入性能","text_tokens":["}","file","if","dd","驱动","1gb","的","写入","count","随机","生成","内核","测试","zere","性能","1024","{","硬盘","bs","dev","文件","一个","¶","=","_","程序","个","of","使用","一块"," ","/","驱动程序","100","字节","urandom","1","1000000"],"title":"dd","title_tokens":["dd"]},{"location":"docs/command/linux/dd/#dd","text":"dd if=/dev/urandom of={{随机的文件}} bs=100 count=1 使用内核随机驱动程序生成一个 100 个随机字节的文件 dd if=/dev/zere of={{file_1GB}} bs=1024 count=1000000 测试一块硬盘的写入性能","text_tokens":["}","file","if","dd","驱动","1gb","的","写入","count","随机","生成","内核","测试","zere","性能","1024","{","硬盘","bs","dev","文件","一个","=","_","程序","个","of","使用","一块"," ","/","驱动程序","100","字节","urandom","1","1000000"],"title":"dd","title_tokens":["dd"]},{"location":"docs/command/linux/df/","text":"df ¶ df -h 查看硬盘占用","text_tokens":["df","-","查看"," ","硬盘","占用","¶","h"],"title":"df","title_tokens":["df"]},{"location":"docs/command/linux/df/#df","text":"df -h 查看硬盘占用","text_tokens":["df","-","查看"," ","硬盘","占用","h"],"title":"df","title_tokens":["df"]},{"location":"docs/command/linux/dpkg/","text":"dpkg ¶ add-apt-repository [RIPOSITORY] 添加源 dpkg -i 安装源","text_tokens":["]","-","repository","dpkg","源","apt"," ","添加","i","add","[","安装","¶","ripository"],"title":"dpkg","title_tokens":["dpkg"]},{"location":"docs/command/linux/dpkg/#dpkg","text":"add-apt-repository [RIPOSITORY] 添加源 dpkg -i 安装源","text_tokens":["]","-","repository","源","dpkg","apt"," ","添加","i","add","[","安装","ripository"],"title":"dpkg","title_tokens":["dpkg"]},{"location":"docs/command/linux/ethtool/","text":"ethtool ¶ sudo ethtool -s eth0 speed 100 duplex full 开启全速双工为以太网卡提速","text_tokens":["duplex","sudo","开启","以太","以太网","双工","speed","网卡","s","全速","eth0","-","为","¶","ethtool","以太网卡","full","提速"," ","100"],"title":"ethtool","title_tokens":["ethtool"]},{"location":"docs/command/linux/ethtool/#ethtool","text":"sudo ethtool -s eth0 speed 100 duplex full 开启全速双工为以太网卡提速","text_tokens":["duplex","sudo","开启","以太","以太网","双工","speed","网卡","s","全速","eth0","-","为","ethtool","以太网卡","full","提速"," ","100"],"title":"ethtool","title_tokens":["ethtool"]},{"location":"docs/command/linux/find/","text":"find ¶ find . -name *.c | xargs wc -l | tail -1 | awk '{print $1}' 统计代码行数 find . -type f -name \"*.html\" -print 输出当前目录下的所有 html 格式的文件","text_tokens":["}","find","l","目录","$","wc","|","\"","的","type","所有","awk","当前目录","xargs","-","当前","格式","{","文件","f","¶","'","c","数","代码","*","html","name","统计"," ","输出","print","行","tail",".","1","下"],"title":"find","title_tokens":["find"]},{"location":"docs/command/linux/find/#find","text":"find . -name *.c | xargs wc -l | tail -1 | awk '{print $1}' 统计代码行数 find . -type f -name \"*.html\" -print 输出当前目录下的所有 html 格式的文件","text_tokens":["}","find","l","目录","$","wc","|","\"","的","type","所有","awk","当前目录","xargs","-","当前","格式","{","文件","f","c","'","数","html","代码","*","name","统计"," ","输出","print","行","tail",".","1","下"],"title":"find","title_tokens":["find"]},{"location":"docs/command/linux/git/","text":"git ¶ 设置 ¶ git --global user.name\"username\" 全局用户名 git --global user.email \"email\" 全局邮箱 单个 ¶ git init --bare bare初始化 git add . git log --oneline git log -p 查看提交记录 git reset --hard HEAD HEAD是文件状态 git reflog git merge --no-ff -m \"keep merge info\" dev 保留 merge 信息 git rebase dev 新合并 git remote add origin MorvanZhou/git-demo.git 分类 ¶ commit ¶ git commit --amend --no-edit --no-edit: 不编辑, 直接合并到上一个 commit git commit -m \"change 1\" branch ¶ git branch dev 建立dev分支 git branch 查看当前分支 checkout ¶ git checkout c6762a1 -- 1.py git checkout -b boss 创建分支 git checkout dev 切换分支 push ¶ git push origin master 推到我的 origin git push -u origin master 推送本地 master 去 origin git push -u origin dev 推送本地 dev 去 origin git push -u origin master 推送修改 diff ¶ git diff HEAD git diff git diff --cached stash ¶ git stash list 查看在 stash 中的缓存 git stash pop git status -s 项目的历史代码中任意穿梭 ¶ 列出你在 Git 上的所有操作记录 git reflog 找到 HEAD@{index} 前面所对应的操作索引，并使用下面命令即可 git reset HEAD@{index} 想改个小东西，但代码不小心提交（commit） ¶ 添加下当前已改动的代码 git add . 把你刚刚添加的代码合并到最后一次提交上 git commit --amend 刚刚写的提交历史写得不够好，想重写一下 ¶ 重写提交历史 git commit --amend 不小心把新分支的代码提交到主分支上了 ¶ 先创建个新分支（some-new-branch-name） git branch some-new-branch-name 把刚才的提交从主分支中移除 git reset HEAD~ --hard 把代码提交到错误的分支上 ¶ 先撤销最后一次提交，但保留变更代码 git reset HEAD~ --soft git stash 再切到你想要提交的正确分支（name-of-the-correct-branch）上，并把变更代码提交上去 git checkout name-of-the-correct-branch git stash pop git add . git commit -m \"your message here\" 提交代码 ¶ git pull -- rebase # rebase 可以减少 merger commit 的 log git settings proxy ¶ git config --global https.proxy http://127.0.0.1:1080 git config --global https.proxy https://127.0.0.1:1080 git config --global --unset http.proxy git config --global --unset https.proxy npm config delete proxy","text_tokens":["直接","c6762a1","info","找到","到","用户名","your","任意","一下","列出","减少","1080","改个","查看","建立","小东西","添加","最后","checkout","email","写得",",","修改","settings","commit","master","username","分类","初始","记录","dev","reset","--","¶","#","变更","，","设置","git","项目","穿梭","想要","list","rebase"," ","下面","change",".","1","log","下","u","正确","here","demo","branch","}","proxy","是","已","p","前面","bare","message","\"","pull","我","对应","ff","好","stash","correct","add","b","edit","命令","状态","hard","user","合并","py","当前","127.0","{","重写","全局","所","但","name","东西","使用","/","推到","merger","保留","上","the","即可","unset","初始化","索引","在","小心","从主","可以","刚才","的","merge","~","init","delete","了","soft","先","你","s","刚刚","-","单个","boss","no","文件","主","amend","编辑","中","代码","缓存","去","改动","写","个","上去","morvanzhou","status","new","diff","oneline","用户","创建","0.1",":","操作","本地","分支","不够","错误","https","origin","提交","户名","remote","把","reflog","并","所有","（","keep","@","some","历史","）","cached","邮箱","再切","一个","移除","config","head","index","global","m","of","http","pop","npm","想","推送","一次","不","切换","信息","新","push","撤销"],"title":"git","title_tokens":["git"]},{"location":"docs/command/linux/git/#git","text":"","text_tokens":[],"title":"git","title_tokens":["git"]},{"location":"docs/command/linux/git/#_1","text":"git --global user.name\"username\" 全局用户名 git --global user.email \"email\" 全局邮箱","text_tokens":["name","git","user","户名","邮箱","用户名"," ","用户","--","email",".","全局","\"","global","username"],"title":"设置","title_tokens":["设置"]},{"location":"docs/command/linux/git/#_2","text":"git init --bare bare初始化 git add . git log --oneline git log -p 查看提交记录 git reset --hard HEAD HEAD是文件状态 git reflog git merge --no-ff -m \"keep merge info\" dev 保留 merge 信息 git rebase dev 新合并 git remote add origin MorvanZhou/git-demo.git","text_tokens":["是","info","p","bare","初始化","\"","origin","提交","merge","ff","remote","查看","reflog","init","add","keep","状态","hard","初始","合并","-","no","记录","dev","文件","reset","--","head","git","m","morvanzhou","oneline","demo","rebase"," ","/",".","log","信息","新","保留"],"title":"单个","title_tokens":["单个"]},{"location":"docs/command/linux/git/#_3","text":"","text_tokens":[],"title":"分类","title_tokens":["分类"]},{"location":"docs/command/linux/git/#commit","text":"git commit --amend --no-edit --no-edit: 不编辑, 直接合并到上一个 commit git commit -m \"change 1\"","text_tokens":["直接","到","\"","edit",",","commit","合并","-","no","一个","--","amend","编辑","git","m"," ","不","change","1",":","上"],"title":"commit","title_tokens":["commit"]},{"location":"docs/command/linux/git/#branch","text":"git branch dev 建立dev分支 git branch 查看当前分支","text_tokens":["branch","git","当前","查看","建立"," ","dev","分支"],"title":"branch","title_tokens":["branch"]},{"location":"docs/command/linux/git/#checkout","text":"git checkout c6762a1 -- 1.py git checkout -b boss 创建分支 git checkout dev 切换分支","text_tokens":["c6762a1","git","py","-","切换","boss"," ","dev","创建","checkout","--","b","1",".","分支"],"title":"checkout","title_tokens":["checkout"]},{"location":"docs/command/linux/git/#push","text":"git push origin master 推到我的 origin git push -u origin master 推送本地 master 去 origin git push -u origin dev 推送本地 dev 去 origin git push -u origin master 推送修改","text_tokens":["origin","我","的","git","修改","-","推送"," ","dev","推到","本地","master","u","push","去"],"title":"push","title_tokens":["push"]},{"location":"docs/command/linux/git/#diff","text":"git diff HEAD git diff git diff --cached","text_tokens":["git","diff","cached"," ","--","head"],"title":"diff","title_tokens":["diff"]},{"location":"docs/command/linux/git/#stash","text":"git stash list 查看在 stash 中的缓存 git stash pop git status -s","text_tokens":["s","的","git","status","pop","-","stash","list","查看"," ","在","中","缓存"],"title":"stash","title_tokens":["stash"]},{"location":"docs/command/linux/git/#_4","text":"列出你在 Git 上的所有操作记录 git reflog 找到 HEAD@{index} 前面所对应的操作索引，并使用下面命令即可 git reset HEAD@{index}","text_tokens":["}","找到","操作","即可","前面","索引","在","列出","对应","的","reflog","并","所有","命令","@","你","{","记录","reset","head","所","index","，","git","使用"," ","下面","上"],"title":"项目的历史代码中任意穿梭","title_tokens":["的","项目","穿梭","任意","中","历史","代码"]},{"location":"docs/command/linux/git/#commit_1","text":"添加下当前已改动的代码 git add . 把你刚刚添加的代码合并到最后一次提交上 git commit --amend","text_tokens":["已","到","提交","的","把","添加","add","最后","commit","刚刚","你","合并","当前","--","amend","代码","改动","git"," ","一次",".","下","上"],"title":"想改个小东西，但代码不小心提交（commit）","title_tokens":["东西","，","提交","改个","）","想","小东西","不","（","commit","小心","代码","但"]},{"location":"docs/command/linux/git/#_5","text":"重写提交历史 git commit --amend","text_tokens":["提交","git"," ","重写","--","amend","commit","历史"],"title":"刚刚写的提交历史写得不够好，想重写一下","title_tokens":["写","提交","的","，","好","想","重写","写得","不够","历史","一下","刚刚"]},{"location":"docs/command/linux/git/#_6","text":"先创建个新分支（some-new-branch-name） git branch some-new-branch-name 把刚才的提交从主分支中移除 git reset HEAD~ --hard","text_tokens":["branch","分支","从主","提交","刚才","的","~","把","（","some","先","hard","）","-","移除","reset","--","head","中","name","个","git","new"," ","创建","新"],"title":"不小心把新分支的代码提交到主分支上了","title_tokens":["提交","的","把","到","不","主","了","分支","小心","代码","新","上"]},{"location":"docs/command/linux/git/#_7","text":"先撤销最后一次提交，但保留变更代码 git reset HEAD~ --soft git stash 再切到你想要提交的正确分支（name-of-the-correct-branch）上，并把变更代码提交上去 git checkout name-of-the-correct-branch git stash pop git add . git commit -m \"your message here\"","text_tokens":["branch","the","上","到","your","message","分支","\"","提交","的","stash","~","把","correct","并","add","最后","（","checkout","soft","先","commit","你","）","-","再切","reset","--","head","代码","变更","但","name","，","上去","git","of","想要","pop","m"," ","一次",".","正确","here","保留","撤销"],"title":"把代码提交到错误的分支上","title_tokens":["提交","的","把","到","分支","代码","错误","上"]},{"location":"docs/command/linux/git/#_8","text":"git pull -- rebase # rebase 可以减少 merger commit 的 log","text_tokens":["pull","的","git","rebase"," ","--","merger","可以","log","#","commit","减少"],"title":"提交代码","title_tokens":["提交","代码"]},{"location":"docs/command/linux/git/#git-settings-proxy","text":"git config --global https.proxy http://127.0.0.1:1080 git config --global https.proxy https://127.0.0.1:1080 git config --global --unset http.proxy git config --global --unset https.proxy npm config delete proxy","text_tokens":[":","proxy","1080","git","http","unset","npm","127.0"," ","config","https","/","delete","--","0.1",".","global"],"title":"git settings proxy","title_tokens":["settings","git"," ","proxy"]},{"location":"docs/command/linux/grep/","text":"grep ¶ grep -vf file1 file2 查看两个文件的不同","text_tokens":["的","file2","-","两个","vf","查看"," ","文件","不同","¶","file1","grep"],"title":"grep","title_tokens":["grep"]},{"location":"docs/command/linux/grep/#grep","text":"grep -vf file1 file2 查看两个文件的不同","text_tokens":["的","file2","-","vf","查看"," ","文件","不同","file1","两个","grep"],"title":"grep","title_tokens":["grep"]},{"location":"docs/command/linux/history/","text":"history ¶ history | tail -100 | grep cmd 查找你执行过的命令","text_tokens":["的","-","cmd","过","执行","查找"," ","100","命令","tail","¶","|","你","history","grep"],"title":"history","title_tokens":["history"]},{"location":"docs/command/linux/history/#history","text":"history | tail -100 | grep cmd 查找你执行过的命令","text_tokens":["的","-","cmd","过","执行","查找"," ","100","命令","tail","你","|","history","grep"],"title":"history","title_tokens":["history"]},{"location":"docs/command/linux/ifconfig/","text":"ipconfig ¶ ifconfig [ 网卡名字 ] promisc 混杂模式 ifconfig [ 网卡名字 ] -promisc 取消混杂模式","text_tokens":["名字","ifconfig","]","promisc","-"," ","取消","ipconfig","[","¶","网卡","模式","混杂"],"title":"ipconfig","title_tokens":["ipconfig"]},{"location":"docs/command/linux/ifconfig/#ipconfig","text":"ifconfig [ 网卡名字 ] promisc 混杂模式 ifconfig [ 网卡名字 ] -promisc 取消混杂模式","text_tokens":["名字","ifconfig","]","promisc","-"," ","取消","[","网卡","模式","混杂"],"title":"ipconfig","title_tokens":["ipconfig"]},{"location":"docs/command/linux/last/","text":"last ¶ last -f /var/log/wtmp 查询最近登陆的用户","text_tokens":["的","-","last","查询"," ","登陆","/","用户","f","¶","最近","var","log","wtmp"],"title":"last","title_tokens":["last"]},{"location":"docs/command/linux/last/#last","text":"last -f /var/log/wtmp 查询最近登陆的用户","text_tokens":["的","-","last","查询"," ","登陆","/","用户","f","最近","var","log","wtmp"],"title":"last","title_tokens":["last"]},{"location":"docs/command/linux/lsof/","text":"lsof ¶ lsof -i :${port} 列出谁在使用某个端口 lsof -p 11968 通过某个进程号显示该进程打开的文件 lsof -i 列出所有的网络连接","text_tokens":["}","显示","p","该","$","谁","在","列出","进程","的","i","所有","某个","连接","-","11968","{","号","网络","文件","打开","¶","port","网络连接","端口","lsof","使用"," ","通过",":"],"title":"lsof","title_tokens":["lsof"]},{"location":"docs/command/linux/lsof/#lsof","text":"lsof -i :${port} 列出谁在使用某个端口 lsof -p 11968 通过某个进程号显示该进程打开的文件 lsof -i 列出所有的网络连接","text_tokens":["}","显示","p","该","$","谁","在","列出","进程","的","i","所有","某个","连接","-","11968","{","号","网络","文件","打开","port","网络连接","端口","lsof","使用"," ","通过",":"],"title":"lsof","title_tokens":["lsof"]},{"location":"docs/command/linux/mmv/","text":"mmv ¶ mmv \"*.txt\" \"#1.md\" 修改目录下后缀名","text_tokens":["txt","md","修改","mmv","后缀"," ","目录","后缀名","¶",".","1","#","下","*","\""],"title":"mmv","title_tokens":["mmv"]},{"location":"docs/command/linux/mmv/#mmv","text":"mmv \"*.txt\" \"#1.md\" 修改目录下后缀名","text_tokens":["txt","md","修改","mmv","后缀"," ","目录","后缀名",".","1","#","下","*","\""],"title":"mmv","title_tokens":["mmv"]},{"location":"docs/command/linux/mv/","text":"mv ¶ mv *.m4a new 移动后缀为 m4a 的文件到新目录","text_tokens":["的","new","新","mv","移动","后缀","到"," ","为","m4a","文件","目录","¶",".","*"],"title":"mv","title_tokens":["mv"]},{"location":"docs/command/linux/mv/#mv","text":"mv *.m4a new 移动后缀为 m4a 的文件到新目录","text_tokens":["的","new","新","mv","移动","后缀","到"," ","为","m4a","文件","目录",".","*"],"title":"mv","title_tokens":["mv"]},{"location":"docs/command/linux/scp/","text":"scp ¶ scp -r root@10.6.159.147:/opt/soft/test /opt/soft/ 从远处复制到本地 scp /opt/soft/demo.tar root@10.6.159.147:/opt/soft/scptest 上传本地文件到远程机器指定目录","text_tokens":["tar","到","复制到","机器","目录","root","本地","scp","opt","远处","@","test","soft","scptest","-","r","文件","159.147","¶","远程"," ","/","从","复制",".","上传","10.6","指定",":","demo"],"title":"scp","title_tokens":["scp"]},{"location":"docs/command/linux/scp/#scp","text":"scp -r root@10.6.159.147:/opt/soft/test /opt/soft/ 从远处复制到本地 scp /opt/soft/demo.tar root@10.6.159.147:/opt/soft/scptest 上传本地文件到远程机器指定目录","text_tokens":["tar","到","复制到","机器","目录","root","本地","scp","opt","远处","@","test","soft","scptest","-","r","文件","159.147","远程"," ","/","从","复制",".","上传","10.6","指定",":","demo"],"title":"scp","title_tokens":["scp"]},{"location":"docs/command/linux/service/","text":"service ¶ service --status-all | grep running 查询正在运行的服务","text_tokens":["的","all","status","running","-","运行","查询"," ","service","正在","--","服务","¶","|","grep"],"title":"service","title_tokens":["service"]},{"location":"docs/command/linux/service/#service","text":"service --status-all | grep running 查询正在运行的服务","text_tokens":["的","all","status","running","-","运行","查询"," ","service","正在","--","服务","|","grep"],"title":"service","title_tokens":["service"]},{"location":"docs/command/linux/shred/","text":"shred ¶ shred {{file}} 覆盖文件 shred -n25 {{file}} 覆盖文件 25 次 shred --remove {{file}} 覆盖文件并将其删除","text_tokens":["}","次","删除","将","file","shred","25","覆盖","n25","其","并","-","{","文件","--","¶","覆盖文件","remove"," "],"title":"shred","title_tokens":["shred"]},{"location":"docs/command/linux/shred/#shred","text":"shred {{file}} 覆盖文件 shred -n25 {{file}} 覆盖文件 25 次 shred --remove {{file}} 覆盖文件并将其删除","text_tokens":["n25","}","次","其","删除","将","file","shred","-","{"," ","并","25","文件","--","覆盖文件","覆盖","remove"],"title":"shred","title_tokens":["shred"]},{"location":"docs/command/linux/split/","text":"SPLIT 文件分割 ¶ split -l {{1}} {{filename}} 分割一个文件每次分割 10 行，除了最后一次分割 split -n {{5}} {{filename}} 将一个文件拆分为 5 个文件。文件被拆分，这样每个拆分的大小相同（除了最后一个拆分）。 拆分一个文件，每个拆分中有 512 个字节（除了最后一个拆分；使用 512k 表示千字节，512m 表示兆字节）。 split -C {{512}} {{filename}} 拆分一个文件，每个拆分最多 512 个字节，不换行 split -b 20M foo.mv 尺寸单位缩写为 K，M，G，T，P，E，Z，Y（1024 的幂）或者 KB，MB，GB 等等（1000 的幂）","text_tokens":["}","gb","p","e","将","mv","g","n","l","每次","512","拆","除了","多","split","的","5","kb","mb","这样","foo","千","大小","最后","分割","10","。","（","每个","；","最","b","分为","512m","1000","）","-","尺寸","单位","{","1024","等等","或者","一个","为","文件","中有","幂","¶","c","被","512k","兆","，","个","20m","换行","filename","k","m","z","使用","相同","拆分"," ","一次","表示","t","字节","行","不","y","1",".","缩写"],"title":"Split","title_tokens":["split"]},{"location":"docs/command/linux/split/#split","text":"split -l {{1}} {{filename}} 分割一个文件每次分割 10 行，除了最后一次分割 split -n {{5}} {{filename}} 将一个文件拆分为 5 个文件。文件被拆分，这样每个拆分的大小相同（除了最后一个拆分）。 拆分一个文件，每个拆分中有 512 个字节（除了最后一个拆分；使用 512k 表示千字节，512m 表示兆字节）。 split -C {{512}} {{filename}} 拆分一个文件，每个拆分最多 512 个字节，不换行 split -b 20M foo.mv 尺寸单位缩写为 K，M，G，T，P，E，Z，Y（1024 的幂）或者 KB，MB，GB 等等（1000 的幂）","text_tokens":["}","gb","p","e","将","mv","g","n","l","每次","512","拆","除了","多","split","的","5","kb","mb","这样","foo","千","大小","最后","分割","10","。","（","每个","；","最","b","分为","512m","1000","）","-","尺寸","单位","{","1024","等等","或者","一个","为","文件","中有","幂","c","被","512k","兆","，","个","20m","换行","filename","k","m","z","使用","相同","拆分"," ","一次","表示","t","字节","行","不","y","1",".","缩写"],"title":"SPLIT 文件分割","title_tokens":["文件","split","分割"," "]},{"location":"docs/command/linux/tail/","text":"tail ¶ tail /var/log/secure 查看连接信息","text_tokens":["secure","查看"," ","/","tail","¶","var","信息","log","连接"],"title":"tail","title_tokens":["tail"]},{"location":"docs/command/linux/tail/#tail","text":"tail /var/log/secure 查看连接信息","text_tokens":["secure","查看"," ","/","tail","var","信息","log","连接"],"title":"tail","title_tokens":["tail"]},{"location":"docs/command/linux/top/","text":"top ¶ top CPU、内存占用 扩展 htop","text_tokens":["扩展","、"," ","内存","top","htop","cpu","占用","¶"],"title":"top","title_tokens":["top"]},{"location":"docs/command/linux/top/#top","text":"top CPU、内存占用 扩展 htop","text_tokens":["扩展","、","内存"," ","top","htop","cpu","占用"],"title":"top","title_tokens":["top"]},{"location":"docs/command/linux/w/","text":"w ¶ w 显示当前所有登录的用户","text_tokens":["显示","的","登录","当前","w"," ","用户","所有","¶"],"title":"w","title_tokens":["w"]},{"location":"docs/command/linux/w/#w","text":"w 显示当前所有登录的用户","text_tokens":["显示","的","登录","当前","w"," ","用户","所有"],"title":"w","title_tokens":["w"]},{"location":"docs/command/linux/watch/","text":"watch ¶ watch -d -n 5 date 每五秒运行一次 command,并高亮改变的部分 watch -g free 当监视窗口改变的时候退出返回 watch -t date 不显示标题","text_tokens":["显示","标题","g","n","部分","高亮","监视","返回","的","5","并","watch","窗口",",","退出","当","改变","-","运行","五秒","¶","每","command","free","d"," ","一次","时候","t","不","date"],"title":"watch","title_tokens":["watch"]},{"location":"docs/command/linux/watch/#watch","text":"watch -d -n 5 date 每五秒运行一次 command,并高亮改变的部分 watch -g free 当监视窗口改变的时候退出返回 watch -t date 不显示标题","text_tokens":["显示","标题","g","n","部分","高亮","监视","返回","的","5","并","watch","窗口",",","退出","当","改变","-","运行","五秒","每","command","free","d"," ","一次","时候","t","不","date"],"title":"watch","title_tokens":["watch"]},{"location":"docs/command/linux/wget/","text":"wget ¶ 递归下载一个 txt 里的 url wget -i url.txt wegt 使用代理 wget -e http_proxy='127.0.0.1:1080' {{url}} 可以使用 jsdriver cdn 加速下载 raw","text_tokens":["}","proxy","e","wget","代理","可以","1080","的","raw","i","下载","递归","txt","url","加速","-","127.0","{","一个","¶","'","=","_","里","jsdriver","http","使用"," ","0.1",".","cdn","wegt",":"],"title":"wget","title_tokens":["wget"]},{"location":"docs/command/linux/wget/#wget","text":"递归下载一个 txt 里的 url wget -i url.txt wegt 使用代理 wget -e http_proxy='127.0.0.1:1080' {{url}} 可以使用 jsdriver cdn 加速下载 raw","text_tokens":["}","proxy","e","wget","代理","可以","1080","的","raw","i","下载","递归","txt","url","加速","-","127.0","{","一个","'","=","_","里","jsdriver","http","使用"," ","0.1",".","cdn","wegt",":"],"title":"wget","title_tokens":["wget"]},{"location":"docs/command/service/docker/","text":"docker ¶ docker postgres database backup ¶ docker-compose stop 移动 Postgres 数据卷 ~/postgres/data/（或者你在 docker-compose 中指定的目录）至其他任何地方作为备份，这非常重要！ 执行如下命令来导出所有数据： docker exec postgres pg_dumpall -c -U postgres > export.sql 根据最新 docker-compose.yml 中的database.postgres 部份来更新你的 docker-compose 文件，并启动: docker-compose up -d 执行如下命令来导入所有数据： cat export.sql | docker exec -i postgres psql -U postgres","text_tokens":["备份","卷","如下","dumpall","最新","根据","执行",">","psql","目录","导入","部份","|","在","数据","移动","pg","backup","cat","的","compose","~","这","导出","i","并","来","所有","（","至","命令","exec","：","你","stop","sql","启动","）","-","data","！","或者","非常","文件","¶","c","中","_","其他","任何","作为","docker","，","地方","export","重要","d"," ","/","database","指定","up",".","u","yml",":","postgres","更新"],"title":"docker","title_tokens":["docker"]},{"location":"docs/command/service/docker/#docker","text":"","text_tokens":[],"title":"docker","title_tokens":["docker"]},{"location":"docs/command/service/docker/#docker-postgres-database-backup","text":"docker-compose stop 移动 Postgres 数据卷 ~/postgres/data/（或者你在 docker-compose 中指定的目录）至其他任何地方作为备份，这非常重要！ 执行如下命令来导出所有数据： docker exec postgres pg_dumpall -c -U postgres > export.sql 根据最新 docker-compose.yml 中的database.postgres 部份来更新你的 docker-compose 文件，并启动: docker-compose up -d 执行如下命令来导入所有数据： cat export.sql | docker exec -i postgres psql -U postgres","text_tokens":["备份","卷","如下","dumpall","最新","根据","执行",">","psql","目录","导入","部份","|","在","数据","移动","pg","cat","的","compose","~","这","导出","i","并","来","所有","（","至","命令","exec","：","你","stop","sql","启动","）","-","data","！","或者","非常","文件","c","中","_","其他","任何","作为","docker","，","地方","export","重要","d"," ","/","database","指定","up",".","u","yml",":","postgres","更新"],"title":"docker postgres database backup","title_tokens":["backup","docker"," ","database","postgres"]},{"location":"docs/command/service/github/","text":"github ¶ 推送 ¶ git remote -v 查看远程名字 git remote rm origin 删除远程 git remote add origin .git 首次添加远程 git push origin master 推送到远程 git clone .git 克隆 其它 ¶ git config --global credential.helper wincred 不用输入密码","text_tokens":["删除","到","helper","其它","wincred","origin","remote","查看","添加","add","密码","master","-","config","--","credential","¶","输入","远程","global","首次","名字","git","v","推送"," ","不用",".","克隆","rm","github","push","clone"],"title":"github","title_tokens":["github"]},{"location":"docs/command/service/github/#github","text":"","text_tokens":[],"title":"github","title_tokens":["github"]},{"location":"docs/command/service/github/#_1","text":"git remote -v 查看远程名字 git remote rm origin 删除远程 git remote add origin .git 首次添加远程 git push origin master 推送到远程 git clone .git 克隆","text_tokens":["删除","到","origin","remote","查看","添加","add","master","-","远程","首次","名字","git","v","推送"," ",".","克隆","rm","push","clone"],"title":"推送","title_tokens":["推送"]},{"location":"docs/command/service/github/#_2","text":"git config --global credential.helper wincred 不用输入密码","text_tokens":["git"," ","config","--","credential","不用",".","helper","wincred","密码","输入","global"],"title":"其它","title_tokens":["其它"]},{"location":"docs/command/service/hexo/","text":"hexo ¶ hexo clean hexo g && gulp hexo g -d hexo s hexo d","text_tokens":["s","g","-","clean","d"," ","&&","gulp","¶","hexo"],"title":"hexo","title_tokens":["hexo"]},{"location":"docs/command/service/hexo/#hexo","text":"hexo clean hexo g && gulp hexo g -d hexo s hexo d","text_tokens":["s","g","-","clean","d"," ","gulp","hexo","&&"],"title":"hexo","title_tokens":["hexo"]},{"location":"docs/command/service/mysql/","text":"mysql ¶ mysql -u root -p GRANT ALL PRIVILEGES ON . TO 'root'@'%'IDENTIFIED BY 'mypassword' WI TH GRANT OPTION; 许 ip 以 password 登录","text_tokens":["p",";","root","th","all","登录","grant","privileges","以","mypassword","password","mysql","@","%","wi","on","-","to","identified","¶","'","ip","许"," ","by","option",".","u"],"title":"mysql","title_tokens":["mysql"]},{"location":"docs/command/service/mysql/#mysql","text":"mysql -u root -p GRANT ALL PRIVILEGES ON . TO 'root'@'%'IDENTIFIED BY 'mypassword' WI TH GRANT OPTION; 许 ip 以 password 登录","text_tokens":["p",";","root","th","all","登录","grant","privileges","以","mypassword","password","mysql","@","%","wi","on","-","to","identified","'","ip","许"," ","by","option",".","u"],"title":"mysql","title_tokens":["mysql"]},{"location":"docs/command/service/rsshub/","text":"rsshub ¶ npm start start rsshub docker run -d --name rsshub -p 1200:1200 diygod/rsshub start rsshub by docker docker stop rsshub stop rsshub docker docker run -d -p 1200:1200 diygod/rsshub 启动 rsshub 关闭 rsshub netstat -tunlp | grep 1200 ps -ef | grep npm ps -ef | grep node kill -9 10532 nphub npm start & # 后台运行","text_tokens":["p","tunlp","1200","|","ef","run","start","ps","9","nphub","stop","grep","启动","-","后台","运行","diygod","--","¶","netstat","10532","#","kill","rsshub","node","name","docker","&","npm","d"," ","/","by","关闭",":"],"title":"rsshub","title_tokens":["rsshub"]},{"location":"docs/command/service/rsshub/#rsshub","text":"npm start start rsshub docker run -d --name rsshub -p 1200:1200 diygod/rsshub start rsshub by docker docker stop rsshub stop rsshub docker docker run -d -p 1200:1200 diygod/rsshub 启动 rsshub 关闭 rsshub netstat -tunlp | grep 1200 ps -ef | grep npm ps -ef | grep node kill -9 10532 nphub npm start & # 后台运行","text_tokens":["p","tunlp","1200","|","ef","run","start","ps","9","nphub","stop","grep","启动","-","后台","运行","diygod","--","netstat","10532","#","kill","rsshub","node","name","docker","&","npm","d"," ","/","by","关闭",":"],"title":"rsshub","title_tokens":["rsshub"]},{"location":"docs/command/service/sycnthing/","text":"sycnthing ¶ 同步盘 systemctl start syncthing@root.service @{username} systemctl status syncthing@root.service","text_tokens":["}","systemctl","status","syncthing","盘","start","同步"," ","{","root","service","¶","@",".","username","sycnthing"],"title":"sycnthing","title_tokens":["sycnthing"]},{"location":"docs/command/service/sycnthing/#sycnthing","text":"同步盘 systemctl start syncthing@root.service @{username} systemctl status syncthing@root.service","text_tokens":["}","systemctl","status","syncthing","盘","start","同步"," ","{","root","service",".","@","username"],"title":"sycnthing","title_tokens":["sycnthing"]},{"location":"docs/command/service/ttrss/","text":"ttrss ¶ docker run -d --link ttrssdb:db -p 80:80 -e SELF_URL_PATH=${URL}/ttrss fischerman/docker-ttrss 开启 ttrss docker cp tt-rss-feedly-theme-master/feedly e68a936a202d :/var/www/themes 安装主题","text_tokens":["}","p","e","fischerman","$","开启","e68a936a202d","安装","theme","cp","run","80","link","master",":","self","url","ttrssdb","www","-","{","--","主题","¶","=","_","docker","feedly","d"," ","/","ttrss","rss","themes","path","var","db","tt"],"title":"ttrss","title_tokens":["ttrss"]},{"location":"docs/command/service/ttrss/#ttrss","text":"docker run -d --link ttrssdb:db -p 80:80 -e SELF_URL_PATH=${URL}/ttrss fischerman/docker-ttrss 开启 ttrss docker cp tt-rss-feedly-theme-master/feedly e68a936a202d :/var/www/themes 安装主题","text_tokens":["}","p","e","fischerman","$","开启","e68a936a202d","安装","theme","cp","run","80","link","master",":","self","url","ttrssdb","www","-","{","--","主题","=","_","docker","feedly","d"," ","/","ttrss","rss","themes","path","var","db","tt"],"title":"ttrss","title_tokens":["ttrss"]},{"location":"docs/command/tools/","text":"tools ¶ Ag Aria 2 Asciinema Book Bypy Code Curl Diff 2 Html Docker Fail 2 Ban Ffmepg Jq Mvn Nativefier Npm Ossutil Pandoc pdfminer.six Pip Poetry Spotdl Wkhtmltopdf Ydict You Get","text_tokens":["ag","asciinema","jq","curl","tools","ydict","code","get","pip","aria","¶","html","six","mvn","you","bypy","docker","pdfminer","ban","diff","npm","fail"," ","wkhtmltopdf","2","pandoc","nativefier",".","spotdl","book","ossutil","ffmepg","poetry"],"title":"tools","title_tokens":["tools"]},{"location":"docs/command/tools/#tools","text":"Ag Aria 2 Asciinema Book Bypy Code Curl Diff 2 Html Docker Fail 2 Ban Ffmepg Jq Mvn Nativefier Npm Ossutil Pandoc pdfminer.six Pip Poetry Spotdl Wkhtmltopdf Ydict You Get","text_tokens":["ag","asciinema","jq","curl","ydict","code","get","pip","aria","html","six","mvn","you","bypy","docker","pdfminer","ban","diff","npm","fail"," ","wkhtmltopdf","2","pandoc","nativefier",".","spotdl","book","ossutil","ffmepg","poetry"],"title":"tools","title_tokens":["tools"]},{"location":"docs/command/tools/ag/","text":"ag ¶ ag --py -w \"keyword\" path\\to search keyword in path of suffix the \"--\" file back ag [FILE-TYPE] [OPTIONS] PATTERN [PATH] ag --py -w \"import test\" Python\\Test","text_tokens":["ag","the","options","file","w","in","python","import","\"","type","test","search","py","\\","-","to","suffix","]","pattern","--","back","[","¶","of"," ","keyword","path"],"title":"ag","title_tokens":["ag"]},{"location":"docs/command/tools/ag/#ag","text":"ag --py -w \"keyword\" path\\to search keyword in path of suffix the \"--\" file back ag [FILE-TYPE] [OPTIONS] PATTERN [PATH] ag --py -w \"import test\" Python\\Test","text_tokens":["ag","the","options","file","w","in","python","import","\"","type","test","search","py","\\","-","to","suffix","]","pattern","--","back","[","of"," ","keyword","path"],"title":"ag","title_tokens":["ag"]},{"location":"docs/command/tools/aria2/","text":"aria2 ¶ 一个下载工具 aria2 aria2c.exe -s 10 -x 10 -j 10 url aria2c.exe -s 10 -x 10 -j 10 url","text_tokens":["exe","s","下载工具","aria2c","工具","x","url","aria2","-"," ","一个","下载","10","¶",".","j"],"title":"aria2","title_tokens":["aria2"]},{"location":"docs/command/tools/aria2/#aria2","text":"一个下载工具 aria2 aria2c.exe -s 10 -x 10 -j 10 url aria2c.exe -s 10 -x 10 -j 10 url","text_tokens":["exe","s","下载工具","aria2c","工具","x","url","aria2","-"," ","一个","下载","10",".","j"],"title":"aria2","title_tokens":["aria2"]},{"location":"docs/command/tools/asciinema/","text":"asciinema ¶ linux 下 asciinema rec 录制命令行","text_tokens":["录制","asciinema"," ","命令行","命令","rec","¶","linux","下"],"title":"asciinema","title_tokens":["asciinema"]},{"location":"docs/command/tools/asciinema/#asciinema","text":"linux 下 asciinema rec 录制命令行","text_tokens":["录制","asciinema"," ","命令行","命令","rec","linux","下"],"title":"asciinema","title_tokens":["asciinema"]},{"location":"docs/command/tools/book/","text":"book ¶ 生成 summary 文件 Node.js 安装：npm install -g gitbook-summary Commands: summary | sm [ options ] Generate a ` SUMMARY.md ` from a folder html2md | md [ options ] Get markdown from a remote url or a local html. convert | cv [ options ] Todo: Convert articals between Simplified and Traditional Chinese. 使用 ¶ book sm 参考 ¶ summary-cli","text_tokens":["g","options","js","folder","gitbook","安装","markdown","|","simplified","between","articals","install","convert","remote","summary","生成","`","sm","from","generate","：","url","]","-","traditional","html2md","get","文件","and","[","¶","commands","html","node","or","md","chinese","cv","npm","a","使用","参考"," ","cli","todo",".","local","book",":"],"title":"book","title_tokens":["book"]},{"location":"docs/command/tools/book/#book","text":"生成 summary 文件 Node.js 安装：npm install -g gitbook-summary Commands: summary | sm [ options ] Generate a ` SUMMARY.md ` from a folder html2md | md [ options ] Get markdown from a remote url or a local html. convert | cv [ options ] Todo: Convert articals between Simplified and Traditional Chinese.","text_tokens":["g","options","js","folder","gitbook","安装","markdown","|","simplified","between","articals","install","convert","remote","summary","生成","`","sm","from","generate","：","url","]","-","traditional","html2md","get","文件","and","[","commands","html","node","or","md","chinese","cv","npm","a"," ","todo",".","local",":"],"title":"book","title_tokens":["book"]},{"location":"docs/command/tools/book/#_1","text":"book sm","text_tokens":["sm","book"," "],"title":"使用","title_tokens":["使用"]},{"location":"docs/command/tools/book/#_2","text":"summary-cli","text_tokens":["-","cli","summary"],"title":"参考","title_tokens":["参考"]},{"location":"docs/command/tools/bypy/","text":"bypy ¶ 命令行百度云盘 install pip install bypy usage 显示在云盘（程序的）根目录下文件列表： bypy list 把当前目录同步到云盘： bypy syncup or bypy upload 把云盘内容同步到本地来： bypy syncdown or bypy downdir / 比较本地当前目录和云盘（程序的）根目录（个人认为非常有用）： bypy compare","text_tokens":["syncdown","显示","列表","到","目录","本地","在","百度","usage","install","的","把","compare","来","命令","（","当前目录","：","downdir","和","）","内容","当前","同步","有用","文件","根目录","pip","非常","¶","云盘","程序","or","syncup","bypy","认为","upload","list"," ","个人","命令行","/","比较","下"],"title":"bypy","title_tokens":["bypy"]},{"location":"docs/command/tools/bypy/#bypy","text":"命令行百度云盘 install pip install bypy usage 显示在云盘（程序的）根目录下文件列表： bypy list 把当前目录同步到云盘： bypy syncup or bypy upload 把云盘内容同步到本地来： bypy syncdown or bypy downdir / 比较本地当前目录和云盘（程序的）根目录（个人认为非常有用）： bypy compare","text_tokens":["syncdown","显示","列表","到","目录","本地","在","百度","usage","install","的","把","compare","来","命令","（","当前目录","：","downdir","和","）","内容","当前","同步","有用","文件","根目录","pip","非常","云盘","程序","or","syncup","bypy","认为","upload","list"," ","个人","命令行","/","比较","下"],"title":"bypy","title_tokens":["bypy"]},{"location":"docs/command/tools/code/","text":"code ¶ vscode 的 CLI 新建文件 code test.md","text_tokens":["新建","的","md","code","vscode"," ","文件","cli","¶",".","test"],"title":"code","title_tokens":["code"]},{"location":"docs/command/tools/code/#code","text":"vscode 的 CLI 新建文件 code test.md","text_tokens":["新建","的","md","code","vscode"," ","文件","cli",".","test"],"title":"code","title_tokens":["code"]},{"location":"docs/command/tools/curl/","text":"curl ¶ cURL curl nstool.netease.com 获取 IP（地址在 src 里） curl -vL {{url}}","text_tokens":["src","}","在","vl","netease","地址","（","nstool","curl","url","）","-","{","获取","¶","ip","com","里"," ","."],"title":"curl","title_tokens":["curl"]},{"location":"docs/command/tools/curl/#curl","text":"cURL curl nstool.netease.com 获取 IP（地址在 src 里） curl -vL {{url}}","text_tokens":["src","}","在","vl","netease","地址","（","nstool","curl","url","）","-","{","获取","ip","com","里"," ","."],"title":"curl","title_tokens":["curl"]},{"location":"docs/command/tools/diff2html/","text":"diff2html ¶ 一个能展示你的 git diff 的工具 安装 npm install -g diff2html-cli 使用 diff2html 注意 要在项目目录下面","text_tokens":["g","目录","安装","在","的","工具","install","注意","展示","你","能","-","一个","¶","要","git","项目","diff","npm","使用","diff2html"," ","下面","cli"],"title":"diff2html","title_tokens":["diff2html"]},{"location":"docs/command/tools/diff2html/#diff2html","text":"一个能展示你的 git diff 的工具 安装 npm install -g diff2html-cli 使用 diff2html 注意 要在项目目录下面","text_tokens":["g","目录","安装","在","的","工具","install","注意","展示","你","能","-","一个","要","git","项目","diff","npm","使用","diff2html"," ","下面","cli"],"title":"diff2html","title_tokens":["diff2html"]},{"location":"docs/command/tools/docker/","text":"docker ¶ docker 保存镜像 ¶ docker save busybox-1 > /home/save.tar","text_tokens":["docker","save","-","home","tar",">","镜像"," ","/","busybox","¶","1",".","保存"],"title":"docker","title_tokens":["docker"]},{"location":"docs/command/tools/docker/#docker","text":"","text_tokens":[],"title":"docker","title_tokens":["docker"]},{"location":"docs/command/tools/docker/#docker_1","text":"docker save busybox-1 > /home/save.tar","text_tokens":["save","docker","-","home","tar",">"," ","/","busybox","1","."],"title":"docker 保存镜像","title_tokens":["docker","镜像","保存"," "]},{"location":"docs/command/tools/fail2ban/","text":"fail2ban ¶ 你可以通过以下方式来检测当前iptables来验证禁止规则。 $ sudo iptables --list -n 想要从fail2ban中解锁某个IP地址，你可以使用iptables命令： $ sudo iptables -D fail2ban-SSH -s 192.168.1.8 -j DROP sudo fail2ban-client status ssh-iptables 上面的命令会显示出被禁止IP地址列表 为了解锁特定的IP地址： $ sudo fail2ban-client set ssh-iptables unbanip 192.168.1.8","text_tokens":["ip地址","显示","列表","n","sudo","$","检测","可以","iptables","上面","的","unbanip","地址","1.8","特定","drop","会","来","。","规则","某个","命令","client","：","你","ssh","s","j","禁止","-","当前","set","方式","为","--","¶","出","fail2ban","被","中","以下","，","了解","锁","想要","192.168","status","list","验证","使用","d"," ","从","通过",".","解锁"],"title":"fail2ban","title_tokens":["fail2ban"]},{"location":"docs/command/tools/fail2ban/#fail2ban","text":"你可以通过以下方式来检测当前iptables来验证禁止规则。 $ sudo iptables --list -n 想要从fail2ban中解锁某个IP地址，你可以使用iptables命令： $ sudo iptables -D fail2ban-SSH -s 192.168.1.8 -j DROP sudo fail2ban-client status ssh-iptables 上面的命令会显示出被禁止IP地址列表 为了解锁特定的IP地址： $ sudo fail2ban-client set ssh-iptables unbanip 192.168.1.8","text_tokens":["ip地址","显示","列表","n","sudo","$","检测","可以","iptables","上面","的","unbanip","地址","1.8","特定","drop","会","来","。","规则","某个","命令","client","：","你","ssh","s","j","禁止","-","当前","set","方式","为","--","出","fail2ban","被","中","以下","，","了解","锁","想要","192.168","status","list","验证","使用","d"," ","从","通过",".","解锁"],"title":"fail2ban","title_tokens":["fail2ban"]},{"location":"docs/command/tools/fd/","text":"fd ¶ fd is a simple, fast and user-friendly alternative to find. github: sharkdp/fd Install in windows ¶ scoop install fd Quick start ¶ # Convert all jpg files to png files: fd -e jpg -x convert {} { . } .png # Unpack all zip files (if no placeholder is given, the path is appended): fd -e zip -x unzip # Convert all flac files into opus files: fd -e flac -x ffmpeg -i {} -c:a libopus { . } .opus # Count the number of lines in Rust files (the command template can be terminated with ';'): fd -x wc -l \\; -e rs More ¶ # 在某处 fd fd {{ word }} {{ path }} # 没有参数 直接遍历当前目录 fd # 搜索某种特定的文件格式 fd -e {{ file type }} # 忽略某个文件 fd -H {{ filename }} # 包含特定的目录 fd -E {{ other path }}","text_tokens":["直接","zip","into","目录","wc","be","unpack","all","count","libopus","files",",","flac","word","lines","other","¶","c","#","with","jpg"," ",".","fd","}","friendly","find","l","in","quick","more",")","ffmpeg","(","install","特定","type","is","scoop","png","某个","某种","user","\\","搜索","当前","格式","{","'","filename","/","没有","windows","github","the",";","if","simple","rs","opus","unzip","在","can","的","start","i","当前目录","-","to","no","忽略","包含","文件","and","x","a","placeholder","path","文件格式",":","e","sharkdp","file","number","某处","fast","template","alternative","convert","遍历","h","rust","appended","given","command","of","terminated","参数"],"title":"fd","title_tokens":["fd"]},{"location":"docs/command/tools/fd/#fd","text":"fd is a simple, fast and user-friendly alternative to find. github: sharkdp/fd","text_tokens":["friendly","sharkdp","find","simple","fast","alternative","is",",","user","-","to","and","a"," ","/",".","github","fd",":"],"title":"fd","title_tokens":["fd"]},{"location":"docs/command/tools/fd/#install-in-windows","text":"scoop install fd","text_tokens":["fd","install"," ","scoop"],"title":"Install in windows","title_tokens":["windows","in","install"," "]},{"location":"docs/command/tools/fd/#quick-start","text":"# Convert all jpg files to png files: fd -e jpg -x convert {} { . } .png # Unpack all zip files (if no placeholder is given, the path is appended): fd -e zip -x unzip # Convert all flac files into opus files: fd -e flac -x ffmpeg -i {} -c:a libopus { . } .opus # Count the number of lines in Rust files (the command template can be terminated with ';'): fd -x wc -l \\; -e rs","text_tokens":["}","the","zip","e",";","number","into","if","in","l","wc","rs","template","opus","unzip","be",")","ffmpeg","can","unpack","(","all","count","libopus","convert","is","i","files","png",",","flac","\\","to","-","no","{","lines","rust","c","'","#","appended","with","given","command","jpg","x","of","a","placeholder"," ","terminated",".","path","fd",":"],"title":"Quick start","title_tokens":["quick","start"," "]},{"location":"docs/command/tools/fd/#more","text":"# 在某处 fd fd {{ word }} {{ path }} # 没有参数 直接遍历当前目录 fd # 搜索某种特定的文件格式 fd -e {{ file type }} # 忽略某个文件 fd -H {{ filename }} # 包含特定的目录 fd -E {{ other path }}","text_tokens":["}","直接","文件格式","e","file","目录","某处","在","的","特定","type","遍历","某个","某种","当前目录","h","搜索","-","当前","word","{","格式","忽略","包含","文件","other","#","filename"," ","参数","path","没有","fd"],"title":"More","title_tokens":["more"]},{"location":"docs/command/tools/ffmepg/","text":"ffmpeg ¶ ffmpeg -y -i ${test.mp4} -ar 16000 -ac 1 -sample_fmt s16 ${test.mp3} ffmpeg -i input.avi -q 1 -c copy output.mov 转码 ffmpeg -f image2 image%d.jpg vedio.mpg 将图片合成视频 ffmpeg -i vedio.mpg image%d.jpg 将视频分解成图片序列集 ffmpeg -re -i vedio.flv -c copy -f mpegts udp://localhost:1234 udp 推流 ffmpeg -re -i vedio.mp4 -c copy -f flv rtmp://server/live/streamname rtmp 推流 ffmpeg -i \" res001.geekbang.org/media/audio/3c/ae/3cb2135163e937bf84a90066303a94ae/ld/ld.m3u8 \" -bsf:a aac_adtstoasc -vcodec copy -c copy -crf 50 file.mp4 # m3u8 conver to mp4 将 m3u8 转码 ffmpeg -y -i -ar 16000 -ac 1 -sample_fmt s16 生成 flac 格式音频 分割音频文件 ffmpeg -i {{ file.wav }} -f segment -segment_time {{ 30 }} -c copy {{ parts/output%09d.wav }}","text_tokens":["$","3cb2135163e937bf84a90066303a94ae","分割","fmt","flac","分解","org","adtstoasc","vcodec","conver","ar","f","geekbang","¶","c","crf","#","09d","视频","jpg","q","d"," ","media","y",".","1","}","1234","rtmp","copy","ffmpeg","vedio","\"","转码","time","test","output","音频","image2","server","格式","{","16000","图片","mp4","_","live","streamname","/","input","bsf","ld","mpegts","parts","合成视频","ae","flv","i","生成","s16","-","to","mpg","分解成","文件","3c","sample","mov","a","序列","avi","udp","output%",":","将","file","wav","image%","mp3","50","集","res001","re","audio","合成","m3u8","音频文件","30","ac","segment","localhost","aac","推流"],"title":"ffmpeg","title_tokens":["ffmpeg"]},{"location":"docs/command/tools/ffmepg/#ffmpeg","text":"ffmpeg -y -i ${test.mp4} -ar 16000 -ac 1 -sample_fmt s16 ${test.mp3} ffmpeg -i input.avi -q 1 -c copy output.mov 转码 ffmpeg -f image2 image%d.jpg vedio.mpg 将图片合成视频 ffmpeg -i vedio.mpg image%d.jpg 将视频分解成图片序列集 ffmpeg -re -i vedio.flv -c copy -f mpegts udp://localhost:1234 udp 推流 ffmpeg -re -i vedio.mp4 -c copy -f flv rtmp://server/live/streamname rtmp 推流 ffmpeg -i \" res001.geekbang.org/media/audio/3c/ae/3cb2135163e937bf84a90066303a94ae/ld/ld.m3u8 \" -bsf:a aac_adtstoasc -vcodec copy -c copy -crf 50 file.mp4 # m3u8 conver to mp4 将 m3u8 转码 ffmpeg -y -i -ar 16000 -ac 1 -sample_fmt s16 生成 flac 格式音频 分割音频文件 ffmpeg -i {{ file.wav }} -f segment -segment_time {{ 30 }} -c copy {{ parts/output%09d.wav }}","text_tokens":["$","3cb2135163e937bf84a90066303a94ae","分割","fmt","flac","分解","org","adtstoasc","vcodec","conver","ar","f","geekbang","c","crf","09d","#","视频","jpg","q","d"," ","media","y",".","1","}","1234","rtmp","copy","ffmpeg","vedio","\"","转码","time","test","output","音频","image2","server","格式","{","16000","图片","mp4","_","live","streamname","/","input","bsf","ld","mpegts","parts","合成视频","ae","flv","i","生成","s16","-","to","mpg","分解成","文件","3c","sample","mov","a","序列","avi","udp","output%",":","将","file","wav","image%","mp3","50","集","res001","re","audio","合成","m3u8","音频文件","30","ac","segment","localhost","aac","推流"],"title":"ffmpeg","title_tokens":["ffmpeg"]},{"location":"docs/command/tools/jq/","text":"jq ¶ 格式化 json jq '.' {{ name }} .json","text_tokens":["name","}","格式化","格式","{"," ","¶","'",".","jq","json"],"title":"jq","title_tokens":["jq"]},{"location":"docs/command/tools/jq/#jq","text":"格式化 json jq '.' {{ name }} .json","text_tokens":["name","}","格式化","格式","{"," ",".","'","jq","json"],"title":"jq","title_tokens":["jq"]},{"location":"docs/command/tools/mvn/","text":"mvn ¶ mvn install -Dmaven.javadoc.skip=true -Dmaven.test.skip=true","text_tokens":["install","skip","-"," ","javadoc","¶",".","dmaven","test","=","true","mvn"],"title":"mvn","title_tokens":["mvn"]},{"location":"docs/command/tools/mvn/#mvn","text":"mvn install -Dmaven.javadoc.skip=true -Dmaven.test.skip=true","text_tokens":["install","skip","-"," ","javadoc",".","dmaven","test","=","true","mvn"],"title":"mvn","title_tokens":["mvn"]},{"location":"docs/command/tools/nativefier/","text":"nativefier ¶ nativefier 将网页生成 app install: npm install nativefier -g nativefier --name MySite httpshackettyu.com","text_tokens":["name","install","将","网页","npm","-","g","httpshackettyu"," ","生成","mysite","--","¶","nativefier",".","app","com",":"],"title":"nativefier","title_tokens":["nativefier"]},{"location":"docs/command/tools/nativefier/#nativefier","text":"nativefier 将网页生成 app install: npm install nativefier -g nativefier --name MySite httpshackettyu.com","text_tokens":["name","install","将","网页","npm","-","g","httpshackettyu"," ","生成","mysite","--","nativefier",".","app","com",":"],"title":"nativefier","title_tokens":["nativefier"]},{"location":"docs/command/tools/npm/","text":"npm ¶ npm list -global npm 的全局安装列表 npm install -g npm@latest 更新 npm","text_tokens":["@","的","install","列表","npm","-","list","g"," ","安装","¶","全局","latest","global","更新"],"title":"Npm","title_tokens":["npm"]},{"location":"docs/command/tools/npm/#npm","text":"npm list -global npm 的全局安装列表 npm install -g npm@latest 更新 npm","text_tokens":["的","install","列表","npm","-","list","g"," ","安装","全局","@","latest","global","更新"],"title":"npm","title_tokens":["npm"]},{"location":"docs/command/tools/ossutil/","text":"ossutil ¶ 阿里云 oss 命令行上传工具 help.aliyun.com/document_detail/120057.html?spm=a2c4g.11186623.6.709.2ca034afIWSJTk#title-w9k-3tk-5w4 上传单个文件 ./ossutil cp a.txt oss://bucket/path/ 使用cp命令时增加-r选项可以将目标文件夹上传到OSS。 ./ossutil cp -r dir oss://bucket/path/ 上传所有文件格式为txt的文件 ./ossutil cp dir/ oss://my-bucket/path --include \"*.txt\" -r 下载单个文件 ./ossutil cp oss://my-bucket/path/test1.txt /dir 下载文件夹 ./ossutil cp -r oss://my-bucket/path /dir 下载所有文件名包含abc且不是jpg和txt格式的文件 ./ossutil cp oss://my-bucket1/path dir/ --include \"*abc*\" --exclude \"*.jpg\" --exclude \"*.txt\" -r 仅下载当前目录下的文件，忽略子目录 ./ossutil cp oss://bucket1/path dir/ --only-current-dir -r ossutil 性能调优 ¶","text_tokens":["?","不是","目录","阿里","文件夹","增加","6.709","为","--","¶","时","#","=","，","2ca034afiwsjtk","include","jpg","5w4"," ","上传",".","bucket1","传单","下","current","传到","\"","目标","aliyun","命令","。","dir","下载","title","格式","当前","document","my","html","_","com","使用","命令行","/","上","子目","spm","exclude","可以","的","工具","cp","abc","文件名","only","当前目录","性能","和","-","单个","忽略","包含","文件","且","个","仅","a","help","选项","path","ossutil","文件格式",":","将","件夹","云","调优","所有","a2c4g.11186623","txt","w9k","r","detail","*","120057","oss","bucket","3tk","test1","子目录"],"title":"ossutil","title_tokens":["ossutil"]},{"location":"docs/command/tools/ossutil/#ossutil","text":"阿里云 oss 命令行上传工具 help.aliyun.com/document_detail/120057.html?spm=a2c4g.11186623.6.709.2ca034afIWSJTk#title-w9k-3tk-5w4 上传单个文件 ./ossutil cp a.txt oss://bucket/path/ 使用cp命令时增加-r选项可以将目标文件夹上传到OSS。 ./ossutil cp -r dir oss://bucket/path/ 上传所有文件格式为txt的文件 ./ossutil cp dir/ oss://my-bucket/path --include \"*.txt\" -r 下载单个文件 ./ossutil cp oss://my-bucket/path/test1.txt /dir 下载文件夹 ./ossutil cp -r oss://my-bucket/path /dir 下载所有文件名包含abc且不是jpg和txt格式的文件 ./ossutil cp oss://my-bucket1/path dir/ --include \"*abc*\" --exclude \"*.jpg\" --exclude \"*.txt\" -r 仅下载当前目录下的文件，忽略子目录 ./ossutil cp oss://bucket1/path dir/ --only-current-dir -r","text_tokens":["?","不是","目录","阿里","文件夹","增加","6.709","为","--","时","#","=","，","2ca034afiwsjtk","include","jpg","5w4"," ","上传",".","bucket1","传单","下","current","传到","\"","目标","aliyun","命令","。","dir","下载","title","格式","当前","document","my","html","_","com","使用","命令行","/","上","子目","spm","exclude","可以","的","工具","cp","abc","文件名","only","当前目录","和","-","单个","忽略","包含","文件","且","个","仅","a","help","选项","path","ossutil","文件格式",":","将","件夹","云","所有","a2c4g.11186623","txt","w9k","r","detail","*","120057","oss","bucket","3tk","test1","子目录"],"title":"ossutil","title_tokens":["ossutil"]},{"location":"docs/command/tools/ossutil/#ossutil_1","text":"","text_tokens":[],"title":"ossutil 性能调优","title_tokens":["ossutil","性能"," ","调优"]},{"location":"docs/command/tools/pandoc/","text":"pandocOB ¶ pandoc.org/demos.html#try-pandoc-online OB Converting a web page to markdown ¶ pandoc -s -r html www.gnu.org/software/make/ -o example12.text From markdown to PDF ¶ pandoc MANUAL.txt --pdf-engine=xelatex -o example13.pdf HTML slide shows ¶ pandoc -s --mathml -i -t dzslides SLIDES -o example16a.html pandoc -s --webtex -i -t slidy SLIDES -o example16b.html OB[M 54pandoc -s --mathjax -i -t revealjs SLIDES -o example16d.html Syntax highlighting of delimited code blocks ¶ pandoc code.text -s --highlight-style pygments -o example18a.html pandoc code.text -s --highlight-style kate -o example18b.html pandoc code.text -s --highlight-style monochrome -o example18c.html pandoc code.text -s --highlight-style espresso -o example18d.html pandoc code.text -s --highlight-style haddock -o example18e.html pandoc code.text -s --highlight-style tango -o example18f.html OApandoc code.text -s --highlight-style zenburn -o example18g.html Docx to markdown, including math: ¶ pandoc -s example30.docx -t markdown -o example35.md","text_tokens":["example16a","xelatex","gnu","dzslides","software","make",",","org","www","pdf","text","--","[","¶","#","=","shows","mathml","delimited","md"," ",".","example13","haddock","monochrome","zenburn","online","example30","slides","54pandoc","highlight","code","engine","html","revealjs","math","o","example18b","oapandoc","example16b","manual","pandocob","/","t","webtex","kate","example16d","docx","espresso","mathjax","i","syntax","from","s","slidy","example18d","-","to","slide","style","example35","including","pygments","example18c","a","pandoc",":","example18a","markdown","converting","example18f","demos","tango","highlighting","ob","txt","example12","r","page","m","of","example18e","example18g","blocks","try","web"],"title":"Pandoc","title_tokens":["pandoc"]},{"location":"docs/command/tools/pandoc/#pandocob","text":"pandoc.org/demos.html#try-pandoc-online OB","text_tokens":["ob","org","demos","-"," ","/","#","pandoc",".","online","html","try"],"title":"pandocOB","title_tokens":["pandocob"]},{"location":"docs/command/tools/pandoc/#converting-a-web-page-to-markdown","text":"pandoc -s -r html www.gnu.org/software/make/ -o example12.text","text_tokens":["s","org","example12","www","software","text","-","make","r"," ","/","gnu","pandoc",".","html","o"],"title":"Converting a web page to markdown","title_tokens":["a","to"," ","markdown","page","converting","web"]},{"location":"docs/command/tools/pandoc/#from-markdown-to-pdf","text":"pandoc MANUAL.txt --pdf-engine=xelatex -o example13.pdf","text_tokens":["txt","pdf","xelatex","manual","-"," ","pandoc","--","engine",".","=","example13","o"],"title":"From markdown to PDF","title_tokens":["pdf","to"," ","markdown","from"]},{"location":"docs/command/tools/pandoc/#html-slide-shows","text":"pandoc -s --mathml -i -t dzslides SLIDES -o example16a.html pandoc -s --webtex -i -t slidy SLIDES -o example16b.html OB[M 54pandoc -s --mathjax -i -t revealjs SLIDES -o example16d.html","text_tokens":["example16a","example16d","dzslides","mathjax","i","slides","54pandoc","s","ob","slidy","-","--","[","html","revealjs","mathml","o","example16b","m"," ","t","pandoc","webtex","."],"title":"HTML slide shows","title_tokens":["html","slide","shows"," "]},{"location":"docs/command/tools/pandoc/#syntax-highlighting-of-delimited-code-blocks","text":"pandoc code.text -s --highlight-style pygments -o example18a.html pandoc code.text -s --highlight-style kate -o example18b.html pandoc code.text -s --highlight-style monochrome -o example18c.html pandoc code.text -s --highlight-style espresso -o example18d.html pandoc code.text -s --highlight-style haddock -o example18e.html pandoc code.text -s --highlight-style tango -o example18f.html OApandoc code.text -s --highlight-style zenburn -o example18g.html","text_tokens":["haddock","example18a","monochrome","zenburn","example18f","espresso","tango","s","example18d","text","-","highlight","style","code","--","html","pygments","example18b","o","oapandoc","example18c","example18e"," ","pandoc","example18g",".","kate"],"title":"Syntax highlighting of delimited code blocks","title_tokens":["delimited","of","code"," ","syntax","blocks","highlighting"]},{"location":"docs/command/tools/pandoc/#docx-to-markdown-including-math","text":"pandoc -s example30.docx -t markdown -o example35.md","text_tokens":["example30","s","md","-"," ","t","example35","pandoc","markdown",".","docx","o"],"title":"Docx to markdown, including math:","title_tokens":["to"," ","math","markdown",",","including","docx",":"]},{"location":"docs/command/tools/pdfminer.six/","text":"pdfminer.six ¶ pdf2txt.py -o test.txt sample/sample.pdf pdf 转 text","text_tokens":["pdfminer","txt","sample","pdf","py","text","-","转"," ","/","pdf2txt","¶",".","test","six","o"],"title":"pdfminer.six","title_tokens":["pdfminer","six","."]},{"location":"docs/command/tools/pdfminer.six/#pdfminersix","text":"pdf2txt.py -o test.txt sample/sample.pdf pdf 转 text","text_tokens":["txt","sample","pdf","py","text","-","转"," ","/","pdf2txt",".","test","o"],"title":"pdfminer.six","title_tokens":["pdfminer","six","."]},{"location":"docs/command/tools/pip/","text":"pip ¶ pip list [//]: # (pip 的安装列表) pip install -r requirement.txt [//]: # (安装依赖) 使用国内镜像 pip3 install -r requirements.txt -i https://pypi.doubanio.com/simple # douban pip3 install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple # tsinghua","text_tokens":["列表","simple","cn","安装",")","https","(","依赖","pip3","edu","的","install","i","镜像","douban","txt","doubanio","]","-","r","tsinghua","[","pip","¶","requirements","#","com","requirement","list","使用","国内"," ","/",".","tuna",":","pypi"],"title":"Pip","title_tokens":["pip"]},{"location":"docs/command/tools/pip/#pip","text":"pip list [//]: # (pip 的安装列表) pip install -r requirement.txt [//]: # (安装依赖) 使用国内镜像 pip3 install -r requirements.txt -i https://pypi.doubanio.com/simple # douban pip3 install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple # tsinghua","text_tokens":["列表","simple","cn","安装",")","https","(","依赖","pip3","edu","的","install","i","镜像","douban","txt","doubanio","]","-","r","tsinghua","[","pip","requirements","#","com","requirement","list","使用","国内"," ","/",".","tuna",":","pypi"],"title":"pip","title_tokens":["pip"]},{"location":"docs/command/tools/poetry/","text":"Poetry ¶ example for pyproject.toml [tool.poetry] name = \"demo-get-zendao-weekly-by-selenium\" version = \"0.1.0\" description = \"\" authors = [\"hackettyu <hy.lobby@gmail.com>\"] [tool.poetry.dependencies] python = \"^3.8\" selenium = \"^3.141.0\" request = \"^2019.4.13\" tabulate = \"^0.8.7\" [[tool.poetry.source]] name = \"douban\" url = \"https://pypi.doubanio.com/simple\" [tool.poetry.dev-dependencies] [build-system] requires = [\"poetry>=0.12\"] build-backend = \"poetry.masonry.api\" commands ¶ # 安装 poetry pip install --user poetry -i https://pypi.doubanio.com/simple # 新建项目 poetry new project-name # 安装依赖 poetry insatll # 查看配置 poetry config --list # 内置安装 poetry config virtualenvs.in-project true virtualenvs.create: boolean Create a new virtual environment if one doesn't already exist. Defaults to true. virtualenvs.in-project: boolean Create the virtualenv inside the project's root directory. Defaults to false. virtualenvs.path: string Directory where virtual environments will be created. Defaults to {cache-dir}/virtualenvs ({cache-dir}\\virtualenvs on Windows). REFERENCE ¶ poetry configuration","text_tokens":["will","authors",">","安装","boolean","be","新建","tabulate","build","for","查看","url","2019.4","7","get","dev","configuration","13","[","0.12","--","¶","#","=","zendao","0","项目","created","list","string"," ","by","version",".","pypi","demo","description","}","in","root","directory","doesn","one",")","\"","weekly","lobby","(","install","virtualenvs","create","3.141","^","dir","exist","source","where","user","\\","{","commands","'","配置","com","name","already","/","pyproject","t","windows","the","cache","defaults","if","simple","masonry","依赖","project","i","false","s","doubanio","]","on","-","to","api","pip","environments","<","gmail","hackettyu","system","new","hy","a","environment","example","0.1","path","0.8",":","true","poetry","insatll","python","reference","selenium","request","https","inside","backend","内置","douban","@","dependencies","virtual","config","toml","virtualenv","requires","3.8","tool"],"title":"Poetry","title_tokens":["poetry"]},{"location":"docs/command/tools/poetry/#poetry","text":"example for pyproject.toml [tool.poetry] name = \"demo-get-zendao-weekly-by-selenium\" version = \"0.1.0\" description = \"\" authors = [\"hackettyu <hy.lobby@gmail.com>\"] [tool.poetry.dependencies] python = \"^3.8\" selenium = \"^3.141.0\" request = \"^2019.4.13\" tabulate = \"^0.8.7\" [[tool.poetry.source]] name = \"douban\" url = \"https://pypi.doubanio.com/simple\" [tool.poetry.dev-dependencies] [build-system] requires = [\"poetry>=0.12\"] build-backend = \"poetry.masonry.api\"","text_tokens":["description","authors","tool",">","simple","python","masonry","selenium","\"","weekly","lobby","request","https","backend","tabulate","build","for","3.141","^","douban","@","source","url","dependencies","2019.4","]","7","-","doubanio","api","get","dev","13","toml","[","0.12","<","gmail","=","com","hackettyu","name","zendao","system","0","hy","pypi","example"," ","by","pyproject","/","0.1","version","requires",".","3.8","0.8",":","demo","poetry"],"title":"Poetry","title_tokens":["poetry"]},{"location":"docs/command/tools/poetry/#commands","text":"# 安装 poetry pip install --user poetry -i https://pypi.doubanio.com/simple # 新建项目 poetry new project-name # 安装依赖 poetry insatll # 查看配置 poetry config --list # 内置安装 poetry config virtualenvs.in-project true virtualenvs.create: boolean Create a new virtual environment if one doesn't already exist. Defaults to true. virtualenvs.in-project: boolean Create the virtualenv inside the project's root directory. Defaults to false. virtualenvs.path: string Directory where virtual environments will be created. Defaults to {cache-dir}/virtualenvs ({cache-dir}\\virtualenvs on Windows).","text_tokens":["will","the","}","cache","defaults","if","in","simple","insatll","root","doesn","directory","安装","boolean","one","be",")","inside","https","true","依赖","(","新建","install","virtualenvs","内置","project","create","i","查看","false","dir","exist","where","s","user","doubanio","virtual","-","to","\\","{","on","config","pip","--","environments","'","配置","#","com","name","项目","new","virtualenv","a","created","list","environment","string"," ","already","/","t",".","path","windows",":","pypi","poetry"],"title":"commands","title_tokens":["commands"]},{"location":"docs/command/tools/poetry/#reference","text":"poetry configuration","text_tokens":["configuration"," ","poetry"],"title":"REFERENCE","title_tokens":["reference"]},{"location":"docs/command/tools/spotdl/","text":"spotdl ¶ spotify 下载器 ritiek/spotify-downloader install pip3 install spotdl download single $ spotdl --song https://open.spotify.com/track/2DGa7iaidT5s0qnINlwMjJ $ spotdl --song \"ncs - spectre\" download list $ spotdl --playlist https://open.spotify.com/user/nocopyrightsounds/playlist/7sZbq8QGyMnhKPcLJvCUFD INFO: Writing 62 tracks to ncs-releases.txt $ spotdl --list ncs-releases.txt save in /root/Music default","text_tokens":["info","ritiek","in","2dga7iaidt5s0qninlwmjj","$","62","spotify","root","open","\"","https","pip3","default","install","music","track","下载","song","playlist","tracks","single","spectre","器","txt","save","user","writing","-","to","--","¶","7szbq8qgymnhkpcljvcufd","com","nocopyrightsounds","releases","download","list"," ","/","downloader","spotdl",".","ncs",":"],"title":"spotdl","title_tokens":["spotdl"]},{"location":"docs/command/tools/spotdl/#spotdl","text":"spotify 下载器 ritiek/spotify-downloader install pip3 install spotdl download single $ spotdl --song https://open.spotify.com/track/2DGa7iaidT5s0qnINlwMjJ $ spotdl --song \"ncs - spectre\" download list $ spotdl --playlist https://open.spotify.com/user/nocopyrightsounds/playlist/7sZbq8QGyMnhKPcLJvCUFD INFO: Writing 62 tracks to ncs-releases.txt $ spotdl --list ncs-releases.txt save in /root/Music default","text_tokens":["info","ritiek","in","2dga7iaidt5s0qninlwmjj","$","62","spotify","root","open","\"","https","pip3","default","install","music","track","下载","song","playlist","tracks","single","spectre","器","txt","save","user","writing","-","to","--","7szbq8qgymnhkpcljvcufd","com","nocopyrightsounds","releases","download","list"," ","/","downloader","spotdl",".","ncs",":"],"title":"spotdl","title_tokens":["spotdl"]},{"location":"docs/command/tools/wkhtmltopdf/","text":"wkhtmltopdf ¶ 将 html 转换为 pdf 使用 ¶ wkhtmltopdf \" example.com \" {{src}} 更多 ¶ twtrubiks/python-pdfkit-example: python-pdfkit HTML TO PDF Example wkhtmltopdf download","text_tokens":["src","}","将","转换","pdfkit","python","\"","多","pdf","twtrubiks","-","to","{","为","¶","html","com","download","使用","example"," ","/","wkhtmltopdf","更",".",":"],"title":"wkhtmltopdf","title_tokens":["wkhtmltopdf"]},{"location":"docs/command/tools/wkhtmltopdf/#wkhtmltopdf","text":"将 html 转换为 pdf","text_tokens":["pdf","将","转换"," ","为","html"],"title":"wkhtmltopdf","title_tokens":["wkhtmltopdf"]},{"location":"docs/command/tools/wkhtmltopdf/#_1","text":"wkhtmltopdf \" example.com \" {{src}}","text_tokens":["src","}","{","example"," ","wkhtmltopdf","com",".","\""],"title":"使用","title_tokens":["使用"]},{"location":"docs/command/tools/wkhtmltopdf/#_2","text":"twtrubiks/python-pdfkit-example: python-pdfkit HTML TO PDF Example wkhtmltopdf download","text_tokens":["pdf","twtrubiks","download","-","to","example"," ","/","wkhtmltopdf","pdfkit","python","html",":"],"title":"更多","title_tokens":["更","多"]},{"location":"docs/command/tools/ydict/","text":"ydict ¶ 专为命令行极客打造的有道词典 YDict 中文文档 安装 go get github.com/TimothyYe/ydict 参数 ydict [ flags ] Flags: -c, --cache Query with local cache, and save the query word ( s ) into the cache. -d, --delete Remove word ( s ) from the cache. -h, --help help for ydict -l, --list List all the words from the local cache. -m, --more Query with more example sentences. -p, --play int Scan and display all the words in local cache. -q, --quiet Query with quiet mode, don ' t show spinner. -r, --reset Clear all the words from the local cache. -s, --sentence Translation of sentences. -v, --voice int Query with voice speech, the default voice play count is 0 . 仅查询单词 ydict <要查询的单词或词组> 查询并朗读单词 ( 目前仅支持 MacOS 和 Linux ) ydict -v <要查询的单词或词组> 3. 查询并显示更多例句 ydict -m <要查询的单词或词组> 开启本地缓存查询单词，单词将被缓存在本地缓存中，再一次使用相同参数查询相同的单词，将获得更快的显示速度 ydict -c <要查询的单词或词组> 查询整个句子 ydict -s \"你觉得咋样？\" SOCKS5 代理支持 从版本 V0.5 开始, 支持SOCKS5代理功能. 在ydict的相同目录下，创建 .env 文件，并填入如下示例内容: SOCKS5=127.0.0.1:7070 配置成功后，所有的查询将使用配置指定的SOCKS5代理。 单词本功能 从新版 ydict V2.0 开始，支持单词本功能，方便增删和管理生词，并且可以通过定时消息推送进行随机回放，方便背诵和记忆。 增加新词到单词本 ydict -c hello 从单词本中删除单词 ydict -d hello 从单词本中列出所有单词 ydict -l 每隔10秒随机推送并展示单词 ydict -p 10 帮助与更多信息 命令行中，输入 \"ydict\" 获取更多帮助。","text_tokens":["极客","如下","translation","支持","show","into","到",">","觉得","目录","开启","填入","安装","回放","scan","列出","timothyye","中文","记忆","all","count","for","本","每隔",",","增加","并且","单词","word","咋样","为","get","reset","[","--","？","¶","c","env","with","=","remove","speech","，","macos","0","q","list","相同","新版","d"," ",".","query","下","p","don","例句","速度","l","in","代理","定时","more","版本",")","\"","成功","(","default","socks5","查询","is","再","整个","帮助","命令","。","10","增删","mode","127.0","更快","v0.5","本中","'","获得","配置","com","道","int","新词","要","v","使用","命令行","/","t","目前","更","从","通过","方便","github","the","显示","go","功能","cache","背诵","sentences","words","句子","可以","在","管理","的","spinner","delete","展示","hello","linux","from","你","s","save","]","和","-","quiet","文件","and","获取","<","生词","display","中","3","缓存","仅","help","play","example","后","创建","秒","0.1","指定","消息",":","词典","ydict","voice","删除","或","将","进行","本地","打造","多","clear","7070","词组","随机","文档","并","开始","所有","v2.0","与","h","内容","sentence","r","被","输入","m","专","of","有","朗读","示例","推送","参数","一次","flags","local","信息"],"title":"ydict","title_tokens":["ydict"]},{"location":"docs/command/tools/ydict/#ydict","text":"专为命令行极客打造的有道词典 YDict 中文文档 安装 go get github.com/TimothyYe/ydict 参数 ydict [ flags ] Flags: -c, --cache Query with local cache, and save the query word ( s ) into the cache. -d, --delete Remove word ( s ) from the cache. -h, --help help for ydict -l, --list List all the words from the local cache. -m, --more Query with more example sentences. -p, --play int Scan and display all the words in local cache. -q, --quiet Query with quiet mode, don ' t show spinner. -r, --reset Clear all the words from the local cache. -s, --sentence Translation of sentences. -v, --voice int Query with voice speech, the default voice play count is 0 . 仅查询单词 ydict <要查询的单词或词组> 查询并朗读单词 ( 目前仅支持 MacOS 和 Linux ) ydict -v <要查询的单词或词组> 3. 查询并显示更多例句 ydict -m <要查询的单词或词组> 开启本地缓存查询单词，单词将被缓存在本地缓存中，再一次使用相同参数查询相同的单词，将获得更快的显示速度 ydict -c <要查询的单词或词组> 查询整个句子 ydict -s \"你觉得咋样？\" SOCKS5 代理支持 从版本 V0.5 开始, 支持SOCKS5代理功能. 在ydict的相同目录下，创建 .env 文件，并填入如下示例内容: SOCKS5=127.0.0.1:7070 配置成功后，所有的查询将使用配置指定的SOCKS5代理。 单词本功能 从新版 ydict V2.0 开始，支持单词本功能，方便增删和管理生词，并且可以通过定时消息推送进行随机回放，方便背诵和记忆。 增加新词到单词本 ydict -c hello 从单词本中删除单词 ydict -d hello 从单词本中列出所有单词 ydict -l 每隔10秒随机推送并展示单词 ydict -p 10 帮助与更多信息 命令行中，输入 \"ydict\" 获取更多帮助。","text_tokens":["极客","如下","translation","支持","show","into","到",">","觉得","目录","开启","填入","安装","回放","scan","列出","timothyye","中文","记忆","all","count","for","本","每隔",",","增加","并且","单词","word","咋样","为","get","reset","[","--","？","c","env","with","=","remove","speech","，","macos","0","q","list","相同","新版","d"," ",".","query","下","p","don","例句","速度","l","in","代理","定时","more","版本",")","\"","成功","(","default","socks5","查询","is","再","整个","帮助","命令","。","10","增删","mode","127.0","更快","v0.5","本中","'","获得","配置","com","道","int","新词","要","v","使用","命令行","/","t","目前","更","从","通过","方便","github","the","显示","go","功能","cache","背诵","sentences","words","句子","可以","在","管理","的","spinner","delete","展示","hello","linux","from","你","s","save","]","和","-","quiet","文件","and","获取","<","生词","display","中","3","缓存","仅","help","play","example","后","创建","秒","0.1","指定","消息",":","词典","ydict","voice","删除","或","将","进行","本地","打造","多","clear","7070","词组","随机","文档","并","开始","所有","v2.0","与","h","内容","sentence","r","被","输入","m","专","of","有","朗读","示例","推送","参数","一次","flags","local","信息"],"title":"ydict","title_tokens":["ydict"]},{"location":"docs/command/tools/you-get/","text":"you-get ¶ 一个下载视频的工具 you-get -i ' www.youtube.com/watch?v=jNQXAC9IVRw ' 获取信息 you-get --itag=18 ' www.youtube.com/watch?v=jNQXAC9IVRw ' 下载指定的分辨率格式的视频 you-get -o ~/Videos -O zoo.webm ' www.youtube.com/watch?v=jNQXAC9IVRw ' 下载到该目录下并命名文件 you-get -x 127.0.0.1:1080 ' www.youtube.com/watch?v=9xwR4JCBaIU&feature=youtu.be ' 代理下载","text_tokens":["itag","?","该","webm","到","代理","目录","下","be","分辨率","命名","取信","1080","的","工具","9xwr4jcbaiu","youtu","~","i","并","下载","watch","分辨","辨率","www","-","格式","127.0","youtube","get","一个","jnqxac9ivrw","18","获取","--","videos","¶","'","文件","feature","=","com","视频","you","获取信息","o","zoo","x","v","&"," ","/","0.1","指定",".","信息",":"],"title":"you-get","title_tokens":["-","you","get"]},{"location":"docs/command/tools/you-get/#you-get","text":"一个下载视频的工具 you-get -i ' www.youtube.com/watch?v=jNQXAC9IVRw ' 获取信息 you-get --itag=18 ' www.youtube.com/watch?v=jNQXAC9IVRw ' 下载指定的分辨率格式的视频 you-get -o ~/Videos -O zoo.webm ' www.youtube.com/watch?v=jNQXAC9IVRw ' 下载到该目录下并命名文件 you-get -x 127.0.0.1:1080 ' www.youtube.com/watch?v=9xwR4JCBaIU&feature=youtu.be ' 代理下载","text_tokens":["itag","?","该","webm","到","代理","目录","下","be","分辨率","命名","取信","1080","的","工具","9xwr4jcbaiu","youtu","~","i","并","下载","watch","分辨","辨率","www","-","格式","127.0","youtube","一个","get","jnqxac9ivrw","18","获取","--","videos","文件","'","feature","=","com","视频","you","获取信息","o","zoo","x","v","&"," ","/","0.1","指定",".","信息",":"],"title":"you-get","title_tokens":["-","you","get"]},{"location":"docs/command/tools/z/","text":"Z ¶ github.com/skywind3000/z.lua/blob/master/README.cn.md z foo # 跳转到包含 foo 并且权重（Frecent）最高的路径 z foo bar # 跳转到同时包含 foo 和 bar 并且权重最高的路径 z -r foo # 跳转到包含 foo 并且访问次数最高的路径 z -t foo # 跳转到包含 foo 并且最近访问过的路径 z -l foo # 不跳转，只是列出所有匹配 foo 的路径 z -c foo # 跳转到包含 foo 并且是当前路径的子路径的权重最高的路径 z -e foo # 不跳转，只是打印出匹配 foo 并且权重最高的路径 z -i foo # 进入交互式选择模式，让你自己挑选去哪里（多个结果的话） z -I foo # 进入交互式选择模式，但是使用 fzf 来选择 z -b foo # 跳转到父目录中名称以 foo 开头的那一级","text_tokens":["但是","到","目录","列出","以","访问","模式","master","并且","子","¶","c","出","#","，","开头","md"," ",".","跳转","交互","是","打印","l","权重","cn","只是","foo","来","b","最近","的话","当前","一级","com","结果","使用","/","t","那","github","多个","次数","frecent","的","过","i","交互式","你","和","-","包含","选择","到父","匹配","中","去","同时","bar","lua","让","路径","哪里","blob","进入","自己","fzf","readme","e","挑选","skywind3000","所有","（","）","r","最高","z","不","名称"],"title":"Z","title_tokens":["z"]},{"location":"docs/command/tools/z/#z","text":"github.com/skywind3000/z.lua/blob/master/README.cn.md z foo # 跳转到包含 foo 并且权重（Frecent）最高的路径 z foo bar # 跳转到同时包含 foo 和 bar 并且权重最高的路径 z -r foo # 跳转到包含 foo 并且访问次数最高的路径 z -t foo # 跳转到包含 foo 并且最近访问过的路径 z -l foo # 不跳转，只是列出所有匹配 foo 的路径 z -c foo # 跳转到包含 foo 并且是当前路径的子路径的权重最高的路径 z -e foo # 不跳转，只是打印出匹配 foo 并且权重最高的路径 z -i foo # 进入交互式选择模式，让你自己挑选去哪里（多个结果的话） z -I foo # 进入交互式选择模式，但是使用 fzf 来选择 z -b foo # 跳转到父目录中名称以 foo 开头的那一级","text_tokens":["但是","到","目录","列出","以","访问","模式","master","并且","子","c","出","#","，","开头","md"," ",".","跳转","交互","是","打印","l","权重","cn","只是","foo","来","b","最近","的话","当前","一级","com","结果","使用","/","那","t","github","多个","次数","frecent","的","过","i","交互式","你","和","-","包含","选择","到父","匹配","中","去","同时","bar","lua","让","路径","哪里","blob","进入","自己","fzf","readme","e","挑选","skywind3000","所有","（","）","r","最高","z","不","名称"],"title":"Z","title_tokens":["z"]},{"location":"docs/digest/180719/","text":"A ¶ 英文 译法 1 译法 2 译法 3 a block of pointers 一块指针 一组指针 abbreviation 缩略语 abstract 抽象的 abstract syntax tree, AST 抽象语法树 abstraction 抽象 abstraction barrier 抽象屏障 抽象阻碍 abstraction of function calls 函数调用抽象 access 访问 存取 access function 访问函数 存取函数 accumulator 累加器 activate 激活 ad hoc 专设 adapter 适配器 address 地址 algebraic data type 代数数据类型 algorithm 算法 alias 别名 allocate 分配 配置 alternative 备选 amortized analysis 平摊分析 anaphoric 指代 annotation 注解 anonymous function 匿名函数 antecedent 前提 前件 先决条件 append 追加 拼接 application 应用 应用程序 application framework 应用框架 application program interface, API 应用程序编程接口 application service provider, ASP 应用程序服务提供商 applicative 应用序 argument 参数 自变量 实际参数/实参 arithmetic 算术 array 数组 artificial intelligence, AI 人工智能 assemble 组合 assembly 汇编 assignment 赋值 assignment operator 赋值操作符 associated 关联的 association list, alist 关联列表 atom 原子 atomic 原子的 atomic value 原子型值 attribute 属性 特性 augmented 扩充 automatic memory management 自动内存管理 automatically infer 自动推导 autometa theory 自动机理论 auxiliary 辅助 B ¶ 英文 译法 1 译法 2 译法 3 backquote 反引用 backtrace 回溯 backward compatible 向下兼容 bandwidth 带宽 base case 基本情形 base class 基类 Bayes' theorem 贝叶斯定理 best viable function 最佳可行函式 最佳可行函数 Bezier curve 贝塞尔曲线 bignum 大数 binary operator 二元操作符 binary search 二分查找 二分搜索 二叉搜索 binary search tree 二叉搜索树 binary tree 二叉树 binding 绑定 binding vector 绑定向量 bit 位 比特 bit manipulation 位操作 black box abstraction 黑箱抽象 block 块 区块 block structure 块结构 区块结构 block name 代码块名字 Blub paradox Blub 困境 body 体 主体 boilerplate 公式化 样板 bookkeeping 簿记 boolean 布尔 border 边框 bottom-up design 自底向上的设计 bottom-up programming 自底向上编程 bound 边界 bounds checking 边界检查 box notation 箱子表示法 brace 花括弧 花括号 bracket 方括弧 方括号 branch 分支 跳转 breadth-first 广度优先 breadth-first search, BFS 广度优先搜索 breakpoint 断点 brevity 简洁 buffer 缓冲区 buffer overflow attack 缓冲区溢出攻击 bug 臭虫 building 创建 built-in 内置 byte 字节 bytecode 字节码 C ¶ 英文 译法 1 译法 2 译法 3 cache 缓存 call 调用 callback 回调 CamelCase 驼峰式大小写 candidate function 候选函数 capture 捕捉 case 分支 character 字符 checksum 校验和 child class 子类 choke point 滞塞点 chunk 块 circular definition 循环定义 clarity 清晰 class 类 类别 class declaration 类声明 class library 类库 client 客户 客户端 clipboard 剪贴板 clone 克隆 closed world assumption 封闭世界假定 closure 闭包 clutter 杂乱 code 代码 code bloat 代码膨胀 collection 收集器 复合类型 column 行 栏 column-major order 行主序 comma 逗号 command-line 命令行 command-line interface, CLI 命令行界面 Common Lisp Object System, CLOS Common Lisp 对象系统 Common Gateway Interface, CGI 通用网关接口 compatible 兼容 compilation 编译 compilation parameter 编译参数 compile 编译 compile inline 内联编译 compile time 编译期 compiled form 编译后的形式 compiler 编译器 complex 复杂 complexity 复杂度 compliment 补集 component 组件 composability 可组合性 composition 组合 组合函数 compound value 复合数据 复合值 compression 压缩 computation 计算 computer 计算机 concatenation 串接 concept 概念 concrete 具体 concurrency 并发 concurrent 并发 conditional 条件式 conditional variable 条件变量 configuration 配置 connection 连接 cons 构造 cons cell 构元 cons 单元 consequent 结果 推论 consistent 一致性 constant 常量 constraint 约束 constraint programming 约束式编程 container 容器 content-based filtering 基于内容的过滤 context 上下文 语境 环境 continuation 延续性 continuous integration, CI 持续集成 control 控件 cooperative multitasking 协作式多任务 copy 拷贝 corollary 推论 coroutine 协程 corruption 程序崩溃 crash 崩溃 create 创建 crystallize 固化 curly 括弧状的 curried 柯里的 currying 柯里化 cursor 光标 curvy 卷曲的 cycle 周期 D ¶ 英文 译法 1 译法 2 译法 3 dangling pointer 迷途指针 野指针 Defense Advanced Research Projects Agency, DARPA 美国国防部高级研究计划局 data 数据 data structure 数据结构 data type 数据类型 data-driven 数据驱动 database 数据库 database schema 数据库模式 datagram 数据报文 dead lock 死锁 debug 调试 debugger 调试器 debugging 调试 declaration 声明 declaration forms 声明形式 declarative 声明式 说明式 declarative knowledge 声明式知识 说明式知识 declarative programming 声明式编程 说明式编程 declarativeness 可声明性 declaring 声明 deconstruction 解构 deduction 推导 推断 default 缺省 默认 defer 推迟 deficiency 缺陷 不足 define 定义 definition 定义 delegate 委托 delegation dellocate 释放 demarshal 散集 deprecated 废弃 depth-first 深度优先 depth-first search, BFS 深度优先搜索 derived 派生 derived class 派生类 design pattern 设计模式 designator 指示符 destructive 破坏性的 destructive function 破坏性函数 destructuring 解构 device driver 硬件驱动程序 dimensions 维度 directive 指令 directive 指示符 directory 目录 disk 盘 dispatch 分派 派发 distributed computing 分布式计算 DLL hell DLL 地狱 document 文档 dotted list 点状列表 dotted-pair notation 带点尾部表示法 带点尾部记法 duplicate 复本 dynamic binding 动态绑定 dynamic extent 动态范围 dynamic languages 动态语言 dynamic scope 动态作用域 dynamic type 动态类型 E ¶ 英文 译法 1 译法 2 译法 3 effect 效果 efficiency 效率 efficient 高效 elaborate elucidating embedded language 嵌入式语言 emulate 仿真 encapsulation 封装 enum 枚举 enumeration type 枚举类型 enumrators 枚举器 environment 环境 equal 相等 equality 相等性 equation 方程 equivalence 等价性 error message 错误信息 error-checking 错误检查 escaped 逃脱 溢出 escape character 转义字符 evaluate 求值 评估 evaluation 求值 event 事件 event driven 事件驱动 exception 异常 exception handling 异常处理 exception specification 异常规范 exit 退出 expendable 可扩展的 explicit 显式 exploratory programming 探索式编程 export 导出 引出 expression 表达式 expressive power 表达能力 extensibility 可扩展性 extent 范围 程度 external representation 外部表示法 extreme programming 极限编程 F ¶ 英文 译法 1 译法 2 译法 3 factorial 阶乘 family （类型的）系 feasible 可行的 feature 特色 field 字段 栏位 file 文件 file handle 文件句柄 fill pointer 填充指针 fineo-grained 细粒度 firmware 固件 first-class 第一类的 第一级的 一等的 first-class function 第一级函数 第一类函数 一等函数 first-class object 第一类的对象 第一级的对象 一等公民 fixed-point 不动点 fixnum 定长数 定点数 flag 标记 flash 闪存 flexibility 灵活性 floating-point 浮点数 floating-point notation 浮点数表示法 flush 刷新 fold 折叠 font 字体 force 迫使 form 形式 form 表单 formal parameter 形参 formal relation 形式关系 forward 转发 forward references fractal 分形 fractions 派系 framework 框架 freeware 自由软件 function 函数 function literal 函数字面常量 function object 函数对象 functional arguments 函数型参数 functional programming 函数式编程 functionality 功能性 G ¶ 英文 译法 1 译法 2 译法 3 game 游戏 garbage 垃圾 garbage collection 垃圾回收 garbage collector 垃圾回收器 generalized 泛化 generalized variable 广义变量 generate 生成 generator 生成器 generic 通用的 泛化的 generic algorithm 通用算法 泛型算法 generic function 通用函数 generic programming 通用编程 泛型编程 genrative programming 生产式编程 global 全局的 global declaration 全局声明 glue program 胶水程序 goto 跳转 graphical user interface, GUI 图形用户界面 greatest common divisor 最大公因数 Greenspun's tenth rule 格林斯潘第十定律 H ¶ 英文 译法 1 译法 2 译法 3 hack 破解 hacker 黑客 handle 处理器 处理程序 句柄 hard disk 硬盘 hard-wire hardware 硬件 hash tables 哈希表 散列表 header 头部 header file 头文件 heap 堆 helper 辅助函数 辅助方法 heuristic 启发式 high-order 高阶 higher-order function 高阶函数 higher-order procedure 高阶过程 hyperlink 超链接 HyperText Markup Language, HTML 超文本标记语言 HyperText Transfer Protocol, HTTP 超文本传输协议 I ¶ 英文 译法 1 译法 2 译法 3 identical 一致 identifier 标识符 identity 同一性 ill type 类型不正确 illusion 错觉 imperative 命令式 imperative programming 命令式编程 implement 实现 implementation 实现 implicit 隐式 import 导入 incremental testing 增量测试 indent 缩排 缩进 indentation 缩排 缩进 indented 缩排 缩进 indention 缩排 缩进 infer 推导 infinite loop 无限循环 infinite recursion 无限递归 infinite precision 无限精度 infix 中序 information 信息 information technology, IT 信息技术 inheritance 继承 initialization 初始化 initialize 初始化 inline 内联 inline expansion 内联展开 inner class 内嵌类 inner loop 内层循环 input 输入 instances 实例 instantiate 实例化 instructive 教学性的 instrument 记录仪 integer 整数 integrate 集成 interactive language 交互式语言 interactive programming environment 交互式编程环境 interactive testing 交互式测试 interacts 交互 interface 接口 intermediate form 过渡形式 中间形式 internal 内部 internet 互联网 因特网 interpolation 插值 interpret 解释 interpreter 解释器 interrupt 中止 中断 intersection 交集 inter-process communication, IPC 进程间通信 invariants 约束条件 invoke 调用 item 项 iterate 迭代 iteration 迭代的 iterative 迭代的 iterator 迭代器 J ¶ 英文 译法 1 译法 2 译法 3 jagged 锯齿状的 job control language, JCL 作业控制语言 judicious 明智的 K ¶ 英文 译法 1 译法 2 译法 3 kernel 核心 kernel language 核心语言 keyword argument 关键字参数 keywords 关键字 kludge 蹩脚 H ¶ 英文 译法 1 译法 2 译法 3 lambda calculus lambda 演算 larval startup 雏形创业公司 laser 激光 latitude layout 版型 lazy 惰性 lazy evaluation 惰性求值 legacy software 历史遗留软件 leverage 杠杆 (动词)利用 lexical 词法的 lexical analysis 词法分析 lexical closure 词法闭包 lexical scope 词法作用域 Language For Smart People, LFSP 聪明人的语言 library 库 函数库 函式库 lifetime 生命期 linear iteration 线性迭代 linear recursion 线性递归 link 链接 连接 linker 连接器 list 列表 list operation 列表操作 literal 字面 literal constant 字面常量 literal representation 字面量 load 装载 加载 loader 装载器 加载器 local 局部的 局域的 local declarations 局部声明 local function 局部函数 局域函数 local variable 局部变量 局域变量 locality 局部性 loop 循环 lvalue 左值 M ¶ 英文 译法 1 译法 2 译法 3 machine instruction 机器指令 machine language 机器语言 machine language code 机器语言代码 machine learning 机器学习 macro 宏 mailing list 邮件列表 mainframes 大型机 maintain 维护 manifest typing 显式类型 manipulator 操纵器 mapping 映射 mapping functions 映射函数 marshal 列集 math envy 对数学家的妒忌 member 成员 memorizing 记忆化 memory 内存 memory allocation 内存分配 memory leaks 内存泄漏 menu 菜单 message 消息 message-passing 消息传递 meta- 元- meta-programming 元编程 metacircular 元循环 method 方法 method combination 方法组合 方法组合机制 micro 微 middleware 中间件 migration （数据库）迁移 minimal network 最小网络 mirror 镜射 mismatch type 类型不匹配 model 模型 modem 调制解调器 modifier 修饰符 modularity 模块性 module 模块 monad 单子 monkey patch 猴子补丁 monomorphic type language 单型语言 Moore's law 摩尔定律 mouse 鼠标 multi-task 多任务 multiple values 多值 mutable 可变的 mutex 互斥锁 Multiple Virtual Storage, MVS 多重虚拟存储 N ¶ 英文 译法 1 译法 2 译法 3 namespace 命名空间 native 本地的 native code 本地码 natural language 自然语言 natural language processing 自然语言处理 nested 嵌套 nested class 嵌套类 network 网络 newline 换行 新行 non-deterministic choice 非确定性选择 non-strict 非严格 non-strict evaluation 非严格求值 nondeclarative nondestructive version 非破坏性的版本 number crunching 数字密集运算 O ¶ 英文 译法 1 译法 2 译法 3 object 对象 object code 目标代码 object-oriented 面向对象 object-oriented programming 面向对象编程 Occam's razor 奥卡姆剃刀原则 on the fly 运行中 执行时 online 在线 open source 开放源码 operand 操作对象 operating system, OS 操作系统 operation 操作 operator 操作符 optimization 优化 optimization of tail calls 尾调用优化 option 选项 optional 可选的 选择性的 optional argument 选择性参数 ordinary 常规的 orthogonality 正交性 overflow 溢出 overhead 额外开销 overload 重载 override 覆写 P ¶ 英文 译法 1 译法 2 译法 3 package 包 pair 点对 palindrome 回文 paradigm 范式 parallel 并行 parallel computer 并行计算机 param 参数 parameter 参数 形式参数/形参 paren-matching 括号匹配 parent class 父类 parentheses 括号 Parkinson's law 帕金森法则 parse 解析 parse tree 解析树 分析树 parser 解析器 partial application 部分应用 partial applied 分步代入的 partial function application 部分函数应用 particular ordering 部分有序 pass by adress 按址传递 传址 pass by reference 按引用传递 传引用 pass by value 按值传递 传值 path 路径 pattern 模式 pattern match 模式匹配 perform 执行 performance 性能 performance-critical persistence 持久性 phrenology 相面 physical 物理的 pipe 管道 pixel 像素 placeholder 占位符 planning 计画 platform 平台 pointer 指针 pointer arithmetic 指针运算 poll 轮询 polymorphic 多态 polymorphism 多态 polynomial 多项式的 pool 池 port 端口 portable 可移植性 portal 门户 positional parameters 位置参数 postfix 后序 precedence 优先级 precedence list 优先级列表 preceding 前述的 predicate 判断式 谓词 preemptive multitasking 抢占式多任务 premature design 过早设计 preprocessor 预处理器 prescribe 规定 prime 素数 primitive 原语 primitive recursive 主递归 primitive type 原生类型 principal type 主要类型 print 打印 printed representation 打印表示法 printer 打印机 priority 优先级 procedure 过程 procedurual 过程化的 procedurual knowledge 过程式知识 process 进程 process priority 进程优先级 productivity 生产力 profile 评测 profiler 评测器 性能分析器 programmer 程序员 programming 编程 programming language 编程语言 project 项目 prompt 提示符 proper list 正规列表 property 属性 property list 属性列表 protocol 协议 prototype 原型 pseudo code 伪码 pseudo instruction 伪指令 purely functional language 纯函数式语言 pushdown stack 下推栈 Q ¶ 英文 译法 1 译法 2 译法 3 qualified 修饰的 带前缀的 qualifier 修饰符 quality 质量 quality assurance, QA 质量保证 query 查询 query language 查询语言 queue 队列 quote 引用 quoted form 引用形式 R ¶ 英文 译法 1 译法 2 译法 3 race condition 条件竞争 竞态条件 radian 弧度 Redundant Array of Independent Disks, RAID 冗余独立磁盘阵列 raise 引起 random number 随机数 range 范围 区间 rank （矩阵）秩 排名 rapid prototyping 快速原型开发 rational database 关系数据库 raw 未经处理的 read 读取 read-evaluate-print loop, REPL 读取-求值-打印循环 read-macro 读取宏 record 记录 recursion 递归 recursive 递归的 recursive case 递归情形 refactor 重构 refer 参考 reference 引用 参考 referential transparency 引用透明 refine 精化 reflection 反射 映像 register 寄存器 registry creep 注册表蠕变 regular expression 正则表达式 represent 表现 request 请求 resolution 解析度 resolve 解析 rest parameter 剩余参数 return 返回 回车 return value 返回值 reuse of software 代码重用 right associative 右结合 Reduced Instruction Set Computer, RISC 精简指令系统计算机 robust 健壮 robustness 健壮性 鲁棒性 routine 例程 routing 路由 row-major order 列主序 remote procedure call, RPC 远程过程调用 run-length encoding 游程编码 run-time typing 运行期类型 runtime 运行期 rvalue 右值 S ¶ 英文 译法 1 译法 2 译法 3 S-expression S-表达式 save 储存 Secure Sockets Layer, SSL 安全套接字层 scaffold 脚手架 鹰架 scalar type 标量 scan 扫描 schedule 调度 scheduler 调度程序 scope 作用域 SCREAMING_SNAKE_CASE 尖叫式蛇底大写 screen 屏幕 scripting language 脚本语言 search 查找 搜寻 segment of instructions 指令片段 semantics 语义 semaphore 信号量 semicolon 分号 sequence 序列 sequential 循序的 顺序的 sequential collection literals serial 串行 serialization 序列化 series 串行 级数 server 服务器 shadowing 隐蔽了 sharp 犀利的 sharp-quote 升引号 shortest path 最短路径 SICP 《计算机程序的构造与解释》 side effect 副作用 signature 签名 simple vector 简单向量 simulate 模拟 Single Point of Truth, SPOT 真理的单点性 single-segment 单段的 sketch 草图 初步框架 slash 斜线 slot 槽 smart pointer 智能指针 snake_case 蛇底式小写 snapshot 屏幕截图 socket 套接字 software 软件 solution 方案 source code 源代码 space leak 内存泄漏 spaghetti 面条式代码 意面式代码 spaghetti stack 意面式栈 面条式栈 spam 垃圾邮件 spec 规格 special form 特殊形式 special variable 特殊变量 specialization 特化 specialize 特化 specialized array 特化数组 specification 规格说明 规范 splitter 切分窗口 sprite 精灵图 square 平方 square root 平方根 squash 碰撞 stack 栈 stack frame 栈帧 stakeholder standard library 标准函式库 state machine 状态机 statement 陈述 语句 static type 静态类型 static type system 静态类型系统 status 状态 store 保存 stream 流 strict 严格 strict evaluation 严格求值 string 字串 字符串 string template 字串模版 strong type 强类型 structural recursion 结构递归 structured values 结构型值 subroutine 子程序 subset 子集 substitution 代换 substitution model 代换模型 subtype 子类型 superclass 基类 superfluous 多余的 supertype 超集 support 支持 suspend 挂起 swapping values 交换变量的值 symbol 符号 symbolic computation 符号计算 syntax 语法 system administrator 系统管理员 system administrator disease 系统管理员综合症 System Network Architecture, SNA 系统网络体系 T ¶ 英文 译法 1 译法 2 译法 3 (database)table 数据表 table 表格 tag 标签 标记 tail-recursion 尾递归 tail-recursive 尾递归的 TAOCP 《计算机程序设计艺术》 target 目标 taxable operators 需节制使用的操作符 taxonomy 分类法 template 模版 temporary object 临时对象 testing 测试 text 文本 text file 文本文件 thread 线程 thread safe 线程安全 three-valued logic 三值逻辑 throw 抛出 丢掷 引发 throwaway program 一次性程序 timestamp 时间戳 token 词法记号 语义单位 语元 top-down design 自顶向下的设计 top-level 顶层 trace 追踪 trailing space 行尾空白 transaction 事务 transition network 转移网络 transparent 透明的 traverse 遍历 tree 树 tree recursion 树形递归 trigger 触发器 tuple 元组 Turing machine 图灵机 Turing complete 图灵完备 typable 类型合法 type 类型 type constructor 类构造器 type declaration 类型声明 type hierarchy 类型层级 type inference 类型推导 type name 类型名 type safe 类型安全 type signature 类型签名 type synonym 类型别名 type variable 类型变量 typing 类型指派 输入 U ¶ 英文 译法 1 译法 2 译法 3 user interface, UI 用户界面 unary 一元的 underflow 下溢 unification 合一 统一 union 并集 universally quantify 全局量化 unqualfied 未修饰的 unwinding uptime 运行时间 Uniform Resource Locator, URL 统一资源定位符 user 用户 utilities 实用函数 V ¶ 英文 译法 1 译法 2 译法 3 validate 验证 validator 验证器 value constructor 值构造器 vaporware 朦胧件 variable 变量 variable capture 变量捕捉 variadic input 可变输入 variant 变种 venture capitalist, VC 风险投资商 vector 向量 viable function 可行函数 video 视频 view 视图 virtual function 虚函数 virtual machine 虚拟机 virtual memory 虚内存 volatile 挥发 vowel 元音 W ¶ 英文 译法 1 译法 2 译法 3 warning message 警告信息 web server 网络服务器 weight 权值 权重 well type 类型正确 wildcard 通配符 window 窗口 word 单词 字 wrapper 包装器 包装 What You See Is What You Get, WYSIWYG 所见即所得 What You See Is What You Want, WYSIWYW 所见即所想 X ¶ Y ¶ 英文 译法 1 译法 2 译法 3 Y combinator Y组合子 Z ¶ 英文 译法 1 译法 2 译法 3 Z-expression Z-表达式 zero-indexed 零索引的 专业名词 ¶ 英文 译法 1 译法 2 译法 3 The Paradox of Choice 选择谬论 参考链接 ¶ JuanitoFatas/Computer-Science-Glossary","text_tokens":["random","比特","过渡形式","序列化","paradigm","散","相面","interacts","兼容","外部","run","order","精灵","储存","延续","国防","taxonomy","触发器","文本","网络","compound","f","锁","sequential","样板"," ","transparent","覆写","元","equality","控制","typable","column","vowel","call","autometa","scaffold","导出","create","algebraic","细粒度","解释","solution","占位","器","applicative","》","data","prompt","efficient","标识符","transaction","结果","expendable","验证","property","jcl","up","类型","单元","功能","格林","warning","猴子","压缩","lvalue","directive","返回","profiler","anonymous","黑客","equivalence","表单","简洁","关系","公式化","补丁","precision","生产力","bayes","中","点","evaluate","提供","读取","tenth","基类","驱动程序","抽象","constructor","作用域","snake","攻击","ordering","marshal","race","request","胶水","extent","forward","synonym","对","随机","（","聪明","boilerplate","arguments","target","匿名","address","assembly","中间件","enumrators","cell","purely","import","machine","黑箱","函数调用","form","literals","可行","checking","url","单位","word","算法","get","minimal","时","debugging","空间","lexical","一组","件","破坏性","query","实例","栏","implement","compatible","映像","层级","metacircular","subset","family","method","按址","b","迫使","寄存器","expression","方","single","形式参数","server","搜索","fly","font","表格","_","平方根","并行","pointer","推论","bfs","n","加载","多余","网络体系","legacy","taxable","模版","inter","tuple","deprecated","hardware","capitalist","移植","instantiate","sketch","layout","overload","主","repl","务器","cooperative","poll","risc","美国","row","注册表","suspend","built","高级","fractal","额外","g","box","《","fixed","intelligence","interpreter","administrator","内层","基本","尾","维度","简单","滞塞点","sprite","框架","循序","常量","传址","virtual","lambda","queue","leaks","locator","光标","computer","parameters","structured","封闭","m","subroutine","树","binary","alist","整数","新","brevity","startup","register","structure","backquote","range","前提","破坏","数据类型","loop","指令","结构","逗号","item","law","portable","菜单","list","注册","脚手","联网","指代","码","活性","服务","错误信息",")","deconstruction","分形","缩进","清晰","border","过程","小写","dellocate","状态","document","朦胧","inference","定性","prescribe","v","图灵机","签名","procedure","重构","physical","前","增量","函数库","搜寻","validator","死锁","请求","bug","disease","safe","tables","摩尔定律","分类法","comma","pair","palindrome","塞尔","包","expansion","meta","associative","cgi","二分","placeholder","作业","view","disks","best","解调","polymorphic","rpc","图形","deficiency","顶层","能力","breakpoint","数据表","三值","浮点","拷贝","服务提供商","回收","asp","期","多项","括弧","一次","不","所见","轮询","抢占","人工智能","剩余","利用","operators","贝叶斯","下溢","函数","事件驱动","单子","式","judicious","management","回文","查找","condition","parentheses","精化","节制","implementation","绑定","表示法","常规","项目","平方","模型","脚本语言","database","prime","clos","主体","概念","父类","portal","consistent","关系数据库","树形","coroutine","一致性","programmer","交集","约束","分","碰撞","容器","抛出","派生类","'","文本文件","declarativeness","network","重用","constraint","帕金森","force","缩排","polymorphism","句柄","it","phrenology","overflow","效果","随机数","assurance","structural","array","accumulator","ui","schedule","客户","internal","性能","二叉","gui","set","理论","language","集成","exploratory","rational","designator","虚拟存储","尾部","override","鲁棒性","调制","头部","子类","multitasking","选项","delegate","variadic","e","return","原子","proper","右值","variant","过渡","instruction","延续性","loader","原生","健壮性","互联","square","latitude","捕捉","emulate","unwinding","达式","优先级","维护","header","游程","leverage","想","keyword","local","临时","空白","web","程序设计","predicate","universally","boolean","manipulation","package","turing","分配","斜线","non","局部性","段","点数","projects","先决条件","task","temporary","append","断点","持续","关键字","evaluation","代换","identifier","q","标识","一等","line","二叉树","u","接口","堆","消息传递","驱动","pseudo","stream","派生","swapping","目标","interpolation","假定","ordinary","设计模式","系统管理员","名","composition","数学家","implicit","pattern","event","ill","bloat","全局","意面式","snapshot","第十","反","周期","t","优化","substitution","cache","antecedent","simulate","效率","sequence","cycle","model","timestamp","floating","occam","相等","bezier","了","图形用户界面","resolve","identity","传递","统管","返回值","closed","编码","bandwidth","system","例程","a","镜射","面向对象编程","conditional","装载","platform","kernel","缩略语","门户","边框","computing","实参","template","special","alternative","store","路由","固件","abstract","allocate","闭包","priority","细粒","dotted","机器指令","核心","segment","约束条件","export","动机","字体","具体","理器","see","泛化","演算","linker","iterator","paradox","流","大小","clutter","协作","项","specialization","table","keywords","语句","enum","robust","attribute","constant","common","属性","表现","infer","by","trace","record","互联网","调制解调器","分布式","粒度","modifier","cursor","filtering","原则","inline","导入","存取","体","default","正交","rule","成员","客户端","递归","atom","load","提示符","compiled","管道","计画","合法","寄存","callback","runtime","自动机","膨胀","操作符","continuation","simple","法则","弧度","发式","的","building","project","i","格林斯","refactor","destructive","formal","谬论","param","专业","健壮","depth","路径","augmented","保证","定点","冗余","choke","micro","迭代","screaming","child","reference","encoding","区间","positional","编程","infix","实际","量化","bookkeeping","伪指令","中断","serial","鼠标","同一性","委托","名词","传值","references","）","spot","job","奥卡姆","side","虚拟机","port","logic","一类","parse","of","driver","http","debug","复合","case","heap","assemble","iteration","concurrent","雏形","前缀","flag","premature","link","envy","映射","语法","prototyping","缺省","clipboard","特色","optimization","block","character","flexibility","程序","错觉","布式","printed","concept","行尾","静态","正确","命令式","自顶向下","打印","resource","国防部","native","online","abstraction","validate","monad","确定","union","analysis","挥发","backward","等价","crunching","系统","newline","traverse","连接","尖叫","lifetime","length","记号","technology","创业","提供商","范围","数学","条件","spec","接器","初步","particular","creep","右","collection","algorithm","input","operator","广义","精简","灵活","throwaway","系","exit","生成","generic","service","符号","greenspun","curvy","退出","不足","蹩脚","-","网关","定理","文件","对象","natural","锯齿","what","ai","卷曲","未经","k","bounds","结构型","崩溃","杂乱","消息","持久性","tail","应用程序","硬件","设计","debugger","deduction","特化","控件","iterate","关联","distributed","自","错误","局部","人工","记法","lazy","statement","符号计算","箱子","上下文","默认","markup","enumeration","pipe","laser","测试","激光","procedurual","内容","语境","first","精简指令","嵌入式","规范","启发","包装","多项式","带宽","checksum","information","片段","artificial","串接","分析","candidate","compilation","planning","continuous","定义","正则表达式","provider","calculus","高效","循环","列集","运算","交换","identical","触发","linear","协议","分类","matching","concatenation","configuration","因特","解构","组件","activate","well","方括号","imperative","performance","作用","association","行","print","符","陈述","模块性","forms","结合","dynamic","切分","驼峰","区块","命令","说明","优先","引发","所","o","注解","体系","使用","方法","weight","the","扩展","patch","补集","左值","monkey","symbol","black","初始化","屏幕","索引","特殊","ast","namespace","内联","派系","底","标签","anaphoric","可移植性","preceding","transfer","nondestructive","save","基于","自由软件","队列","版型","大数","选择","美国国防部","代码","3","crystallize","表达能力","据库","sicp","自由","回溯","创建","maintain","dangling","副作用","integrate","concrete","greatest","评测","pass","compiler","不动","学家","defense","bignum","编程语言","integration","隐蔽","corruption","追加","字串","形参","disk","微","破解","脚本","型值","图","escaped","任务","screen","调度","素数","testing","状态机","溢出","smart","strong","选择性","参考","regular","投资","scheduler","member","higher","fold","postfix","源码","binding","编译","interrupt","模块","utilities","类库","cons","信息技术","记录","硬盘","mapping","操纵","pool","合一","superfluous","完备","拼接","级数","mailing","动词","宏","1","specialized","字","quote","内嵌","聪明人","元组","root","面向","vector","function","truth","embedded","time","列主序","juanitofatas","supertype","分步","complexity","automatic","user","秩","栈帧","extreme","architecture","转义字符","标记","device","amortized","自然语言","命令行","求值","向上","带点","applied","自动","declaring","mouse","机器","犀利","扩展性","强","脚手架","管理","通配符","大型","trigger","paren","状","mutable","client","rvalue","数据结构","校验","internet","destructuring","自变量","auxiliary","候选","path","lisp","goto","指示","ipc","模式匹配","hierarchy","鹰架","型","os","地狱","精度","specialize","最大","preemptive","安全","communication","程序员","字符串","转移","external","instructive","protocol","z","缓冲","brace","备选","开销","未","invariants","match","困境","hash","明人","生成器","base","柯里","异常","支持","derived","iterative","记忆","strict","极限","raw","indent",",","齿状","仿真","模式","three","迷途","可移植","manipulator","hell","一元","隐式","原型","refine","表","适配器","divisor","chunk","atomic","继承","引用","图灵","调试器","排名","compliment","展性","argument","(","overhead","class","无限","currying","回调","world","所见即","is","qualifier","mismatch","handle","advanced","可","引出","升","dimensions","feature","level","上下","game","instances","探索","块","taocp","static","byte","激活","记录仪","资源","修饰","routing","abbreviation","vaporware","剪贴板","quality","封装","library","链接","exception","虚","像素","质量","multiple","竞争","和","协程","garbage","composability","transparency","migration","parkinson","you","推导","第一类","开放源码","本文","废弃","编译器","散集","算术","curly","parent","schema","指针","semicolon","应用","indexed","access","解析度","向下兼容","modularity","operation","历史","search","嵌入","类","真理","簿记","关键","r","lfsp","底式","process","游戏","算机","栏位","reuse","收集器","生命","互斥","pointers","adapter","middleware","动态","最小","calls","duplicate","闪存","局域","特性","发器","启发式","moore","处理","representation","方根","多态","software","throw","数据库","interactive","因特网","bytecode","过滤","j","rank","先决","corollary","invoke","stack","inheritance","释放","管理员","柯里化","glossary","intermediate","fractions","字节","交互","attack","适配","机数","fineo","ci","位置","子程序","不动点","层","快速","stakeholder","专设","dead","interpret","中间","optional","平台","mutex","pushdown","明智","教学","值","framework","name","杠杆","generalized","多值","物理","插值","谓词","面向对象","wrapper","配器","indented","agency","support","oriented","分析树","折叠","移植性","syntax","intersection","串行","第一级","戳","radian","变量","breadth","status","处理器","中止","单型","用户","notation","公式","hyperlink","curve","操作","惰性","razor","池","learning","module","超链接","持久","文档","literal","截图","scalar","redundant","定位","grained","公司","leak","bracket","方程","datagram","2","多任务","darpa","indention","信息","transition","definition","object","重载","嵌套","explicit","dll","环境","内存","operating","volatile","slash","推迟","灵机","body","prototype","control","jagged","component","号","通信","top","wire","read","严格","释器","option","y","underflow","larval","提示","space","磁盘","卡姆","buffer","in","权重","部分","边界","局部变量","计划局","based","查询","quantify","routine","解调器","hoc","complete","delegation","hard","贝叶","复本","memory","want","monomorphic","sna","lock","底向上","定长数","生产","标准","html","error","infinite","instrument","frame","demarshal","可扩展性","quoted","declarations","保存","英文","操作系统","辅助","flash","正则","行主序","交互式","传","并集","匹配","value","类别","relation","检查","世界","environment","一块","illusion","semaphore","固化","parameter","列表","阵列","分支","heuristic","pixel","precedence","哈希","内置","secure","remote","警告","computation","缩略","定律","判断","consequent","operand","连接器","字符","integer","自然","global","mvs","tag","端口","智能","平摊","cli","解释器","parser","multi","非","reduced","机制","functional","w","processing","累加器","刷新","逃脱","访问","全套","印机","rapid","passing","principal","密集","elaborate","初始","分派","一致","escape","视频","名字","uniform","按值","d","version","克隆","wysiwyg","垃圾邮件","收集","collector","sharp","研究","down","alias","directory","copy","范式","野","signature","枚举","source","源代码","elucidating","mirror","code","位","theory","槽","所得","配置","raid","math","定点数","顶向下","栈","allocation","thread","backtrace","安全套","state","实现","缓冲区","锯齿状","manifest","点状","臭虫","可选","磁盘阵列","connection","服务器","annotation","分布","handling","api","recursion","choice","单点","方案","系数","阶乘","critical","qualified","后","表达","theorem","initialize","window","hypertext","数组","refer","unary","竞态","大写","glue","gateway","妒忌","防部","推断","video","引起","通用","robustness","进程","closure","屏障","深度","h","公因数","因数","wysiwyw","运行","high","command","布尔","referential","视图","venture","compile","efficiency","polynomial","ssl","genrative","原语","symbolic","向下","超集","过早","primitive","right","确定性","sockets","effect","第一","综合","define","地址","艺术","deterministic","field","蛇","vc","前述","perform","垃圾","单词","扫描","库","投资商","语义","超文本","表示","复杂度","orthogonality","equation","位操作","大型机","正规","power","dispatch","typing","存储","generator","模拟","蠕变","用户界面","遗留","driven","message","版本","values","persistence","unification","generate","kludge","解析器","实用","权值","灵活性","广度","操纵器","远程","container","换行","分析器","逻辑","需","译法","执行","质量保证","scripting","独立","open","信号","顺序","concurrency","化","declaration","生命期","处理程序","分布式计算","expressive","函式","缓存","界面","hacker","中序","风险","带","查询语言","计算","后序","计算机","泛型","point","程度","socket","构元","本地","nested","遍历","展开","initialization","reflection","interface","报文","fill","functionality","productivity","派发","构型","complex","people","指派","modem","事务","viable","迁移","误信","计划","clarity","token","uptime","浮点数","blub","追踪","text","调试","defer","knowledge","serialization","量","伪码","automatically","encapsulation","词法","subtype","factorial","内部","表达式","统一","主要","转义","评估","映射函数","design","修饰符","作业控制","技术","挂","专业名词","规格","二元","综合症","窗口","公民","mainframes","格林斯潘","接字","shadowing","tree","子集","打印机","性","parallel","nondeclarative","combination","最佳","语言","传输","memorizing","preprocessor","纯","/","泄漏","构造","clone","在线","序","curried","复杂","helper","草图","program","同一","标量","学习","贝塞尔","组合","s","语元","slot","circular","instructions","freeware","一次性","bit","scope","profile","layer","头文件","虚拟","序列","代数","qa","rest","fixnum","macro","向量","printer","时间","并发","file","number","剃刀","partial","squash","下推","recursive","起","数字","flush","赋值","incremental","可变","与","声明","功能性","阻碍","软件","定长","事件","trailing","摩尔","字面","bound","research","zero","series","参数","丢掷","邮件","成器","代入","hack","转发","storage","valued","resolution","目录","standard","locality","高阶","贴板","形式","scan","splitter","扩充","开发","represent","for","曲线","解析","superclass","equal","context","情形","子","capture","间通信","¶","c","assignment","知识","调用","string","unqualfied","引号","规定","跳转","显式","branch","p","单段","wildcard","数据","有序","independent","menu","type","raise","线性","机器语言","inner","下文","associated","assumption","变种","回车","填充","firmware","bottom","大小写","开放","barrier","adress","spaghetti","按","零","命名","矩阵","declarative","盘","languages","汇编","括号","on","indentation","science","透明","specification","别名","多重","最短","元音","x","累加","major","缺陷","花","意面","spam","variable","预","extensibility","crash","线程","套","semantics","arithmetic","combinator","content","application","反射","functions","programming","略语","feasible","camelcase","ad","面条","compression","输入","registry","graphical","信号量","计算机程序","剪贴","一级","shortest"],"title":"180719","title_tokens":["180719"]},{"location":"docs/digest/180719/#a","text":"英文 译法 1 译法 2 译法 3 a block of pointers 一块指针 一组指针 abbreviation 缩略语 abstract 抽象的 abstract syntax tree, AST 抽象语法树 abstraction 抽象 abstraction barrier 抽象屏障 抽象阻碍 abstraction of function calls 函数调用抽象 access 访问 存取 access function 访问函数 存取函数 accumulator 累加器 activate 激活 ad hoc 专设 adapter 适配器 address 地址 algebraic data type 代数数据类型 algorithm 算法 alias 别名 allocate 分配 配置 alternative 备选 amortized analysis 平摊分析 anaphoric 指代 annotation 注解 anonymous function 匿名函数 antecedent 前提 前件 先决条件 append 追加 拼接 application 应用 应用程序 application framework 应用框架 application program interface, API 应用程序编程接口 application service provider, ASP 应用程序服务提供商 applicative 应用序 argument 参数 自变量 实际参数/实参 arithmetic 算术 array 数组 artificial intelligence, AI 人工智能 assemble 组合 assembly 汇编 assignment 赋值 assignment operator 赋值操作符 associated 关联的 association list, alist 关联列表 atom 原子 atomic 原子的 atomic value 原子型值 attribute 属性 特性 augmented 扩充 automatic memory management 自动内存管理 automatically infer 自动推导 autometa theory 自动机理论 auxiliary 辅助","text_tokens":["calls","特性","内存","累加器","assemble","provider","函数","扩充","分配","地址","函数调用","访问","management","前提",",","先决条件","语法","数据类型","先决","算法","append","attribute","block","assignment","程序","属性","activate","调用","automatically","list","association"," ","拼接","infer","一组","件","适配器","1","指代","atomic","接口","适配","存取","alias","服务","数据","alist","abstraction","argument","function","type","analysis","autometa","algebraic","hoc","专设","tree","applicative","atom","automatic","data","memory","associated","theory","配置","提供商","framework","条件","amortized","注解","/","配器","algorithm","激活","自动机","序","类型","自动","前","译法","barrier","antecedent","操作符","operator","管理","英文","program","ast","abbreviation","的","anonymous","辅助","service","anaphoric","syntax","array","动机","accumulator","汇编","组合","annotation","api","理论","自变量","别名","3","ai","value","推导","变量","a","累加","提供","一块","auxiliary","抽象","代数","augmented","应用程序","算术","数组","缩略语","操作","列表","原子","关联","实参","指针","alternative","应用","arithmetic","赋值","intelligence","编程","access","实际","人工","追加","application","缩略","屏障","abstract","服务提供商","型值","allocate","框架","略语","asp","ad","阻碍","interface","of","匿名","备选","智能","树","address","参数","artificial","平摊","分析","2","assembly","pointers","adapter","人工智能"],"title":"A","title_tokens":["a"]},{"location":"docs/digest/180719/#b","text":"英文 译法 1 译法 2 译法 3 backquote 反引用 backtrace 回溯 backward compatible 向下兼容 bandwidth 带宽 base case 基本情形 base class 基类 Bayes' theorem 贝叶斯定理 best viable function 最佳可行函式 最佳可行函数 Bezier curve 贝塞尔曲线 bignum 大数 binary operator 二元操作符 binary search 二分查找 二分搜索 二叉搜索 binary search tree 二叉搜索树 binary tree 二叉树 binding 绑定 binding vector 绑定向量 bit 位 比特 bit manipulation 位操作 black box abstraction 黑箱抽象 block 块 区块 block structure 块结构 区块结构 block name 代码块名字 Blub paradox Blub 困境 body 体 主体 boilerplate 公式化 样板 bookkeeping 簿记 boolean 布尔 border 边框 bottom-up design 自底向上的设计 bottom-up programming 自底向上编程 bound 边界 bounds checking 边界检查 box notation 箱子表示法 brace 花括弧 花括号 bracket 方括弧 方括号 branch 分支 跳转 breadth-first 广度优先 breadth-first search, BFS 广度优先搜索 breakpoint 断点 brevity 简洁 buffer 缓冲区 buffer overflow attack 缓冲区溢出攻击 bug 臭虫 building 创建 built-in 内置 byte 字节 bytecode 字节码","text_tokens":["比特","case","base","贝叶斯","brevity","viable","boolean","manipulation","函数","binding","黑箱","structure","兼容","backquote","paradox","曲线","body","可行",",","checking","blub","bytecode","查找","情形","断点","绑定","block","结构","表示法","方括号","名字","二叉树","样板"," ","表示","字节","位操作","1","跳转","attack","引用","branch","码","主体","compatible","buffer","in","design","体","边界","vector","abstraction","区块","function","class","二元","backward","border","方","tree","贝叶","搜索","优先","最佳","位","底向上","'","广度","name","反","块","backtrace","向上","byte","up","bfs","bottom","译法","操作符","black","operator","overflow","英文","缓冲区","的","building","bug","臭虫","bezier","简洁","公式化","贝塞尔","括号","二叉","塞尔","-","bayes","定理","大数","函式","bit","代码","3","bandwidth","检查","breadth","bounds","二分","回溯","基类","notation","抽象","公式","theorem","创建","built","curve","best","向量","花","设计","操作","box","边框","攻击","分支","自","bignum","breakpoint","编程","向下兼容","内置","bookkeeping","基本","箱子","programming","search","boilerplate","簿记","first","括弧","带宽","缓冲","布尔","brace","溢出","bound","bracket","树","2","困境","binary","向下"],"title":"B","title_tokens":["b"]},{"location":"docs/digest/180719/#c","text":"英文 译法 1 译法 2 译法 3 cache 缓存 call 调用 callback 回调 CamelCase 驼峰式大小写 candidate function 候选函数 capture 捕捉 case 分支 character 字符 checksum 校验和 child class 子类 choke point 滞塞点 chunk 块 circular definition 循环定义 clarity 清晰 class 类 类别 class declaration 类声明 class library 类库 client 客户 客户端 clipboard 剪贴板 clone 克隆 closed world assumption 封闭世界假定 closure 闭包 clutter 杂乱 code 代码 code bloat 代码膨胀 collection 收集器 复合类型 column 行 栏 column-major order 行主序 comma 逗号 command-line 命令行 command-line interface, CLI 命令行界面 Common Lisp Object System, CLOS Common Lisp 对象系统 Common Gateway Interface, CGI 通用网关接口 compatible 兼容 compilation 编译 compilation parameter 编译参数 compile 编译 compile inline 内联编译 compile time 编译期 compiled form 编译后的形式 compiler 编译器 complex 复杂 complexity 复杂度 compliment 补集 component 组件 composability 可组合性 composition 组合 组合函数 compound value 复合数据 复合值 compression 压缩 computation 计算 computer 计算机 concatenation 串接 concept 概念 concrete 具体 concurrency 并发 concurrent 并发 conditional 条件式 conditional variable 条件变量 configuration 配置 connection 连接 cons 构造 cons cell 构元 cons 单元 consequent 结果 推论 consistent 一致性 constant 常量 constraint 约束 constraint programming 约束式编程 container 容器 content-based filtering 基于内容的过滤 context 上下文 语境 环境 continuation 延续性 continuous integration, CI 持续集成 control 控件 cooperative multitasking 协作式多任务 copy 拷贝 corollary 推论 coroutine 协程 corruption 程序崩溃 crash 崩溃 create 创建 crystallize 固化 curly 括弧状的 curried 柯里的 currying 柯里化 cursor 光标 curvy 卷曲的 cycle 周期","text_tokens":["case","compilation","柯里","具体","cell","continuous","环境","定义","贴板","函数","形式","concurrent","循环","编译","式","兼容","order","form","大小","clarity","clutter",",","control","延续","协作","类库","过滤","context","component","clipboard","cons","constant","concatenation","configuration","common","compound","capture","character","一致","corollary","逗号","组件","程序","持续","柯里化","调用","concept","line"," ","复杂度","行","1","chunk","克隆","接口","收集","clos","多任务","cursor","概念","栏","filtering","compatible","inline","consistent","ci","copy","数据","驼峰","column","compliment","function","class","call","回调","world","based","清晰","coroutine","create","一致性","currying","假定","命令","time","系统","客户端","可","小写","complexity","连接","性","约束","compiled","composition","code","容器","下文","assumption","bloat","上下","值","配置","callback","container","条件","结果","周期","块","命令行","constraint","collection","推论","构造","clone","curried","类型","单元","复杂","大小写","膨胀","cache","译法","补集","continuation","压缩","cycle","英文","的","剪贴板","library","内联","concurrency","状","connection","client","curvy","行主序","卷曲","declaration","comma","组合","客户","基于","校验","和","协程","-","网关","circular","对象","集成","closed","代码","3","缓存","类别","界面","system","composability","value","世界","变量","cooperative","cgi","crystallize","major","后","子类","杂乱","multitasking","候选","崩溃","创建","conditional","计算","concrete","编译器","固化","计算机","parameter","choke","compiler","并发","variable","控件","point","curly","gateway","lisp","crash","构元","child","分支","延续性","通用","编程","integration","content","corruption","closure","computation","上下文","拷贝","programming","滞塞点","类","声明","闭包","常量","捕捉","期","consequent","camelcase","内容","语境","任务","interface","字符","光标","computer","compression","括弧","checksum","command","算机","封闭","收集器","complex","compile","参数","剪贴","串接","2","cli","candidate","复合","definition","object"],"title":"C","title_tokens":["c"]},{"location":"docs/digest/180719/#d","text":"英文 译法 1 译法 2 译法 3 dangling pointer 迷途指针 野指针 Defense Advanced Research Projects Agency, DARPA 美国国防部高级研究计划局 data 数据 data structure 数据结构 data type 数据类型 data-driven 数据驱动 database 数据库 database schema 数据库模式 datagram 数据报文 dead lock 死锁 debug 调试 debugger 调试器 debugging 调试 declaration 声明 declaration forms 声明形式 declarative 声明式 说明式 declarative knowledge 声明式知识 说明式知识 declarative programming 声明式编程 说明式编程 declarativeness 可声明性 declaring 声明 deconstruction 解构 deduction 推导 推断 default 缺省 默认 defer 推迟 deficiency 缺陷 不足 define 定义 definition 定义 delegate 委托 delegation dellocate 释放 demarshal 散集 deprecated 废弃 depth-first 深度优先 depth-first search, BFS 深度优先搜索 derived 派生 derived class 派生类 design pattern 设计模式 designator 指示符 destructive 破坏性的 destructive function 破坏性函数 destructuring 解构 device driver 硬件驱动程序 dimensions 维度 directive 指令 directive 指示符 directory 目录 disk 盘 dispatch 分派 派发 distributed computing 分布式计算 DLL hell DLL 地狱 document 文档 dotted list 点状列表 dotted-pair notation 带点尾部表示法 带点尾部记法 duplicate 复本 dynamic binding 动态绑定 dynamic extent 动态范围 dynamic languages 动态语言 dynamic scope 动态作用域 dynamic type 动态类型","text_tokens":["duplicate","dll","目录","定义","derived","形式","函数","推迟","binding","structure","define","式","计划","数据库",",","projects","模式","国防","迷途","破坏","数据类型","缺省","调试","分派","hell","解构","绑定","指令","结构","debugging","knowledge","defer","程序","知识","布式","表示法","释放","作用","list"," ","表示","database","1","破坏性","分布式","dispatch","符","调试器","研究","design","driven","驱动","forms","directory","国防部","dynamic","数据","计划局","野","派生","deconstruction","default","function","class","type","设计模式","dead","advanced","delegation","可","dellocate","性","说明","搜索","复本","data","优先","lock","pattern","dimensions","document","语言","派生类","范围","declarativeness","device","demarshal","pointer","带点","bfs","类型","agency","译法","declaring","死锁","directive","英文","的","declarative","点状","盘","languages","不足","deprecated","declaration","destructive","数据结构","pair","分布","分布式计算","-","destructuring","美国国防部","3","designator","scope","推导","尾部","据库","depth","美国","驱动程序","dangling","notation","缺陷","delegate","计算","废弃","高级","散集","硬件","作用域","deficiency","debugger","deduction","设计","列表","防部","computing","指示","推断","distributed","schema","指针","defense","extent","编程","记法","文档","默认","地狱","维度","disk","深度","programming","委托","search","声明","first","dotted","报文","派发","driver","research","debug","datagram","2","darpa","definition","动态"],"title":"D","title_tokens":["d"]},{"location":"docs/digest/180719/#e","text":"英文 译法 1 译法 2 译法 3 effect 效果 efficiency 效率 efficient 高效 elaborate elucidating embedded language 嵌入式语言 emulate 仿真 encapsulation 封装 enum 枚举 enumeration type 枚举类型 enumrators 枚举器 environment 环境 equal 相等 equality 相等性 equation 方程 equivalence 等价性 error message 错误信息 error-checking 错误检查 escaped 逃脱 溢出 escape character 转义字符 evaluate 求值 评估 evaluation 求值 event 事件 event driven 事件驱动 exception 异常 exception handling 异常处理 exception specification 异常规范 exit 退出 expendable 可扩展的 explicit 显式 exploratory programming 探索式编程 export 导出 引出 expression 表达式 expressive power 表达能力 extensibility 可扩展性 extent 范围 程度 external representation 外部表示法 extreme programming 极限编程","text_tokens":["异常","explicit","环境","处理","representation","effect","逃脱","高效","误信","事件驱动","式","外部","极限","checking","仿真","equal","elaborate","enum","character","escape","表示法","evaluation","encapsulation"," ","表示","equation","表达式","1","转义","显式","power","评估","equality","driven","驱动","message","错误信息","展性","type","导出","embedded","等价","枚举","elucidating","expression","器","可","性","引出","event","语言","extreme","efficient","error","范围","转义字符","expendable","探索","可扩展性","求值","类型","扩展","译法","效率","扩展性","英文","效果","的","exit","封装","相等","equivalence","exception","退出","-","handling","expressive","language","specification","exploratory","3","检查","evaluate","表达能力","environment","表达","程度","能力","extensibility","错误","extent","编程","enumeration","programming","嵌入","emulate","escaped","达式","嵌入式","字符","规范","external","事件","export","溢出","方程","efficiency","2","信息","enumrators"],"title":"E","title_tokens":["e"]},{"location":"docs/digest/180719/#f","text":"英文 译法 1 译法 2 译法 3 factorial 阶乘 family （类型的）系 feasible 可行的 feature 特色 field 字段 栏位 file 文件 file handle 文件句柄 fill pointer 填充指针 fineo-grained 细粒度 firmware 固件 first-class 第一类的 第一级的 一等的 first-class function 第一级函数 第一类函数 一等函数 first-class object 第一类的对象 第一级的对象 一等公民 fixed-point 不动点 fixnum 定长数 定点数 flag 标记 flash 闪存 flexibility 灵活性 floating-point 浮点数 floating-point notation 浮点数表示法 flush 刷新 fold 折叠 font 字体 force 迫使 form 形式 form 表单 formal parameter 形参 formal relation 形式关系 forward 转发 forward references fractal 分形 fractions 派系 framework 框架 freeware 自由软件 function 函数 function literal 函数字面常量 function object 函数对象 functional arguments 函数型参数 functional programming 函数式编程 functionality 功能性","text_tokens":["字体","转发","闪存","functional","fold","刷新","函数","形式","第一","式","flag","form","段","可行","点数","浮点数","field","特色","flexibility","表示法","一等"," ","表示","factorial","fractions","1","字","粒度","fineo","活性","不动点","function","分形","class","family","handle","细粒度","迫使","公民","font","定长数","feature","灵活性","填充","定点数","标记","framework","pointer","firmware","force","类型","功能","译法","句柄","灵活","英文","的","系","flash","floating","折叠","派系","表单","关系","formal","自由软件","-","文件","对象","freeware","第一级","阶乘","3","relation","第一类","自由","notation","fixnum","parameter","定点","fractal","不动","file","point","指针","fixed","flush","型","forward","编程","浮点","literal","（","固件","形参","programming","框架","常量","功能性","references","）","feasible","arguments","first","细粒","grained","软件","定长","一类","fill","functionality","栏位","字面","参数","2","一级","object"],"title":"F","title_tokens":["f"]},{"location":"docs/digest/180719/#g","text":"英文 译法 1 译法 2 译法 3 game 游戏 garbage 垃圾 garbage collection 垃圾回收 garbage collector 垃圾回收器 generalized 泛化 generalized variable 广义变量 generate 生成 generator 生成器 generic 通用的 泛化的 generic algorithm 通用算法 泛型算法 generic function 通用函数 generic programming 通用编程 泛型编程 genrative programming 生产式编程 global 全局的 global declaration 全局声明 glue program 胶水程序 goto 跳转 graphical user interface, GUI 图形用户界面 greatest common divisor 最大公因数 Greenspun's tenth rule 格林斯潘第十定律","text_tokens":["collector","图形","泛型","generator","variable","译法","格林","glue","泛化","goto","广义","英文","函数","通用","program","胶水","的","function","编程","式","生成","generic","greenspun",",","rule","图形用户界面","格林斯","generate","programming","declaration","格林斯潘","器","最大","公因数","声明","垃圾","s","user","回收","因数","gui","算法","interface","common","garbage","生产","全局","game","'","3","程序","游戏","global","界面","变量","graphical","generalized","定律","第十"," ","tenth","用户","2","collection","genrative","algorithm","1","成器","跳转","greatest","divisor","生成器"],"title":"G","title_tokens":["g"]},{"location":"docs/digest/180719/#h","text":"英文 译法 1 译法 2 译法 3 hack 破解 hacker 黑客 handle 处理器 处理程序 句柄 hard disk 硬盘 hard-wire hardware 硬件 hash tables 哈希表 散列表 header 头部 header file 头文件 heap 堆 helper 辅助函数 辅助方法 heuristic 启发式 high-order 高阶 higher-order function 高阶函数 higher-order procedure 高阶过程 hyperlink 超链接 HyperText Markup Language, HTML 超文本标记语言 HyperText Transfer Protocol, HTTP 超文本传输协议","text_tokens":["列表","file","译法","理器","堆","句柄","启发式","heap","处理","higher","helper","高阶","英文","函数","散","heuristic","发式","function","哈希","辅助","黑客","order","链接","超链接","markup","handle",",","disk","过程","破解","hardware","tables","transfer","协议","文本","处理程序","hard","-","硬盘","high","文件","启发","language","语言","html","3","程序","header","hacker","protocol","标记","传输","wire","超文本","http","头文件","处理器"," ","头部","表","2","hash","hyperlink","方法","1","procedure","硬件","hypertext","hack"],"title":"H","title_tokens":["h"]},{"location":"docs/digest/180719/#i","text":"英文 译法 1 译法 2 译法 3 identical 一致 identifier 标识符 identity 同一性 ill type 类型不正确 illusion 错觉 imperative 命令式 imperative programming 命令式编程 implement 实现 implementation 实现 implicit 隐式 import 导入 incremental testing 增量测试 indent 缩排 缩进 indentation 缩排 缩进 indented 缩排 缩进 indention 缩排 缩进 infer 推导 infinite loop 无限循环 infinite recursion 无限递归 infinite precision 无限精度 infix 中序 information 信息 information technology, IT 信息技术 inheritance 继承 initialization 初始化 initialize 初始化 inline 内联 inline expansion 内联展开 inner class 内嵌类 inner loop 内层循环 input 输入 instances 实例 instantiate 实例化 instructive 教学性的 instrument 记录仪 integer 整数 integrate 集成 interactive language 交互式语言 interactive programming environment 交互式编程环境 interactive testing 交互式测试 interacts 交互 interface 接口 intermediate form 过渡形式 中间形式 internal 内部 internet 互联网 因特网 interpolation 插值 interpret 解释 interpreter 解释器 interrupt 中止 中断 intersection 交集 inter-process communication, IPC 进程间通信 invariants 约束条件 invoke 调用 item 项 iterate 迭代 iteration 迭代的 iterative 迭代的 iterator 迭代器","text_tokens":["过渡形式","环境","iteration","import","形式","循环","iterative","iterator","interacts","form","interactive","identical","indent","因特网","interrupt",",","项","初始","信息技术","记录","loop","implementation","通信","一致","隐式","因特","间通信","invoke","错觉","item","inheritance","identifier","imperative","标识","调用"," ","infer","intermediate","释器","联网","内部","1","继承","正确","交互","接口","互联网","命令式","实例","内嵌","implement","inline","导入","技术","无限","class","type","缩进","interpolation","命令","interpret","解释","递归","器","交集","中间","性","约束","inner","implicit","ill","教学","technology","语言","标识符","infinite","instances","instrument","条件","插值","input","indented","缩排","记录仪","类型","整数","实现","增量","译法","it","初始化","英文","同一","的","内联","化","交互式","inter","intersection","identity","internal","instantiate","precision","internet","indentation","-","recursion","language","集成","expansion","3","中序","推导","environment","中止","illusion","initialize","integrate","迭代","iterate","过渡","ipc","进程","编程","infix","interpreter","内层","中断","incremental","互联","精度","同一性","测试","programming","类","展开","initialization","communication","interface","instructive","integer","process","输入","testing","information","约束条件","invariants","2","不","解释器","indention","信息"],"title":"I","title_tokens":["i"]},{"location":"docs/digest/180719/#j","text":"英文 译法 1 译法 2 译法 3 jagged 锯齿状的 job control language, JCL 作业控制语言 judicious 明智的","text_tokens":["译法","控制","锯齿状","英文","作业控制","的","judicious","齿状",",","control","jagged","明智","language","job","语言","锯齿","3"," ","作业","2","1","jcl"],"title":"J","title_tokens":["j"]},{"location":"docs/digest/180719/#k","text":"英文 译法 1 译法 2 译法 3 kernel 核心 kernel language 核心语言 keyword argument 关键字参数 keywords 关键字 kludge 蹩脚","text_tokens":["核心","蹩脚","keywords","关键","译法","argument"," ","参数","kludge","language","2","keyword","语言","1","3","英文","关键字","kernel"],"title":"K","title_tokens":["k"]},{"location":"docs/digest/180719/#h_1","text":"英文 译法 1 译法 2 译法 3 lambda calculus lambda 演算 larval startup 雏形创业公司 laser 激光 latitude layout 版型 lazy 惰性 lazy evaluation 惰性求值 legacy software 历史遗留软件 leverage 杠杆 (动词)利用 lexical 词法的 lexical analysis 词法分析 lexical closure 词法闭包 lexical scope 词法作用域 Language For Smart People, LFSP 聪明人的语言 library 库 函数库 函式库 lifetime 生命期 linear iteration 线性迭代 linear recursion 线性递归 link 链接 连接 linker 连接器 list 列表 list operation 列表操作 literal 字面 literal constant 字面常量 literal representation 字面量 load 装载 加载 loader 装载器 加载器 local 局部的 局域的 local declarations 局部声明 local function 局部函数 局域函数 local variable 局部变量 局域变量 locality 局部性 loop 循环 lvalue 左值","text_tokens":["利用","局域","演算","startup","linker","representation","iteration","calculus","locality","函数","雏形","循环","software","for","局部性","link",",","linear","constant","loop","库","evaluation","lexical","作用","量","词法","list"," ","动词","1","larval","聪明人","遗留","局部变量",")","(","function","analysis","递归","连接","器","lifetime","线性","load","创业","语言","杠杆","接器","求值","declarations","函数库","译法","左值","lvalue","加载","英文","legacy","的","library","链接","生命期","recursion","layout","版型","language","函式","3","scope","变量","作用域","装载","操作","列表","迭代","惰性","variable","loader","局部","lazy","literal","closure","operation","laser","激光","历史","常量","latitude","闭包","聪明","声明","lambda","连接器","软件","公司","lfsp","字面","leverage","smart","生命","people","2","分析","明人","local"],"title":"H","title_tokens":["h"]},{"location":"docs/digest/180719/#m","text":"英文 译法 1 译法 2 译法 3 machine instruction 机器指令 machine language 机器语言 machine language code 机器语言代码 machine learning 机器学习 macro 宏 mailing list 邮件列表 mainframes 大型机 maintain 维护 manifest typing 显式类型 manipulator 操纵器 mapping 映射 mapping functions 映射函数 marshal 列集 math envy 对数学家的妒忌 member 成员 memorizing 记忆化 memory 内存 memory allocation 内存分配 memory leaks 内存泄漏 menu 菜单 message 消息 message-passing 消息传递 meta- 元- meta-programming 元编程 metacircular 元循环 method 方法 method combination 方法组合 方法组合机制 micro 微 middleware 中间件 migration （数据库）迁移 minimal network 最小网络 mirror 镜射 mismatch type 类型不匹配 model 模型 modem 调制解调器 modifier 修饰符 modularity 模块性 module 模块 monad 单子 monkey patch 猴子补丁 monomorphic type language 单型语言 Moore's law 摩尔定律 mouse 鼠标 multi-task 多任务 multiple values 多值 mutable 可变的 mutex 互斥锁 Multiple Virtual Storage, MVS 多重虚拟存储","text_tokens":["最小","multi","modem","机制","storage","内存","moore","member","迁移","函数","machine","记忆","列集","分配","循环","单子","数据库","passing","模块","envy",",","映射","task","manipulator","网络","minimal","指令","mapping","操纵","锁","law","菜单","list","模型"," ","mailing","大型机","宏","1","调制解调器","显式","typing","存储","modifier","元","消息传递","映射函数","修饰符","模块性","message","metacircular","数据","values","monad","menu","type","解调器","method","mismatch","成员","mainframes","中间","机器语言","mirror","memory","数学家","code","combination","monomorphic","mutex","语言","'","操纵器","math","memorizing","数学","network","allocation","多值","方法","泄漏","类型","patch","译法","mouse","机器","修饰","monkey","猴子","英文","model","manifest","的","大型","mutable","化","摩尔定律","学习","组合","s","补丁","multiple","-","传递","language","代码","3","匹配","migration","多重","虚拟存储","meta","据库","镜射","虚拟","调制","单型","maintain","消息","互斥","macro","解调","学家","micro","列表","妒忌","instruction","marshal","learning","module","编程","对","（","functions","modularity","鼠标","可变","微","programming","定律","virtual","）","任务","leaks","机器指令","维护","摩尔","mvs","中间件","2","不","邮件","多任务","middleware"],"title":"M","title_tokens":["m"]},{"location":"docs/digest/180719/#n","text":"英文 译法 1 译法 2 译法 3 namespace 命名空间 native 本地的 native code 本地码 natural language 自然语言 natural language processing 自然语言处理 nested 嵌套 nested class 嵌套类 network 网络 newline 换行 新行 non-deterministic choice 非确定性选择 non-strict 非严格 non-strict evaluation 非严格求值 nondeclarative nondestructive version 非破坏性的版本 number crunching 数字密集运算","text_tokens":["码","非","译法","嵌套","number","处理","processing","native","确定性","本地","版本","nested","数字","英文","命名","namespace","确定","的","class","运算","strict","non","crunching","deterministic","newline","nondestructive","类","破坏","密集","nondeclarative","-","code","choice","网络","language","语言","选择","natural","3","自然","空间","evaluation","定性","network","换行","严格","自然语言"," ","求值","2","行","version","1","破坏性","新"],"title":"N","title_tokens":["n"]},{"location":"docs/digest/180719/#o","text":"英文 译法 1 译法 2 译法 3 object 对象 object code 目标代码 object-oriented 面向对象 object-oriented programming 面向对象编程 Occam's razor 奥卡姆剃刀原则 on the fly 运行中 执行时 online 在线 open source 开放源码 operand 操作对象 operating system, OS 操作系统 operation 操作 operator 操作符 optimization 优化 optimization of tail calls 尾调用优化 option 选项 optional 可选的 选择性的 optional argument 选择性参数 ordinary 常规的 orthogonality 正交性 overflow 溢出 overhead 额外开销 overload 重载 override 覆写","text_tokens":["calls","重载","operating","源码",",","optimization","时","常规","调用"," ","orthogonality","option","1","覆写","卡姆","原则","面向","online","argument","overhead","目标","正交","ordinary","source","系统","性","optional","fly","code","'","面向对象","优化","在线","the","开放","译法","执行","操作符","oriented","operator","overflow","open","英文","操作系统","的","occam","可选","s","on","-","overload","对象","选择","代码","3","中","system","开放源码","override","选项","面向对象编程","tail","操作","额外","剃刀","razor","os","编程","尾","operation","programming","运行","operand","奥卡姆","of","溢出","选择性","开销","参数","2","object"],"title":"O","title_tokens":["o"]},{"location":"docs/digest/180719/#p","text":"英文 译法 1 译法 2 译法 3 package 包 pair 点对 palindrome 回文 paradigm 范式 parallel 并行 parallel computer 并行计算机 param 参数 parameter 参数 形式参数/形参 paren-matching 括号匹配 parent class 父类 parentheses 括号 Parkinson's law 帕金森法则 parse 解析 parse tree 解析树 分析树 parser 解析器 partial application 部分应用 partial applied 分步代入的 partial function application 部分函数应用 particular ordering 部分有序 pass by adress 按址传递 传址 pass by reference 按引用传递 传引用 pass by value 按值传递 传值 path 路径 pattern 模式 pattern match 模式匹配 perform 执行 performance 性能 performance-critical persistence 持久性 phrenology 相面 physical 物理的 pipe 管道 pixel 像素 placeholder 占位符 planning 计画 platform 平台 pointer 指针 pointer arithmetic 指针运算 poll 轮询 polymorphic 多态 polymorphism 多态 polynomial 多项式的 pool 池 port 端口 portable 可移植性 portal 门户 positional parameters 位置参数 postfix 后序 precedence 优先级 precedence list 优先级列表 preceding 前述的 predicate 判断式 谓词 preemptive multitasking 抢占式多任务 premature design 过早设计 preprocessor 预处理器 prescribe 规定 prime 素数 primitive 原语 primitive recursive 主递归 primitive type 原生类型 principal type 主要类型 print 打印 printed representation 打印表示法 printer 打印机 priority 优先级 procedure 过程 procedurual 过程化的 procedurual knowledge 过程式知识 process 进程 process priority 进程优先级 productivity 生产力 profile 评测 profiler 评测器 性能分析器 programmer 程序员 programming 编程 programming language 编程语言 project 项目 prompt 提示符 proper list 正规列表 property 属性 property list 属性列表 protocol 协议 prototype 原型 pseudo code 伪码 pseudo instruction 伪指令 purely functional language 纯函数式语言 pushdown stack 下推栈","text_tokens":["过早","planning","理器","functional","primitive","predicate","处理","purely","representation","postfix","package","paradigm","形式","函数","多态","相面","运算","式","premature","印机","回文","prototype","解析","模式","协议","principal","前述","perform","可移植","matching","parentheses","指令","knowledge","pool","表示法","知识","程序","属性","原型","stack","law","performance","printed","项目","伪码","portable","list","按值"," ","表示","by","print","规定","1","主要","prime","正规","引用","符","多任务","提示","打印","父类","design","portal","部分","pseudo","范式","位置","有序","persistence","function","class","type","按址","programmer","过程","分步","占位","形式参数","tree","递归","器","打印机","parallel","提示符","平台","解析器","优先","code","管道","pushdown","pattern","计画","prompt","生产","语言","'","并行","prescribe","栈","pointer","preprocessor","分析器","particular","物理","property","纯","/","谓词","procedure","帕金森","applied","physical","类型","译法","adress","polymorphism","执行","按","法则","phrenology","英文","profiler","分析树","的","paren","project","移植性","可移植性","化","传","preceding","像素","s","括号","移植","pair","生产力","性能","palindrome","-","传递","language","包","主","匹配","3","value","param","parkinson","点","profile","critical","poll","placeholder","路径","处理器","持久性","multitasking","path","计算","评测","platform","polymorphic","后序","pass","计算机","parameter","设计","printer","列表","partial","预","门户","下推","parent","recursive","proper","模式匹配","池","ordering","指针","reference","应用","instruction","arithmetic","positional","编程语言","pixel","进程","precedence","对","编程","持久","原生","伪指令","application","形参","pipe","programming","procedurual","判断","preemptive","传址","传值","多项","程序员","priority","优先级","任务","素数","computer","多项式","port","process","protocol","parameters","算机","productivity","parse","端口","树","参数","match","polynomial","2","分析","原语","轮询","代入","抢占","parser"],"title":"P","title_tokens":["p"]},{"location":"docs/digest/180719/#q","text":"英文 译法 1 译法 2 译法 3 qualified 修饰的 带前缀的 qualifier 修饰符 quality 质量 quality assurance, QA 质量保证 query 查询 query language 查询语言 queue 队列 quote 引用 quoted form 引用形式","text_tokens":["引用","quote","译法","修饰","修饰符","质量保证","英文","形式","的","前缀","quality","查询","assurance","qualifier","form",",","质量","队列","queue","language","语言","3","带","qualified"," ","2","quoted","1","qa","保证","query","查询语言"],"title":"Q","title_tokens":["q"]},{"location":"docs/digest/180719/#r","text":"英文 译法 1 译法 2 译法 3 race condition 条件竞争 竞态条件 radian 弧度 Redundant Array of Independent Disks, RAID 冗余独立磁盘阵列 raise 引起 random number 随机数 range 范围 区间 rank （矩阵）秩 排名 rapid prototyping 快速原型开发 rational database 关系数据库 raw 未经处理的 read 读取 read-evaluate-print loop, REPL 读取-求值-打印循环 read-macro 读取宏 record 记录 recursion 递归 recursive 递归的 recursive case 递归情形 refactor 重构 refer 参考 reference 引用 参考 referential transparency 引用透明 refine 精化 reflection 反射 映像 register 寄存器 registry creep 注册表蠕变 regular expression 正则表达式 represent 表现 request 请求 resolution 解析度 resolve 解析 rest parameter 剩余参数 return 返回 回车 return value 返回值 reuse of software 代码重用 right associative 右结合 Reduced Instruction Set Computer, RISC 精简指令系统计算机 robust 健壮 robustness 健壮性 鲁棒性 routine 例程 routing 路由 row-major order 列主序 remote procedure call, RPC 远程过程调用 run-length encoding 游程编码 run-time typing 运行期类型 runtime 运行期 rvalue 右值","text_tokens":["random","case","剩余","reduced","right","resolution","处理","正则表达式","开发","register","循环","software","run","represent","数据库","raw","order","range","rapid",",","解析","condition","rank","prototyping","情形","精化","记录","robust","loop","指令","原型","read","表现","调用","注册"," ","refine","database","print","宏","1","表达式","record","引用","typing","磁盘","蠕变","打印","机数","排名","映像","关系数据库","结合","数据","independent","call","raise","快速","routine","time","列主序","系统","过程","寄存器","expression","递归","length","秩","寄存","raid","范围","回车","远程","条件","runtime","重用","creep","右","求值","procedure","重构","类型","译法","routing","独立","精简","弧度","返回","英文","请求","矩阵","的","随机数","正则","磁盘阵列","array","关系","refactor","resolve","rvalue","竞争","-","recursion","透明","set","系数","返回值","rational","代码","3","未经","transparency","radian","repl","evaluate","value","编码","据库","associative","健壮","risc","鲁棒性","例程","读取","表达","major","row","注册表","rest","disks","计算","macro","计算机","rpc","refer","parameter","冗余","竞态","阵列","number","return","recursive","右值","instruction","race","reference","引起","request","encoding","区间","robustness","解析度","路由","随机","remote","反射","（","健壮性","redundant","）","运行","达式","期","reflection","精简指令","computer","registry","算机","游程","reuse","of","referential","参考","参数","2","regular"],"title":"R","title_tokens":["r"]},{"location":"docs/digest/180719/#s","text":"英文 译法 1 译法 2 译法 3 S-expression S-表达式 save 储存 Secure Sockets Layer, SSL 安全套接字层 scaffold 脚手架 鹰架 scalar type 标量 scan 扫描 schedule 调度 scheduler 调度程序 scope 作用域 SCREAMING_SNAKE_CASE 尖叫式蛇底大写 screen 屏幕 scripting language 脚本语言 search 查找 搜寻 segment of instructions 指令片段 semantics 语义 semaphore 信号量 semicolon 分号 sequence 序列 sequential 循序的 顺序的 sequential collection literals serial 串行 serialization 序列化 series 串行 级数 server 服务器 shadowing 隐蔽了 sharp 犀利的 sharp-quote 升引号 shortest path 最短路径 SICP 《计算机程序的构造与解释》 side effect 副作用 signature 签名 simple vector 简单向量 simulate 模拟 Single Point of Truth, SPOT 真理的单点性 single-segment 单段的 sketch 草图 初步框架 slash 斜线 slot 槽 smart pointer 智能指针 snake_case 蛇底式小写 snapshot 屏幕截图 socket 套接字 software 软件 solution 方案 source code 源代码 space leak 内存泄漏 spaghetti 面条式代码 意面式代码 spaghetti stack 意面式栈 面条式栈 spam 垃圾邮件 spec 规格 special form 特殊形式 special variable 特殊变量 specialization 特化 specialize 特化 specialized array 特化数组 specification 规格说明 规范 splitter 切分窗口 sprite 精灵图 square 平方 square root 平方根 squash 碰撞 stack 栈 stack frame 栈帧 stakeholder standard library 标准函式库 state machine 状态机 statement 陈述 语句 static type 静态类型 static type system 静态类型系统 status 状态 store 保存 stream 流 strict 严格 strict evaluation 严格求值 string 字串 字符串 string template 字串模版 strong type 强类型 structural recursion 结构递归 structured values 结构型值 subroutine 子程序 subset 子集 substitution 代换 substitution model 代换模型 subtype 子类型 superclass 基类 superfluous 多余的 supertype 超集 support 支持 suspend 挂起 swapping values 交换变量的值 symbol 符号 symbolic computation 符号计算 syntax 语法 system administrator 系统管理员 system administrator disease 系统管理员综合症 System Network Architecture, SNA 系统网络体系","text_tokens":["超集","scheduler","case","支持","序列化","内存","standard","sockets","effect","scan","splitter","形式","方根","slash","supertype","综合","machine","斜线","software","式","strict","交换","全套","流","form","精灵","literals",",","superclass","储存","specialization","蛇","查找","语法","垃圾","语句","号","网络","扫描","子","库","指令","语义","结构","serialization","程序","stack","evaluation","代换","管理员","sequential","作用","平方","严格","superfluous","string","模型","脚手"," ","subtype","脚本语言","级数","引号","静态","表达式","1","specialized","垃圾邮件","sharp","quote","space","模拟","单段","陈述","root","服务","切分","values","stream","子程序","vector","swapping","truth","type","层","scaffold","signature","规格","subset","挂","symbolic","综合症","stakeholder","系统管理员","窗口","source","解释","源代码","系统","expression","接字","shadowing","single","尖叫","小写","》","solution","状态","性","server","说明","栈帧","子集","分","code","碰撞","升","sna","语言","槽","标准","值","_","平方根","architecture","frame","意面式","栈","snapshot","spec","network","pointer","体系","初步","签名","求值","collection","static","安全套","state","泄漏","substitution","构造","保存","类型","搜寻","译法","support","simulate","递归","symbol","犀利","simple","scripting","spaghetti","强","sequence","屏幕","脚手架","管理","多余","网络体系","英文","草图","特殊","model","的","信号","library","顺序","structural","标量","底","符号","array","了","模版","syntax","disease","服务器","schedule","s","save","slot","-","sketch","recursion","串行","instructions","language","单点","方案","统管","函式","specification","代码","3","scope","layer","务器","最短","变量","system","sicp","status","路径","表达","序列","结构型","semaphore","基类","副作用","suspend","path","计算","作用域","意面","向量","计算机","数组","snake","spam","特化","大写","variable","point","squash","socket","screaming","起","《","template","special","指针","semantics","鹰架","semicolon","套","store","administrator","secure","符号计算","隐蔽","statement","字串","computation","截图","serial","specialize","scalar","简单","脚本","search","与","sprite","框架","图","循序","安全","square","真理","达式","spot","screen","软件","字符","面条","leak","规范","side","调度","底式","字符串","structured","算机","segment","片段","of","状态机","信号量","smart","智能","strong","构型","series","计算机程序","subroutine","2","ssl","邮件","shortest"],"title":"S","title_tokens":["s"]},{"location":"docs/digest/180719/#t","text":"英文 译法 1 译法 2 译法 3 (database)table 数据表 table 表格 tag 标签 标记 tail-recursion 尾递归 tail-recursive 尾递归的 TAOCP 《计算机程序设计艺术》 target 目标 taxable operators 需节制使用的操作符 taxonomy 分类法 template 模版 temporary object 临时对象 testing 测试 text 文本 text file 文本文件 thread 线程 thread safe 线程安全 three-valued logic 三值逻辑 throw 抛出 丢掷 引发 throwaway program 一次性程序 timestamp 时间戳 token 词法记号 语义单位 语元 top-down design 自顶向下的设计 top-level 顶层 trace 追踪 trailing space 行尾空白 transaction 事务 transition network 转移网络 transparent 透明的 traverse 遍历 tree 树 tree recursion 树形递归 trigger 触发器 tuple 元组 Turing machine 图灵机 Turing complete 图灵完备 typable 类型合法 type 类型 type constructor 类构造器 type declaration 类型声明 type hierarchy 类型层级 type inference 类型推导 type name 类型名 type safe 类型安全 type signature 类型签名 type synonym 类型别名 type variable 类型变量 typing 类型指派 输入","text_tokens":["指派","operators","程序设计","valued","事务","发器","turing","machine","throw","灵机","token","艺术","table","taxonomy","three","触发","触发器","temporary","文本","追踪","分类","text","单位","网络","节制","top","语义","程序","词法","行尾","完备"," ","database","1","trace","transparent","typing","自顶向下","space","图灵","down","元组","design","层级","树形","数据","typable",")","(","目标","type","signature","complete","traverse","递归","tree","器","》","名","记号","合法","引发","抛出","level","表格","文本文件","inference","transaction","标记","顶向下","name","network","使用","图灵机","签名","thread","逻辑","taocp","需","构造","类型","译法","操作符","英文","throwaway","program","的","taxable","timestamp","trigger","标签","模版","safe","tuple","分类法","declaration","语元","-","recursion","透明","文件","对象","一次性","别名","3","戳","推导","变量","本文","tail","constructor","计算","计算机","顶层","设计","时间","操作","file","variable","recursive","《","线程","template","hierarchy","synonym","数据表","三值","尾","遍历","测试","类","安全","声明","转移","target","logic","输入","testing","trailing","算机","tag","树","一次","丢掷","2","临时","transition","空白","向下","object"],"title":"T","title_tokens":["t"]},{"location":"docs/digest/180719/#u","text":"英文 译法 1 译法 2 译法 3 user interface, UI 用户界面 unary 一元的 underflow 下溢 unification 合一 统一 union 并集 universally quantify 全局量化 unqualfied 未修饰的 unwinding uptime 运行时间 Uniform Resource Locator, URL 统一资源定位符 user 用户 utilities 实用函数","text_tokens":["时间","资源","unary","符","译法","用户界面","修饰","resource","下溢","universally","英文","函数","union","的","量化","unification","quantify","uptime","utilities",",","ui","url","user","定位","unwinding","运行","实用","interface","一元","locator","并集","全局","3","界面","uniform","合一","未","unqualfied"," ","用户","2","1","underflow","统一"],"title":"U","title_tokens":["u"]},{"location":"docs/digest/180719/#v","text":"英文 译法 1 译法 2 译法 3 validate 验证 validator 验证器 value constructor 值构造器 vaporware 朦胧件 variable 变量 variable capture 变量捕捉 variadic input 可变输入 variant 变种 venture capitalist, VC 风险投资商 vector 向量 viable function 可行函数 video 视频 view 视图 virtual function 虚函数 virtual machine 虚拟机 virtual memory 虚内存 volatile 挥发 vowel 元音","text_tokens":["variable","译法","内存","variant","video","validator","viable","英文","vector","validate","函数","volatile","machine","function","vaporware","挥发","vowel","可行","可变",",","虚","capitalist","vc","器","捕捉","virtual","memory","capture","投资商","虚拟机","值","投资","向量","朦胧","3","value","输入","变种","视频","风险","变量","元音","视图","venture","验证","虚拟"," ","view","件","2","1","constructor","input","构造","variadic"],"title":"V","title_tokens":["v"]},{"location":"docs/digest/180719/#w","text":"英文 译法 1 译法 2 译法 3 warning message 警告信息 web server 网络服务器 weight 权值 权重 well type 类型正确 wildcard 通配符 window 窗口 word 单词 字 wrapper 包装器 包装 What You See Is What You Get, WYSIWYG 所见即所得 What You See Is What You Want, WYSIWYW 所见即所想","text_tokens":["类型","译法","see","warning","权重","wildcard","服务","message","通配符","字","英文","wysiwyg","type","所见即","is","警告","window","窗口",",","服务器","器","server","正确","单词","want","wysiwyw","word","网络","get","权值","包装","what","所得","所","3","you","务器","well","想"," ","wrapper","2","所见","1","信息","weight","web"],"title":"W","title_tokens":["w"]},{"location":"docs/digest/180719/#x","text":"","text_tokens":[],"title":"X","title_tokens":["x"]},{"location":"docs/digest/180719/#y","text":"英文 译法 1 译法 2 译法 3 Y combinator Y组合子","text_tokens":["译法"," ","子","2","y","1","3","英文","combinator","组合"],"title":"Y","title_tokens":["y"]},{"location":"docs/digest/180719/#z","text":"英文 译法 1 译法 2 译法 3 Z-expression Z-表达式 zero-indexed 零索引的","text_tokens":["的","-","译法","达式","zero","表达","索引"," ","indexed","2","表达式","1","零","3","英文","expression","z"],"title":"Z","title_tokens":["z"]},{"location":"docs/digest/180719/#_1","text":"英文 译法 1 译法 2 译法 3 The Paradox of Choice 选择谬论","text_tokens":["the","谬论","of","译法","paradox","choice"," ","2","选择","1","3","英文"],"title":"专业名词","title_tokens":["专业名词","专业","名词"]},{"location":"docs/digest/180719/#_2","text":"JuanitoFatas/Computer-Science-Glossary","text_tokens":["-","science","glossary","/","juanitofatas","computer"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"docs/digest/180720_1/","text":"单词 正确发音 错误发音 access 🔊 ✅ ['ækses] ❌ [ək'ses] agile 🔊 ✅ ['ædʒaɪl] ❌ [ə'dʒaɪl] amazon 🔊 ✅ ['æməzən] ❌ ['əmeizən; ə'meizən] analogy 🔊 ✅ [əˈnælədʒi] ❌ [ænə'lɒdʒi] Angular 🔊 ✅ ['æŋgjʊlə] ❌ ['æŋɡələ; 'æŋdʒʌlə] AJAX 🔊 ✅ ['eidʒæks] ❌ [ə'dʒʌks] alias 🔊 ✅ [ˈeɪliəs] ❌ [ə'lais] Apache 🔊 ✅ [ə'pætʃɪ] ❌ [ʌpʌtʃ] app 🔊 ✅ [æp] ❌ [eipi'pi] archive 🔊 ✅ ['ɑːkaɪv] ❌ ['ətʃɪv] array 🔊 ✅ [ə'rei] ❌ [æ'rei] ASCII 🔊 ✅ ['æski] ❌ [ɑːsk] aspect 🔊 ✅ ['æspekt] ❌ [ə'spekt] avatar 🔊 ✅ ['ævətɑː] ❌ [ə'vʌtɑ] Azure 🔊 ✅ ['æʒə] ❌ [ˈæzʊʒə] bind 🔊 ✅ [baɪnd] ❌ [bɪnd] cache 🔊 ✅ [kæʃ] ❌ [kætʃ] Daemon 🔊 ✅ ['diːmən] ❌ [[dæmən]] deny 🔊 ✅ [dɪ'naɪ] ❌ ['dæni] deque 🔊 ✅ ['dek] ❌ [di'kju] digest 🔊 ✅ n. ['dɑɪdʒɛst] v. [dɑɪ'dʒɛst] ❌ ['dɪgɛst] Django 🔊 ✅ [ˈdʒæŋɡoʊ] ❌ [diˈdʒæŋɡoʊ] doc 🔊 ✅ [dɒk] ❌ [daʊk] facade 🔊 ✅ [fə'sɑːd] ❌ ['feikeid] fedora 🔊 ✅ [fɪ'dɔːrə] ❌ ['fedərə] Git 🔊 ✅ [ɡɪt] ❌ [dʒɪt] GNU 🔊 ✅ [gnu:] GUI 🔊 ✅ [ˈɡui] Haskell 🔊 ✅ [ˈhæskəl] ❌ [hæˈskəl] height 🔊 ✅ [haɪt] ❌ [heɪt] hidden 🔊 ✅ ['hɪdn] ❌ ['haɪdn] image 🔊 ✅ ['ɪmɪdʒ] ❌ [ɪ'meɪdʒ] integer 🔊 ✅ ['ɪntɪdʒə] ❌ [ˈɪntaɪgə] issue 🔊 ✅ ['ɪʃuː] ❌ [ˈaɪʃuː] Java 🔊 ✅ ['dʒɑːvə] ❌ ['dʒɑːvɑː] jpg(jpeg) 🔊 ✅ ['dʒeɪpeɡ] ❌ [ˈdʒeɪˈpi:ˈdʒiː] lambda 🔊 ✅ [ˈlæmdə] ❌ [ˈlɒŋmdɑ] linear 🔊 ✅ ['lɪnɪə] ❌ ['laɪə] Linux 🔊 ✅ ['lɪnəks] ❌ [ˈlɪnʌks; ˈlɪnjuːks] locale 🔊 ✅ [ləʊ'kɑːl] ❌ [ˈloʊk(ə)l] main 🔊 ✅ [meɪn] ❌ [mɪn] margin 🔊 ✅ ['mɑːdʒɪn] ❌ ['mʌgɪn] matrix 🔊 ✅ [ˈmeɪtrɪks] ❌ [ˈmɑ:trɪks] maven 🔊 ✅ ['meɪvn] ❌ ['maːvn] Microsoft 🔊 ✅ ['maikrəusɔft] ❌ ['mikrəusɔft] module 🔊 ✅ ['mɒdjuːl] ❌ ['məʊdl] nginx ✅ Engine X null 🔊 ✅ [nʌl] ❌ [naʊ] OS X ✅ OS ten phantom 🔊 ✅ ['fæntəm] ❌ ['pæntəm] parameter 🔊 ✅ [pə'ræmɪtə] ❌ ['pærəmɪtə] putty 🔊 ✅ [ˈpʌti] ❌ [ˈpuːti] query 🔊 ✅ ['kwɪəri] ❌ ['kwaɪri] Qt 🔊 ✅ [kjuːt] Realm 🔊 ✅ [relm] ❌ [riəlm] resolved 🔊 ✅ [rɪ'zɒlvd] ❌ [rɪ'səʊvd] resort 🔊 ✅ [rɪˈzɔ:t] ❌ [rɪˈsɔ:t] retina 🔊 ✅ ['retɪnə] ❌ [ri'tina] san jose 🔊 ✅ [sænhəu'zei] ❌ [sæn'ju:s] safari 🔊 ✅ [sə'fɑːrɪ] ❌ [sæfərɪ] scheme 🔊 ✅ [skiːm] ❌ [s'kæmə] SQL ✅ [ˈsiːkwəl]/[ˈesˈkjuːˈel] sudo ✅ ['suːduː] suite 🔊 ✅ [swiːt] ❌ [sjuːt] typical 🔊 ✅ ['tɪpɪkl] ❌ ['taɪpɪkəl] Ubuntu 🔊 ✅ [ʊ'bʊntʊ] ❌ [juː'bʊntʊ] variable 🔊 ✅ ['veəriəbl] ❌ [və'raiəbl] vue 🔊 ✅ [v'ju:] ❌ [v'ju:i] width 🔊 ✅ [wɪdθ] ❌ [waɪdθ] YouTube 🔊 ✅ ['juː'tjuːb] ❌ ['juː'tʊbɪ] 本着简单的原则, 又为了避免程序猿们出现选择困难症, '正确音标'采用了最接近有道词典音频的英式 DJ 音标, 不代表其唯一性. 专业在线英语词典请参考 知乎链接:在线英语词典哪个比较好? 参考资料 www.zhihu.com/question/19739907 www.v2ex.com/t/131094 www.v2ex.com/t/309350 www.v2ex.com/t/63781 www.v2ex.com/t/246033 www.v2ex.com/t/342087 github.com/shimohq/chinese-programmer-wrong-pronunciation/blob/master/README.md","text_tokens":["tr","maikr","出现","?","feikeid","w","sudo","gnu","putty","he","realm","digest","azure","retina","rai","ses","issue","lo","django","java","suite","jose","lvd","最",",","analogy","microsoft","matrix","linear","zei","master","kwa","avatar","zhihu","www","单词","maven","ret","youtube","dj","资料","ɪ","[","f","fedora","la","英语","程序","daemon","ascii","246033","md","git","jpg","nginx","kju","ni","d"," ","ɒ","nju","语词","lais","ski",".","困难","ka","query","正确","u","el","猿们","archive","apache","p","原则","jpeg","dl","l","hidden","为了","alias","sk","ʃ","na","doc",")","dju","✅","fed","(","swi","好","di","ə","vd","309350","pi","ˈ","b","eipi","rei","英语词典","programmer","ri","θ","音频","phantom","main","ɑ","dn","st","engine","image","接近","'","safari","com","ŋ","o","症","nt","避免","有道","chinese","v","vue","gj","su","t","/","🔊","us","tina","ma","ʌ","san","es","代表","github","da","在线","eid","null",";","cache","请","n","spekt","哪个","ti","342087","si","typical","width","question","vn","其","ɡ","的","shimohq","知乎","链接","facade","i","唯一","array","了","linux","ui","sql","s","]","ha","-","gui","pronunciation","meiz","本着","nta","选择","唯一性","pe","li","qt","sju","专业","k","x","ks","音标","a","ʊ","relm","参考资料","blob","比较","ba","ɔ","readme",":","词典","parameter","ubuntu","agile","e","me","g","variable","resort","kl","v2ex","131094","英式","ta","bl","deny","kw","错误","resolved","ajax","haskell","module","os","采用","access","dek","发音","deque","lm","简单","h","locale","amazon","ft","r","lambda","height","❌","19739907","ve","nd","integer","tju","app","ʒ","ɛ","又","z","ju","63781","wrong","aspect","m","du","æ","bind","margin","scheme","参考","pu","mikr","wa","nh","不","ten","kses","ː","angular"],"title":"180720 1","title_tokens":["180720","1"," "]},{"location":"docs/digest/180720_2/","text":"August 11, 2013 作者：Hawstein 出处 : hawstein.com/posts/make-thiner-programming-pearls.html 声明：本文采用以下协议进行授权： 自由转载-非商用-非衍生-保持署名|Creative Commons BY-NC-ND 3.0 ，转载请注明作者及出处。 开篇 ¶ 具体化你的解决的问题。下面是A和B的对话。 A：我该如何对磁盘文件进行排序？ B：需要排序的内容是什么？文件中有多少条记录？每个记录的格式是什么？ A：该文件包含至多10,000,000个记录，每条记录都是一个7位整数。 B：如果文件那么小，为什么要使用磁盘排序呢？为什么不在主存中对它排序？ A：该功能是某大型系统中的一部分，大概只能提供1MB主存给它。 B：你能将记录方面的内容说得更详细一些吗？ A：每个记录是一个7位正整数，没有其它的关联数据，每个整数至多只能出现一次。 ... ... 经过一系统的问题，我们可以将一个定义模糊不清的问题变得具体而清晰： 输入： 所输入的是一个文件，至多包含n个正整数，每个正整数都要小于n，这里n=10^7。 如果输入时某一个整数出现了两次，就会产生一个致命的错误。 这些整数与其它任何数据都不关联。 输出： 以增序形式输出经过排序的整数列表。 约束： 大概有1MB的可用主存，但可用磁盘空间充足。运行时间至多允许几分钟， 10秒钟是最适宜的运行时间。 如果主存容量不是严苛地限制在1MB，比如说可以是1MB多，或是1~2MB之间， 那么我们就可以一次性将所有数据都加载到主存中，用Bitmap来做。 10,000,000个数就需要10,000,000位，也就是10,000,000b = 1.25MB。 程序可分为三个部分：第一，初始化所有的位为0；第二，读取文件中每个整数， 如果该整数对应的位已经为1，说明前面已经出现过这个整数，抛出异常，退出程序 (输入要求每个整数都只能出现一次)。否则，将相应的位置1；第三， 检查每个位，如果某个位是1，就写出相应的整数，从而创建已排序的输出文件。 如果主存容量严苛地限制在1MB，而使用Bitmap需要1.25MB， 因此无法一次载入完成排序。那么，我们可以将该文件分割成两个文件， 再分别用Bitmap处理。分割策略可以简单地把前一半的数据放到一个文件， 后一半的数据放到另一个文件，分别排序后再做归并。 也可以把文件中小于某个数(比如5,000,000)的整数放到一个文件，叫less.txt， 把其余的整数放到另一个文件，叫greater.txt。分别排序后， 把greater.txt的排序结果追加到less.txt的排序结果即可。 啊哈！算法 ¶ 第2章围绕3个问题展开。 给定一个包含32位整数的顺序文件，它至多只能包含40亿个这样的整数， 并且整数的次序是随机的。请查找一个此文件中不存在的32位整数。 在有足够主存的情况下，你会如何解决这个问题？ 如果你可以使用若干外部临时文件，但可用主存却只有上百字节， 你会如何解决这个问题？ 这是CTCI中的一道题目，详细解答请戳以下链接： 请猛戳我 请将一个具有n个元素的一维向量向左旋转i个位置。例如，假设n=8,i=3， 那么向量abcdefgh旋转之后得到向量defghabc。 这个问题很常见了，做3次翻转即可，无需额外空间： reverse ( 0 , i - 1 ); // cbadefgh reverse ( i , n - 1 ); // cbahgfed reverse ( 0 , n - 1 ); // defghabc 给定一本英语单词词典，请找出所有的变位词集。例如，因为“pots”， “stop”，“tops”相互之间都是由另一个词的各个字母改变序列而构成的， 因此这些词相互之间就是变位词。 这个问题可以分3步来解决。第一步将每个单词按字典序排序， 做为原单词的签名，这样一来，变位词就会具有相同的签名。 第二步对所有的单词按照其签名进行排序，这样一来，变位词就会聚集到一起。 第三步将变位词分组，形成变位词集。示意图如下： 数据决定程序结构 ¶ 恰当的数据视图实际上决定了程序的结构。 我们常常可以通过重新组织内部数据来使程序变得小而美。 发明家悖论：更一般性的问题也许更容易解决。(有时候吧) 程序员在节省空间方面无计可施时，将自己从代码中解脱出来， 退回起点并集中心力研究数据，常常能有奇效。数据的表示形式是程序设计的根本。 下面是退回起点进行思考时的几条原则： 使用数组重新编写重复代码。冗长的相似代码常常可以使用最简单的数据结构—— 数组来更好地表述。 封装复杂结构。当需要非常复杂的数据结构时，使用抽象术语进行定义， 并将操作表示为类。 尽可能使用高级工具。超文本，名字-值对，电子表格，数据库， 编程语言等都是特定问题领域中的强大的工具。 从数据得出程序的结构。在动手编写代码之前，优秀的程序员会彻底理解输入， 输出和中间数据结构，并围绕这些结构创建程序。 提到的书籍：Polya的《How to Solve it》，中文书《怎样解题》； Kernighan和Plauger的《Elements of Programming Style》；Fred Brooks的《人月神话》 Steve McConnell的《代码大全》；《Rapid Development》； 《Software Project Survival Guide》 编写正确的程序 ¶ 本章以二分搜索为例子，讲述了如何对程序进行验证及正确性分析。 深入阅读：David Gries的《Science of Programming》 是程序验证领域里极佳的一本入门书籍。 编程中的次要问题 ¶ 到目前为止，你已经做了一切该做的事：通过深入挖掘定义了正确的问题， 通过仔细选择算法和数据结构平衡了真正的需求，通过程序验证技术写出了优雅的代码， 并且对其正确性相当有把握。万事俱备，只欠编程。 使用断言assert 自动化测试程序 进阶阅读：《Practice of Programming》第5章(调试)，第6章(测试) 《Code Complete》第25章(单元测试)，第26章(调试) 程序性能分析 ¶ 下图展示了一个程序的性能提升过程， 该程序的作用是对三维空间中n个物体的运动进行仿真。从图中可以看出， 一个程序可以从多方面进行性能提升，而其中算法和数据结构的选择又显得尤为重要。 从设计层面提升程序性能： 问题定义。良好的问题定义可以有效减少程序运行时间和程序长度。 系统结构。将大型系统分解成模块，也许是决定其性能的最重要的单个因素。 算法和数据结构。这个不用说了。 代码调优。针对代码本身的改进。 系统软件。有时候改变系统所基于的软件比改变系统本身更容易。 硬件。更快的硬件可以提高系统的性能。 深入阅读：Butler Lampson的“Hints for Computer System Design”， 该论文特别适合于集成硬件和软件的计算机系统设计。 粗略估算 ¶ 这一章讲述了估算技术，我认为是相当有用的一章。 文中先抛出一个问题：密西西比河一天流出多少水？如果让你来回答， 你会怎么答，注意不能去Google哦。 作者是这么回答这个问题：假设河的出口大约有1英里宽和20英尺深(1/250英里)， 而河水的流速是每小时5英里，也就是每天120英里。则可以计算出一天的流量： 1英里 * 1/250英里 * 120英里/天 约等于 1/2 英里^3/天 上述算式非常简单，可是在看到这些文字之前，如果有人真的问你， 密西西比河一天流出多少水？你真的能答上来吗？还是愣了一下后，摆摆手，说： 这我哪知道！ 对于上面的问题，我们至少可以注意到以下两点： 你需要把问题转换成一个可计算的具体模型。这一点往往不需要太担心， 因为我们做的是估算，所以可以忽视很多无关紧要的因素，可以去简化你的模型， 记住我们要的只是一个粗略计算的结果。比如对于上面的问题， 计算密西西比河一天流出多少水其实就是计算其一天的流量，利用中学所学知识， 流量 = 截面积 x 流速，那我们就只需计算密西西比河的出水口的截面积和流速即可。 我们可以将出水口简化成一个矩形，因此就只需要知道出水口的宽和深即可。 你需要知道常识性的东西。上面我们已经把问题转换成了一个可计算的具体模型： 流量 = 出水口宽 x 出水口深 x 流速。接下来呢？你需要代入具体的数值去求得答案。 而这就需要你具备一些常识性的知识了。比如作者就估计了密西西比河的出口有1英里宽， 20英尺深(如果你估计只有几十米宽，那就相差得太离谱了)。 这些常识性的知识比第1点更值得关注，因为你无法给出一个靠谱的估算值往往是因为这点。 当我们懂得如何把一个问题具体化定义出来并为其选用适当的模型， 并且我们也积累了必要的常识性的知识后，回答那些初看起来无从下手的问题也就不难了。 这就是估算的力量。 以下是估算时的一些有用提示： 两个答案比一个答案好。即鼓励你从多个角度去对一个问题进行估算， 如果从不同角度得到的答案差别都不大，说明这个估算值是比较靠谱的。 快速检验。即量纲检验。即等式两边最终的量纲要一致。 这一点在等式简单的时候相当显而易见。比如位移的单位是米，时间单位是秒， 速度单位是米/秒，那显然我们应该要用位移去除以时间来得到速度， 这样才能保证它们单位的一致。你可能会说，我了个去，这种小学生都懂的事， 你好意思拿出来讲。其实不然，当你面对的是一个具有多个变量的复杂物理公式， 或者你提出某种物理假设，正在考虑将其公式化，该方法可以切切实实地帮你做出检验。 经验法则。“72法则”：1.假设以年利率r%投资一笔钱y年，如果r*y = 72， 那么你的投资差不多会翻倍。2.如果一个盘子里的菌群以每小时3%的速率增长， 那么其数量每天(24小时)都会翻倍。在误差不超过千分之五的情况下， \\pi秒就是一个纳世纪。也就是说： 3.14秒 = 10^(-9) * 100年 = 10^(-7) 年 也就是说，1年大概是3.14x10^7 秒。所以如果有人告诉你，一个程序运行10^7 秒， 你应该能很快反应出，他说的其实是4个月。 实践。与许多其他活动一样，估算技巧只能通过实践来提高。 如果问题的规模太大，我们还可以通过求解它的小规模同质问题来做估算。比如， 我们想测试某个程序运行10亿次需要多长时间，如果你真去跑10亿次， 说不定运行几个小时都没结束，那不是很悲剧？我们可以运行这个程序1万次或是10万次， 得出结果然后倍增它即可。当然，这个结果未必是准确的， 因为你没法保证运行时间是随着运行次数线性增加的。谨慎起见，我们可以运行不同的次数， 来观察它的变化趋势。比如运行10次，100次，1000次，10000次等， 观察它的运行时间是否是线性增加的，或是一条二次曲线。 有时候，我们需要为估算的结果乘上一个安全系数。比如， 我们预估完成某项功能需要时间t，那根据以往经验，也许我们需要为这个值乘上2或4， 这样也许才是一个靠谱的预估值。 Little定律：系统中物体的平均数量等于物体离开系统的平均速率和每个物体在系统中停留 的平均时间的乘积。(如果物体离开和进入系统的总体出入流是平衡的， 那么离开速率也就是进入速率) 举个例子，比如你正在排除等待进入一个火爆的夜总会， 你可以通过估计人们进入的速率来了解自己还要等待多长时间。根据Little定律， 你可以推论：这个地方可以容纳约60人，每个人在里面逗留时间大约是3小时， 因此我们进入夜总会的速率大概是每小时20人。现在队伍中我们前面还有20人， 也就意味着我们还要等待大约一个小时。 深入阅读：Darrell Huff的《How To Lie With Statistics》；关键词： 费米近似(Fermi estimate, Fermi problem) 算法设计技术 ¶ 这一章就一个小问题研究了4种不同的算法，重点强调这些算法的设计技术。 研究的这个小问题是一个非常常见的面试题：子数组之和的最大值。 如果之前没有听过，建议Google之。 深入阅读：Aho,Hopcroft和Ullman的《Data Structures and Algorithms》 Cormen,Leiserson,Rivest和Stein的《Introduction to Algorithms》 代码调优 ¶ 前面各章讨论了提高程序效率的高层次方法：问题定义，系统结构， 算法设计及数据结构选择。本章讨论的则是低层次的方法：代码调优。 代码调优的最重要原理就是尽量少用它。不成熟的优化是大量编程灾害的根源。 它会危及程序的正确性，功能性以及可维护性。当效率很重要时， 第一步就是对系统进行性能监视，以确定其运行时间的分布状况。 效率问题可以由多种方法来解决，只有在确信没有更好的解决方案时才考虑进行代码调优。 事实上，如果不是十分十分必要，不要去做代码调优， 因为它会牺牲掉软件的其他许多性质。 so，just skip this chapter。 节省空间 ¶ 本章讲述了节省空间的一些重要方法。 减少程序所需数据的存储空间，一般有以下方法： 不存储，重新计算。 稀疏数据结构。下面着重讲一下这点。 数据压缩。可以通过压缩的方式对对象进行编码，以减少存储空间。 分配策略。只有在需要的时候才进行分配。 垃圾回收。对废弃的存储空间进行回收再利用。 以下是节省代码空间的几种通用技术： 函数定义。用函数替换代码中的常见模式可以简化程序，同时减少代码的空间需求。 解释程序。用解释程序命令替换长的程序文本。 翻译成机器语言。可以将大型系统中的关键部分用汇编语言进行手工编码。 稀疏数据结构 ¶ 假设我们有一个200 x 200的矩阵(共40000个元素)，里面只有2000个元素有值， 其它的都为0，示意图如下： 显然这是一个稀疏矩阵，直接用一个200 x 200 的二维数组来存储这些数据会造成大量的空间浪费，共需要200x200x4B=160KB。 所以，我们应该想办法用另一种形式来存储这些数据。 方法一 ¶ 使用数组表示所有的列，同时使用链表来表示给定列中的活跃元素。 如下图所示： 该结构中，有200个指针(colhead)和2000条记录(每条记录是两个整数和一个指针)， 占用空间是200x4B + 2000x12B = 24800B = 24.8KB， 比直接用二维数组存储(160KB)要小很多。 方法二 ¶ 我们可以开三个数组来保存这些数，如下图所示： firstincol是一个长度为201的数组，对于第i列，在数组row中， 下标为firstincol[i]到firstincol[i+1]-1对应的行元素非0， 其值存储在相应的pointnum数组中。 比如对于上图，在第0列中，元素值非0的行有3行，分别是row[0],row[1],row[2], 元素值是pointnum[0],pointnum[1],pointnum[2]；在第1列中，元素值非0的行有2行， 分别是row[3],row[4]，元素值是pointnum[3],pointnum[4]。依次类推。 该结构所需要的存储空间为2x2000x4B + 201x4B = 16804B = 16.8KB。 由于row数组中的元素全部都小于200，所以每个元素可以用一个unsigned char来保存， firstincol数组中元素最大也就2000，所以可以用一个short(或unsigned short)来保存， pointnum中的元素是一个4B的int， 最终所需空间变为：2000x4B + 2000x1B + 201x2B = 10402B = 10.4KB。 深入阅读：Fred Brooks的《人月神话》 排序 ¶ 本章先简单介绍了插入排序，然后着重讲述快速排序。 插入排序 ¶ // 版本1 void InsertSort ( int a [], int n ) { for ( int i = 1 ; i < n ; ++ i ) for ( int j = i ; j > 0 && a [ j - 1 ] > a [ j ]; -- j ) swap ( a [ j - 1 ], a [ j ]); } // 版本2 void InsertSort1 ( int a [], int n ) { for ( int i = 1 ; i < n ; ++ i ) { int t = a [ i ]; int j = i ; for (; j > 0 && a [ j - 1 ] > t ; -- j ) a [ j ] = a [ j - 1 ]; a [ j ] = t ; } } 快速排序 ¶ 我们在这里规定：小于等于pivot的元素移到左边，大于pivot的元素移到右边。 实现1：单向移动版本 ¶ 这个版本的关键是设置一快一慢两个指针，慢指针左侧都是小于等于pivot(包含慢指针所在位置)， 慢指针到快指针之间的值是大于pivot，快指针右侧的值是还未比较过的。示意图如下： 小于等于pivot ｜ 大于pivot ｜ ？ slow fast 快指针一次一步向前走，遇到大于pivot什么也不做继续向前走。遇到小于等于pivot的元素， 则慢指针slow向前走一步，然后交换快慢指针指向的元素。一次划分结束后， 再递归对左右两侧的元素进行快排。代码如下： // 数组快排 void QSort ( int a [], int head , int end ) { if ( a == NULL || head == end ) return ; int slow = head , fast = head + 1 ; int pivot = a [ head ]; while ( fast != end ) { if ( a [ fast ] <= pivot ) swap ( a [ ++ slow ], a [ fast ]); ++ fast ; } swap ( a [ head ], a [ slow ]); QSort ( a , head , slow ); QSort ( a , slow + 1 , end ); } 排序数组a只需要调用QSort(a, 0, n)即可。该思路同样可以很容易地在链表上实现： // 单链表快排 void qsort ( Node * head , Node * end ){ if ( head == NULL || head == end ) return ; Node * slow = head , * fast = head -> next ; int pivot = head -> data ; while ( fast != end ){ if ( fast -> data <= pivot ){ slow = slow -> next ; swap ( slow -> data , fast -> data ); } fast = fast -> next ; } swap ( head -> data , slow -> data ); qsort ( head , slow ); qsort ( slow -> next , end ); } 排序头指针为head的单链表只需调用qsort(head, NULL)即可。 实现2：双向移动版本 ¶ 版本1能能够快速完成对随机整数数组的排序，但如果数组有序， 或是数组中元素相同，快排的时间复杂度会退化成O(n^2 )，性能变得非常差。 一种缓解方案是使用双向移动版本的快排，它每次划分也是使用两个指针， 不过一个是从左向右移动，一个是从右向左移动，示意图如下： 小于等于pivot ｜ ？ ｜ 大于pivot i j 指针j不断向左移动，直到遇到小于等于pivot，就交换指针i和j所指元素 (指针i一开始指向pivot)；指针i不断向右移动，直到遇到大于pivot的， 就交换指针i和j所指元素。pivot在这个过程中，不断地换来换去， 最终会停在分界线上，分界线左边都是小于等于它的元素，右边都是大于它的元素。 这样就避免了最后还要交换一次pivot的操作，代码也变得美观许多。 int partition ( int a [], int low , int high ){ int pivot = a [ low ], i = low , j = high ; while ( i < j ){ while ( i < j && a [ j ] > pivot ) -- j ; if ( i < j ) swap ( a [ i ], a [ j ]); while ( i < j && a [ i ] <= pivot ) ++ i ; if ( i < j ) swap ( a [ i ], a [ j ]); } return i ; } void quicksort ( int a [], int first , int last ){ if ( first < last ){ int k = partition ( a , first , last ); quicksort ( a , first , k - 1 ); quicksort ( a , k + 1 , last ); } } 当然，如果对于partition函数，你如果觉得大循环内的两个swap还是做了些无用功的话， 也可以把pivot的赋值放到最后一步，而不是在这个过程中swap来swap去的。代码如下： int partition ( int a [], int low , int high ){ int pivot = a [ low ], i = low , j = high ; while ( i < j ){ while ( i < j && a [ j ] > pivot ) -- j ; if ( i < j ) a [ i ++ ] = a [ j ]; while ( i < j && a [ i ] <= pivot ) ++ i ; if ( i < j ) a [ j -- ] = a [ i ]; } a [ i ] = pivot ; return i ; } 如果数组基本有序，那随机选择pivot(而不像上面那样选择第一个做为pivot) 会得到更好的性能。在partition函数里，我们只需要在数组中随机选一个元素， 然后将它和数组中第一个元素交换，后面的划分代码无需改变， 就可以达到随机选择pivot的效果。 进一步优化 ¶ 对于小数组，用插入排序之类的简单方法来排序反而会更快，因此在快排中， 当数组长度小于某个值时，我们就什么也不做。对应到代码中， 就是修改quicksort中的if条件： if(first < last) 改为 if(last-first > cutoff) 其中cutoff是一个小整数。程序结束时，数组并不是有序的， 而是被组合成一块一块随机排列的值，并且满足这样的条件： 某一块中的元素小于它右边任何块中的元素。我们必须通过另一种排序算法对块内进行排序。 由于数组是几乎有序的，因此插入排序比较适用。 这种方法结合了快排和插入排序，让它们去做各自擅长的事情，往往比单纯用快排要快。 深入阅读：Don Knuth的《The Art of Computer Programming, Volume 3: Sorting and Searching》；Robert Sedgewick的《Algorithms》； 《Algorithms in C》,《Algorithms in C++》,《Algorithms in Java》。 取样问题 ¶ 本章讲述了一个小的随机抽样问题，并用不同的方法来解决它。 问题：对于整数m和n，其中m<n，输出0~n-1范围内m个随机整数的有序列表， 不允许重复。 比如m=3, n=5，那么一种可能输出是0，2，3(要求有序)。实现1来自Knuth的TAOCP， 时间复杂度O(n)： void GenKnuth ( int m , int n ) { for ( int i = 0 ; i < n ; ++ i ) { if (( bigrand () % ( n - i )) < m ) { cout << i << endl ; -- m ; } } } 其中，bigrand()的作用是返回一个很大的随机整数。 实现2：在一个初始为空的集合里面插入随机整数，直到个数足够。代码如下： void GenSets ( int m , int n ) { set < int > s ; while ( s . size () < m ) s . insert ( bigrand () % n ); set < int >:: iterator i ; for ( i = s . begin (); i != s . end (); ++ i ) cout <<* i << endl ; } 实现3：把包含整数0～n-1的数组顺序打乱，然后把前m个元素排序输出。 该方法的性能通常不如Knuth的算法。代码如下： void GenShuf ( int m , int n ) { int x [ n ]; for ( int i = 0 ; i < n ; ++ i ) x [ i ] = i ; for ( int i = 0 ; i < m ; ++ i ) { int j = randint ( i , n - 1 ); swap ( x [ i ], x [ j ]); } sort ( x , x + m ); for ( int i = 0 ; i < m ; ++ i ) cout << x [ i ] << endl ; } 深入阅读：Don Knuth的《The Art of Computer Programming, Volume 2: Seminumerical Algorithms》 搜索 ¶ 本章详细研究这样一个搜索问题：在没有其他相关数据的情况下，如何存储一组整数？ 为些介绍了5种数据结构：有序数组，有序链表，二叉搜索树，箱，位向量。 其中，二叉搜索树应该熟练掌握，以下是一种实现： struct Node { int data ; Node * lchild , * rchild , * parent ; Node () : lchild ( NULL ), rchild ( NULL ), parent ( NULL ) { } }; class BST { private : static const int kMax = 1000 ; Node * root_ , * parent_ , nodes_ [ kMax ]; int size_ ; private : Node * minimum ( Node * node ); Node * maximum ( Node * node ); Node * successor ( Node * node ); Node * predecessor ( Node * node ); void Insert ( Node * & node , int x ); void InorderTraver ( Node * node ); Node * Find ( Node * node , int x ); public : BST () : root_ ( NULL ), parent_ ( NULL ), size_ ( 0 ) { memset ( nodes_ , '\\0' , sizeof ( nodes_ )); } void Insert ( int x ); void InorderTraver (); Node * Find ( int x ); void Remove ( Node * z ); }; Node * BST :: minimum ( Node * node ) { if ( node == NULL ) return NULL ; while ( node -> lchild ) node = node -> lchild ; return node ; } Node * BST :: maximum ( Node * node ) { if ( node == NULL ) return NULL ; while ( node -> rchild ) node = node -> rchild ; return node ; } Node * BST :: successor ( Node * node ) { if ( node -> rchild ) return minimum ( node -> rchild ); Node * y = node -> parent ; while ( y && node == y -> rchild ) { node = y ; y = node -> parent ; } return y ; } Node * BST :: predecessor ( Node * node ) { if ( node -> lchild ) return maximum ( node -> lchild ); Node * y = node -> parent ; while ( y && node == y -> lchild ) { node = y ; y = node -> parent ; } return y ; } void BST :: Insert ( Node * & node , int x ) { if ( node == NULL ) { nodes_ [ size_ ]. data = x ; nodes_ [ size_ ]. parent = parent_ ; node = & nodes_ [ size_ ]; ++ size_ ; return ; } parent_ = node ; if ( x < node -> data ) Insert ( node -> lchild , x ); else Insert ( node -> rchild , x ); } void BST :: Insert ( int x ) { Insert ( root_ , x ); } void BST :: InorderTraver ( Node * node ) { if ( node == NULL ) return ; InorderTraver ( node -> lchild ); cout << node -> data << \" \" ; InorderTraver ( node -> rchild ); } void BST :: InorderTraver () { InorderTraver ( root_ ); } Node * BST :: Find ( Node * node , int x ) { if ( node == NULL ) return NULL ; if ( x < node -> data ) return Find ( node -> lchild , x ); else if ( x > node -> data ) return Find ( node -> rchild , x ); else return node ; } Node * BST :: Find ( int x ) { return Find ( root_ , x ); } void BST :: Remove ( Node * z ) { if ( ! z -> lchild && ! z -> rchild ) { if ( z == root_ ) root_ = NULL ; else if ( z == z -> parent -> lchild ) z -> parent -> lchild = NULL ; else z -> parent -> rchild = NULL ; } else if ( z -> lchild == NULL || z -> rchild == NULL ) { if ( z == root_ ) { if ( z -> lchild ) root_ = z -> lchild ; else root_ = z -> rchild ; root_ -> parent = NULL ; } else { if ( z == z -> parent -> lchild && z -> lchild ) { z -> parent -> lchild = z -> lchild ; z -> lchild -> parent = z -> parent ; } else if ( z == z -> parent -> lchild && z -> rchild ) { z -> parent -> lchild = z -> rchild ; z -> rchild -> parent = z -> parent ; } else if ( z == z -> parent -> rchild && z -> lchild ) { z -> parent -> rchild = z -> lchild ; z -> lchild -> parent = z -> parent ; } else { z -> parent -> rchild = z -> rchild ; z -> rchild -> parent = z -> parent ; } } } else { Node * s = predecessor ( z ); z -> data = s -> data ; if ( z == s -> parent ) s -> parent -> lchild = s -> lchild ; else s -> parent -> rchild = s -> lchild ; if ( s -> lchild ) s -> lchild -> parent = s -> parent ; } } 堆 ¶ 本章主要介绍堆，下面是关于堆的一些主要操作： // 最大堆实现, 数组下标从1开始，a[0]不使用。 // 交换两数 void swap ( int & a , int & b ) { int t = a ; a = b ; b = t ; } // 把第i个元素向上移动 void ShiftUp ( int a [], int i ) { while ( i > 1 && a [ i ] > a [ i / 2 ]) { swap ( a [ i ], a [ i / 2 ]); i >>= 1 ; } } // 把第i个元素向下移动 void ShiftDown ( int a [], int n , int i ) { while (( i = 2 * i ) <= n ) { if ( i + 1 <= n && a [ i + 1 ] > a [ i ]) ++ i ; if ( a [ i ] > a [ i / 2 ]) swap ( a [ i ], a [ i / 2 ]); else break ; } } // 把数组a变成具备最大堆性质的数组 void MakeHeap ( int a [], int n ) { for ( int i = n / 2 ; i > 0 ; -- i ) ShiftDown ( a , n , i ); } // 向堆中插入元素x void Insert ( int a [], int & n , int x ) { a [ ++ n ] = x ; ShiftUp ( a , n ); } // 删除堆中第i个元素 void Del ( int a [], int & n , int i ) { a [ i ] = a [ n -- ]; if ( i > 1 && a [ i ] > a [ i / 2 ]) ShiftUp ( a , i ); else ShiftDown ( a , n , i ); } // 堆排序，时间复杂度O(nlogn) void HeapSort ( int a [], int n ) { MakeHeap ( a , n ); for ( int i = n ; i > 1 ; -- i ) { swap ( a [ i ], a [ 1 ]); ShiftDown ( a , i - 1 , 1 ); } } 字符串 ¶ 程序1：循环输入并将每个单词插入集合S(忽略重复单词)，然后排序输出。 int main ( void ) { set < string > s ; set < string >:: iterator j ; string t ; while ( cin >> t ) s . insert ( t ); for ( j = s . begin (); j != s . end (); ++ j ) cout <<* j << endl ; return 0 ; } 程序2：单词计数 int main ( void ) { map < string , int > m ; map < string , int >:: iterator j ; string t ; while ( cin >> t ) m [ t ] ++ ; for ( j = m . begin (); j != m . end (); ++ j ) cout << j -> first << \" \" << j -> second << endl ; return 0 ; } 程序3：建立自己的哈希表(散列表)，以下是一种实现： class Hash { public : Hash () : seed_ ( 131 ), size_ ( 0 ) { memset ( head_ , 0 , sizeof ( head_ )); } void Insert ( const char * str ) { unsigned int id = hash ( str ); char * dst = ( char * ) node_ [ size_ ]. word ; while ( * dst ++ = * str ++ ); node_ [ size_ ]. next = head_ [ id ]; head_ [ id ] = & node_ [ size_ ]; ++ size_ ; } bool Find ( const char * str ) { unsigned int id = hash ( str ); for ( Node * p = head_ [ id ]; p ; p = p -> next ) { char * dst = ( char * ) p -> word ; int i = 0 ; for (; * ( str + i ) && * ( str + i ) ==* ( dst + i ); ++ i ); if ( !* ( str + i ) && !* ( dst + i )) return true ; } return false ; } private : unsigned int hash ( const char * str ) { // BKDR Hash Function unsigned int hash = 0 ; while ( * str ) { hash = hash * seed_ + ( * str ++ ); } return ( hash & 0x7FFFFFFF ) % kHashSize ; } private : unsigned int seed_ ; unsigned int size_ ; static const int kWordSize = 26 + 1 ; static const int kNodeSize = 20000 ; static const int kHashSize = 10001 ; struct Node { char word [ kWordSize ]; Node * next ; }; Node node_ [ kNodeSize ]; Node * head_ [ kHashSize ]; }; 后缀数组 ¶ 假设我们有以下字符串及一个char*数组： char c [ 20 ] = \"hawstein\" ; char * pc [ 20 ]; 我们让指针pc[i]指向字符串的第i个字符，即： for ( int i = 0 ; i < 8 ; ++ i ) pc [ i ] = & c [ i ]; 这时候我们输出pc[i]，会得到字符串”hawstein”的所有后缀： hawstein awstein wstein stein tein ein in n 然后，我们对数组pc进行排序，将所有后缀按字典序排序： sort ( pc , pc + 8 , cmp ); 其中，比较函数cmp如下： inline bool cmp ( char * p , char * q ) { return strcmp ( p , q ) < 0 ; } 这时，我们再输出pc[i]，会得到排序后的结果： awstein ein hawstein in n stein tein wstein 我们把数组pc称为“后缀数组”。这里需要注意，数组pc 中存储的是指向每个后缀首字符的地址。我们也可以存储每个后缀首字符在原数组中的下标， 效果是一样的。 本章中用后缀数组解决了一个小问题：可重叠最长重复子串。比如对于字符串”banana”， 其后缀数组为： a ana anana banana na nana 扫描一次数组，比较相邻子串，找到相邻子串的最长公共前缀即可。本例为”ana”， 其中一个a是重叠的。 后缀数组是处理字符串的有力工具，常见的两种实现方法是：倍增算法和DC3算法。 推荐阅读以下材料来学习后缀数组： 许智磊，《后缀数组》 罗穗骞，《后缀数组——处理字符串的有力工具》","text_tokens":["重复","不是","相邻","总会","到","多少","void","界线","散","减少","指向","外部","this","最后","增加","文本","考虑","旋转","有用","严苛","tops","3.14","数据压缩"," ","显而易见","heapsort","即","}","don","26","genshuf","根本","二次曲线","要求","例如","无关紧要","解释","某种","》","kernighan","这些","data","大概","十分","两种","出来","结果","验证","变得","检验","单元","功能","压缩","十分必要","tein","返回","好意思","差别","恰当","201","公式化","两","分解成","很大","中","点","自动化","同时","begin","让","提供","读取","等式","二步","一天","抽象","进入","比较","等待","或","有时","原理","对","随机","32","层次","同样","多种","领域","几分","本章","有时候","全部","nd","被","butler","pc","解决","左向","当然","占用","131","找到","汇编语言","3.0","每次","其值","退化","上面","这个","依次","stop","模糊","当","单位","word","算法","人们","时","出","空间","真的","一组","详细","经过","类推","次","组织","思路","给","sedgewick","一切","回答","b","像","搜索","对系统","论文","层面","大全","表格","流速","上来","约","_","int","非常简单","小规模","nana","genknuth","具有","推论","退回","n","元素","加载","quicksort","工具","内","过","发明家","algorithms","robert","容量","字典","kmax","事","小学","哦","aho","都","row","高级","缓解","尽量少","额外","下来","无计可施","《","insertsort","以往","基本","简单","无关","computer","插入排序","谨慎","临时文件","lampson","正整数","m","darrell","树","整数","是因为","强调","如下","出现","就是",">","觉得","面积","两次","粗略","或是","得出","移动","跑","衍生","建立","起点","分割","minimum","磁盘空间","有把握","并且","可维护性","容易","rchild","1.25","紧要","乘积","结构","适用","熟练掌握","insert","无法","assert","6","用功","solve",")","常识","struct","太","清晰","而","向前走","每个","过程","000b","这点","怎么","签名","出处","否则","示意图","多个","前","为什么","文字","分界","题目","一般性","在","首","最长","河水","一步","fred","现在","几种","出水口","hints","二分","原","true","经验","增长","其实不然","是否","估计","开始","回收","有力","地方","求解","换成","一次","searching","不","冗长","左右","一点","利用","速率","值时","尽量","为止","宽","函数","make","这样","差不多","修改","秒钟","wstein","查找","值非","左","为","=","不难","private","比如","模型","某项","下面","下","sort","是","2mb","creative","str","cormen","对应","只是","相关","。","约束","分","表只","划分","通常","120","抛出","积累","'","可用","了解","10402b","重点","不同","没有","000","也许","条","解决方案","二","起来","it","不然","效果","也就是说","初","性能","二叉","statistics","出口","anana","set","知道","万事俱备","集成","node","电子表格","so","作者","取样","所在","else","摆摆","没法","return","25","总体","fast","监视","位移","20","40","许智磊","下手","才能","小时","节省","计算机系统","呢","性质","brooks","维护","想","临时","骞","根源","该","我该","程序设计","模糊不清","分配","材料","这是","授权","必要","c++","这时","一起","重叠","英语","nc","每","remove","年","q","介绍","假设","致命","二次","写出","find","堆","size","面对","构成","排","存储空间","pi","8","大","10000","中有","电子表","认为","cbahgfed","t","优化","通过","奇效","pointnum","编写","null","因此","效率","可以","~","对块","非常复杂","了","三个","直到","endl","public","很","挖掘","序列表","无从","每条","编码","system","a","ein","分组","千分之","skip","实践","打乱","x10","根据","估算","悲剧","种","排中","数值","截面积","steve","推荐","每天","mcconnell","inordertraver","201x2b","head","*","分界线","适当","david","如何","表快","具体","转换","情况","头","准确","谱","iterator","del","继续","做","翻转","答案","解释程序","200x200x4b","--","角度","by","看起来","浪费","三步","近似","原则","inline","前面","愣","抽样","允许","^","const","递归","\\","{","能答","或者","volume","不断","造成","dc3","小学生","是从","亿次","使","bitmap","更","能够","同质","最终","ana","法则","电子","的","project","i","24.8","产生","201x4b","二维","]","本身","一快","输出","秒","保证","低层次","删除","进行","大于","编程","实际","并","partition","第三步","txt","那些","leiserson","不要","一个","最大值","亿个","有值","rivest","只","of","离谱","什么","逗留","大值","停留","不如","费米","某","插入","前缀","队伍","观察","长","子串","firstincol","发明","停","10001","五","运动","已经","非常","人","awstein","程序","遇到","开篇","密西西","正确","strcmp","为空","比如说","确定","群以","如果","系统","无计","的话","main","dst","右向","随机抽样","解题","范围","条件","深","右","那","离开","显得",";","做出","译成","|","mb","那样","词","几乎","熟练","退出","1mb","16.8","用快","特别","-","文件","高层次","对象","sizeof","数","structures","k","几个","just","乘","自己","硬件","之前","设计","关联","小于","几条","错误","懂得","测试","万次","改变","一部","内容","first","！","cin","fermi","满足","分析","进一步","定义","文中","之","循环","交换","以","俱备","协议","矩形","实际上","理解","讲述","开","with","各自","作用","问","限制","看出","行","2000x12b","greater","显而","维护性","结合","second","时文","方面","一慢","再","替换","它会","命令","说明","第二步","cmp","所","未必","但","o","东西","使用","三维空间","方法","容纳","密西","叫","the","好意","共","初始化","出水","相互","160kb","换去","展示","false","｜","手工","1000","基于","无从下手","钱","选择","去除","<","”","在位","3","代码","啊哈","据库","存在","自由","!","创建","maximum","意味着","快排","误差","听过","意图","后面","编程语言","knodesize","把","追加","摆手","面试","图","对于","来自","于","流量","而是","pots","last","这时候","相应","其余","不用","接下","集合","投资","nodes","还","小","这里","little","几分钟","makeheap","换来","由于","模块","擅长","这样一来","7","记录","huff","决定","map","cbadefgh","河","1","knuth","程序结构","root","function","增序","并用","10","%","格式","灾害","一章","提出","更快","个数","“","以下","本例","目前","向上","答","上","bst","自动","机器","200","十米","thiner","吧","大型","预估","sorting","高层","放到","abcdefgh","数据结构","style","排列","几十米","忽视","阅读","单链","qsort","箱","牺牲","正确性","此","左边","...","其它","所有","最大","安全","成熟","程序员","解脱","列","字符串","趋势","seed","纲要","例子","英尺","z","defghabc","未","hash","尤为","之类","异常","单纯",",","至少","仿真","模式","保持","相当","翻倍","next","所以","practice","表","见","hopcroft","相差","下图","colhead","第一步","(","class","差","lie","第一个","计数","可","多长","千分","真","应该","避免","哪","事情","cutoff","块","taocp","堆中","static","变化","if","3%","一维","不能","第二","许多","需求","表述","guide","封装","链接","适合","两点","约等于","成","这么","多长时间","悖论","art","之后","和","忽略","平衡","一条","200x4b","本文","废弃","变成","后缀","parent","之间","担心","一种","指针","猛","多","策略","仔细","9","夜总会","关键","r","维空间","切切实实","又","纳","算机","为类","还要","memset","然后","力量","4","直接","水口","子表","处理","比","很多","值得","以及","变为","id","software","gries","数据库","规模","j","分解","天","[","hawstein","，","良好","字节","盘子","安全系数","转载","归并","速度","聚集","72","位置","深入","\"","各章","short","关键词","快速","来","successor","中间","值","randint","com","任何","他","物理","100","几十","nlogn","次数","系统结构","less","就","掌握","链表","程序运行","文书","只能","to","单个","注明","来讲","and","戳","变量","各个","公式","吗","地","操作","将","一部分","活跃","采用","我们","意思","5","倍增","low","不大","优雅","分别","lchild","所指","两边","banana","适宜","2","翻译成","神话","思考","2x2000x4b","2013","一般","动手","章","就是说","survival","4b","kwordsize","不用说","技巧","另","着重","不多","y","estimate","16804b","反而","提示","截面","磁盘","对话","主存","in","部分","行有","break","google","快","complete","还有","html","从图","其中","流出","cout","保存","请","提到","stein","讲","长度","快慢","r%","：","组合成","posts","去","检查","个","里","是否是","一块","记住","个字符","列表","用","小而美","调优","英里","哈希","reverse","august","定律","真正","给定","说","字符","有","靠","程序验证","250","非","则","围绕","三维","shiftup","选用","得到","一下","它们","提高","单向","这","算式","bigrand","rapid","物体","入门","为重","初始","量纲","一致","地帮","名字","变位","&","重要","时候","无用功","懂","等","一笔","系统软件","khashsize","重新","～","已","因素","不过","研究","无需","2000","左侧","断言","美观","关于","ctci","有效","我","好","这种","code","方式","位","至多","一本","长时间","要","往往","24800b","从","上百","实现","一样","多方","充足","2000x4b","其","会","拿出","掉","分布","切实","相互之间","方案","系数","试题","所示","后","改进","所在位置","移","讨论",":","数组","双向","才","世纪","左向右","两侧","通用","鼓励","只有","术语","运行","载入","high","具备","些","解答","视图","把握","有人","introduction","堆排序","转换成","向下","commons","第一","一来","中学","地址","也","上述","最","；","署名","彻底","垃圾","单词","扫描","多方面","水","slow","设置","0","超文本","换来换去","月","0x7fffffff","表示","复杂度","万事",".","存储","2000x1b","how","版本","两个","特定","事实","由","平均","显然","达到","出入","problem","状况","词集","按照","说不定","可是","时才","单元测试","步来","需","菌","超过","即可","还是","顺序","确信","右边","里面","先","20000","机系统","完成","流是","位为","次要","向前","举个","尽可能","40000","计算","计算机","字母","没","翻译","为些","看到","因为","常识性","kb","密西西比河","若干","实实","选","展开","合成","大约","正在","公共","无用","那么","尽可","++","从而","怎样","gensets","它","给出","调试","不定","？","elements","接下来","development","量","及","相同","足够","下标","内部","主要","意味","危及","design","技术","第","罗穗","欠","while","火爆","关注","具体化","集中","语言","米","其他","事实上","/","变化趋势","大量","序","更好","商用","复杂","利率","shiftdown","称为","问题","可能","学生","得","学习","组合","s","swap","常常","一次性","低层","序列","针对","看起","+","向量","时间","前为","end","起","摆摆手","目前为止","赋值","需要","分钟","切切","与","分为","声明","功能性","提升","10.4","软件","unsigned","关紧","找出","书籍","结束","代入","形成","位是","年利率","活动","排序","形式","for","曲线","java","向","告诉","predecessor","排除","子","第三","¶","c","知识","调用","示意","string","规定","优秀","强大","反应","p","一些","na","pearls","数据","次序","西西","ullman","简化","有序","chapter","char","某个","建议","英语单词","必须","&&","线性","机器语言","能","稀疏","insertsort1","易见","常见","列中","尤为重要","一半","一","polya","按","办法","24","矩阵","plauger","随着","所学","求得","seminumerical","60","右侧","却","汇编","bool","你","很快","science","包含","—","bkdr","x","pivot","等于","慢","词典","极佳","进阶","测试程序","数量","注意","programming","其实","排要","一道","11","相似","输入","面试题","心力","改为"],"title":"180720 2","title_tokens":["180720","2"," "]},{"location":"docs/digest/180720_2/#_1","text":"具体化你的解决的问题。下面是A和B的对话。 A：我该如何对磁盘文件进行排序？ B：需要排序的内容是什么？文件中有多少条记录？每个记录的格式是什么？ A：该文件包含至多10,000,000个记录，每条记录都是一个7位整数。 B：如果文件那么小，为什么要使用磁盘排序呢？为什么不在主存中对它排序？ A：该功能是某大型系统中的一部分，大概只能提供1MB主存给它。 B：你能将记录方面的内容说得更详细一些吗？ A：每个记录是一个7位正整数，没有其它的关联数据，每个整数至多只能出现一次。 ... ... 经过一系统的问题，我们可以将一个定义模糊不清的问题变得具体而清晰： 输入： 所输入的是一个文件，至多包含n个正整数，每个正整数都要小于n，这里n=10^7。 如果输入时某一个整数出现了两次，就会产生一个致命的错误。 这些整数与其它任何数据都不关联。 输出： 以增序形式输出经过排序的整数列表。 约束： 大概有1MB的可用主存，但可用磁盘空间充足。运行时间至多允许几分钟， 10秒钟是最适宜的运行时间。 如果主存容量不是严苛地限制在1MB，比如说可以是1MB多，或是1~2MB之间， 那么我们就可以一次性将所有数据都加载到主存中，用Bitmap来做。 10,000,000个数就需要10,000,000位，也就是10,000,000b = 1.25MB。 程序可分为三个部分：第一，初始化所有的位为0；第二，读取文件中每个整数， 如果该整数对应的位已经为1，说明前面已经出现过这个整数，抛出异常，退出程序 (输入要求每个整数都只能出现一次)。否则，将相应的位置1；第三， 检查每个位，如果某个位是1，就写出相应的整数，从而创建已排序的输出文件。 如果主存容量严苛地限制在1MB，而使用Bitmap需要1.25MB， 因此无法一次载入完成排序。那么，我们可以将该文件分割成两个文件， 再分别用Bitmap处理。分割策略可以简单地把前一半的数据放到一个文件， 后一半的数据放到另一个文件，分别排序后再做归并。 也可以把文件中小于某个数(比如5,000,000)的整数放到一个文件，叫less.txt， 把其余的整数放到另一个文件，叫greater.txt。分别排序后， 把greater.txt的排序结果追加到less.txt的排序结果即可。","text_tokens":["出现","该","不是","我该","具体","就是","异常","到","那么","位是","处理","定义","多少","两次","模糊不清","排序","或是","某","形式","从而","第一","小","这里","这个","几分钟","以","也","做","最","分割",",","；","磁盘空间","秒钟","它","模糊","7","初始","另","1.25","记录","已经","为","第三","严苛","？","时","=","空间","程序","，","0","比如","限制"," ","无法","下面","致命","1",".","详细","经过","是","磁盘","写出","已","归并","对话","2mb","主存","greater","一些","部分","前面","给","数据","比如说","位置",")","两个","(","对应","方面","增序","允许","清晰","再","而","要求","^","来","。","b","10","如果","每个","系统","某个","可","这些","000b","说明","能","约束","格式","大概","具体化","位","中有","抛出","至多","所","可用","个数","但","任何","要","结果","使用","bitmap","变得","更","没有","否则","000","叫","条","一半","即可","前","功能","一","因此","n","为什么","less","初始化","问题","在","可以","充足","加载","第二","就","的","mb","大型","过","~","会","成","了","退出","放到","产生","1mb","得","三个","：","你","容量","和","只能","完成","包含","文件","每条","一次性","位为","数","中","检查","个","a","都","提供","读取","后","输出","创建","吗","地","时间","将","列表","用","进行","一部分","关联","小于","之间","...","其它","错误","多","我们","策略","5","对","把","需要","追加","分钟","所有","简单","与","分为","呢","txt","一部","内容","说","运行","几分","载入","一个","输入","分别","正整数","如何","解决","有","什么","一次","相应","适宜","不","其余","整数"],"title":"开篇","title_tokens":["开篇"]},{"location":"docs/digest/180720_2/#_2","text":"第2章围绕3个问题展开。 给定一个包含32位整数的顺序文件，它至多只能包含40亿个这样的整数， 并且整数的次序是随机的。请查找一个此文件中不存在的32位整数。 在有足够主存的情况下，你会如何解决这个问题？ 如果你可以使用若干外部临时文件，但可用主存却只有上百字节， 你会如何解决这个问题？ 这是CTCI中的一道题目，详细解答请戳以下链接： 请猛戳我 请将一个具有n个元素的一维向量向左旋转i个位置。例如，假设n=8,i=3， 那么向量abcdefgh旋转之后得到向量defghabc。 这个问题很常见了，做3次翻转即可，无需额外空间： reverse ( 0 , i - 1 ); // cbadefgh reverse ( i , n - 1 ); // cbahgfed reverse ( 0 , n - 1 ); // defghabc 给定一本英语单词词典，请找出所有的变位词集。例如，因为“pots”， “stop”，“tops”相互之间都是由另一个词的各个字母改变序列而构成的， 因此这些词相互之间就是变位词。 这个问题可以分3步来解决。第一步将每个单词按字典序排序， 做为原单词的签名，这样一来，变位词就会具有相同的签名。 第二步对所有的单词按照其签名进行排序，这样一来，变位词就会聚集到一起。 第三步将变位词分组，形成变位词集。示意图如下：","text_tokens":["如下","就是","到","围绕","那么","情况","得到","章","排序","第一","一来","这个","外部","这样","这是","做","翻转",",","向","并且","查找","它","stop","这样一来","左","单词","另","一起","旋转","为","第三","？","tops","英语","=","空间","，","0","变位","示意","相同"," ","假设","足够","cbadefgh","字节","1","详细","下","三步","次","是","无需","主存","聚集","构成","位置","第一步",")","次序","时文","ctci","(","我","第","而","例如","。","如果","每个","英语单词","由","8","这些","第二步","分","位","至多","词集","一本","可用","按照","但","“","以下","使用","签名","/","cbahgfed","步来","具有","常见","上百","示意图","序","即可",";","请","因此","n","元素","按","题目","一维","问题","在","可以","第二","其","就","的","词","链接","相互","顺序","会","i","了","abcdefgh","却","：","你","字典","之后","只能","很","-","包含","文件","相互之间","一步","中","3","戳","”","个","存在","都","各个","序列","二步","原","分组","向量","词典","意图","额外","字母","将","此","进行","之间","因为","猛","对","随机","40","reverse","32","只有","若干","所有","第三步","给定","展开","改变","一道","一个","亿个","找出","临时文件","解答","如何","有","解决","defghabc","pots","2","不","形成","临时","整数"],"title":"啊哈！算法","title_tokens":["！","算法","啊哈"]},{"location":"docs/digest/180720_2/#_3","text":"恰当的数据视图实际上决定了程序的结构。 我们常常可以通过重新组织内部数据来使程序变得小而美。 发明家悖论：更一般性的问题也许更容易解决。(有时候吧) 程序员在节省空间方面无计可施时，将自己从代码中解脱出来， 退回起点并集中心力研究数据，常常能有奇效。数据的表示形式是程序设计的根本。 下面是退回起点进行思考时的几条原则： 使用数组重新编写重复代码。冗长的相似代码常常可以使用最简单的数据结构—— 数组来更好地表述。 封装复杂结构。当需要非常复杂的数据结构时，使用抽象术语进行定义， 并将操作表示为类。 尽可能使用高级工具。超文本，名字-值对，电子表格，数据库， 编程语言等都是特定问题领域中的强大的工具。 从数据得出程序的结构。在动手编写代码之前，优秀的程序员会彻底理解输入， 输出和中间数据结构，并围绕这些结构创建程序。 提到的书籍：Polya的《How to Solve it》，中文书《怎样解题》； Kernighan和Plauger的《Elements of Programming Style》；Fred Brooks的《人月神话》 Steve McConnell的《代码大全》；《Rapid Development》； 《Software Project Survival Guide》","text_tokens":["思考","重复","子表","程序设计","围绕","定义","一般","动手","尽可","得出","形式","怎样","software","数据库","rapid","survival","起点","最","；","发明","文本","容易","当","彻底","实际上","理解","非常","决定","elements","时","人","结构","程序","空间","，","名字","超文本","development","月"," ","时候","表示","下面","等","内部","优秀","重新","强大","是","组织","原则","研究","how","solve","数据",")","根本","(","方面","特定","来","。","无计","》","中间","kernighan","这些","能","解题","集中","语言","大全","表格","值","电子表","出来","使","使用","变得","更","从","通过","奇效","也许","编写","更好","复杂","退回","polya","it","一般性","电子","可以","问题","在","提到","吧","的","恰当","工具","plauger","表述","guide","封装","project","可能","会","非常复杂","发明家","了","悖论","：","文书","数据结构","和","-","to","style","常常","—","代码","中","fred","电子表格","据库","都","输出","创建","抽象","自己","尽可能","地","高级","之前","数组","设计","操作","将","无计可施","进行","几条","《","有时","我们","小而美","编程语言","编程","对","实际","需要","并","steve","简单","programming","节省","术语","领域","程序员","mcconnell","解脱","有时候","相似","brooks","输入","为类","视图","of","解决","有","书籍","冗长","心力","神话"],"title":"数据决定程序结构","title_tokens":["程序结构","决定","数据","结构","程序"]},{"location":"docs/digest/180720_2/#_4","text":"本章以二分搜索为例子，讲述了如何对程序进行验证及正确性分析。 深入阅读：David Gries的《Science of Programming》 是程序验证领域里极佳的一本入门书籍。","text_tokens":["是","正确性","进行","《","极佳","深入","的","对","以","gries","。","入门","了","programming","：","》","领域","搜索","science","本章","为","讲述","一本","例子","程序","里","，","david","of","如何","二分","及","书籍","验证","阅读"," ","程序验证","分析","正确"],"title":"编写正确的程序","title_tokens":["的","正确","编写","程序"]},{"location":"docs/digest/180720_2/#_5","text":"到目前为止，你已经做了一切该做的事：通过深入挖掘定义了正确的问题， 通过仔细选择算法和数据结构平衡了真正的需求，通过程序验证技术写出了优雅的代码， 并且对其正确性相当有把握。万事俱备，只欠编程。 使用断言assert 自动化测试程序 进阶阅读：《Practice of Programming》第5章(调试)，第6章(测试) 《Code Complete》第25章(单元测试)，第26章(调试)","text_tokens":["该","到","定义","章","为止","做","俱备","有把握","并且","相当","调试","算法","已经","结构","程序","，","practice"," ","万事","assert","6","正确","写出","26","断言","深入","数据","一切",")","(","技术","第","。","complete","欠","》","code","使用","验证","目前","单元测试","通过","单元","自动","问题","其","的","需求","了","：","你","数据结构","和","挖掘","事","平衡","万事俱备","选择","代码","自动化","阅读","前为","正确性","25","《","进阶","测试程序","目前为止","编程","5","对","仔细","测试","programming","真正","优雅","只","of","把握","程序验证"],"title":"编程中的次要问题","title_tokens":["的","编程","次要","问题","中"]},{"location":"docs/digest/180720_2/#_6","text":"下图展示了一个程序的性能提升过程， 该程序的作用是对三维空间中n个物体的运动进行仿真。从图中可以看出， 一个程序可以从多方面进行性能提升，而其中算法和数据结构的选择又显得尤为重要。 从设计层面提升程序性能： 问题定义。良好的问题定义可以有效减少程序运行时间和程序长度。 系统结构。将大型系统分解成模块，也许是决定其性能的最重要的单个因素。 算法和数据结构。这个不用说了。 代码调优。针对代码本身的改进。 系统软件。有时候改变系统所基于的软件比改变系统本身更容易。 硬件。更快的硬件可以提高系统的性能。 深入阅读：Butler Lampson的“Hints for Computer System Design”， 该论文特别适合于集成硬件和软件的计算机系统设计。","text_tokens":["尤为","该","三维","定义","比","减少","提高","这个","for","物体","最","为重","模块","不用说","仿真","分解","容易","算法","运动","多方面","决定","结构","程序","空间","，","良好","作用","重要"," ","时候","看出","系统软件","是","因素","design","下图","数据","深入","有效","方面","而","。","系统","过程","更快","论文","层面","所","从图","“","其中","三维空间","更","从","显得","也许","尤为重要","n","系统结构","多方","可以","问题","其","的","大型","适合","长度","展示","了","程序运行","：","基于","数据结构","机系统","性能","和","特别","单个","分解成","选择","集成","本身","中","代码","”","system","个","hints","阅读","改进","针对","计算","硬件","计算机","设计","时间","将","进行","有时","对","调优","计算机系统","改变","运行","提升","维空间","一个","软件","有时候","又","computer","lampson","于","算机","butler","不用"],"title":"程序性能分析","title_tokens":["分析","程序","性能"]},{"location":"docs/digest/180720_2/#_7","text":"这一章讲述了估算技术，我认为是相当有用的一章。 文中先抛出一个问题：密西西比河一天流出多少水？如果让你来回答， 你会怎么答，注意不能去Google哦。 作者是这么回答这个问题：假设河的出口大约有1英里宽和20英尺深(1/250英里)， 而河水的流速是每小时5英里，也就是每天120英里。则可以计算出一天的流量： 1英里 * 1/250英里 * 120英里/天 约等于 1/2 英里^3/天 上述算式非常简单，可是在看到这些文字之前，如果有人真的问你， 密西西比河一天流出多少水？你真的能答上来吗？还是愣了一下后，摆摆手，说： 这我哪知道！ 对于上面的问题，我们至少可以注意到以下两点： 你需要把问题转换成一个可计算的具体模型。这一点往往不需要太担心， 因为我们做的是估算，所以可以忽视很多无关紧要的因素，可以去简化你的模型， 记住我们要的只是一个粗略计算的结果。比如对于上面的问题， 计算密西西比河一天流出多少水其实就是计算其一天的流量，利用中学所学知识， 流量 = 截面积 x 流速，那我们就只需计算密西西比河的出水口的截面积和流速即可。 我们可以将出水口简化成一个矩形，因此就只需要知道出水口的宽和深即可。 你需要知道常识性的东西。上面我们已经把问题转换成了一个可计算的具体模型： 流量 = 出水口宽 x 出水口深 x 流速。接下来呢？你需要代入具体的数值去求得答案。 而这就需要你具备一些常识性的知识了。比如作者就估计了密西西比河的出口有1英里宽， 20英尺深(如果你估计只有几十米宽，那就相差得太离谱了)。 这些常识性的知识比第1点更值得关注，因为你无法给出一个靠谱的估算值往往是因为这点。 当我们懂得如何把一个问题具体化定义出来并为其选用适当的模型， 并且我们也积累了必要的常识性的知识后，回答那些初看起来无从下手的问题也就不难了。 这就是估算的力量。 以下是估算时的一些有用提示： 两个答案比一个答案好。即鼓励你从多个角度去对一个问题进行估算， 如果从不同角度得到的答案差别都不大，说明这个估算值是比较靠谱的。 快速检验。即量纲检验。即等式两边最终的量纲要一致。 这一点在等式简单的时候相当显而易见。比如位移的单位是米，时间单位是秒， 速度单位是米/秒，那显然我们应该要用位移去除以时间来得到速度， 这样才能保证它们单位的一致。你可能会说，我了个去，这种小学生都懂的事， 你好意思拿出来讲。其实不然，当你面对的是一个具有多个变量的复杂物理公式， 或者你提出某种物理假设，正在考虑将其公式化，该方法可以切切实实地帮你做出检验。 经验法则。“72法则”：1.假设以年利率r%投资一笔钱y年，如果r*y = 72， 那么你的投资差不多会翻倍。2.如果一个盘子里的菌群以每小时3%的速率增长， 那么其数量每天(24小时)都会翻倍。在误差不超过千分之五的情况下， \\pi秒就是一个纳世纪。也就是说： 3.14秒 = 10^(-9) * 100年 = 10^(-7) 年 也就是说，1年大概是3.14x10^7 秒。所以如果有人告诉你，一个程序运行10^7 秒， 你应该能很快反应出，他说的其实是4个月。 实践。与许多其他活动一样，估算技巧只能通过实践来提高。 如果问题的规模太大，我们还可以通过求解它的小规模同质问题来做估算。比如， 我们想测试某个程序运行10亿次需要多长时间，如果你真去跑10亿次， 说不定运行几个小时都没结束，那不是很悲剧？我们可以运行这个程序1万次或是10万次， 得出结果然后倍增它即可。当然，这个结果未必是准确的， 因为你没法保证运行时间是随着运行次数线性增加的。谨慎起见，我们可以运行不同的次数， 来观察它的变化趋势。比如运行10次，100次，1000次，10000次等， 观察它的运行时间是否是线性增加的，或是一条二次曲线。 有时候，我们需要为估算的结果乘上一个安全系数。比如， 我们预估完成某项功能需要时间t，那根据以往经验，也许我们需要为这个值乘上2或4， 这样也许才是一个靠谱的预估值。 Little定律：系统中物体的平均数量等于物体离开系统的平均速率和每个物体在系统中停留 的平均时间的乘积。(如果物体离开和进入系统的总体出入流是平衡的， 那么离开速率也就是进入速率) 举个例子，比如你正在排除等待进入一个火爆的夜总会， 你可以通过估计人们进入的速率来了解自己还要等待多长时间。根据Little定律， 你可以推论：这个地方可以容纳约60人，每个人在里面逗留时间大约是3小时， 因此我们进入夜总会的速率大概是每小时20人。现在队伍中我们前面还有20人， 也就意味着我们还要等待大约一个小时。 深入阅读：Darrell Huff的《How To Lie With Statistics》；关键词： 费米近似(Fermi estimate, Fermi problem)","text_tokens":["该","不是","则","总会","到","多少","选用","得到","一下","它们","提高","还","little","这","算式","物体","增加","必要","7","考虑","量纲","有用","一致","huff","3.14","每","地帮","年"," ","假设","河","时候","显而易见","懂","一笔","等","1","即","二次","因素","面对","我","好","pi","二次曲线","10","无关紧要","某种","这种","》","这些","一章","提出","大概","大","10000","“","以下","长时间","要","认为","结果","出来","往往","检验","t","从","通过","答","上","功能","因此","一样","十米","可以","好意思","其","差别","会","预估","了","拿出","公式化","很","切实","无从","系数","中","点","几十米","忽视","让","阅读","后","等式","一天","进入","比较","等待","千分之","或","实践","才","x10","根据","世纪","估算","有时","悲剧","对","鼓励","数值","截面积","只有","安全","每天","运行","有时候","具备","趋势","纲要","*","例子","英尺","适当","如何","有人","当然","转换成","转换","具体","情况","准确","上面","谱","这个","中学","也","做","上述","答案","至少","；",",","相当","当","翻倍","单位","人们","出","时","角度","水","真的","所以","月","见",".","看起来","近似","次","相差","how","前面","两个","(","回答","愣","lie","^","可","\\","平均","显然","能答","或者","多长","出入","problem","流速","上来","千分","约","说不定","真","可是","应该","非常简单","小学生","小规模","哪","亿次","需","更","具有","菌","同质","推论","超过","最终","即可","变化","还是","3%","法则","不能","许多","的","两点","约等于","成","这么","多长时间","里面","先","和","完成","流是","事","平衡","小学","哦","一条","都","举个","秒","计算","保证","下来","没","进行","看到","《","担心","因为","常识性","密西西比河","并","以往","9","简单","夜总会","实实","那些","无关","关键","r","一个","大约","正在","切切实实","纳","谨慎","只","还要","darrell","离谱","然后","逗留","力量","是因为","4","停留","水口","就是","那么","费米","很多","面积","比","值得","粗略","或是","得出","队伍","跑","观察","规模","并且","它","天","给出","五","不定","已经","非常","？","紧要","人","乘积","接下来","程序","，","量","无法","盘子","密西西","意味","安全系数","速度","72","深入",")","常识","太","技术","第","关键词","快速","群以","而","来","如果","每个","系统","这点","火爆","关注","具体化","值","米","其他","他","怎么","深","物理","/","那","100","离开","变化趋势","几十","多个","复杂","次数","做出","利率","文字","问题","在","就","可能","河水","学生","得","程序运行","来讲","-","只能","to","现在","变量","出水口","几个","乘","公式","自己","吗","看起","之前","经验","时间","将","增长","起","摆摆手","其实不然","是否","意思","我们","懂得","5","估计","需要","倍增","切切","测试","与","万次","不大","！","关紧","地方","求解","两边","fermi","换成","结束","2","不","代入","一点","利用","速率","定义","文中","年利率","活动","宽","以","这样","曲线","就是说","差不多","技巧","矩形","告诉","排除","为","讲述","with","=","知识","不难","模型","问","比如","不多","某项","y","estimate","下","提示","是","截面","反应","显而","一些","西西","google","简化","只是","。","某个","还有","线性","说明","能","120","抛出","积累","未必","东西","了解","易见","流出","不同","方法","容纳","也许","密西","起来","好意","24","不然","随着","所学","出水","求得","也就是说","60","r%","初","：","你","1000","很快","出口","statistics","知道","无从下手","钱","去除","”","3","去","里","个","x","作者","是否是","记住","意味着","等于","误差","摆摆","没法","用","总体","位移","数量","注意","英里","20","把","下手","摆手","定律","才能","小时","其实","呢","对于","说","流量","有","想","靠","接下","投资","250"],"title":"粗略估算","title_tokens":["粗略","估算"]},{"location":"docs/digest/180720_2/#_8","text":"这一章就一个小问题研究了4种不同的算法，重点强调这些算法的设计技术。 研究的这个小问题是一个非常常见的面试题：子数组之和的最大值。 如果之前没有听过，建议Google之。 深入阅读：Aho,Hopcroft和Ullman的《Data Structures and Algorithms》 Cormen,Leiserson,Rivest和Stein的《Introduction to Algorithms》","text_tokens":["数组","强调","设计","是","研究","《","问题","深入","之","ullman","cormen","google","小","就","的","技术","这个","种","stein","这","。","algorithms","了","面试","如果",",","建议","：","最大","》","这些","和","data","leiserson","to","一章","算法","子","一个","非常","and","最大值","试题","面试题","structures","，","aho","rivest","阅读","听过","重点"," ","不同","introduction","没有","hopcroft","常见","之前","4","大值"],"title":"算法设计技术","title_tokens":["设计","技术","算法"]},{"location":"docs/digest/180720_2/#_9","text":"前面各章讨论了提高程序效率的高层次方法：问题定义，系统结构， 算法设计及数据结构选择。本章讨论的则是低层次的方法：代码调优。 代码调优的最重要原理就是尽量少用它。不成熟的优化是大量编程灾害的根源。 它会危及程序的正确性，功能性以及可维护性。当效率很重要时， 第一步就是对系统进行性能监视，以确定其运行时间的分布状况。 效率问题可以由多种方法来解决，只有在确信没有更好的解决方案时才考虑进行代码调优。 事实上，如果不是十分十分必要，不要去做代码调优， 因为它会牺牲掉软件的其他许多性质。 so，just skip this chapter。","text_tokens":["根源","就是","不是","则","定义","尽量","以及","提高","第一","以","做","this","最","必要","可维护性","它","当","考虑","算法","时","结构","程序","，","及","重要"," ","正确","是","危及","维护性","前面","数据","第一步","各章","确定","事实","chapter","来","。","它会","如果","系统","由","灾害","十分","对系统","状况","其他","事实上","时才","方法","优化","没有","大量","解决方案","更好","功能","系统结构","效率","十分必要","问题","可以","在","许多","其","的","高层","确信","了","：","数据结构","掉","性能","分布","很","高层次","方案","选择","低层","一步","代码","去","so","just","讨论","牺牲","设计","低层次","尽量少","时间","skip","正确性","用","进行","因为","监视","原理","编程","调优","只有","层次","多种","功能性","成熟","性质","运行","不要","本章","软件","维护","解决","不"],"title":"代码调优","title_tokens":["代码","调优"]},{"location":"docs/digest/180720_2/#_10","text":"本章讲述了节省空间的一些重要方法。 减少程序所需数据的存储空间，一般有以下方法： 不存储，重新计算。 稀疏数据结构。下面着重讲一下这点。 数据压缩。可以通过压缩的方式对对象进行编码，以减少存储空间。 分配策略。只有在需要的时候才进行分配。 垃圾回收。对废弃的存储空间进行回收再利用。 以下是节省代码空间的几种通用技术： 函数定义。用函数替换代码中的常见模式可以简化程序，同时减少代码的空间需求。 解释程序。用解释程序命令替换长的程序文本。 翻译成机器语言。可以将大型系统中的关键部分用汇编语言进行手工编码。","text_tokens":["汇编语言","利用","定义","一般","一下","函数","减少","分配","以","长","解释程序","模式","文本","垃圾","着重","讲述","结构","程序","空间","，","数据压缩","重要"," ","时候","下面","重新","存储","是","一些","部分","数据","简化","存储空间","技术","再","替换","。","命令","解释","系统","机器语言","这点","方式","稀疏","语言","所","以下","需","方法","通过","常见","机器","译成","压缩","可以","在","的","需求","大型","讲","了","手工","汇编","：","数据结构","对象","代码","编码","中","几种","同时","计算","废弃","才","将","用","翻译","进行","通用","策略","对","需要","只有","节省","回收","关键","本章","有","不","翻译成"],"title":"节省空间","title_tokens":["空间","节省"]},{"location":"docs/digest/180720_2/#_11","text":"假设我们有一个200 x 200的矩阵(共40000个元素)，里面只有2000个元素有值， 其它的都为0，示意图如下： 显然这是一个稀疏矩阵，直接用一个200 x 200 的二维数组来存储这些数据会造成大量的空间浪费，共需要200x200x4B=160KB。 所以，我们应该想办法用另一种形式来存储这些数据。","text_tokens":["示意图","意图","如下","直接","数组","存储","2000","用","200","共","元素","其它","数据","办法","一种",")","形式","(","我们","矩阵","的","这是","会","只有","需要","160kb","来","。","里面","：","这些","二维","另","显然","一个","为","200x200x4b","稀疏","造成","有值","=","空间","应该","个","，","x","0","所以","有","都","示意","想","假设"," ","40000","浪费","大量"],"title":"稀疏数据结构","title_tokens":["数据","数据结构","结构","稀疏"]},{"location":"docs/digest/180720_2/#_12","text":"使用数组表示所有的列，同时使用链表来表示给定列中的活跃元素。 如下图所示： 该结构中，有200个指针(colhead)和2000条记录(每条记录是两个整数和一个指针)， 占用空间是200x4B + 2000x12B = 24800B = 24.8KB， 比直接用二维数组存储(160KB)要小很多。","text_tokens":["数组","条","如下","是","直接","存储","该","2000","用","200","元素","比","很多","指针","两个","colhead","活跃",")","(","小","的","kb","160kb","24.8","来","所有","。","链表","图","：","给定","二维","和","记录","2000x12b","列","一个","每条","结构","中","=","空间","，","个","要","同时","有","200x4b","使用","所示","24800b"," ","表示","占用","+","整数","列中"],"title":"方法一","title_tokens":["一","方法"]},{"location":"docs/digest/180720_2/#_13","text":"我们可以开三个数组来保存这些数，如下图所示： firstincol是一个长度为201的数组，对于第i列，在数组row中， 下标为firstincol[i]到firstincol[i+1]-1对应的行元素非0， 其值存储在相应的pointnum数组中。 比如对于上图，在第0列中，元素值非0的行有3行，分别是row[0],row[1],row[2], 元素值是pointnum[0],pointnum[1],pointnum[2]；在第1列中，元素值非0的行有2行， 分别是row[3],row[4]，元素值是pointnum[3],pointnum[4]。依次类推。 该结构所需要的存储空间为2x2000x4B + 201x4B = 16804B = 16.8KB。 由于row数组中的元素全部都小于200，所以每个元素可以用一个unsigned char来保存， firstincol数组中元素最大也就2000，所以可以用一个short(或unsigned short)来保存， pointnum中的元素是一个4B的int， 最终所需空间变为：2000x4B + 2000x1B + 201x2B = 10402B = 10.4KB。 深入阅读：Fred Brooks的《人月神话》","text_tokens":["如下","非","该","2x2000x4b","到","其值","变为","也","依次","4b","firstincol","由于",",","；","值非","为","[","人","开","结构","=","空间","，","0","所以","比如","月"," ","下标","行","1","16804b","类推","存储","是","2000x1b","2000","行有","深入",")","(","short","对应","存储空间","第","来","char","。","每个","》","这些","值","所","int","10402b","需","pointnum","列中","保存","上","最终","200","元素","可以","在","2000x4b","就","的","长度","i","201x4b","三个","201","16.8","：","]","-","数","中","3","fred","所示","都","阅读","row","+","数组","或","用","小于","《","我们","kb","需要","图","最大","对于","10.4","列","一个","全部","unsigned","201x2b","brooks","分别","相应","2","神话","4"],"title":"方法二","title_tokens":["二","方法"]},{"location":"docs/digest/180720_2/#_14","text":"本章先简单介绍了插入排序，然后着重讲述快速排序。","text_tokens":["，","介绍","本章","快速","然后","着重","。","了","讲述","插入排序","排序","简单","先","插入"],"title":"排序","title_tokens":["排序"]},{"location":"docs/digest/180720_2/#_15","text":"// 版本1 void InsertSort ( int a [], int n ) { for ( int i = 1 ; i < n ; ++ i ) for ( int j = i ; j > 0 && a [ j - 1 ] > a [ j ]; -- j ) swap ( a [ j - 1 ], a [ j ]); } // 版本2 void InsertSort1 ( int a [], int n ) { for ( int i = 1 ; i < n ; ++ i ) { int t = a [ i ]; int j = i ; for (; j > 0 && a [ j - 1 ] > t ; -- j ) a [ j ] = a [ j - 1 ]; a [ j ] = t ; } }","text_tokens":["}",";","n",">","版本","void","++",")","(","insertsort","for","i",",","j","&&","swap","]","-","{","[","--","<","=","insertsort1","int","0","a"," ","/","t","2","1"],"title":"插入排序","title_tokens":["插入排序","排序","插入"]},{"location":"docs/digest/180720_2/#_16","text":"我们在这里规定：小于等于pivot的元素移到左边，大于pivot的元素移到右边。","text_tokens":["，","这里","的","到","pivot","左边","小于","元素","右边","。","规定","等于","移","大于","在","：","我们"],"title":"快速排序","title_tokens":["排序","快速"]},{"location":"docs/digest/180720_2/#1","text":"这个版本的关键是设置一快一慢两个指针，慢指针左侧都是小于等于pivot(包含慢指针所在位置)， 慢指针到快指针之间的值是大于pivot，快指针右侧的值是还未比较过的。示意图如下： 小于等于pivot ｜ 大于pivot ｜ ？ slow fast 快指针一次一步向前走，遇到大于pivot什么也不做继续向前走。遇到小于等于pivot的元素， 则慢指针slow向前走一步，然后交换快慢指针指向的元素。一次划分结束后， 再递归对左右两侧的元素进行快排。代码如下： // 数组快排 void QSort ( int a [], int head , int end ) { if ( a == NULL || head == end ) return ; int slow = head , fast = head + 1 ; int pivot = a [ head ]; while ( fast != end ) { if ( a [ fast ] <= pivot ) swap ( a [ ++ slow ], a [ fast ]); ++ fast ; } swap ( a [ head ], a [ slow ]); QSort ( a , head , slow ); QSort ( a , slow + 1 , end ); } 排序数组a只需要调用QSort(a, 0, n)即可。该思路同样可以很容易地在链表上实现： // 单链表快排 void qsort ( Node * head , Node * end ){ if ( head == NULL || head == end ) return ; Node * slow = head , * fast = head -> next ; int pivot = head -> data ; while ( fast != end ){ if ( fast -> data <= pivot ){ slow = slow -> next ; swap ( slow -> data , fast -> data ); } fast = fast -> next ; } swap ( head -> data , slow -> data ); qsort ( head , slow ); qsort ( slow -> next , end ); } 排序头指针为head的单链表只需调用qsort(head, NULL)即可。","text_tokens":["表快","如下","该","则","到",">","头","void","排序","++","还","这个","继续","交换","指向","也","做",",","容易","为","？","[","next","=","slow","，","设置","0","调用","示意"," ","遇到","1","}","是","左侧","思路","版本","两个","位置",")","(","排","一慢","再","向前走","。","快","递归","while","data","表只","{","划分","值","int","/","需","上","示意图","即可","null","实现",";","n","if","元素","|","可以","在","的","过","链表","｜","快慢","右侧","：","swap","]","很","-","包含","<","一步","代码","在位","node","!","a","都","后","一快","pivot","向前","所在","所在位置","单链","qsort","快排","比较","慢","等于","+","地","数组","意图","end","return","进行","小于","之间","fast","大于","两侧","指针","对","需要","同样","关键","head","*","只","未","什么","结束","然后","一次","不","左右"],"title":"实现1：单向移动版本","title_tokens":["实现","单向","1","版本","移动","："]},{"location":"docs/digest/180720_2/#2","text":"版本1能能够快速完成对随机整数数组的排序，但如果数组有序， 或是数组中元素相同，快排的时间复杂度会退化成O(n^2 )，性能变得非常差。 一种缓解方案是使用双向移动版本的快排，它每次划分也是使用两个指针， 不过一个是从左向右移动，一个是从右向左移动，示意图如下： 小于等于pivot ｜ ？ ｜ 大于pivot i j 指针j不断向左移动，直到遇到小于等于pivot，就交换指针i和j所指元素 (指针i一开始指向pivot)；指针i不断向右移动，直到遇到大于pivot的， 就交换指针i和j所指元素。pivot在这个过程中，不断地换来换去， 最终会停在分界线上，分界线左边都是小于等于它的元素，右边都是大于它的元素。 这样就避免了最后还要交换一次pivot的操作，代码也变得美观许多。 int partition ( int a [], int low , int high ){ int pivot = a [ low ], i = low , j = high ; while ( i < j ){ while ( i < j && a [ j ] > pivot ) -- j ; if ( i < j ) swap ( a [ i ], a [ j ]); while ( i < j && a [ i ] <= pivot ) ++ i ; if ( i < j ) swap ( a [ i ], a [ j ]); } return i ; } void quicksort ( int a [], int first , int last ){ if ( first < last ){ int k = partition ( a , first , last ); quicksort ( a , first , k - 1 ); quicksort ( a , k + 1 , last ); } } 当然，如果对于partition函数，你如果觉得大循环内的两个swap还是做了些无用功的话， 也可以把pivot的赋值放到最后一步，而不是在这个过程中swap来swap去的。代码如下： int partition ( int a [], int low , int high ){ int pivot = a [ low ], i = low , j = high ; while ( i < j ){ while ( i < j && a [ j ] > pivot ) -- j ; if ( i < j ) a [ i ++ ] = a [ j ]; while ( i < j && a [ i ] <= pivot ) ++ i ; if ( i < j ) a [ j -- ] = a [ i ]; } a [ i ] = pivot ; return i ; } 如果数组基本有序，那随机选择pivot(而不像上面那样选择第一个做为pivot) 会得到更好的性能。在partition函数里，我们只需要在数组中随机选一个元素， 然后将它和数组中第一个元素交换，后面的划分代码无需改变， 就可以达到随机选择pivot的效果。","text_tokens":["如下","无用","不是",">","觉得","每次","void","得到","排序","界线","或是","退化","移动","++","函数","上面","第一","循环","指向","这个","交换","换来","也","这样","做","最后","；",",","向","停","j","它","左","为","非常","？","[","--","=","，","示意","相同","换来换去"," ","复杂度","无用功","遇到","1","用功","}","是","不过","无需","版本","两个","美观",")","有序","(","差","快速","而","第一个","^","来","。","如果","过程","&&","的话","右向","像","while","能","{","划分","大","达到","不断","但","o","int","是从","避免","使用","变得","右","那","能够","上","示意图","最终","更好","复杂",";","一","n","if","分界","还是","元素","可以","在","许多","quicksort","就","的","内","效果","那样","会","i","换去","成","右边","｜","了","放到","：","你","直到","swap","性能","和","]","-","完成","方案","选择","<","一步","中","代码","去","里","k","a","都","pivot","快排","等于","地","+","数组","时间","缓解","意图","操作","双向","将","后面","return","左边","小于","左向右","大于","一种","指针","赋值","我们","对","随机","把","需要","基本","partition","开始","选","改变","对于","low","first","一个","high","些","分界线","所指","只","还要","last","左向","一次","然后","2","不","当然","整数"],"title":"实现2：双向移动版本","title_tokens":["双向","实现","2","版本","移动","："]},{"location":"docs/digest/180720_2/#_17","text":"对于小数组，用插入排序之类的简单方法来排序反而会更快，因此在快排中， 当数组长度小于某个值时，我们就什么也不做。对应到代码中， 就是修改quicksort中的if条件： if(first < last) 改为 if(last-first > cutoff) 其中cutoff是一个小整数。程序结束时，数组并不是有序的， 而是被组合成一块一块随机排列的值，并且满足这样的条件： 某一块中的元素小于它右边任何块中的元素。我们必须通过另一种排序算法对块内进行排序。 由于数组是几乎有序的，因此插入排序比较适用。 这种方法结合了快排和插入排序，让它们去做各自擅长的事情，往往比单纯用快排要快。 深入阅读：Don Knuth的《The Art of Computer Programming, Volume 3: Sorting and Searching》；Robert Sedgewick的《Algorithms》； 《Algorithms in C》,《Algorithms in C++》,《Algorithms in Java》。","text_tokens":["之类","就是","不是","到",">","比","值时","排序","插入","某","它们","小","也","做","这样","java","单纯","由于","擅长",",","修改","；","并且","c++","当","它","另","算法","时","c","适用","程序","各自","，"," ","knuth","反而","是","don","in","结合","深入","sedgewick",")","(","有序","对应","来","。","某个","快","必须","这种","》","volume","值","任何","其中","条件","往往","事情","cutoff","块","更","方法","通过","the","因此","if","元素","在","quicksort","就","的","内","会","长度","对块","几乎","sorting","右边","algorithms","了","用快","robert","：","组合","art","组合成","和","-","排列","and","<","代码","中","3","去","让","阅读","一块","快排","比较",":","数组","用","进行","小于","《","一种","我们","排中","随机","并","简单","programming","排要","对于","合成","first","一个","插入排序","被","computer","而是","of","last","满足","什么","结束","searching","不","整数","改为"],"title":"进一步优化","title_tokens":["一步","进一步","优化"]},{"location":"docs/digest/180720_2/#_18","text":"本章讲述了一个小的随机抽样问题，并用不同的方法来解决它。 问题：对于整数m和n，其中m<n，输出0~n-1范围内m个随机整数的有序列表， 不允许重复。 比如m=3, n=5，那么一种可能输出是0，2，3(要求有序)。实现1来自Knuth的TAOCP， 时间复杂度O(n)： void GenKnuth ( int m , int n ) { for ( int i = 0 ; i < n ; ++ i ) { if (( bigrand () % ( n - i )) < m ) { cout << i << endl ; -- m ; } } } 其中，bigrand()的作用是返回一个很大的随机整数。 实现2：在一个初始为空的集合里面插入随机整数，直到个数足够。代码如下： void GenSets ( int m , int n ) { set < int > s ; while ( s . size () < m ) s . insert ( bigrand () % n ); set < int >:: iterator i ; for ( i = s . begin (); i != s . end (); ++ i ) cout <<* i << endl ; } 实现3：把包含整数0～n-1的数组顺序打乱，然后把前m个元素排序输出。 该方法的性能通常不如Knuth的算法。代码如下： void GenShuf ( int m , int n ) { int x [ n ]; for ( int i = 0 ; i < n ; ++ i ) x [ i ] = i ; for ( int i = 0 ; i < m ; ++ i ) { int j = randint ( i , n - 1 ); swap ( x [ i ], x [ j ]); } sort ( x , x + m ); for ( int i = 0 ; i < m ; ++ i ) cout << x [ i ] << endl ; } 深入阅读：Don Knuth的《The Art of Computer Programming, Volume 2: Seminumerical Algorithms》","text_tokens":["重复","如下","不如","该",">","那么","void","排序","++","插入","小","iterator","gensets","for","bigrand",",","j","它","初始","算法","--","[","讲述","=","，","insert","0","作用","比如"," ","复杂度","足够","1","knuth",".","sort","～","}","是","don","为空","size","genshuf","深入",")","(","有序","抽样","并用","允许","要求","来","。","%","》","while","随机抽样","{","通常","volume","randint","范围","个数","int","o","其中","genknuth","cout","taocp","不同","方法","the","复杂","实现",";","前","n","if","元素","问题","在","返回","的","内","~","可能","i","顺序","seminumerical","了","algorithms","里面","：","s","直到","art","endl","swap","性能","和","]","-","set","包含","序列表","很大","<","代码","3","个","begin","x","!","阅读","序列","输出","+",":","数组","时间","end","打乱","列表","《","一种","5","随机","把","programming","对于","本章","一个","来自","computer","*","m","of","解决","有","然后","不","2","集合","整数"],"title":"取样问题","title_tokens":["取样","问题"]},{"location":"docs/digest/180720_2/#_19","text":"本章详细研究这样一个搜索问题：在没有其他相关数据的情况下，如何存储一组整数？ 为些介绍了5种数据结构：有序数组，有序链表，二叉搜索树，箱，位向量。 其中，二叉搜索树应该熟练掌握，以下是一种实现： struct Node { int data ; Node * lchild , * rchild , * parent ; Node () : lchild ( NULL ), rchild ( NULL ), parent ( NULL ) { } }; class BST { private : static const int kMax = 1000 ; Node * root_ , * parent_ , nodes_ [ kMax ]; int size_ ; private : Node * minimum ( Node * node ); Node * maximum ( Node * node ); Node * successor ( Node * node ); Node * predecessor ( Node * node ); void Insert ( Node * & node , int x ); void InorderTraver ( Node * node ); Node * Find ( Node * node , int x ); public : BST () : root_ ( NULL ), parent_ ( NULL ), size_ ( 0 ) { memset ( nodes_ , '\\0' , sizeof ( nodes_ )); } void Insert ( int x ); void InorderTraver (); Node * Find ( int x ); void Remove ( Node * z ); }; Node * BST :: minimum ( Node * node ) { if ( node == NULL ) return NULL ; while ( node -> lchild ) node = node -> lchild ; return node ; } Node * BST :: maximum ( Node * node ) { if ( node == NULL ) return NULL ; while ( node -> rchild ) node = node -> rchild ; return node ; } Node * BST :: successor ( Node * node ) { if ( node -> rchild ) return minimum ( node -> rchild ); Node * y = node -> parent ; while ( y && node == y -> rchild ) { node = y ; y = node -> parent ; } return y ; } Node * BST :: predecessor ( Node * node ) { if ( node -> lchild ) return maximum ( node -> lchild ); Node * y = node -> parent ; while ( y && node == y -> lchild ) { node = y ; y = node -> parent ; } return y ; } void BST :: Insert ( Node * & node , int x ) { if ( node == NULL ) { nodes_ [ size_ ]. data = x ; nodes_ [ size_ ]. parent = parent_ ; node = & nodes_ [ size_ ]; ++ size_ ; return ; } parent_ = node ; if ( x < node -> data ) Insert ( node -> lchild , x ); else Insert ( node -> rchild , x ); } void BST :: Insert ( int x ) { Insert ( root_ , x ); } void BST :: InorderTraver ( Node * node ) { if ( node == NULL ) return ; InorderTraver ( node -> lchild ); cout << node -> data << \" \" ; InorderTraver ( node -> rchild ); } void BST :: InorderTraver () { InorderTraver ( root_ ); } Node * BST :: Find ( Node * node , int x ) { if ( node == NULL ) return NULL ; if ( x < node -> data ) return Find ( node -> lchild , x ); else if ( x > node -> data ) return Find ( node -> rchild , x ); else return node ; } Node * BST :: Find ( int x ) { return Find ( root_ , x ); } void BST :: Remove ( Node * z ) { if ( ! z -> lchild && ! z -> rchild ) { if ( z == root_ ) root_ = NULL ; else if ( z == z -> parent -> lchild ) z -> parent -> lchild = NULL ; else z -> parent -> rchild = NULL ; } else if ( z -> lchild == NULL || z -> rchild == NULL ) { if ( z == root_ ) { if ( z -> lchild ) root_ = z -> lchild ; else root_ = z -> rchild ; root_ -> parent = NULL ; } else { if ( z == z -> parent -> lchild && z -> lchild ) { z -> parent -> lchild = z -> lchild ; z -> lchild -> parent = z -> parent ; } else if ( z == z -> parent -> lchild && z -> rchild ) { z -> parent -> lchild = z -> rchild ; z -> rchild -> parent = z -> parent ; } else if ( z == z -> parent -> rchild && z -> lchild ) { z -> parent -> rchild = z -> lchild ; z -> lchild -> parent = z -> parent ; } else { z -> parent -> rchild = z -> rchild ; z -> rchild -> parent = z -> parent ; } } } else { Node * s = predecessor ( z ); z -> data = s -> data ; if ( z == s -> parent ) s -> parent -> lchild = s -> lchild ; else s -> parent -> rchild = s -> lchild ; if ( s -> lchild ) s -> lchild -> parent = s -> parent ; } }","text_tokens":[">","nodes","情况","void","++","这样","minimum",",","rchild","predecessor","？","[","结构","=","remove","熟练掌握","，","insert","0","&","介绍","private"," ","一组","y",".","详细","下","}","存储","是","研究","find","root","size","数据",")","\"","有序","struct","(","class","相关","successor","。","const","&&","搜索","\\","data","while","{","位","'","_","其他","int","应该","以下","其中","cout","static","没有","bst","null","实现",";","if","问题","在","|","的","掌握","链表","了","熟练","：","1000","s","数据结构","public","二叉","kmax","]","-","sizeof","<","node","x","!","maximum","else","箱","向量",":","数组","return","parent","为些","一种","5","种","本章","inordertraver","一个","*","lchild","z","如何","memset","树","整数"],"title":"搜索","title_tokens":["搜索"]},{"location":"docs/digest/180720_2/#_20","text":"本章主要介绍堆，下面是关于堆的一些主要操作： // 最大堆实现, 数组下标从1开始，a[0]不使用。 // 交换两数 void swap ( int & a , int & b ) { int t = a ; a = b ; b = t ; } // 把第i个元素向上移动 void ShiftUp ( int a [], int i ) { while ( i > 1 && a [ i ] > a [ i / 2 ]) { swap ( a [ i ], a [ i / 2 ]); i >>= 1 ; } } // 把第i个元素向下移动 void ShiftDown ( int a [], int n , int i ) { while (( i = 2 * i ) <= n ) { if ( i + 1 <= n && a [ i + 1 ] > a [ i ]) ++ i ; if ( a [ i ] > a [ i / 2 ]) swap ( a [ i ], a [ i / 2 ]); else break ; } } // 把数组a变成具备最大堆性质的数组 void MakeHeap ( int a [], int n ) { for ( int i = n / 2 ; i > 0 ; -- i ) ShiftDown ( a , n , i ); } // 向堆中插入元素x void Insert ( int a [], int & n , int x ) { a [ ++ n ] = x ; ShiftUp ( a , n ); } // 删除堆中第i个元素 void Del ( int a [], int & n , int i ) { a [ i ] = a [ n -- ]; if ( i > 1 && a [ i ] > a [ i / 2 ]) ShiftUp ( a , i ); else ShiftDown ( a , n , i ); } // 堆排序，时间复杂度O(nlogn) void HeapSort ( int a [], int n ) { MakeHeap ( a , n ); for ( int i = n ; i > 1 ; -- i ) { swap ( a [ i ], a [ 1 ]); ShiftDown ( a , i - 1 , 1 ); } }","text_tokens":[">","shiftup","void","排序","++","移动","插入","del","交换","makeheap","for",",","向","[","--","=","，","insert","0","&","介绍"," ","复杂度","下面","下标","1","主要","heapsort","}","是","堆","一些",")","break","关于","(","第","。","b","&&","while","{","int","o","使用","/","t","堆中","从","向上","nlogn","复杂","实现",";","shiftdown","n","if","元素","的","i","：","两","swap","]","-","<","数","中","个","x","a","else","+","变成","数组","时间","操作","删除","把","开始","最大","性质","本章","具备","*","不","2","堆排序","向下"],"title":"堆","title_tokens":["堆"]},{"location":"docs/digest/180720_2/#_21","text":"程序1：循环输入并将每个单词插入集合S(忽略重复单词)，然后排序输出。 int main ( void ) { set < string > s ; set < string >:: iterator j ; string t ; while ( cin >> t ) s . insert ( t ); for ( j = s . begin (); j != s . end (); ++ j ) cout <<* j << endl ; return 0 ; } 程序2：单词计数 int main ( void ) { map < string , int > m ; map < string , int >:: iterator j ; string t ; while ( cin >> t ) m [ t ] ++ ; for ( j = m . begin (); j != m . end (); ++ j ) cout << j -> first << \" \" << j -> second << endl ; return 0 ; } 程序3：建立自己的哈希表(散列表)，以下是一种实现： class Hash { public : Hash () : seed_ ( 131 ), size_ ( 0 ) { memset ( head_ , 0 , sizeof ( head_ )); } void Insert ( const char * str ) { unsigned int id = hash ( str ); char * dst = ( char * ) node_ [ size_ ]. word ; while ( * dst ++ = * str ++ ); node_ [ size_ ]. next = head_ [ id ]; head_ [ id ] = & node_ [ size_ ]; ++ size_ ; } bool Find ( const char * str ) { unsigned int id = hash ( str ); for ( Node * p = head_ [ id ]; p ; p = p -> next ) { char * dst = ( char * ) p -> word ; int i = 0 ; for (; * ( str + i ) && * ( str + i ) ==* ( dst + i ); ++ i ); if ( !* ( str + i ) && !* ( dst + i )) return true ; } return false ; } private : unsigned int hash ( const char * str ) { // BKDR Hash Function unsigned int hash = 0 ; while ( * str ) { hash = hash * seed_ + ( * str ++ ); } return ( hash & 0x7FFFFFFF ) % kHashSize ; } private : unsigned int seed_ ; unsigned int size_ ; static const int kWordSize = 26 + 1 ; static const int kNodeSize = 20000 ; static const int kHashSize = 10001 ; struct Node { char word [ kWordSize ]; Node * next ; }; Node node_ [ kNodeSize ]; Node * head_ [ kHashSize ]; };","text_tokens":["重复",">","void","排序","++","插入","散","id","循环","iterator","for","建立","kwordsize",",","j","单词","10001","word","[","next","=","程序","，","insert","0","&","private","string","0x7fffffff","map"," ","表","1",".","khashsize","}","是","p","26","find","size","str",")","\"","second","(","struct","function","class","char","计数","。","const","每个","%","&&","main","dst","while","{","_","int","以下","cout","t","/","static","实现",";","if","的","i","false","bool","：","s","20000","endl","public","]","忽略","-","set","sizeof","<","3","node","bkdr","begin","!","输出","自己","+",":","true","end","将","列表","return","一种","哈希","knodesize","并","first","unsigned","cin","seed","head","输入","*","m","memset","然后","2","hash","集合","131"],"title":"字符串","title_tokens":["字符串","字符"]},{"location":"docs/digest/180720_2/#_22","text":"假设我们有以下字符串及一个char*数组： char c [ 20 ] = \"hawstein\" ; char * pc [ 20 ]; 我们让指针pc[i]指向字符串的第i个字符，即： for ( int i = 0 ; i < 8 ; ++ i ) pc [ i ] = & c [ i ]; 这时候我们输出pc[i]，会得到字符串”hawstein”的所有后缀： hawstein awstein wstein stein tein ein in n 然后，我们对数组pc进行排序，将所有后缀按字典序排序： sort ( pc , pc + 8 , cmp ); 其中，比较函数cmp如下： inline bool cmp ( char * p , char * q ) { return strcmp ( p , q ) < 0 ; } 这时，我们再输出pc[i]，会得到排序后的结果： awstein ein hawstein in n stein tein wstein 我们把数组pc称为“后缀数组”。这里需要注意，数组pc 中存储的是指向每个后缀首字符的地址。我们也可以存储每个后缀首字符在原数组中的下标， 效果是一样的。 本章中用后缀数组解决了一个小问题：可重叠最长重复子串。比如对于字符串”banana”， 其后缀数组为： a ana anana banana na nana 扫描一次数组，比较相邻子串，找到相邻子串的最长公共前缀即可。本例为”ana”， 其中一个a是重叠的。 后缀数组是处理字符串的有力工具，常见的两种实现方法是：倍增算法和DC3算法。 推荐阅读以下材料来学习后缀数组： 许智磊，《后缀数组》 罗穗骞，《后缀数组——处理字符串的有力工具》","text_tokens":["骞","重复","如下","找到","相邻","处理","得到","排序","++","函数","小","这里","前缀","指向","地址","材料","for","也","子串",",","这时","wstein","算法","扫描","为","重叠","[","c","=","awstein","hawstein","，","0","q","&","及","比如","假设"," ","时候","下标","即","sort","}","存储","是","p","strcmp","inline","in","na",")","\"","(","第","再","char","来","。","每个","罗穗","可","》","8","{","cmp","两种","int","“","dc3","以下","其中","结果","nana","本例","方法","常见","序","即可","实现",";","n","称为","一样","按","ana","tein","可以","在","问题","效果","其","的","工具","stein","首","i","会","最长","了","学习","bool","：","字典","]","和","anana","—","<","”","中","让","ein","a","阅读","后","输出","个字符","比较","+","原","数组","将","return","用","后缀","进行","《","指针","我们","对","注意","20","把","需要","倍增","许智磊","推荐","所有","对于","本章","一个","字符串","字符","公共","*","有力","pc","有","解决","这时候","banana","然后","一次"],"title":"后缀数组","title_tokens":["数组","后缀"]},{"location":"docs/digest/180916/","text":"github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md How To Ask Questions The Smart Way Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen 本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。 原文网址： http://www.catb.org/~esr/faqs/smart-questions.html Copyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu 本中文指南是基于原文 3.10 版以及 2010 年由 Gasolin 所翻译版本的最新翻译； 协助指出翻译问题， 请 发 Issue ，或直接 发 Pull Request 给我。 本文另有 繁體中文版 。 原文版本历史 ¶ 目录 ¶ 声明 简介 在提问之前 当你提问时 慎选提问的论坛 Stack Overflow 网站和 IRC 论坛 第二步，使用项目邮件列表 使用有意义且描述明确的标题 使问题容易回复 用清晰、正确、精准并合法语法的语句 使用易于读取且标准的文件格式发送问题 精确地描述问题并言之有物 话不在多而在精 别动辄声称找到 Bug 可以低声下气，但还是要先做功课 描述问题症状而非猜测 按发生时间先后列出问题症状 描述目标而不是过程 别要求使用私人电邮回复 清楚明确的表达你的问题以及需求 询问有关代码的问题时 别把自己家庭作业的问题贴上来 去掉无意义的提问句 即使你很急也不要在标题写紧急 礼多人不怪，而且有时还很有帮助 问题解决后，加个简短的补充说明 如何解读答案 RTFM 和 STFW：如何知道你已完全搞砸了 如果还是搞不懂 处理无礼的回应 如何避免扮演失败者 不该问的问题 好问题与蠢问题 如果得不到回答 如何更好地回答问题 相关资源 鸣谢 声明 ¶ 许多项目在他们的使用协助/说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明： 本指南不提供此项目的实际支持服务！ 我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。 如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。 简介 ¶ 在 黑客 的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。 不只是黑客，现在开源（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件**好事**；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。 首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，\"好问题！\"是诚挚的大力称赞。 尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。 我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 失败者（撸瑟） （由于历史原因，我们有时把它拼作 lusers ）。 我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。 我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答 赢家（winner） 的问题。 如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。 所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 -- 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。 如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 -- 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。 （欢迎对本指南提出改进意见。你可以 email 你的建议至 [ esr@thyrsus.com ] 或 [ respond-auto@linuxmafia.com ]。然而请注意，本文并非 网络礼节 的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。 在提问之前 ¶ 在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情： 尝试在你准备提问的论坛的旧文章中搜索答案。 尝试上网搜索以找到答案。 尝试阅读手册以找到答案。 尝试阅读常见问题文件（FAQ）以找到答案。 尝试自己检查或试验以找到答案。 向你身边的强者朋友打听以找到答案。 如果你是程序开发者，请尝试阅读源代码以找到答案。 当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所**学到**的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。 运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（既搜索 Google 论坛 ，也搜索网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 我在 Google 中搜过下列句子但没有找到什么有用的东西 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。 别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。 准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。 小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着 蠢问题… ， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。 绝不要自以为**够格**得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去**挣到**一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。 另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。 谁能给点提示？ 、 我的这个例子里缺了什么？ 以及 我应该检查什么地方 比 请把我需要的确切的过程贴出来 更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。 当你提问时 ¶ 慎选提问的论坛 ¶ 小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者： 在与主题不合的论坛上贴出你的问题。 在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。 在太多的不同新闻群组上重复转贴同样的问题（cross-post）。 向既非熟人也没有义务解决你问题的人发送私人电邮。 黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。 因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括**阅读** FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。 向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 -- 如果你不确定，那就向别处发送，或者压根别发。 在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。 别像机关枪似的一次\"扫射\"所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。 搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。 一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。 可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。 Stack Overflow ¶ 搜索， 然后 在 Stack Exchange 问。 近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。 因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。 Stack Exchange 已经成长到 超过一百个网站 ，以下是最常用的几个站： Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。 Stack Overflow 是问写程序有关的问题。 Server Fault 是问服务器和网管相关的问题。 网站和 IRC 论坛 ¶ 本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。 事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 \"用**我们的**版本\"。 在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。 通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。 在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。 第二步，使用项目邮件列表 ¶ 当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法： 任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。 向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。 大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。 如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。 如果一个项目既有\"使用者\" 也有\"开发者\"（或\"黑客\"）邮件列表或论坛，而你又不会动到那些源代码，那么就向\"使用者\"列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。 然而，如果你**确信**你的问题很特别，而且在\"使用者\" 列表或论坛中几天都没有回复，可以试试前往\"开发者\"列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意） 如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。 使用有意义且描述明确的标题 ¶ 在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的 帮帮忙 、 跪求 、 急 （更别说 救命啊！！！！ 这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。 一个好标题范例是 目标 —— 差异 式的描述，许多技术支持组织就是这样做的。在 目标 部分指出是哪一个或哪一组东西有问题，在 差异 部分则描述与期望的行为不一致的地方。 蠢问题：救命啊！我的笔记本电脑不能正常显示了！ 聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。 更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。 编写 目标 —— 差异 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境**和**你遇到的问题。 总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。 如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 Re: 测试 或者 Re: 新 bug 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。 对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。 仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。 在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你**只想**在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。 使问题容易回复 ¶ 以 请将你的回复寄到…… 来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做， 换个好点的 ；如果是操作系统不支持这种邮件程序，也换个好点的。 在论坛，要求通过电子邮件回复是非常无礼的，除非你相信回复的信息可能比较敏感（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如 追踪此讨论串 、 有回复时发送邮件提醒 等功能。 用清晰、正确、精准并语法正确的语句 ¶ 我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。 正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它**必须很**准确，而且有迹象表明你是在思考和关注问题。 正确地拼写、使用标点和大小写，不要将 its 混淆为 it's ， loose 搞成 lose 或者将 discrete 弄成 discreet 。不要**全部用大写**，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。 Alan Cox 也许可以这样做，但你不行）。 更白话的说，如果你写得像是个半文盲[译注： 小白 ]，那多半得不到理睬。也不要使用即时通信中的简写或 火星文 ，如将 的 简化为 d 会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。 如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。 如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的： [译注：以下附上原文以供使用] English is not my native language; please excuse typing errors. 英文不是我的母语，请原谅我的错字或语法。 If you speak $LANGUAGE, please email/PM me; I may need assistance translating my question. 如果你说**某语言**，请寄信/私讯给我；我需要有人协助我翻译我的问题。 I am familiar with the technical terms, but some slang expressions and idioms are difficult for me. 我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。 I've posted my question in $LANGUAGE and English. I'll be glad to translate responses, if you only use one or the other. 我把我的问题用**某语言**和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。 使用易于读取且标准的文件格式发送问题 ¶ 如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以： 使用纯文字而不是 HTML ( 关闭 HTML 并不难）。 使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。 不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。 但是，对一些特殊的文件**不要**设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。 在英语论坛中，不要使用 Quoted-Printable MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的 =20 符号既难看也分散注意力，甚至有可能破坏内容的语意。 绝对，**永远**不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。 如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的 智能引号 功能 （从[选项] > [校订] > [自动校正选项]，勾选掉 智能引号 单选框），以免在你的邮件中到处散布垃圾字符。 在论坛，勿滥用 表情符号 和 HTML 功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。 如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的 查看源代码 命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。 精确地描述问题并言之有物 ¶ 仔细、清楚地描述你的问题或 Bug 的症状。 描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如： Fedora Core 4 、 Slackware 9.1 等）。 描述在提问前你是怎样去研究和理解这个问题的。 描述在提问前为确定问题而采取的诊断步骤。 描述最近做过什么可能相关的硬件或软件变更。 尽可能的提供一个可以 重现这个问题的可控环境 的方法。 尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。 以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。 Simon Tatham 写过一篇名为《 如何有效的报告 Bug 》的出色文章。强力推荐你也读一读。 话不在多而在精 ¶ 你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。 这样做的用处至少有三点。 第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加； 第二，简化问题使你更有可能得到**有用**的答案； 第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。 别动辄声称找到 Bug ¶ 当你在使用软件中遇到问题，除非你非常、**非常**的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的 Bug ，你应该能提供相应位置的修正或替代文件。 请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前 已经做了这些，是吧 ？）。这也意味着很有可能是你弄错了而不是软件本身有问题。 编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有 Bug 时，这尤其严重。 提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是**你**做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。 低声下气不能代替你的功课 ¶ 有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气： 我知道我只是个可悲的新手，一个撸瑟，但... 。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。 别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。 有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。 描述问题症状而非你的猜测 ¶ 告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。 蠢问题 我在编译内核时接连遇到 SIG11 错误， 我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？ 聪明问题 我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组）， 256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误， 但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。 所有内存都换过了，没有效果。相关部分的标准编译记录如下…。 由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你： 所有的诊断专家都来自密苏里州。 美国国务院的官方座右铭则是： 让我看看 （出自国会议员 Willard D. Vandiver 在 1899 年时的讲话： 我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。 ） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！ 按发生时间先后列出问题症状 ¶ 问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。 如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住， 多 不等于 好 。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。 如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。 描述目标而不是过程 ¶ 如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。 经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。 蠢问题 我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？ 聪明问题 我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot）， 但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。 第二种提问法比较聪明，你可能得到像是 建议采用另一个更合适的工具 的回复。 别要求使用私人电邮回复 ¶ 黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。 当你要求私下回复时，这个过程和奖励都被中止。别这样做，让**回复者**来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。 这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是 向我发电邮，我将为论坛归纳这些回复 。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。 清楚明确的表达你的问题以及需求 ¶ 漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。 如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。 要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。 所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问 我想更好的理解 X，可否指点一下哪有好一点说明？ 通常比问 你能解释一下 X 吗？ 更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。 询问有关代码的问题时 ¶ 别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声： 它不能工作 会让你完全被忽略。只贴几十行代码，然后说一句： 在第七行以后，我期待它显示 <x>，但实际出现的是 <y> 比较有可能让你得到回应。 最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能**刚好**展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看 话不在多而在精 一节）。 一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。 如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。 别把自己家庭作业的问题贴上来 ¶ 黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由**你**来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。 如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的**使用者**邮件列表或论坛中提问。尽管黑客们**会**看出来，但一些有经验的使用者也许仍会给你一些提示。 去掉无意义的提问句 ¶ 避免用无意义的话结束提问，例如 有人能帮我吗？ 或者 这有答案吗？ 。 首先：如果你对问题的描述不是很好，这样问更是画蛇添足。 其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如： 没错，有人能帮你 或者 不，没答案 。 一般来说，避免用 是或否 、 对或错 、 有或没有 类型的问句，除非你想得到 是或否类型的回答 。 即使你很急也不要在标题写 紧急 ¶ 这是你的问题，不是我们的。宣称 紧急 极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是， 紧急 这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。 有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。 当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如 紧急：帮我救救这个毛绒绒的小海豹！ 肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。 如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。 礼多人不怪，而且有时还很有帮助 ¶ 彬彬有礼，多用 请 和 谢谢您的关注 ，或 谢谢你的关照 。让大家都知道你对他们花时间免费提供帮助心存感激。 坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的） 然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。 （我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得 先谢了 意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说 先谢了 ，**然后**事后再对回复者表示感谢，或者换种方式表达感激，譬如用 谢谢你的关注 或 谢谢你的关照 。） 问题解决后，加个简短的补充说明 ¶ 问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。 最理想的方式是向最初提问的话题回复此消息，并在标题中包含 已修正 ， 已解决 或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串 问题 X 和 问题 X - 已解决 的潜在回复者就明白不用再浪费时间了（除非他个人觉得 问题 X 的有趣），因此可以利用此时间去解决其它问题。 补充说明不必很长或是很深入；简单的一句 你好，原来是网线出了问题！谢谢大家 – Bill 比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。 对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此**之后**才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。 除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。 至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。 思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。 在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。 如何解读答案 ¶ RTFM 和 STFW：如何知道你已完全搞砸了 ¶ 有一个古老而神圣的传统：如果你收到 RTFM （Read The Fucking Manual） 的回应，回答者认为你**应该去读他妈的手册**。当然，基本上他是对的，你应该去读一读。 RTFM 有一个年轻的亲戚。如果你收到 STFW（Search The Fucking Web） 的回应，回答者认为你**应该到他妈的网上搜索**过了。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 Google 是你的朋友 ！） 在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。 通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为 你需要的信息非常容易获得 ； 你自己去搜索这些信息比灌给你，能让你学到更多 。 你不应该因此不爽； 依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见 。你应该对他祖母般的慈祥表示感谢。 如果还是搞不懂 ¶ 如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。 比方说，如果我回答你： 看来似乎是 zentry 卡住了；你应该先清除它。 ，然后，这是一个**很糟的**后续问题回应： zentry 是什么？ **好**的问法应该是这样： 哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？ 处理无礼的回应 ¶ 很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。 如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这**没有**发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而**你**将被视为有错的一方，这将伤害到你获取信息或帮助的机会。 另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。 （有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会**正常**交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们**喜欢**我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑）。 Jeff Bigler 的观察总结和这个相关也值得一读 ( tact filters )。 在下一节，我们会谈到另一个问题，当**你**行为不当时所会受到的 冒犯 。 如何避免扮演失败者 ¶ 在黑客社区的论坛中有那么几次你可能会搞砸 —— 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。 这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做： 熬过去，这很正常。事实上，它是有益健康且合理的。 社区的标准不会自行维持，它们是通过参与者积极而**公开地**执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。 也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称 如果你不想帮助用户就闭嘴。 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。 夸张的讲法是：你要的是**友善**（以上述方式）还是有用？两个里面挑一个。 记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心**你**和**他的社区**而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。 有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是**真的**会把问题搞砸。 这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。 也别让自己卷入口水战，最好不要理睬大多数的口水战 -- 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。 不该问的问题 ¶ 以下是几个经典蠢问题，以及黑客没回答时心中所想的： 问题： 我能在哪找到 X 程序或 X 资源？ 问题： 我怎样用 X 做 Y？ 问题： 如何设定我的 shell 提示？ 问题： 我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？ 问题： 我的程序/设定/SQL 语句没有用 问题： 我的 Windows 电脑有问题，你能帮我吗？ 问题： 我的程序不会动了，我认为系统工具 X 有问题 问题： 我在安装 Linux（或者 X ）时有问题，你能帮我吗？ 问题： 我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？ 问题：我能在哪找到 X 程序或 X 资源？ 回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 Google 吗？ 问题：我怎样用 X 做 Y？ 回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。 问题：如何设定我的 shell 提示？？ 回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 RTFM ，然后自己去找出来。 问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？ 回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。 问题：我的{程序/设定/SQL 语句}不工作 回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种 你还有什么要补充的吗？ 真糟糕，希望你能搞定。 这关我有什么屁事？ 问题：我的 Windows 电脑有问题，你能帮我吗？ 回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。 注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你**可以**问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。 问题：我的程序不会动了，我认为系统工具 X 有问题 回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。 问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？ 回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在 这儿 找到使用者群组的清单）。 注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 Linux 和**所有**被怀疑的硬件作关键词仔细搜索。 问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？ 回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！ 好问题与蠢问题 ¶ 最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。 蠢问题 ： 我可以在哪儿找到关于 Foonly Flurbamatic 的资料？ 这种问法无非想得到 STFW 这样的回答。 聪明问题 ： 我用 Google 搜索过 \"Foonly Flurbamatic 2600\"，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？ 这个问题已经 STFW 过了，看起来他真的遇到了麻烦。 蠢问题 ： 我从 foo 项目找来的源码没法编译。它怎么这么烂？ 他觉得都是别人的错，这个傲慢自大的提问者。 聪明问题 ： foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？ 提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。 蠢问题 ： 我的主机板有问题了，谁来帮我？ 某黑客对这类问题的回答通常是： 好的，还要帮你拍拍背和换尿布吗？ ，然后按下删除键。 聪明问题 ： 我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？ 这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。 在最后一个问题中，注意 告诉我答案 和 给我启示，指出我还应该做什么诊断工作 之间微妙而又重要的区别。 事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。 通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。 事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的**名**人，而是因为我用了正确的方式来提问。 黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我**像**个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。 如果得不到回答 ¶ 如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。 总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。 你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。 有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。 另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。 对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。 如何更好地回答问题 ¶ 态度和善一点 。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。 对初犯者私下回复 。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。 如果你不确定，一定要说出来 ！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。 如果帮不了忙，也别妨碍他 。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 —— 有些可怜的呆瓜会把它当成真的指令。 试探性的反问以引出更多的细节 。如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。 尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。 如果你决定回答，就请给出好的答案 。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（wordaround），应推荐更好的工具，重新界定问题。 正面的回答问题 ！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 试试看 A 或是 B 或者 试试 X 、 Y 、 Z 、 A 、 B 、 C 并附上一个链接一点用都没有。 帮助你的社区从问题中学习 。当回复一个好问题时，问问自己 如何修改相关文件或常见问题文件以免再次解答同样的问题？ ，接着再向文件维护者发一份补丁。 如果你是在研究一番后才做出的回答， 展现你的技巧而不是直接端出结果 。毕竟 授人以鱼不如授人以渔 。 相关资源 ¶ 如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 Unix 系统和网络基本原理 。 当你发布软件或补丁时，试着按 软件发布实践 操作。 鸣谢 ¶ Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写 如何更好地回答问题 这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。","text_tokens":["random","重复","不是","夸张","到","姑娘","有误","多少","不同凡响","一幅","be","很糟","simon","mv1005","改正","指向","不快","发生","所想","最后","正面","增加","文本","有益","小小","动","网络","有用","取得","fedora","wu","总是","文化","其次"," ","洋娃娃","笔记本电脑","导致","尚未","二是","忙","}","晚上","大声嚷嚷","立即","他们","机关枪","喧闹","简介","根本","outlook","要求","民主","内核","例如","尝试","记着","解释","moen","某种","station","回答者","》","弯路","字句","这些","过多","先谢","越线","grommicking","两种","组装","分钱","出来","结果","指点","坏名声","家门口","跟","变得","检验","可爱","引来","这件","链","有助于","卡住","平静","类型","反感","屈服","乐于","功能","碰到","行为","合作","恰当","差别","不算","黑客","无边","道路","关系","贴出","送给","看过","之下","得不到","避开","译注","补丁","一遍","原样","搞清楚","看见","抽身","或会话","很大","中","6.2","点","同时","主意","让","样例","提供","读取","二步","比较","理想","丰富","或","攻击","cpu","不愿","有时","文版","request","反馈","马虎","原理","对","color","查寻","十六","（","帮帮","@","层次","同样","极端","聪明","领域","无休无止","终端","然而","黑洞","邮箱","组成","有时候","全部","帖子","厌烦","痛苦","被","or","足以","亲戚","解决","无偿","空间站","棉花","当然","坦白说","不行","另有","清楚","发送","找到","中提","另一方","界定","立刻","多么","安装","到哪去","人为","礼貌","这个","不当","扮演","当","模糊","长篇大论","word","glad","初学","冒","人们","替代","感受一下","一大","时","出","繁體","对本","傻笑","相对","空间","辨识","原始","拍拍","md","二种","真的","试试看","更糟","ryan","自闭症","贴上来","件","一组","做法","有意思","天上","拼作","组织","群组","思路","这一","签个","给","回答","潜在","这会","送到","从没","似地","b","本本","挑毛病","2006","像","server","搜索","玩味","鲜见","色彩","上来","比问","_","一百","期待","因","fic","一分钱","发问","不必","维修","多数","github","包括","来得及","保留","笔记本","international","2001","反复","技术细节","zentry","感到","某牌","网管","大部分","此时","工具","旧","内","过","pa2007","无助","处","移植","用不着","以便","斟酌","please","事","论坛","树立","缩影","救救","哦","务器","发文","flurbamatic","都","美国","意料","指定","特质","文件格式","选取","额外","下来","一般来说","长篇","自行","最少","《","身处","称之为","转贴","过滤器","相比","lkml","精炼","80","原本","极有","基本","一份","手册","灰心","已有","指明","传统","跨平台","简单","教","严重","最初","希望","无关","社会","范例","猪粪","出错","可悲","当成","打击","协助","光标","大多","做时","走线","封闭","骆驼","例外","前先","弄懂","先试","除非","新","是因为","如","之辈","如下","出现","就是","纯文字","用法","觉得","既","大声","一员",">","道谢","或是","得出","专业技能","跑","半文","前提","参与","谁能给","有助","引擎","方向","分割","动物","主机板","猜测","接受","并且","所提","容易","破坏","rgb","领导","毫无意义","二十个","试探","现象","更不愿","旧文","形势","指令","适用","cross","无法","清单","版本号","新闻组","诚挚","差异","十个","文盲","人情味","开源","一场","以外","服务","错误信息","问法",")","或否","太","电子邮件","可不","清晰","一股","而","及其","至","每个","bill","过程","谦虚","mitchel","小写","宣称","状态","弄","这点","高高","询问","提问","礼多人不","怎么","v","招呼","经销","经典","强力","否则","线索","汲取","mikhail","前","函数库","为什么","文字","发给","努力","在","小心","机器配置","涌入","含糊不清","加入","bug","爱好者","显卡","透过","型号","正常","洪水","用于","坦白","浪费时间","对此","压垮","应","一步","指导","大意","现在","同类","喜欢","跪求","画蛇添足","站得住","当时","作业","进制","引导","仍然","经验","一股脑","图形","似乎","增长","小说","存心","错字","能力","真糟","是否","无缘","不够","白话","集中精力","估计","慈善","一线","应付","和善","开始","拷贝","提醒","宽度","不当之处","着","大多数","赢家","nasa","交流","以内","得住","地方","记下","专家","ginux","一次","背景","不","一分","再花点","脆弱","倾向","一点","利用","esr","确保","corsair","fault","头上","上网","尽量","先去","宽","函数","激发","式","这样","关心","一行","条路","修改","谢谢您","秒钟","小错","连","四处","等等","节制","为","开心","资料","=","该项","不难","三点","项目","比如","第二种","迹象","下","来说","是","来得","可控","糊涂","消磨","花哨","对应","错","只是","干扰","相关","表明","日志","。","稍","尿布","串外","怎样才能","反之","态度","通常","噪音","发布","'","待","文本文件","汽缸","可用","私下","吸引","了解","评价","巧妙","体无完肤","不同","正式","没有","啊","也许","条","解决方案","起来","在技术上","没什么","更为重要","费时","it","费用","事先","串时","譬如","overflow","附近","们","刚好","礼节","不然","效果","放在","外语","败者","领教","重新启动","把手","程序开发","官方版","看不到","copyleft","客户","睡觉","有错","知道","language","理论","linuxmafia","点击","讲法","thyrsus","review","刺耳","搞懂","作者","名声","选项","近年","决不","没法","首选","挑选","出格","加个","高手","bass","张贴","好玩","试过","一定","除了","主动","剔除","广泛","fucking","20","满足感","别忘了","经销商","才能","哪儿","呢","包票","几天","版下","热心","批评","一串","瓜会","称","auto","永远","维护","所处","问者","告知","补充","想","评论","大叫","各种","web","法律","二十","一系","该","常见问题","我该","诚实","别像","邮","做得好","设定","转录","材料","大可不必","这是","口水","查看","文件夹","以免","这本","这时","必要","推理小说","一起","清除","兴许","英语","条件反射","关机","前文","年","打包票","报怨","假设","宣传","紧密结合","assistance","密结","自愿","不用浪费","失败者","结论","留下","帐号","3.10","维持","面对","令人","无故","串","设备","多读","目标","慈祥","敌意","整个","不仅","名","近年来","8","大","中有","滤掉","羞辱","负责","答复","找麻烦","进来","傲慢","好榜样","但装","认为","不合","vp2","报","气","轻松","通过","尽管","编写","相信","自私","因此","粗心","何人","大错","效率","可以","付出","无","无知者","感兴趣","sig11","使人","~","看吧","与众不同","了","图形用户界面","肤浅","直到","很","家门","低声下气","获取","9.1","回复","编码","a","文","哭","国务院","模模糊糊","读过","实践","新手","根据","健康","灵长类","目的","下气","原因","对性","官方","大大的","仅仅","信件","情境","种","最有","不该","明白","座右铭","errors","把戏","传送","时有","推荐","无法解释","乞讨","可能性","小姑娘","普通","看漏","含量","sdram","假使","绘图","*","档案","适当","干好","如何","上万名","大师","ramendik","未决","way","动机","字体","社区","回归","桶盖","233","不中用","转换","情况","头","准确","几秒","转发给","尤其","zh","做","充当","大小","去掉","嚷嚷","答案","初级","master","table","做点","犯点","语句","会谈","其他人","am","--","other","解救","准备","莽撞","角度","哪些","表现","便于","好事","个人","by","站","信心","看起来","浪费","热门","人类","消磨时光","闭嘴","前面","one","似的","本原","简单扼要","允许","微软公司","找个","成员","客户端","2015","{","紧密","四个","或者","合法","指","造成","这有","推测","狠狠","别说","使","所用","指个","发行","mutt","沮丧","更","家庭","配合","能够","祖母","but","确切","有备","懒虫","最终","多用","zentries","电子","另一方面","不在","程序界面","鬼画符","成千","的","私人","怀疑","不到","i","以鱼","产生","站得住脚","文章","暗示","再说","无缘无故","小白","]","百个","常用","降低","本身","骚扰","无意","无知","获取信息","注意力","后盾","专业","缩减到","正当","无助于","开端","软硬件","删除","屁事","紧急","stfw","般的","粗心大意","动辄","简短","编程","频频","实际","并","鼠标","精","年轻","写过","名词","纠正","密苏里州","那些","娃娃","）","不要","找来","一个","撸","excuse","只","有些","http","试用","资产","提","也好","比方说","什么","花点","取决于","毫无办法","水战","技术含量","translate","case","不如","一大堆","斟酌一下","热气","激励","一句","某","区别","学到","地使","本","观察","感觉","几秒钟","语法","按下","宁可","已经","有句","非常","用处","人","程序","秘密","mp","做过","精力","贡献","反对","网站","诸如","事后","遇到","故","©","困难","马桶","飞线","正确","客气","发动","可怜","讳言","易于","native","确定","慎选","foo","脑袋","敏感","如果","不了","系统","小孩","尖叫","的话","对待","就试","自问","当前","指路","企图","一方面","互相","绝对","手段","雄辩","人情","设法","条件","原原本本","主机","私讯","那","很棒","离开","详述","显得","明显","友善","伴随",";","做出","走过","鲜明","译成","某事","走向","精准","调试信息","精简","不可否认","ll","一边","那样","勾选掉","符号","几乎","生成","情味","行事","不足","收到","特别","-","新闻","文件","取而代之","对象","高层次","颜色","tatham","几个","开关","不着","高高在上","消息","自己","查","应用程序","硬件","之前","小姑","直接了当","反映","禁锢","看重","费时间","灵长","最新","下述","信守","上万","小于","家庭作业","高得","自","错误","2010","中用","懂得","行动","够格","默认","维护者","不起作用","帮不了","测试","含糊","最忙","几次","别发","改变","256mb","一部","默认设置","半个","内容","千上万","运作","！","你别","频道","不在乎","启发","大方","上试","后继","达到目标","犯错","片段","电话","电邮","满足","工作","关闭","完美","耗在","自以为是","庞大","视为","证据","视而不见","高效","之","串来","书写","运用","解读","之处","以","心里","email","关照","功课","将来","org","实际上","理解","最好","discrete","失败","拼写","小人","with","只想","读一读","校订","显著","作用","问","限制","看出","有点","我会","行","使得","不想","意义","制作","陈述","core","一针见血","结合","一读","second","区块","方面","发行版","尽管如此","再","替换","命令","精确","互相帮助","test","删减","毛绒","比方","诉诸","扔掉","第二步","说明","发","作","聊天","图片","所","历史记录","但","o","内涵","东西","作为","极","段落","挂掉","心理专家","使用","发火","沟通","technical","方法","问句","slang","反之亦然","the","patch","athlon","loose","启示","索引","乞讨者","特殊","误导","展现","熬过","标签","展示","willard","k6","美国国务院","同一个","基于","乱","标点符号","报酬","端机","系列","消耗","钱","选择","连贯性","<","代码","惊讶","急","存在","idioms","哪有","感谢","依照","6.8","意味着","community","所会","搞砸","一篇","别着","网页","互动","设有","大众化","购买","甚至","缺乏","件夹","外人","lose","戏剧性","把","无情","字串","破解","脚本","不解","会毁","对于","玉米","轻度","过于","来自","怪","于","而是","自我感觉","smart","病患","相应","打动","身上","不用","not","接下","不见","搜过","抽出","1899","妄想","总而言之","信","以上","抱怨","滔滔","一眼","源码","相反","义务","原文","还","小","这里","编译","首页","冒犯","成长","由于","擅长","指出","漫无边际","记录","决定","pc133","指南","想要","任何人","一两个","笔记","1","字","话","毫无","求助","举例","问是","不理","root","自闭","shell","冒险","心理","自我","机关","合理","新来","言论","完整","做错","弄清楚","user","格式","提出","白痴","教给","全新","无能","总结","合适","以下","标记","剪裁","看法","模板","妨碍","有着","命令行","法","温和","鸣谢","微妙","带点","上","自动","机器","犀利","被忽视","资格","管理","弄清","吧","唯一","想像","高层","笨拙","nobody","高声","奇怪","还用","探讨","常","三种","机会","提问者","evelyn","支付","边际","帮助者","语意","写","同等","忽视","搞","忘","阅读","强求","分离","减到","知者","广告","有备而来","别人","winner","国务","半文盲","此","毕竟","悬而未决","...","其它","莫过于","mime","至于","excel","很难","所有","有益健康","之隔","版权","re","不仅仅","读者","公开","者","所说","最大","解救出来","但别","缩减","不足道","一方","趋势","例子","只管","灵魂","来者","z","影响","藏于","寄信","未","而已","亦然","重视","别着急","之类","信守诺言","支持","lusers","异常","火星","政治","电脑","重现","奉献","瞄","理睬","类似","以后","读着","写得",",","至少","莫过","相当","在读","可移植","暗地里","俚语","带来","总比","表情符号","相帮","海豹","隐藏","acmecorp","解决问题","就要","连贯","对方","基本上","所以","我敢","may","附件","国际","商业","表示感谢","不可","另外","引用","赞赏","名为","书以","年来","试看","合同","出产","身边","道歉","国家","translating","第一步","乐观","(","或硬件","只会","汽车","民主党","程序处理","差","is","第一个","做些","每位","接着","致力","可","史记","事与愿违","授人","引出","请原谅","特权","原谅","真","应该","避免","即时","哪","真有","事情","遭遇","gasolin","看不懂","首先","raymond","difficult","芯片组","熟人","会想","资源","显示","一招","放","if","句子","寄","尊严","不能","窃取","只要","称赞","第二","许多","淹没","舒服","自行解决","需求","表述","适合","链接","感受","99%","成","这么","规则","摘要","更为","反问","sql","op","之后","和","忽略","想着","受过","明确","无非","自会","积极","机率","you","要紧","换","开放源码","僵硬","一条","注重","本文","真实","blob","过滥","当地","post","readme","变成","me","大众","唠叨","贴","想法","卷入","之间","话题","一种","智慧","应用","多","策略","、","试着","要费","渴望","其后","经常","未知","样子","仔细","历史","search","类","关键","言语","又","来看","一声","问到","推理","还要","发送给","测试用例","然后","好点","国会议员","寻求","设身处地","尊重","4","直接","负担","处理","下次","比","值得","很多","几遍","以及","以供","报告","锁定","自大","私有","区分","网线","而言","matic","保护","选框","救命","j","过滤","另起炉灶","天","句会","否则请","[","权宜之计","版面","试验","stack","，","良好","不中","善于","不论","朋友","某些","速度","越是","speak","位置","党人","深入","\"","某人","完肤","呆","小结","观众","找死","喋喋","关键词","快速","尝到","修车铺","声称","来","一针","nulix","母语","追问","平台","成为","像是","附上","某条","不休","明智","入手","国会","帮帮忙","值","com","need","任何","他","比灌","天上掉","中文版","并非","推","无节制","极好","几十","搭","搞错","group","交到","网上","开玩笑","许可","大部","渠道","use","英文版","依赖","审查","就","一般而言","折叠","奖励","喋喋不休","一番","民主党人","不易","沦为","有所区别","咀嚼","感兴","助于","可使","bigler","憋闷","to","只能","注明","and","不爽","有关","预先","前辈","super","几百","中止","越","同行","圈子","用户","转变","吗","地","这类","你好","操作","将","芯片","这儿","这次","一部分","questions","版","诺言","更是","活跃","采用","我们","意思","不可思议","技能","超链接","文档","感激","时别","理解力","新来者","一段","换种","vandiver","定位","蠢","只用","正试","平等","确认","公司","分别","纠缠","大力","习惯","质疑","wordaround","一小","翻译成","信息","思考","潜力","环境","大大","以使","如此","人会","2014","内存","一般","bsd","动手","挑战性","不停","中文","着急","修正","满意","有趣","劲","主板","思议","技巧","微软","2600","时常","另","指责","那根","厚礼","通信","或亚","一并","细致","压根","read","阅读程序","但用","别问","选择器","以至","rick","仍会","y","专用","代表","不尽","提示","space","打听","in","老练","cn","部分","先说","谁","catb","google","大堆","几点","快","还有","绝不","没错","非正式","标准","my","html","以本","嚎","而来","其中","版中","以为","代替","期望","个人电脑","quoted","低声","使用者","经历","深刻","选单","漫无","respond","时光","请","出自","提到","英文","不会","question","操作系统","简写","搞定","responses","拥有","滤器","：","参与者","复述","仍","搭载","去","里","检查","世界","不劳而获","个","在此之前","俗语","无休","rtfm","记住","哪里","缺","reporting","毛绒绒","举","诊断","个字符","试试","陌生","列表","搞不懂","用","下列","权宜","那儿","最多","正确方向","–","从不","救出","从本","真正","暧昧","说","坐等","字符","单选框","授人以渔","无能之辈","tag","专","基础","有","智能","靠","愿意","看似","拒绝","兴趣","别用","非","则","高调","最低","irc","基础知识","得到","对付","一下","它们","提高","微不足道","愚蠢","这","偶尔","负责管理","权威","他人","神奇","一节","为重","很忙","提及","大家","用者","www","思维","启动","常使","一致","夹七夹八","那个","过去","网址","句","虽然","分散","ascii","名字","开头","少","喜爱","彬彬有礼","想像中","重要","多半会","d","时候","等","技术论坛","宁愿","关","重新","tyan","坐","已","不过","研究","有意","为了","断言","倒","关于","有效","我","好","换尿布","说服","后续","最近","source","源代码","技术支持","这种","grand","即使","方式","原来","含义","配置","共同","加上","密封","翻翻","要","pm","困扰","往往","expressions","thread","表情","神经","从","乐意","不甚了解","宝贵时间","打扰","意见","学识","一样","florbish","人读","侦探","近乎","其","成堆","风格","润滑","归纳","成千上万","会","only","服务器","议员","宝贵","掉","cox","jeff","方案","问该","表达","后","生活","改进","发电","太烂","讨论","地里",":","十六进制","就算","级别","凡响","大写","听","才","连线","一系列","推断","糟糕","固定","草率","引起","初学者","通用","取信","操心","foonly","单选","背","古怪","斯伯格","鼓励","只有","alan","试探性","深度","声誉","h","卑鄙","运行","赞助","勿","实质性","ve","具备","从何","读","设想","解答","贴出来","有人","slackware","地为","惹恼","这份","真糟糕","选定","切题","威胁","但是","初犯","缺少","$","即便","雇主","本人","威盛","别太","世上","粗鲁","第一","综合","实在","有所","搞清","地址","中学","价值","也","讲话","无礼","上述","典型","最","外","别为","；","标点","厌恶","哀嚎","终端机","垃圾","回应","记得","错发","之一","高","无论","变更","那种","设置","月","被动","表示","熬过去","复制",".","既然","在乎","直译","详尽","typing","不但","会理","自信","how","版本","两个","爱好","成功","基本原理","蔑视","事实","特定","很长","揣测","帮助","益处","变形","由","马桶盖","受益","帮忙","显然","越小越","达到","非常容易","获得","状况","会议员","两句","换行","坚持","逻辑","转变成","需","挣","教训","超过","抓住","团体","而且","修车","执行","还是","faq","暴露","open","场景","好人","散布","顺序","个别","确信","里面","键","先","炉灶","大喊大叫","无法忍受","完成","决不能","且","谢谢","界面","hacker","风险","仅","faqs","尽可能","疑惑","发动机","换个","没","程度","翻译","看到","因为","本地","理由","致力于","彩色","挖苦","拋弃","糊糊","间","大喊","这比","降到","若干","完全","端","移除","大约","正在","烂","公共","做到","搜索引擎","免费","总之","感激不尽","解释一下","兴奋","善待","处置","找","仔细搜索","看作","一百个","纷纷","耐心","无用","肯定","那么","exchange","密封圈","一是","尽可","半","怎样","误信","issue","发个","伯格","盲点","玩笑","出人意料","场合","添足","它","discreet","想得到","追踪","给出","调试","索取","前往","？","说法","画符","接下来","曾","难以","热情","及","色码","辛苦","相同","ask","交往","足够","its","地被","主要","意味","eric","充裕","简述","毛病","出能","不妨","familiar","一头","多行","apollo","意识","古老","接连","技术","邀请","繁忙","稻草","全部内容","滥用","找家","宽容","综合症","套件","有礼","总的来说","打包","欠","剩下","既有","ryanhanwu","机敏","步骤","关注","集中","坦诚","语言","其他","事实上","流程","常容","copyright","机板","走","超级","纯","/","暗地","校正","采取","别处","神圣","大量","自以","更好","标题","复杂","资深","熟悉","心中","发现","问题","太忙","键而省","易懂","难看","伤害","假","糟","赢得","同一","言之有物","要么","可能","聊天室","出色","分辨","linux","得","学习","会议","源自","s","slot","看来","麻烦","常常","家伙","中是","取决","地来","正是","我用","针对","还会","挑战","看起","人员","否认","症状","看看","时间","其驳","口头","指望","压力","榜样","人来","操作步骤","需要","扼要","分钟","这关","some","与","更愿读","付费","缩小","牛蒡","学者","声明","组建","描述","这段","提升","软件","戏剧","第一次","english","他妈的","键盘","找出","强者","看","到处","字面","好者","开场","公开场合","结束","参数","密苏里","人意","邮件","杀手","盛行","以至于","比起","参阅","软硬","转发","发信","瑟","亲自","扫射","苏里","目录","人能","欢迎","排序","幽默","列出","开发","当众","打","上限","先后","for","彬彬","帮","向","之为","告诉","减","顾问","第三","主题","¶","c","受到","知识","调用","着迷","引号","挑","雷同","并非如此","反应","p","多半","树个","一些","要说","数据","简化","pull","我能","有没有","领导人","某个","demonstrating","建议","必须","开机","别","定出","能","人来人往","试","are","从中","举例来说","点子","事要","查一查","manual","口水战","爬","windows","常见","人群","难道","罢了","开放","大小写","门口","一","爆掉","按","有限","混淆","办法","自从","时区","一两","想想","那里","拋出","弄错","amd","却","第七","你","有个","言行","忍受","甜头","透明","包含","—","决心","printable","编辑","我读","万名","附带","问问","x","unix","缺陷","等于","花","两者","再次","花费","开发者","唐突","tex","进阶","无聊","较","心存","…","注意","50","变","反射","s2464","替","可否","samba","其实","禁止","问错","相似","filters","实质","存档","terms","责任","posted","tact","稀缺","以前","细节"],"title":"180916","title_tokens":["180916"]},{"location":"docs/digest/180916/#_1","text":"","text_tokens":[],"title":"原文版本历史","title_tokens":["原文","历史","版本"]},{"location":"docs/digest/180916/#_2","text":"声明 简介 在提问之前 当你提问时 慎选提问的论坛 Stack Overflow 网站和 IRC 论坛 第二步，使用项目邮件列表 使用有意义且描述明确的标题 使问题容易回复 用清晰、正确、精准并合法语法的语句 使用易于读取且标准的文件格式发送问题 精确地描述问题并言之有物 话不在多而在精 别动辄声称找到 Bug 可以低声下气，但还是要先做功课 描述问题症状而非猜测 按发生时间先后列出问题症状 描述目标而不是过程 别要求使用私人电邮回复 清楚明确的表达你的问题以及需求 询问有关代码的问题时 别把自己家庭作业的问题贴上来 去掉无意义的提问句 即使你很急也不要在标题写紧急 礼多人不怪，而且有时还很有帮助 问题解决后，加个简短的补充说明 如何解读答案 RTFM 和 STFW：如何知道你已完全搞砸了 如果还是搞不懂 处理无礼的回应 如何避免扮演失败者 不该问的问题 好问题与蠢问题 如果得不到回答 如何更好地回答问题 相关资源 鸣谢","text_tokens":["发送","找到","非","不是","处理","irc","以及","列出","还","解读","发生","先后","也","做","去掉","无礼","答案","猜测","功课","扮演","语法","当","容易","回应","语句","失败","时","stack","句","，","项目","问"," ","网站","贴上来","正确","失败者","已","意义","易于","话","简介","回答","目标","好","慎选","清晰","而","声称","要求","帮助","相关","精确","如果","过程","第二步","别","说明","格式","即使","合法","上来","标准","询问","提问","但","要","礼多人不","避免","使","使用","家庭","低声","鸣谢","资源","更好","标题","而且","还是","按","精准","问题","在","可以","overflow","第二","的","需求","言之有物","私人","无","bug","败者","不到","了","先","得不到","：","你","和","很","知道","低声下气","文件","论坛","且","明确","有关","代码","回复","写","急","读取","表达","后","作业","二步","rtfm","自己","地","文件格式","之前","症状","搞砸","时间","列表","搞不懂","用","加个","家庭作业","紧急","下气","有时","stfw","多","动辄","简短","、","不该","把","并","精","与","声明","完全","描述","不要","蠢","怪","补充","电邮","有","解决","如何","不","邮件","清楚"],"title":"目录","title_tokens":["目录"]},{"location":"docs/digest/180916/#_3","text":"许多项目在他们的使用协助/说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明： 本指南不提供此项目的实际支持服务！ 我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。 如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。","text_tokens":["直接","一点","就是","支持","到","那么","情况","不停","世上","这个","也","做","这样","负责管理","本","上述","最后","这本","并且","大家","带来","已经","开心","取得","否则请","之一","人","指南","，","显著","项目","少","别问"," ","遇到","地被","既然","下","是","某些","一些","服务","他们","位置","或硬件","技术","只会","确定","好","而","。","如果","这些","说明","这点","白痴","发布","负责","所","但","认为","使用","/","那","离开","从","否则","打扰","上","深刻","请","发现","问题","在","管理","附近","不会","们","刚好","许多","就","的","不到","链接","领教","会","99%","这么","了","得不到","：","你","很","忽略","注明","中","中是","都","提供","阅读","作者","硬件","网页","此","因为","我们","懂得","实际","鼓励","超链接","需要","所有","从本","教","真正","所说","那些","声明","领域","不要","！","软件","正在","协助","痛苦","纠缠","责任","如何","有","解决","专家","不","身上","除非","是因为"],"title":"声明","title_tokens":["声明"]},{"location":"docs/digest/180916/#_4","text":"在 黑客 的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。 不只是黑客，现在开源（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件**好事**；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。 首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，\"好问题！\"是诚挚的大力称赞。 尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。 我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 失败者（撸瑟） （由于历史原因，我们有时把它拼作 lusers ）。 我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。 我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答 赢家（winner） 的问题。 如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。 所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 -- 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。 如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 -- 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。 （欢迎对本指南提出改进意见。你可以 email 你的建议至 [ esr@thyrsus.com ] 或 [ respond-auto@linuxmafia.com ]。然而请注意，本文并非 网络礼节 的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。","text_tokens":["抽出","不是","该","到","得到","提高","指向","这","偶尔","由于","擅长","用者","思维","小小","网络","有用","决定","指南","文化","喜爱"," ","技术论坛","自愿","失败者","求助","面对","他们","有效","好","敌意","要求","source","技术支持","这些","提出","方式","滤掉","白痴","傲慢","但装","往往","坏名声","变得","有着","从","乐意","尽管","意见","上","屈服","乐于","效率","可以","付出","无知者","感兴趣","风格","黑客","会","与众不同","了","关系","常","很","很大","中","写","让","生活","改进","知者","winner","或","新手","不愿","目的","有时","原因","通用","对","种","不该","明白","（","@","同样","聪明","然而","被","*","解答","如何","解决","无偿","当然","而已","不行","lusers","支持","立刻","电脑","人为","也","做","答案","最","；","厌恶","相当","当","--","解决问题","时","对本","表现","所以","好事","商业","个人","件",".","看起来","拼作","自信","思路","合同","签个","给","回答","蔑视","事实","特定","从没","帮助","由","像","达到","或者","玩味","获得","应该","使","事情","发问","不必","更","首先","多数","最终","而且","反复","暴露","技术细节","open","只要","称赞","淹没","许多","的","工具","过","不到","无助","和","以便","]","降低","事","论坛","自会","无知","要紧","都","本文","特质","疑惑","无助于","程度","想法","话题","身处","拋弃","、","并","基本","简单","教","历史","那些","希望","）","一个","撸","大多","感激不尽","花点","取决于","设身处地","就是","一员","值得","激励","而言","本","参与","观察","所提","并且","它","更不愿","索取","已经","非常","[","人","，","遇到","善于","诚挚","正确","讳言","开源","出能","不妨","服务","意识","\"","技术","繁忙","找家","快速","而","宽容","来","至","如果","每个","追问","这点","机敏","成为","高高","询问","提问","其他","com","手段","事实上","并非","那","前","努力","问题","在","就","那样","加入","咀嚼","感兴","学习","助于","特别","-","常常","对象","对此","家伙","取决","现在","高高在上","挑战","看起","自己","地","引导","经验","时间","将","似乎","是否","指望","采用","我们","需要","感激","理解力","与","！","大多数","平等","软件","公司","赢家","交流","大力","满足","不","杀手","盛行","比起","思考","一点","瑟","利用","视为","如此","esr","欢迎","挑战性","高效","激发","以","满意","这样","有趣","email","向","连","时常","理解","最好","厚礼","失败","只想","着迷","行","并非如此","不尽","是","一些","只是","尽管如此","。","建议","必须","能","态度","通常","所","可用","但","吸引","了解","事要","使用","沟通","不同","方法","没有","使用者","起来","respond","在技术上","请","不会","们","礼节","败者","想想","拋出","你","—","消耗","钱","linuxmafia","thyrsus","里","世界","名声","较","主动","注意","把","无情","变","从不","才能","真正","其实","过于","称","auto","有","想","愿意","拒绝","身上","以前","细节","兴趣"],"title":"简介","title_tokens":["简介"]},{"location":"docs/digest/180916/#_5","text":"在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情： 尝试在你准备提问的论坛的旧文章中搜索答案。 尝试上网搜索以找到答案。 尝试阅读手册以找到答案。 尝试阅读常见问题文件（FAQ）以找到答案。 尝试自己检查或试验以找到答案。 向你身边的强者朋友打听以找到答案。 如果你是程序开发者，请尝试阅读源代码以找到答案。 当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所**学到**的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。 运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（既搜索 Google 论坛 ，也搜索网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 我在 Google 中搜过下列句子但没有找到什么有用的东西 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。 别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。 准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。 小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着 蠢问题… ， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。 绝不要自以为**够格**得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去**挣到**一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。 另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。 谁能给点提示？ 、 我的这个例子里缺了什么？ 以及 我应该检查什么地方 比 请把我需要的确切的过程贴出来 更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。","text_tokens":["random","不是","非","常见问题","到","多少","得到","一下","这","他人","思维","有用","多半会"," ","时候","假设","坐","求助","他们","根本","我","好","尝试","不仅","源代码","解释","这种","即使","提出","答复","加上","以下","要","出来","结果","轻松","从","通过","有助于","相信","乐于","付出","无","黑客","会","了","贴出","得不到","一遍","很","提问者","支付","中","点","让","阅读","表达","提供","有备而来","别人","或","毕竟","草率","仅仅","所有","（","不仅仅","者","普通","实质性","一方","被","*","例子","解答","解决","贴出来","有人","别着急","找到","社区","另一方","几秒","第一","这个","也","做","上述","答案","；","做点","当","其他人","解决问题","时","出","准备","哪些","表现","好事","被动","件",".","浪费","群组","身边","回答","帮助","搜索","或者","应该","因","事情","指个","发问","更","挣","确切","教训","有备","放","句子","faq","电子","不能","另一方面","只要","舒服","的","旧","过","不到","这么","文章","先","处","和","想着","完成","论坛","且","树立","hacker","开端","因为","多","策略","、","并","手册","仔细","那些","希望","）","不要","一个","做到","搜索引擎","只","什么","花点","找","寻求","直接","既","比","以及","激励","一句","误信","学到","谁能给","方向","有助","引擎","几秒钟","j","它","容易","想得到","索取","已经","非常","？","人","试验","程序","，","贡献","遇到","新闻组","正确","朋友","出能","某些","越是","服务","错误信息","太","技术","电子邮件","一股","而","来","如果","过程","一方面","提问","其他","任何","线索","汲取","更好","复杂","前","努力","问题","在","小心","就","一边","可能","聊天室","助于","学习","只能","新闻","文件","越","自己","引导","之前","经验","一股脑","时间","将","能力","指望","错误","自","我们","需要","够格","与","蠢","着","第一次","强者","字面","地方","专家","一次","邮件","再花点","信息","思考","潜力","上网","开发","运用","着急","以","这样","心里","有趣","向","秒钟","为","一并","知识","作用","比如","看出","提示","是","打听","意义","多半","一些","google","方面","只是","再","表明","。","某个","别","能","绝不","聊天","所","但","内涵","东西","而来","以为","没有","常见","请","索引","拋出","程序开发","：","你","基于","报酬","—","决心","代码","去","检查","里","不劳而获","缺","列表","网页","用","别着","下列","…","正确方向","把","字串","问错","相似","实质","问者","有","靠","愿意","搜过","各种"],"title":"在提问之前","title_tokens":["在","提问","之前"]},{"location":"docs/digest/180916/#_6","text":"","text_tokens":[],"title":"当你提问时","title_tokens":["当","提问","时","你"]},{"location":"docs/digest/180916/#_7","text":"小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者： 在与主题不合的论坛上贴出你的问题。 在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。 在太多的不同新闻群组上重复转贴同样的问题（cross-post）。 向既非熟人也没有义务解决你问题的人发送私人电邮。 黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。 因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括**阅读** FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。 向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 -- 如果你不确定，那就向别处发送，或者压根别发。 在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。 别像机关枪似的一次\"扫射\"所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。 搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。 一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。 可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。","text_tokens":["重复","非","常见问题","到","多少","别像","得到","义务","它们","一下","不快","发生","这是","这","最后","记录","有用","文化","过去","名字"," ","假设","二是","失败者","举例","他们","机关枪","关于","机关","好","弄清楚","某种","这种","过多","即使","翻翻","要","不合","结果","出来","变得","从","链","相信","上","因此","一样","大错","可以","弄清","其","黑客","归纳","会","了","掉","探讨","很","搞清楚","抽身","中","回复","主意","让","阅读","提供","丰富","或","其它","背","对","明白","所有","（","同样","极端","者","最大","邮箱","被","*","解决","亦然","切题","清楚","发送","找到","支持","中提","情况","别太","第一","搞清","也","做","充当","典型","答案","初级","最","；","可移植","错发","--","感受一下","之一","出","时","热门","群组","书以","第一步","乐观","回答","似的","潜在","事实","帮助","致力","史记","像","搜索","或者","使","事情","遭遇","更","包括","熟人","会想","还是","faq","淹没","程序界面","许多","的","工具","私人","链接","感受","先","再说","移植","大喊大叫","和","无法忍受","忽略","事","论坛","界面","风险","发文","都","post","软硬件","贴","一般来说","之间","话题","因为","理由","致力于","转贴","多","大喊","、","已有","仔细","跨平台","历史","那些","无关","）","不要","关键","一个","正在","公共","搜索引擎","免费","骆驼","什么","前先","看作","无用","既","比","一是","报告","私有","保护","引擎","接受","场合","容易","已经","非常","人","程序","，","及","cross","无法","网站","困难","新闻组","差异","朋友","\"","太","技术","确定","观众","稻草","关键词","而","来","套件","如果","系统","这点","平台","语言","提问","事实上","流程","那","极好","别处","伴随","搞错","更好","为什么","许可","走向","渠道","问题","在","小心","努力","就","涌入","加入","bug","可能","-","新闻","文件","压垮","一步","地来","几个","自己","硬件","之前","看看","操作","下述","是否","错误","估计","与","几次","别发","内容","！","软件","看","电邮","一次","不","邮件","信息","软硬","扫射","一般","欢迎","以","这样","向","那根","最好","顾问","理解","失败","主题","受到","压根","问","来说","是","一些","老练","google","相关","。","还有","反之","说明","别","能","通常","举例来说","历史记录","东西","沟通","不同","没有","windows","也许","常见","反之亦然","事先","索引","不会","操作系统","败者","那里","：","你","忍受","—","选择","个","unix","作者","reporting","陌生","挑选","列表","网页","用","张贴","进阶","那儿","较","剔除","有","想","愿意","大叫","身上"],"title":"慎选提问的论坛","title_tokens":["提问","慎选","的","论坛"]},{"location":"docs/digest/180916/#stack-overflow","text":"搜索， 然后 在 Stack Exchange 问。 近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。 因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。 Stack Exchange 已经成长到 超过一百个网站 ，以下是最常用的几个站： Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。 Stack Overflow 是问写程序有关的问题。 Server Fault 是问服务器和网管相关的问题。","text_tokens":["找到","之类","社区","到","电脑","exchange","fault","源码","或是","这里","尤其","类似","答案","最","成长","网络","已经","主题","高","stack","程序","，","项目","问"," ","网站","站","主要","是","年来","一些","前面","服务","某人","google","回答","技术","特定","只是","再","相关","及其","。","如果","近年来","user","搜索","能","server","成为","一百","任何","他","以下","结果","即时","往往","跟","更","没有","超过","上","开放","而且","请","渠道","问题","在","索引","overflow","们","网管","的","会","标签","了","先","服务器","：","你","和","百个","很","常用","有关","中","机率","代码","去","super","务器","写","开放源码","几个","让","近年","之前","community","连线","用","因为","通用","（","缩小","那些","无关","）","一个","看","tag","有","然后","找","一百个"],"title":"Stack Overflow","title_tokens":["overflow","stack"," "]},{"location":"docs/digest/180916/#irc","text":"本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。 事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 \"用**我们的**版本\"。 在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。 通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。 在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。","text_tokens":["非","该","支持","则","到","觉得","irc","欢迎","得到","先去","一句","一下","开发","发生","也","做","这","这样","引擎","之为","当","用者","回应","最好","为","人","时","英语","出","相对","程序","该项","，","项目","所以"," ","宣传","时候","遇到","是","已","群组","话","来得","一些","服务","国家","版本","他们","\"","这会","电子邮件","事实","好","只是","特定","发行版","关键词","全部内容","再","而","有没有","相关","帮助","来","。","很长","如果","这些","user","搜索","就试","通常","或者","聊天","发布","提问","事实上","任何","即时","使用","所用","发行","没有","否则","通过","使用者","也许","常见","来得及","首先","保留","group","功能","还是","电子","问题","在","可以","索引","的","黑客","过","可能","linux","先","你","洪水","特别","很","论坛","本身","中","回复","发文","几个","在此之前","提供","之前","广告","首选","或","开发者","列表","网页","新手","用","没","此","增长","目的","本地","称之为","我们","通用","仅仅","间","并","开始","（","简单","与","公开","普通","）","关键","内容","不要","描述","着","赞助","确认","正在","频道","全部","协助","趋势","*","大多","搜索引擎","交流","地方","只","有些","有","邮件","以前","寻求"],"title":"网站和 IRC 论坛","title_tokens":["和"," ","网站","论坛","irc"]},{"location":"docs/digest/180916/#_8","text":"当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法： 任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。 向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。 大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。 如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。 如果一个项目既有\"使用者\" 也有\"开发者\"（或\"黑客\"）邮件列表或论坛，而你又不会动到那些源代码，那么就向\"使用者\"列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。 然而，如果你**确信**你的问题很特别，而且在\"使用者\" 列表或论坛中几天都没有回复，可以试试前往\"开发者\"列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意） 如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。","text_tokens":["找到","负担","转发","发信","不是","支持","常见问题","利用","视为","到","以使","那么","情况","人能","欢迎","得到","半","转发给","开发","私有","愚蠢","地址","首页","尤其","以","也","这是","观察","答案","引擎","最","参与","他人","向","提及","将来","当","它","有益","领导","用者","暗地里","动","最好","已经","前往","人","时","受到","秘密","，","分散","项目","多半会","以至"," ","假设","反对","下","来说","是","群组","某些","多半","陈述","信息","他们","给","\"","回答","太","电子邮件","事实","好","只是","允许","整个","而","完整","干扰","来","领导人","。","某个","如果","成员","源代码","建议","这种","既有","反之","说明","搜索","能","别","即使","成为","提出","噪音","方式","提问","合适","私下","但","事实上","任何","他","了解","要","其中","认为","应该","查一查","使用","发问","暗地","更","通过","没有","多数","也许","常见","使用者","尽管","前","而且","请","没什么","发给","电子","不能","问题","办法","可以","太忙","索引","不会","在","许多","其","就","的","场景","私人","黑客","不到","会","个别","那里","确信","了","行事","先","：","你","和","特别","很","只能","文件","论坛","选择","骚扰","本身","代码","中","回复","几个","主意","存在","都","提供","改进","自己","查","人员","地","试试","地里","没法","再次","开发者","或","列表","将","网页","此","看到","张贴","其它","理由","试过","采用","我们","至于","对","需要","并","经常","（","维护者","公开","那些","几天","）","内容","不要","然而","大多数","一个","软件","又","被","维护","*","大多","存档","搜索引擎","解答","问到","有","什么","相应","不","不用","邮件","处置","找","以至于","清楚"],"title":"第二步，使用项目邮件列表","title_tokens":["，","第二步","项目","列表","使用","二步","邮件","第二"]},{"location":"docs/digest/180916/#_9","text":"在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的 帮帮忙 、 跪求 、 急 （更别说 救命啊！！！！ 这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。 一个好标题范例是 目标 —— 差异 式的描述，许多技术支持组织就是这样做的。在 目标 部分指出是哪一个或哪一组东西有问题，在 差异 部分则描述与期望的行为不一致的地方。 蠢问题：救命啊！我的笔记本电脑不能正常显示了！ 聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。 更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。 编写 目标 —— 差异 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境**和**你遇到的问题。 总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。 如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 Re: 测试 或者 Re: 新 bug 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。 对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。 仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。 在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你**只想**在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。","text_tokens":["别用","非","不是","则","该","到","妄想","总而言之","一眼","一下","它们","mv1005","还","这","查看","指出","用者","一致","条件反射","前文","紧密结合"," ","笔记","密结","笔记本电脑","1","字","不过","立即","留下","串","我","目标","好","新来","这种","技术支持","提出","方式","全新","要","thread","通过","编写","有助于","上","反感","人读","其","行为","黑客","会","想像","了","之下","机会","中","回复","让","阅读","分离","讨论","比较",":","或","其它","引起","仅仅","对","很难","明白","查寻","所有","（","帮帮","re","读者","聪明","痛苦","被","*","影响","适当","重视","支持","电脑","瞄","这个","做","类似","记得","隐藏","连贯","空间","基本上","所以","一组","做法",".","看起来","另外","浪费","引用","组织","群组","给","只会","特定","简单扼要","允许","变形","可","像","搜索","帮忙","紧密","或者","应该","别说","哪","mutt","更","需","能够","抓住","芯片组","笔记本","显示","而且","还是","不能","某牌","许多","的","不到","里面","炉灶","和","以便","忽略","论坛","本身","注意力","都","指定","程度","因为","、","并","基本","鼠标","简单","）","不要","范例","一个","大约","正在","光标","只","有些","什么","除非","新","直接","出现","就是","而言","有助","救命","接受","并且","另起炉灶","宁可","？","人","程序","，","相同","足够","遇到","故","差异","以外","技术","观众","喋喋","而","来","如果","过程","的话","这点","当前","关注","不休","帮帮忙","提问","条件","线索","更好","标题","资深","问题","在","就","折叠","喋喋不休","bug","显卡","型号","正常","助于","可使","-","新闻","跪求","针对","还会","消息","看起","地","反映","图形","将","芯片","不够","活跃","我们","扼要","开始","测试","与","改变","描述","蠢","内容","！","看","以内","地方","专家","不","邮件","信息","思考","环境","人会","排序","串来","式","以","这样","修改","org","为","细致","只想","阅读程序","比如","问","限制","下","是","一些","部分","结合","只是","表明","。","稍","删减","还有","串外","能","发","通常","东西","极","版中","其中","使用","期望","不同","没有","啊","使用者","人群","起来","请","按","索引","不然","看不到","：","你","—","连贯性","点击","去","检查","急","x","6.8","再次","列表","网页","用","注意","50","反射","暧昧","对于","永远","存档","有","想","打动","不用"],"title":"使用有意义且描述明确的标题","title_tokens":["的","标题","意义","描述","有","使用","且","明确"]},{"location":"docs/digest/180916/#_10","text":"以 请将你的回复寄到…… 来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做， 换个好点的 ；如果是操作系统不支持这种邮件程序，也换个好点的。 在论坛，要求通过电子邮件回复是非常无礼的，除非你相信回复的信息可能比较敏感（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如 追踪此讨论串 、 有回复时发送邮件提醒 等功能。","text_tokens":["思考","发送","不是","支持","到","觉得","得到","几秒","一下","地址","以","也","这样","做","无礼","答案","；","秒钟","几秒钟","追踪","非常","时","程序","，","设置","多半会"," ","等","诸如","是","某些","多半","为了","信息","串","回答","电子邮件","只是","整个","而","要求","来","。","敏感","如果","系统","这种","客户端","使","更","通过","相信","功能","请","而且","寄","串时","电子","问题","在","可以","操作系统","的","不到","可能","会","几乎","送给","得不到","你","客户","知道","麻烦","论坛","回复","让","都","讨论","比较","花","操作","将","网页","换个","此","原因","…","我们","、","未知","所有","（","提醒","）","只","有","想","发送给","有人","结束","不","邮件","好点","除非"],"title":"使问题容易回复","title_tokens":["容易","使","回复","问题"]},{"location":"docs/digest/180916/#_11","text":"我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。 正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它**必须很**准确，而且有迹象表明你是在思考和关注问题。 正确地拼写、使用标点和大小写，不要将 its 混淆为 it's ， loose 搞成 lose 或者将 discrete 弄成 discreet 。不要**全部用大写**，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。 Alan Cox 也许可以这样做，但你不行）。 更白话的说，如果你写得像是个半文盲[译注： 小白 ]，那多半得不到理睬。也不要使用即时通信中的简写或 火星文 ，如将 的 简化为 d 会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。 如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。 如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的： [译注：以下附上原文以供使用] English is not my native language; please excuse typing errors. 英文不是我的母语，请原谅我的错字或语法。 If you speak $LANGUAGE, please email/PM me; I may need assistance translating my question. 如果你说**某语言**，请寄信/私讯给我；我需要有人协助我翻译我的问题。 I am familiar with the technical terms, but some slang expressions and idioms are difficult for me. 我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。 I've posted my question in $LANGUAGE and English. I'll be glad to translate responses, if you only use one or the other. 我把我的问题用**某语言**和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。","text_tokens":["非","不是","最低","be","一下","原文","网络","英语","文化","少","打包票","重要","d"," ","assistance","宁愿","尚未","字","大声嚷嚷","为了","他们","我","好","字句","这些","以下","出来","pm","expressions","从","乐意","不甚了解","上","粗心","可以","弄清","其","黑客","会","only","得不到","译注","很","cox","提问者","中","回复","点","写","搞","同时","文","阅读","比较","大写","或","半文盲","通用","马虎","对","errors","alan","（","可能性","者","全部","ve","被","*","or","寄信","有人","不行","火星","$","到哪去","准确","理睬","也","做","大小","无礼","嚷嚷",",","标点","；","俚语","犯点","语句","glad","am","other","一大","我敢","may","更糟",".","看起来","在乎","typing","会理","translating","给","one","回答","这会","潜在","事实","is","似地","像","请原谅","或者","原谅","即时","使","更","看不懂","but","difficult","而且","if","不能","鬼画符","的","不到","i","成","用不着","小白","和","斟酌","]","please","决不能","论坛","you","僵硬","额外","删除","me","没","一般来说","翻译","因为","一种","粗心大意","挖苦","、","降到","名词","）","不要","一个","协助","excuse","也好","除非","如","translate","直接","一大堆","用法","觉得","大声","肯定","斟酌一下","值得","以供","某","或是","半文","语法","它","discreet","[","否则请","画符","人","程序","，","精力","its","困难","正确","文盲","familiar","speak","native","太","技术","繁忙","找死","如果","打包","小孩","母语","小写","弄","像是","关注","附上","语言","提问","绝对","事实上","need","私讯","/","那","否则","别处","熟悉",";","译成","发现","问题","在","键而省","use","就","ll","可能","不易","符号","得","s","特别","to","麻烦","and","大意","几个","不着","消息","看起","地","经验","时间","看重","将","错字","白话","我们","需要","some","与","只用","english","分别","不","翻译成","思考","耗在","视为","一般","幽默","书写","打","这样","for","email","小错","另","指责","discrete","为","通信","拼写","with","我会","迹象","来说","不想","是","提示","多半","in","second","简化","大堆","表明","。","必须","能","通常","are","没错","非正式","'","my","但","了解","使用","正式","technical","slang","也许","the","起来","大小写","请","it","loose","混淆","英文","question","外语","简写","responses","：","你","标点符号","知道","language","—","个","idioms","俗语","花","两者","决不","用","最多","lose","把","包票","对于","说","terms","问者","posted","有","not"],"title":"用清晰、正确、精准并语法正确的语句","title_tokens":["的","语句","、","用","清晰","并","精准","正确","语法"]},{"location":"docs/digest/180916/#_12","text":"如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以： 使用纯文字而不是 HTML ( 关闭 HTML 并不难）。 使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。 不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。 但是，对一些特殊的文件**不要**设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。 在英语论坛中，不要使用 Quoted-Printable MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的 =20 符号既难看也分散注意力，甚至有可能破坏内容的语意。 绝对，**永远**不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。 如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的 智能引号 功能 （从[选项] > [校订] > [自动校正选项]，勾选掉 智能引号 单选框），以免在你的邮件中到处散布垃圾字符。 在论坛，勿滥用 表情符号 和 HTML 功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。 如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的 查看源代码 命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。","text_tokens":["之辈","发送","字体","但是","不是","纯文字","非","支持",">","既","处理","姑娘","电脑","确保","很多","即便","热气","人为","宽","它们","还","愚蠢","以","也","做","这","类似","查看","一行","前提","答案","分割","选框","文件夹","厌恶","以免","微软","文本","它","终端机","当","破坏","垃圾","word","最好","记录","四处","表情符号","冒","非常","人们","[","傻笑","人","时","英语","难以","=","程序","不难","类","，","ascii","设置","分散","校订","所以","附件","多半会","一两个"," ","引号","等","困难","信心","字","使得","是","反应","多半","一些","多行","倒","部分","他们","两个","数据","花哨","(","电子邮件","outlook","只是","好","滥用","微软公司","而","要求","日志","来","。","命令","如果","源代码","不仅","必须","这种","像","这些","格式","通常","或者","色彩","语言","无能","html","绝对","文本文件","但","应该","东西","认为","换行","使","使用","模板","家门口","表情","纯","校正","quoted","从","能够","没有","多数","windows","编写","上","选单","自动","门口","功能","patch","文字","句子","一样","譬如","电子","问题","可以","在","易懂","难看","们","特殊","就","的","感兴趣","散布","黑客","一两","可能","会","勾选掉","生成","符号","这么","图形用户界面","得","感兴","奇怪","：","你","基于","和","原样","忽略","端机","-","家门","很","]","包含","看来","文件","论坛","对此","或会话","printable","代码","回复","中","附带","编码","点","注意力","语意","个","界面","搞","主意","检查","同时","让","阅读","后","提供","本文","选项","用户","过滥","消息","个字符","地","小姑","变成","图形","或","将","用","小于","看到","张贴","固定","其它","彩色","对性","指望","mime","一定","甚至","件夹","仅仅","信件","单选","对","注意","20","excel","、","80","文档","并","默认","（","拷贝","不仅仅","更愿读","一段","真正","读者","宽度","者","那些","小姑娘","兴趣","对于","默认设置","）","内容","不要","终端","猪粪","大多数","勿","字符","公司","单选框","永远","被","到处","*","设想","档案","大多","于","无能之辈","封闭","有","智能","满足","有人","不","邮件","除非","关闭","如","倾向"],"title":"使用易于读取且标准的文件格式发送问题","title_tokens":["发送","的","易于","格式","使用","读取","文件","且","标准","文件格式","问题"]},{"location":"docs/digest/180916/#_13","text":"仔细、清楚地描述你的问题或 Bug 的症状。 描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如： Fedora Core 4 、 Slackware 9.1 等）。 描述在提问前你是怎样去研究和理解这个问题的。 描述在提问前为确定问题而采取的诊断步骤。 描述最近做过什么可能相关的硬件或软件变更。 尽可能的提供一个可以 重现这个问题的可控环境 的方法。 尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。 以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。 Simon Tatham 写过一篇名为《 如何有效的报告 Bug 》的出色文章。强力推荐你也读一读。","text_tokens":["环境","大大","重现","以上","得到","尽量","以及","尽可","报告","simon","怎样","这个","发生","尤其","也","当","理解","为","fedora","时","程序","变更","，","读一读","做过","重要"," ","等","遇到","版本号","是","研究","名为","可控","速度","core","版本","给","回答","有效","确定","发行版","相关","而","揣测","。","最近","几点","系统","》","步骤","配置","提问","认为","发行","经销","强力","方法","采取","前","机器","问题","在","可以","机器配置","们","操作系统","的","bug","黑客","可能","会","出色","这么","反问","文章","：","你","一遍","和","机会","9.1","预先","中","代码","去","tatham","都","提供","诊断","尽可能","应用程序","地","硬件","之前","症状","操作","一篇","或","将","《","应用","大大的","、","推荐","（","仔细","写过","经销商","描述","）","提升","一个","软件","做时","如何","什么","slackware","信息","4","如","清楚"],"title":"精确地描述问题并言之有物","title_tokens":["言之有物","描述","并","精确","问题","地"]},{"location":"docs/digest/180916/#_14","text":"你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。 这样做的用处至少有三点。 第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加； 第二，简化问题使你更有可能得到**有用**的答案； 第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。","text_tokens":["找到","不是","庞大","到","重现","得到","尽量","转录","报告","第一","这样","做","这","答案","至少","；","增加","它","有用","资料","为","用处","第三","权宜之计","出","程序","，","三点","表现"," ","简化","回答","好","要求","而","。","精确","如果","过程","能","越小越","或者","提问","剪裁","挂掉","使","更","方法","复杂","努力","问题","可以","在","第二","成堆","付出","的","就","bug","可能","了","得","你","很","机会","代码","中","样例","提供","自己","或","将","权宜","情境","精炼","把","需要","并","测试","简单","完全","内容","出错","*","有","解决","信息"],"title":"话不在多而在精","title_tokens":["话","而","不","精","在","多"]},{"location":"docs/digest/180916/#bug","text":"当你在使用软件中遇到问题，除非你非常、**非常**的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的 Bug ，你应该能提供相应位置的修正或替代文件。 请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前 已经做了这些，是吧 ？）。这也意味着很有可能是你弄错了而不是软件本身有问题。 编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有 Bug 时，这尤其严重。 提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是**你**做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。","text_tokens":["找到","一点","不是","就是","回归","到","抱怨","尽可","某","修正","尤其","也","做","这","地使","冒犯","嚷嚷","这样","写得","向","当","它","用者","记得","总比","最好","已经","非常","替代","解决问题","？","时","人","总是","适用","，","真的","辛苦"," ","遇到","意味","正确","提示","是","多半","部分","道歉","版本","他们","位置","好","表明","声称","而","来","做错","。","如果","源代码","还有","欠","的话","这些","这点","搜索","能","即使","像是","或者","提问","私下","应该","其中","要","真有","使用","否则","使用者","编写","标题","前","一","请","发现","问题","在","吧","许多","就","的","行为","bug","可能","会","确信","了","弄错","：","你","补丁","和","很","文件","本身","中","代码","回复","都","提供","阅读","意味着","尽可能","别人","或","网页","根据","没","能力","看到","其它","不够","动辄","对","、","惹恼","（","维护者","测试","同样","严重","真正","完全","）","不要","着","一个","软件","维护","*","有","解决","质疑","什么","相应","然后","不","除非","完美"],"title":"别动辄声称找到 Bug","title_tokens":["动辄","找到","别","bug"," ","声称"]},{"location":"docs/digest/180916/#_15","text":"有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气： 我知道我只是个可悲的新手，一个撸瑟，但... 。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。 别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。 有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。","text_tokens":["别用","就是","瑟","到","既","那么","情况","得到","尽可","粗鲁","尤其","也","这","动物","另","初学","为","人","时","版面","原始","，","真的"," ","遇到","浪费","是","令人","他们","位置","我","只是","要求","来","。","如果","别","答复","傲慢","提问","但","条件","认为","困扰","使","那","更","低声","没有","伴随","更好","反感","一样","问题","的","含糊不清","可能","会","了","：","你","和","知道","低声下气","取而代之","—","论坛","选择","去","个","尽可能","地","时间","灵长","或","网页","新手","用","设有","灵长类","...","下气","有时","初学者","这比","实际","不该","明白","把戏","并","极端","与","含糊","学者","定位","描述","着","一个","可悲","撸","有些","专","背景","清楚"],"title":"低声下气不能代替你的功课","title_tokens":["的","代替","低声下气","下气","低声","不能","功课","你"]},{"location":"docs/digest/180916/#_16","text":"告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。 蠢问题 我在编译内核时接连遇到 SIG11 错误， 我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？ 聪明问题 我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组）， 256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误， 但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。 所有内存都换过了，没有效果。相关部分的标准编译记录如下…。 由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你： 所有的诊断专家都来自密苏里州。 美国国务院的官方座右铭则是： 让我看看 （出自国会议员 Willard D. Vandiver 在 1899 年时的讲话： 我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。 ） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！","text_tokens":["如下","但是","不是","则","1899","233","觉得","内存","苏里","如此","电脑","既","情况","以上","头","滔滔","证据","威盛","尽可","它们","怎样","这里","编译","发生","也","满意","这","讲话","而言","corsair","以后","主板","主机板","；","由于","向","猜测","告诉","启动","最好","记录","有用","有句","一致","？","不起作用","人","时","pc133","关机","难以","原始","，","作用","年","所以","重要","相同","d"," ","遇到",".","飞线","重新","结论","是","晚上","话","陈述","求助","出产","部分","apollo","国家","他们","给","党人","接连","有效","我","民主党","只是","从没","而","相关","民主","来","帮助","。","内核","本本","如果","说服","解释","必须","这种","开机","说明","这点","能","某条","国会","造成","标准","组装","推测","应该","会议员","要","认为","vp2","雄辩","机板","东西","原原本本","fic","主机","/","配合","从","没有","芯片组","上","搭","没什么","因此","一","为什么","出自","不能","问题","在","可以","不会","们","许多","效果","就","的","内","需求","sig11","怀疑","黑客","过","重新启动","民主党人","可能","归纳","看吧","确信","pa2007","展示","了","willard","amd","产生","k6","美国国务院","会议","：","你","还用","议员","和","以便","很","-","理论","搭载","检查","换","让","都","美国","针对","真实","自己","吗","诊断","国务院","尽可能","地","症状","看看","别人","国务","芯片","用","似乎","看到","推断","cpu","一种","错误","…","官方","我们","频频","20","座右铭","原本","并","分钟","所有","（","提醒","与","者","密苏里州","牛蒡","256mb","聪明","vandiver","）","描述","蠢","玉米","！","一个","sdram","大方","又","来自","走线","专家","什么","棉花","工作","密苏里","国会议员","清楚"],"title":"描述问题症状而非你的猜测","title_tokens":["的","非","描述","而","问题","猜测","症状","你"]},{"location":"docs/digest/180916/#_17","text":"问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。 如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住， 多 不等于 好 。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。 如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。","text_tokens":["一系","就是","不是","该","处理","情况","以及","有所","发生","这样","增加","在读","垃圾","调试","记录","有用","非常","时","接下来","程序","哪些","，","开头"," ","行","下","引用","简述","反应","好","很长","再","相关","而","例如","帮助","。","命令","如果","这些","说明","能","步骤","四个","所","应该","段落","v","往往","挂掉","命令行","详述","超过","线索","前","因此","机器","按","调试信息","问题","在","们","淹没","就","的","工具","黑客","会","顺序","生成","了","你","直到","和","以便","-","知道","系列","包含","选择","中","里","开关","让","提供","记住","选项","诊断","等于","选取","时间","级别","操作","下来","一系列","多","对","注意","20","最有","试着","操作步骤","并","若干","（","脚本","读者","一段","）","运行","内容","软件","找出","适当","有","不","接下","信息","如"],"title":"按发生时间先后列出问题症状","title_tokens":["时间","症状","发生","先后","按","问题","列出"]},{"location":"docs/digest/180916/#_18","text":"如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。 经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。 蠢问题 我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？ 聪明问题 我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot）， 但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。 第二种提问法比较聪明，你可能得到像是 建议采用另一个更合适的工具 的回复。","text_tokens":["不是","到","重现","一幅","得到","报告","某","怎样","跑","做","这","劲","条路","table","rgb","另","取得","？","人","程序","，","开头","二种","色码","选择器","无法"," ","第二种","是","陈述","他们","意识","技术","我","目标","区块","特定","而","替换","帮助","来","。","弄清楚","如果","每个","建议","怎样才能","能","步骤","达到","像是","图片","值","所","提问","合适","但","怎么","以为","结果","走","更","从","方法","没有","法","卡住","上","心中","某事","问题","在","弄清","第二","就","的","工具","bug","道路","可能","搞定","唯一","高层","成","了","却","你","有个","slot","知道","高层次","选择","很大","本身","编辑","中","回复","颜色","现在","问该","自己","进制","比较","十六进制","才","用","自","采用","color","要费","经常","十六","（","层次","才能","聪明","）","描述","蠢","正试","着","一个","被","绘图","达到目标","如何","有","想","然后","寻求","选定","清楚"],"title":"描述目标而不是过程","title_tokens":["目标","不是","描述","而","过程"]},{"location":"docs/digest/180916/#_19","text":"黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。 当你要求私下回复时，这个过程和奖励都被中止。别这样做，让**回复者**来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。 这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是 向我发电邮，我将为论坛归纳这些回复 。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。","text_tokens":["就是","信守诺言","到","那么","得到","邮","礼貌","这个","之处","也","这样","做","这","神奇","不当","向","当","句会","为","非常","解救","决定","人","时","，","以至"," ","雷同","是","群组","一些","回答","太","我","差","完整","要求","帮助","来","。","如果","过程","必须","这些","别","通常","或者","提问","私下","其他","真","但","作为","应该","他","认为","出来","更","从","能够","没有","引来","编写","大量","条","学识","有限","问题","可以","们","的","奖励","黑客","归纳","可能","会","确信","这么","了","规则","肤浅","你","洪水","和","透明","新闻","论坛","—","中","回复","帮助者","同时","存在","一条","让","都","提供","中止","发电","同行","经验","或","才","将","列表","此","信守","能力","看到","诺言","是否","因为","其它","般的","至于","注意","对","、","试着","救出","公开","者","最初","纠正","解救出来","不当之处","被","*","解决","有","例外","不","邮件","以至于","是因为","兴趣"],"title":"别要求使用私人电邮回复","title_tokens":["私人","别","电邮","使用","要求","回复"]},{"location":"docs/digest/180916/#_20","text":"漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。 如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。 要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。 所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问 我想更好的理解 X，可否指点一下哪有好一点说明？ 通常比问 你能解释一下 X 吗？ 更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。","text_tokens":["发送","一点","亲自","则","到","界定","比","奉献","得到","或是","一下","区别","改正","有所","上限","专业技能","也","这样","做","这","答案","最","帮","很忙","厌恶","技巧","相当","漫无边际","减","等等","理解","有用","节制","为","？","人","辨识","，","便于","少","所以","精力","问"," ","忙","充裕","是","部分","他们","给","简化","回答","这会","我","好","而","要求","来","帮助","。","如果","解释","回答者","定出","说明","能","通常","明智","集中","比问","提问","所","其他","但","要","指点","使","无节制","很棒","从","资源","漫无","更好","请","而且","因此","大部","不能","问题","在","近乎","们","大部分","付出","就","的","表述","无边","可能","那里","想像","这么","有所区别","得","你","补丁","和","完成","—","明确","边际","代码","回复","检查","世界","专业","x","哪有","无休","正是","提供","越","哪里","吗","花","看看","时间","别人","最少","因为","多","集中精力","对","技能","最有","、","把","需要","（","替","可否","一段","最忙","真正","那些","无休无止","）","黑洞","运作","一个","所处","于","解答","有","想","专家","什么","工作","解释一下","稀缺","是因为","如","倾向"],"title":"清楚明确的表达你的问题以及需求","title_tokens":["的","需求","清楚","表达","明确","问题","以及","你"]},{"location":"docs/digest/180916/#_21","text":"别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声： 它不能工作 会让你完全被忽略。只贴几十行代码，然后说一句： 在第七行以后，我期待它显示 <x>，但实际出现的是 <y> 比较有可能让你得到回应。 最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能**刚好**展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看 话不在多而在精 一节）。 一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。 如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。","text_tokens":["case","出现","异常",">","处理","重现","信","一般","得到","以及","一句","一下","编译","这个","而言","这样","做","查看","也","一行","以后","这","他人","帮","最","一节","；","答案","并且","相当","它","容易","回应","调试","取得","？","出","就要","程序","，","分散","开头","无法"," ","足够","行","y","复制","直译","提示","是","制作","话","部分","令人","他们","成功","有效","太","我","区块","程序处理","特定","好","只是","要求","而","例如","帮助","。","尝试","demonstrating","如果","test","过程","这种","别","能","帮忙","越小越","即使","关注","方式","入手","造成","状况","其他","但","应该","期待","怎么","要","了解","出来","哪","认为","/","那","更","方法","几十","显示","而且","为什么","不能","问题","在","精简","可以","努力","提到","刚好","们","自行解决","付出","就","的","行为","一般而言","合作","审查","加入","bug","黑客","可能","会","展示","了","产生","第七","先","：","你","特别","忽略","-","知道","包含","—","<","代码","缩影","中","注意力","个","review","x","让","几百","缩减到","提供","减到","比较","别人","或","下来","将","贴","自行","一部分","张贴","看到","应用","一定","多","注意","种","实际","需要","并","一份","（","精","测试","与","一段","完全","缩减","一部","描述","）","说","内容","这段","一个","移除","从何","永远","被","*","足以","影响","片段","只","试用","一声","总之","有","习惯","测试用例","如何","解决","愿意","什么","然后","工作","想","不","一小"],"title":"询问有关代码的问题时","title_tokens":["的","有关","时","问题","询问","代码"]},{"location":"docs/digest/180916/#_22","text":"黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由**你**来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。 如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的**使用者**邮件列表或论坛中提问。尽管黑客们**会**看出来，但一些有经验的使用者也许仍会给你一些提示。","text_tokens":["到","得到","中学","式","这","最后","擅长","；","用者","曾","哪些","，","项目","无法"," ","仍会","提示","是","群组","一些","给","要求","完整","来","。","如果","由","这些","提问","但","东西","出来","使用","家庭","从","尽管","使用者","多数","也许","解决方案","一招","碰到","问题","可以","在","们","的","怀疑","黑客","会","搞定","分辨","了","得","你","很","论坛","方案","中","点","都","作业","自己","试试","仍然","经验","或","列表","家庭作业","因为","我们","（","同样","类","但别","）","大多数","一个","看","*","大多","解决","有","邮件"],"title":"别把自己家庭作业的问题贴上来","title_tokens":["的","别","把","作业","家庭作业","贴上来","家庭","自己","上来","问题"]},{"location":"docs/digest/180916/#_23","text":"避免用无意义的话结束提问，例如 有人能帮我吗？ 或者 这有答案吗？ 。 首先：如果你对问题的描述不是很好，这样问更是画蛇添足。 其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如： 没错，有人能帮你 或者 不，没答案 。 一般来说，避免用 是或否 、 对或错 、 有或没有 类型的问句，除非你想得到 是或否类型的回答 。","text_tokens":["类型","是","除非","或","意义","不是","而且","用","毫无","没","一般来说","问是","一般","他们","问题","更是","得到","或否","们","回答","我","的","蔑视","无","对","好","、","错","这样","黑客","会","例如","来","帮","答案","。","由于","如果","添足","：","你","的话","毫无意义","想得到","能","描述","很","通常","或者","？","—","没错","厌烦","这有","提问","无意","但","，","避免","其次","画蛇添足","有","问"," ","结束","有人","逻辑","表示","不","吗","没有","首先","问句","正确","来说","上"],"title":"去掉无意义的提问句","title_tokens":["的","无","意义","去掉","提问","句"]},{"location":"docs/digest/180916/#_24","text":"这是你的问题，不是我们的。宣称 紧急 极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是， 紧急 这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。 有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。 当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如 紧急：帮我救救这个毛绒绒的小海豹！ 肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。 如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。","text_tokens":["直接","一点","不是","政治","肯定","觉得","信","情况","高调","值得","几遍","或是","小","礼貌","这个","也","做","这","这样","无礼","帮","感觉","思议","过滤","垃圾","最好","海豹","人们","人","指南","空间","，","良好","但用","重要","国际"," ","诸如","下","不可","字","space","是","多半","一些","他们","自我","回答","我","多读","事实","再","。","如果","快","这种","station","毛绒","剩下","宣称","这点","事与愿违","能","发","通常","关注","即使","企图","其他","事实上","认为","即时","使","更","不同","从","没有","多数","也许","自私","标题","international","譬如","问题","在","提到","们","的","行为","黑客","不到","可能","会","了","看不到","滤器","：","你","直到","掉","和","很","忽略","—","很大","救救","去","点","风险","发文","让","毛绒绒","地","时间","删除","或","看到","张贴","紧急","因为","原因","过滤器","引起","压力","我们","不可思议","极有","慈善","把","惹恼","（","这份","严重","与","希望","半个","）","内容","大多数","！","永远","被","nasa","大多","地方","自我感觉","有","例外","空间站","弄懂","兴奋","当然","不行","兴趣"],"title":"即使你很急也不要在标题写紧急","title_tokens":["写","急","标题","很","不要","也","即使","紧急","在","你"]},{"location":"docs/digest/180916/#_25","text":"彬彬有礼，多用 请 和 谢谢您的关注 ，或 谢谢你的关照 。让大家都知道你对他们花时间免费提供帮助心存感激。 坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的） 然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。 （我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得 先谢了 意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说 先谢了 ，**然后**事后再对回复者表示感谢，或者换种方式表达感激，譬如用 谢谢你的关注 或 谢谢你的关照 。）","text_tokens":["一点","不是","就是","到","肯定","觉得","比","一般","得到","道谢","报告","价值","也","这","本","彬彬","关照","谢谢您","增加","语法","大家","宁可","回应","有用","指南","那种","彬彬有礼","，","重要","任何人"," ","表示","有点","事后","表示感谢","专用","意味","正确","客气","是","一些","先说","他们","技术","清晰","再","而","帮助","来","。","有礼","如果","建议","先谢","这点","能","格式","关注","或者","方式","合法","发布","教给","待","但","任何","避免","评价","使用","从","没有","上","资深","请","多用","何人","鲜明","按","譬如","精准","不能","问题","们","自从","就","的","黑客","bug","要么","会","那里","唯一","了","暗示","你","和","坦白","知道","机会","取而代之","谢谢","预先","回复","一条","让","都","提供","后","记住","感谢","表达","缺陷","意味着","花","时间","或","唐突","用","心存","我们","反馈","对","注意","、","感激","并","（","严重","含糊","不解","者","换种","）","然而","一串","读","*","免费","有","解决","什么","然后","不用","坦白说"],"title":"礼多人不怪，而且有时还很有帮助","title_tokens":["还","，","礼多人不","而且","很","有","帮助","有时","怪"]},{"location":"docs/digest/180916/#_26","text":"问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。 最理想的方式是向最初提问的话题回复此消息，并在标题中包含 已修正 ， 已解决 或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串 问题 X 和 问题 X - 已解决 的潜在回复者就明白不用再浪费时间了（除非他个人觉得 问题 X 的有趣），因此可以利用此时间去解决其它问题。 补充说明不必很长或是很深入；简单的一句 你好，原来是网线出了问题！谢谢大家 – Bill 比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。 对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此**之后**才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。 除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。 至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。 思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。 在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。","text_tokens":["思考","不是","常见问题","利用","到","觉得","下次","比","得到","或是","一句","一下","怎样","列出","它们","材料","大可不必","礼貌","价值","修正","网线","也","而言","发个","有趣","类似","这是","参与","他人","最","盲点","有助","；","至少","感觉","向","为重","将来","推理小说","大家","长篇大论","调试","实际上","记录","非常","解决问题","人","出","时","，","良好","名字","真的","重要"," ","表示","个人","表示感谢","遇到","新闻组","正确","朋友","浪费","结论","是","已","群组","以外","求助","信息","部分","他们","深入","串","潜在","技术","小结","事实","好","可不","尝到","很长","再","而","帮助","来","。","每位","如果","bill","过程","这种","的话","状态","受益","怎样才能","说明","搜索","自问","人来人往","关注","或者","方式","原来","从中","含义","总结","提问","但","事实上","内涵","应该","标记","他","要","避免","报","因","不必","/","那","可爱","更","明显","否则","常见","有助于","相信","最终","解决方案","更好","交到","标题","类型","因此","更为重要","费时","发给","faq","侦探","问题","在","可以","不会","们","礼节","赢得","放在","就","的","恰当","好人","过","黑客","那里","会","透过","成","了","摘要","更为","助于","你","复述","一遍","之后","和","-","很","浪费时间","看见","知道","甜头","包含","新闻","文件","论坛","方案","谢谢","应","中","回复","去","里","同等","写","x","搞","让","后","感谢","消息","自己","讨论","比较","理想","时间","费时间","你好","或","才","列表","将","此","贴","长篇","小说","加个","张贴","看到","悬而未决","话题","其它","除了","引起","多","我们","广泛","简短","实际","明白","行动","满足感","渴望","并","–","灰心","所有","（","一份","指明","维护者","传统","简单","深度","才能","者","最初","真正","那些","声誉","对于","）","描述","说","不要","！","含量","一个","协助","被","维护","*","后继","补充","推理","解决","有","如何","资产","大师","满足","什么","一次","专家","善待","不","未决","不用","邮件","除非","技术含量"],"title":"问题解决后，加个简短的补充说明","title_tokens":["，","简短","的","说明","补充","解决","加个","后","问题"]},{"location":"docs/digest/180916/#_27","text":"","text_tokens":[],"title":"如何解读答案","title_tokens":["解读","答案","如何"]},{"location":"docs/digest/180916/#rtfm-stfw","text":"有一个古老而神圣的传统：如果你收到 RTFM （Read The Fucking Manual） 的回应，回答者认为你**应该去读他妈的手册**。当然，基本上他是对的，你应该去读一读。 RTFM 有一个年轻的亲戚。如果你收到 STFW（Search The Fucking Web） 的回应，回答者认为你**应该到他妈的网上搜索**过了。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 Google 是你的朋友 ！） 在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。 通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为 你需要的信息非常容易获得 ； 你自己去搜索这些信息比灌给你，能让你学到更多 。 你不应该因此不爽； 依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见 。你应该对他祖母般的慈祥表示感谢。","text_tokens":["一点","到","人会","视而不见","一下","打","学到","也","这","读着","；","关照","容易","回应","已经","非常","旧文","说法","人","之一","基本上","网址","，","read","读一读"," ","时候","表示","表示感谢","意味","朋友","字","是","多半","他们","给","古老","串","google","回答","慈祥","事实","而","要求","。","如果","这种","回答者","这些","搜索","能","非常容易","通常","关注","或者","答复","获得","标准","提问","但","事实上","比灌","应该","他","两句","认为","常容","manual","那","更","爬","温和","没有","祖母","神圣","the","网上","前","而且","因此","问题","在","吧","依赖","的","过","黑客","可能","了","先","：","你","收到","包含","论坛","不爽","去","让","提供","rtfm","感谢","依照","意味着","讨论","自己","此","用","程度","stfw","般的","一定","甚至","多","fucking","对","需要","基本","一份","手册","（","年轻","传统","search","）","热心","不要","内容","！","一个","正在","他妈的","被","读","*","亲戚","有","解决","有人","不","当然","以前","不见","地为","信息","web"],"title":"RTFM 和 STFW：如何知道你已完全搞砸了","title_tokens":["完全","已","和","如何","知道","rtfm"," ","了","stfw","搞砸","：","你"]},{"location":"docs/digest/180916/#_28","text":"如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。 比方说，如果我回答你： 看来似乎是 zentry 卡住了；你应该先清除它。 ，然后，这是一个**很糟的**后续问题回应： zentry 是什么？ **好**的问法应该是这样： 哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？","text_tokens":["但是","利用","到","立刻","很糟","还","中学","这是","这样","这","；","它","回应","记得","清除","网络","已经","？","解决问题","时","出","对方","，","表现","真的"," ","是","p","身边","问法","两个","回答","我","好","要求","。","后续","如果","解释","比方","像","别","说明","指","他","应该","哪","从","看不懂","没有","卡住","而且","zentries","还是","faq","问题","zentry","提到","的","那样","~","了","先","看过","：","你","和","看来","-","中","哦","去","点","搞懂","都","自己","吗","似乎","高手","试着","需要","只有","手册","（","）","看漏","着","一个","*","z","如何","解决","比方说","什么","然后","参数","以前","先试","清楚"],"title":"如果还是搞不懂","title_tokens":["搞不懂","如果","还是"]},{"location":"docs/digest/180916/#_29","text":"很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。 如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这**没有**发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而**你**将被视为有错的一方，这将伤害到你获取信息或帮助的机会。 另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。 （有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会**正常**交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们**喜欢**我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑）。 Jeff Bigler 的观察总结和这个相关也值得一读 ( tact filters )。 在下一节，我们会谈到另一个问题，当**你**行为不当时所会受到的 冒犯 。","text_tokens":["直接","不是","社区","视为","另一方","到","觉得","缺少","那么","既","很多","情况","值得","得到","相反","综合","还","这个","式","发生","口水","做","这","偶尔","冒犯","伯格","无礼","上述","也","观察","一节","感觉","接受","以免","并且","这时","它","模糊","毫无意义","当","想得到","会谈","另","最好","兴许","非常","或亚","解决问题","人","高","莽撞","受到","，","真的","多半会","交往"," ","自闭症","看起来","下","在乎","一场","是","反应","意义","群组","毫无","多半","人类","消磨时光","断言","消磨","一针见血","自闭","一读","冒险",")","完肤","(","方面","言论","而","综合症","相关","帮助","脑袋","。","一针","如果","这种","能","通常","鲜见","一方面","越线","语言","总结","所","狠狠","真","他","标记","要","认为","招呼","口水战","发火","神经","体无完肤","更","需","没有","上","平静","起来","时光","犀利","碰到","问题","在","另一方面","可以","假","伤害","们","不在","舒服","放在","的","行为","风格","润滑","使人","怀疑","黑客","可能","会","把手","这么","了","行事","站得住脚","得","却","正常","避开","bigler","你","言行","和","用于","有错","机会","jeff","新闻","事","论坛","对象","获取","无意","中","获取信息","前辈","现在","注重","仅","喜欢","都","站得住","当时","圈子","自己","看起","地","模模糊糊","之前","所会","直接了当","或","出格","列表","将","用","存心","根据","新手","其驳","无聊","一定","糊糊","我们","取信","外人","古怪","对","斯伯格","、","试着","应付","一线","并","样子","开始","（","之隔","与","真正","者","纠正","社会","）","然而","不要","轻度","一个","一方","打击","键盘","不在乎","言语","被","*","只管","filters","交流","得住","干好","有些","解决","有","tact","看似","病患","有人","不","邮件","水战","信息"],"title":"处理无礼的回应","title_tokens":["无礼","的","回应","处理"]},{"location":"docs/digest/180916/#_30","text":"在黑客社区的论坛中有那么几次你可能会搞砸 —— 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。 这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做： 熬过去，这很正常。事实上，它是有益健康且合理的。 社区的标准不会自行维持，它们是通过参与者积极而**公开地**执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。 也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称 如果你不想帮助用户就闭嘴。 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。 夸张的讲法是：你要的是**友善**（以上述方式）还是有用？两个里面挑一个。 记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心**你**和**他的社区**而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。 有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是**真的**会把问题搞砸。 这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。 也别让自己卷入口水战，最好不要理睬大多数的口水战 -- 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。","text_tokens":["该","不是","夸张","到","有误","抱怨","相反","对付","它们","还","发生","口水","这","指出","有益","有用","指南","夹七夹八","过去","想像中","报怨"," ","洋娃娃","时候","技术论坛","关","失败者","毫无","不理","倒","维持","他们","无故","心理","合理","要求","记着","这种","这些","即使","提出","方式","中有","滤掉","找麻烦","要","结果","气","看法","检验","从","通过","带点","资格","其","黑客","会","想像","了","高声","很","中","同时","忘","让","哭","生活","别人","或","健康","攻击","糟糕","有时","莫过于","其它","操心","对","传送","所有","有益健康","（","读者","公开","有时候","帖子","被","*","灵魂","来者","藏于","如何","未","有人","当然","威胁","社区","桶盖","不中用","多么","情况","雇主","本人","理睬","也","做","类似","以后","上述","答案","最","至少","哀嚎","莫过","当","--","时","高","无论","表现","真的","个人","熬过去","闭嘴","道歉","两个","给","只会","事实","帮助","益处","挑毛病","马桶盖","像","或者","造成","真","应该","坚持","使","遭遇","更","多数","执行","还是","尊严","的","这么","里面","无缘无故","和","受过","事","论坛","且","无意","积极","都","唠叨","想法","自行","卷入","因为","、","其后","并","简单","娃娃","）","不要","一个","正在","言语","大多","做时","做到","有些","毫无办法","水战","纷纷","无用","就是","大声","那么","而言","参与","场合","并且","它","毫无意义","？","说法","人","，","不中","无法","马桶","毛病","技术","而","声称","来","敏感","如果","尖叫","对待","宣称","这点","事实上","任何","他","超级","离开","友善","自以","问题","在","就","那样","要么","可能","沦为","得","正常","憋闷","麻烦","家伙","颜色","用户","消息","自己","地","将","是否","无缘","口头","自","指望","中用","行动","新来者","测试","与","几次","描述","运作","大多数","你别","戏剧","地方","开场","公开场合","专家","不","邮件","脆弱","自以为是","以","这样","关心","向","告诉","等等","最好","失败","为","受到","挑","有点","下","不想","是","意义","只是","再","。","诉诸","别","能","态度","标准","所","私下","以本","但","嚎","以为","心理专家","口水战","巧妙","不同","没有","也许","办法","不会","礼节","误导","熬过","败者","：","你","参与者","—","讲法","个","刺耳","感谢","搞砸","用","张贴","戏剧性","把","真正","禁止","说","批评","过于","告知","有","评论","不用","法律"],"title":"如何避免扮演失败者","title_tokens":["避免","如何","败者","失败","失败者","扮演"]},{"location":"docs/digest/180916/#_31","text":"以下是几个经典蠢问题，以及黑客没回答时心中所想的： 问题： 我能在哪找到 X 程序或 X 资源？ 问题： 我怎样用 X 做 Y？ 问题： 如何设定我的 shell 提示？ 问题： 我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？ 问题： 我的程序/设定/SQL 语句没有用 问题： 我的 Windows 电脑有问题，你能帮我吗？ 问题： 我的程序不会动了，我认为系统工具 X 有问题 问题： 我在安装 Linux（或者 X ）时有问题，你能帮我吗？ 问题： 我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？ 问题：我能在哪找到 X 程序或 X 资源？ 回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 Google 吗？ 问题：我怎样用 X 做 Y？ 回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。 问题：如何设定我的 shell 提示？？ 回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 RTFM ，然后自己去找出来。 问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？ 回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。 问题：我的{程序/设定/SQL 语句}不工作 回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种 你还有什么要补充的吗？ 真糟糕，希望你能搞定。 这关我有什么屁事？ 问题：我的 Windows 电脑有问题，你能帮我吗？ 回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。 注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你**可以**问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。 问题：我的程序不会动了，我认为系统工具 X 有问题 回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。 问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？ 回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在 这儿 找到使用者群组的清单）。 注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 Linux 和**所有**被怀疑的硬件作关键词仔细搜索。 问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？ 回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！","text_tokens":["该","不是","到","不同凡响","设定","还","所想","这","思维","用者","动","想要"," ","时候","等","不用浪费","}","有意","帐号","root","他们","shell","我","这种","格式","白痴","以下","要","认为","出来","上","可以","吧","恰当","不算","黑客","成千上万","了","三种","搞清楚","提问者","中","回复","太烂","别人","凡响","或","才","根据","糟糕","官方","对","时有","只有","所有","（","者","卑鄙","被","读","*","档案","如何","解决","真糟糕","清楚","找到","转换","电脑","安装","准确","第一","实在","这个","搞清","也","做","外","答案","；","当","垃圾","语句","acmecorp","时","试试看","有意思","浪费","详尽","不但","群组","试看","回答","特定","找个","第一个","由","像","搜索","{","或者","特权","造成","哪","发行","更","资源","还是","不能","反复","窃取","感到","成千","此时","的","工具","怀疑","先","sql","再说","op","和","忽略","论坛","本身","无知","后盾","都","当地","屁事","换个","没","一般来说","看到","因为","智慧","本地","实际","、","并","仔细","兴趣","类","希望","完全","）","关键","一个","搜索引擎","提","什么","然后","仔细搜索","寻求","找","如","如下","既","以及","得出","某","怎样","matic","引擎","它","二十个","天","给出","？","说法","人","形势","程序","，","足够","清单","十个","开源","毛病","一头","关键词","而","声称","如果","系统","提问","怎么","经典","/","那","明显","心中","函数库","问题","在","就","可能","linux","-","文件","应","指导","有关","几个","用户","自己","吗","硬件","之前","禁锢","时间","操作","将","这儿","上万","真糟","意思","需要","时别","这关","与","蠢","描述","千上万","！","地方","工作","不","邮件","亲自","bsd","一般","证据","动手","函数","这样","帮","微软","最好","为","小人","调用","问","y","来说","提示","是","反应","糊涂","google","只是","发行版","我能","相关","。","必须","还有","扔掉","说明","别","能","通常","作","o","事要","使用","不同","方法","没有","windows","啊","使用者","也许","难道","索引","不会","操作系统","搞定","官方版","：","你","知道","—","去","个","惊讶","x","在此之前","rtfm","缺陷","试试","列表","互动","用","bass","tex","试过","注意","把","破解","samba","才能","真正","呢","问者","补充","有","想","不用","细节","二十"],"title":"不该问的问题","title_tokens":["不该","的","问","问题"]},{"location":"docs/digest/180916/#_32","text":"最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。 蠢问题 ： 我可以在哪儿找到关于 Foonly Flurbamatic 的资料？ 这种问法无非想得到 STFW 这样的回答。 聪明问题 ： 我用 Google 搜索过 \"Foonly Flurbamatic 2600\"，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？ 这个问题已经 STFW 过了，看起来他真的遇到了麻烦。 蠢问题 ： 我从 foo 项目找来的源码没法编译。它怎么这么烂？ 他觉得都是别人的错，这个傲慢自大的提问者。 聪明问题 ： foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？ 提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。 蠢问题 ： 我的主机板有问题了，谁来帮我？ 某黑客对这类问题的回答通常是： 好的，还要帮你拍拍背和换尿布吗？ ，然后按下删除键。 聪明问题 ： 我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？ 这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。 在最后一个问题中，注意 告诉我答案 和 给我启示，指出我还应该做什么诊断工作 之间微妙而又重要的区别。 事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。 通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。 事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的**名**人，而是因为我用了正确的方式来提问。 黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我**像**个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。","text_tokens":["不是","我该","到","得到","源码","还","愚蠢","编译","这","最后","由于","指出","一起","记录","有用","指南","那个","年","重要"," ","时候","导致","tyan","他们","设备","关于","我","好","换尿布","内核","尝试","解释","某种","这种","名","弯路","8","提出","方式","grommicking","两种","进来","傲慢","共同","结果","跟","从","通过","微妙","宝贵时间","这件","相信","上","florbish","可以","黑客","会","了","奇怪","宝贵","探讨","很","提问者","中","6.2","同等","忽视","a","让","提供","后","讨论","丰富","读过","别人","才","原因","引起","foonly","背","对","无法解释","（","乞讨","聪明","具备","被","例子","*","z","解决","惹恼","找到","但是","这个","也","做","答案","；","当","人们","解决问题","时","出","角度","拍拍","表现","真的","月","表示","表示感谢","天上","看起来","浪费","赞赏","这一","给","回答","事实","b","做些","成员","像","搜索","显然","玩味","或者","应该","避免","显示","faq","2001","的","过","这么","里面","键","和","事","无非","flurbamatic","都","意料","真实","删除","下来","没","之间","stfw","一种","因为","编程","lkml","、","并","指明","）","找来","一个","烂","正在","又","来看","还要","什么","然后","尊重","找","直接","出现","就是","觉得","值得","某","锁定","怎样","自大","区别","本","观察","参与","主机板","出人意料","并且","它","按下","容易","想得到","现象","已经","？","人","接下来","，","良好","mp","无法","事后","遇到","不论","eric","正确","人情味","某些","问法","\"","邀请","foo","而","来","如果","每个","nulix","过程","关注","明智","提问","事实上","他","天上掉","怎么","设法","人情","机板","并非","主机","推","走过","问题","在","同一","那样","透过","情味","咀嚼","linux","源自","浪费时间","麻烦","家伙","有关","我用","自己","看起","吗","这类","时间","费时间","将","这次","能力","错误","测试","与","蠢","上试","找出","地方","记下","人意","工作","不","邮件","信息","环境","头上","列出","以","这样","帮","主板","向","告诉","2600","另","资料","c","知识","项目","作用","y","来说","是","一些","谁","google","错","再","表明","。","尿布","建议","说明","试","通常","所","但","吸引","东西","方法","没有","经历","起来","没什么","请","费时","athlon","启示","提到","乞讨者","们","放在","拥有","同一个","：","你","知道","我读","代码","去","个","x","感谢","举","诊断","没法","列表","一定","缺乏","注意","把","s2464","才能","哪儿","版下","坐等","于","问者","而是","责任","有","接下"],"title":"好问题与蠢问题","title_tokens":["蠢","与","问题","好"]},{"location":"docs/digest/180916/#_33","text":"如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。 总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。 你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。 有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。 另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。 对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。","text_tokens":["重复","支持","亲自","视为","到","觉得","处理","如此","那么","很多","比","密封圈","以及","很糟","还","开发","小","微不足道","区分","也","这样","这","答案","别为","至少","向","并且","它","用者","回应","初学","相帮","为","人们","人","总是","虽然","，","热情","无法"," ","商业","有点","代表","不论","发动","不可","另外","来说","开源","是","组织","意义","群组","求助","爱好","他们","喧闹","根本","回答","汽车","技术","对应","只是","好","送到","修车铺","从没","而","帮助","来","。","如果","总的来说","互相帮助","每个","源代码","这种","技术支持","由","这些","即使","通常","大","像是","互相","点子","获得","所","汽缸","分钱","其他","密封","任何","要","以为","沮丧","使用","一分钱","不同","更","维修","没有","通过","使用者","罢了","网上","团体","请","一","修车","爆掉","还是","费用","被忽视","问题","在","可以","不可否认","渠道","感到","不能","许多","付出","就","的","差别","无","时区","适合","不到","爱好者","可能","会","了","不足","得","linux","得不到","你","睡觉","和","仍","知道","—","且","万名","代码","个","同类","忽视","强求","生活","否认","丰富","就算","花费","发动机","大众","将","开发者","新手","没","上万","大众化","看到","张贴","毕竟","有时","本地","高得","初学者","购买","我们","多","相比","对","人来","很难","把","需要","并","开始","（","可否","简单","写过","付费","才能","学者","组建","完全","）","不要","不足道","内容","组成","！","一个","软件","正在","公司","协助","假使","被","来自","好者","免费","电话","封闭","有","上万名","不","一分","寻求","动机","耐心"],"title":"如果得不到回答","title_tokens":["回答","不到","得不到","如果"]},{"location":"docs/digest/180916/#_34","text":"态度和善一点 。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。 对初犯者私下回复 。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。 如果你不确定，一定要说出来 ！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。 如果帮不了忙，也别妨碍他 。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 —— 有些可怜的呆瓜会把它当成真的指令。 试探性的反问以引出更多的细节 。如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。 尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。 如果你决定回答，就请给出好的答案 。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（wordaround），应推荐更好的工具，重新界定问题。 正面的回答问题 ！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 试试看 A 或是 B 或者 试试 X 、 Y 、 Z 、 A 、 B 、 C 并附上一个链接一点用都没有。 帮助你的社区从问题中学习 。当回复一个好问题时，问问自己 如何修改相关文件或常见问题文件以免再次解答同样的问题？ ，接着再向文件维护者发一份补丁。 如果你是在研究一番后才做出的回答， 展现你的技巧而不是直接端出结果 。毕竟 授人以鱼不如授人以渔 。","text_tokens":["直接","不如","一点","不是","常见问题","社区","初犯","界定","诚实","比","做得好","抱怨","得到","或是","之","当众","愚蠢","这个","学到","以","这样","也","权威","无礼","答案","玩笑","正面","修改","向","指出","以免","技巧","必要","它","试探","用者","当","连","给出","带来","常使","已经","？","决定","人","指令","权宜之计","曾","c","时","出","，","设置","真的","试试看"," ","y","忙","可怜","重新","是","研究","树个","试看","要说","给","位置","深入","google","呆","回答","确定","好","只是","关键词","再","表明","相关","而","帮助","。","b","不了","如果","接着","建议","谦虚","像","别","搜索","能","态度","试","授人","步骤","引出","指路","即使","或者","附上","发","坦诚","羞辱","好榜样","细节","提问","私下","但","他","东西","怎么","出来","要","结果","哪","使用","妨碍","转变成","更","显得","方法","没有","从","尽管","也许","常见","使用者","懒虫","上","更好","起来","开玩笑","请","而且","做出","问题","在","糟","可以","就","的","工具","展现","那样","过","链接","一番","会","以鱼","了","笨拙","反问","学习","你","补丁","乱","和","很","知道","文件","提问者","—","应","中","回复","问问","点","个","x","a","都","后","rtfm","同行","正当","转变","自己","试试","变成","再次","别人","听","或","才","将","新手","用","没","毕竟","权宜","因为","好玩","一定","错误","压力","榜样","多","我们","对","实际","、","把","并","和善","别忘了","时别","（","推荐","试探性","帮不了","维护者","一份","同样","与","者","其实","真正","那些","会毁","端","蠢","不要","关键","）","！","一个","当成","正在","瓜会","授人以渔","维护","问者","z","犯错","解答","有些","一声","如何","还要","专家","wordaround","不","找"],"title":"如何更好地回答问题","title_tokens":["回答","更好","如何","问题","地"]},{"location":"docs/digest/180916/#_35","text":"如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 Unix 系统和网络基本原理 。 当你发布软件或补丁时，试着按 软件发布实践 操作。","text_tokens":["参阅","操作","或","实践","电脑","按","基础知识","原理","基本原理","的","本原","、","试着","需要","基本","。","如果","系统","你","当","补丁","和","运作","网络","软件","发布","时","知识","，","如何","基础","unix"," ","个人","个人电脑"],"title":"相关资源","title_tokens":["资源","相关"]},{"location":"docs/digest/180916/#_36","text":"Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写 如何更好地回答问题 这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。","text_tokens":["mikhail","更好","一些","问题","回答","愚蠢","的","价值","这","并","一节","。","了","建议","mitchel","特别","和","启发","evelyn","例子","，","如何","有","贡献"," ","ramendik","改进","地","编写"],"title":"鸣谢","title_tokens":["鸣谢"]},{"location":"docs/digest/180919/","text":"github.com/mzlogin/chinese-copywriting-guidelines/blob/Simplified/README.md ¶ 统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。 Other languages: [English] Chinese Traditional [Chinese Simplified] 目录 ¶ 目录 空格 中英文之间需要增加空格 中文与数字之间需要增加空格 数字与单位之间无需增加空格 全角标点与其他字符之间不加空格 -ms-text-autospace to the rescue? 标点符号 不重复使用标点符号 全角和半角 使用全角中文标点 数字使用半角字符 遇到完整的英文整句、特殊名词，其內容使用半角标点 名词 专有名词使用正确的大小写 不要使用不地道的缩写 争议 链接之间增加空格 简体中文使用直角引号 工具 谁在这样做？ 参考文献 中文文案排版指北 目录 空格 中英文之间需要增加空格 中文与数字之间需要增加空格 数字与单位之间无需增加空格 全角标点与其他字符之间不加空格 -ms-text-autospace to the rescue? 标点符号 不重复使用标点符号 全角和半角 使用全角中文标点 数字使用半角字符 遇到完整的英文整句、特殊名词，其內容使用半角标点 名词 专有名词使用正确的大小写 不要使用不地道的缩写 争议 链接之间增加空格 简体中文使用直角引号 工具 谁在这样做？ 参考文献 空格 ¶ 「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。 与大家共勉之。」—— vinta/paranoid-auto-spacing 中英文之间需要增加空格 ¶ 正确： 在 LeanCloud 上，数据存储是围绕 AVObject 进行的。 错误： 在LeanCloud上，数据存储是围绕 AVObject 进行的。 在 LeanCloud上，数据存储是围绕 AVObject 进行的。 完整的正确用法： 在 LeanCloud 上，数据存储是围绕 AVObject 进行的。每个 AVObject 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 AVObject 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。 例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。 中文与数字之间需要增加空格 ¶ 正确： 今天出去买菜花了 5000 元。 错误： 今天出去买菜花了 5000元。 今天出去买菜花了5000元。 数字与单位之间无需增加空格 ¶ 正确： 我家的光纤入户宽带有 10Gbps，SSD 一共有 10TB。 错误： 我家的光纤入户宽带有 10 Gbps，SSD 一共有 20 TB。 另外，度／百分比与数字之间不需要增加空格： 正确： 今天是 233° 的高温。 新 MacBook Pro 有 15% 的 CPU 性能提升。 错误： 今天是 233 ° 的高温。 新 MacBook Pro 有 15 % 的 CPU 性能提升。 全角标点与其他字符之间不加空格 ¶ 正确： 刚刚买了一部 iPhone，好开心！ 错误： 刚刚买了一部 iPhone ，好开心！ -ms-text-autospace to the rescue? ¶ Microsoft 有个 -ms-text-autospace 的 CSS 属性可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 OS X、iOS 的用户界面目前并不存在这个特性，所以请继续保持随手加空格的习惯。 标点符号 ¶ 不重复使用标点符号 ¶ 正确： 德国队竟然战胜了巴西队！ 她竟然对你说「喵」？！ 错误： 德国队竟然战胜了巴西队！！ 德国队竟然战胜了巴西队！！！！！！！！ 她竟然对你说「喵」？？！！ 她竟然对你说「喵」？！？！？？！！ 全角和半角 ¶ 不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『 全角和半角 』。 使用全角中文标点 ¶ 正确： 嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！ 核磁共振成像（NMRI）是什么原理都不知道？JFGI！ 错误： 嗨! 你知道嘛? 今天前台的小妹跟我说 \"喵\" 了哎! 嗨!你知道嘛?今天前台的小妹跟我说\"喵\"了哎! 核磁共振成像 (NMRI) 是什么原理都不知道? JFGI! 核磁共振成像(NMRI)是什么原理都不知道?JFGI! 数字使用半角字符 ¶ 正确： 这件蛋糕只卖 1000 元。 错误： 这件蛋糕只卖 １０００ 元。 例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全角数字的。 遇到完整的英文整句、特殊名词，其內容使用半角标点 ¶ 正确： 乔布斯那句话是怎么说的？「Stay hungry, stay foolish.」 推荐你阅读《Hackers & Painters: Big Ideas from the Computer Age》，非常的有趣。 错误： 乔布斯那句话是怎么说的？「Stay hungry，stay foolish。」 推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。 名词 ¶ 专有名词使用正确的大小写 ¶ 大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论內容，在这里只对部分易错用法进行简述。 正确： 使用 GitHub 登录 我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。 错误： 使用 github 登录 使用 GITHUB 登录 使用 Github 登录 使用 gitHub 登录 使用 gｲんĤЦ8 登录 我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。 我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。 我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。 我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。 我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。 注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标准的大小写规范进行书写；并通过 text-transform: uppercase; ／ text-transform: lowercase; 对表现形式进行定义。 不要使用不地道的缩写 ¶ 正确： 我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。 错误： 我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。 争议 ¶ 以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是**正确**的。 链接之间增加空格 ¶ 用法： 请 提交一个 issue 并分配给相关同事。 访问我们网站的最新动态，请 点击这里 进行订阅！ 对比用法： 请 提交一个 issue 并分配给相关同事。 访问我们网站的最新动态，请 点击这里 进行订阅！ 简体中文使用直角引号 ¶ 用法： 「老师，『有条不紊』的『紊』是什么意思？」 对比用法： “老师，‘有条不紊’的‘紊’是什么意思？” 工具 ¶ 仓库 语言 vinta/paranoid-auto-spacing JavaScript huei90/pangu.node Node.js huacnlee/auto-correct Ruby sparanoid/space-lover PHP (WordPress) nauxliu/auto-correct PHP ricoa/copywriting-correct PHP hotoo/pangu.vim Vim sparanoid/grunt-auto-spacing Node.js (Grunt) hjiang/scripts/add-space-between-latin-and-cjk Python 谁在这样做？ ¶ 网站 文案 UGC Apple 中国 Yes N/A Apple 香港 Yes N/A Apple 台湾 Yes N/A Microsoft 中国 Yes N/A Microsoft 香港 Yes N/A Microsoft 台湾 Yes N/A LeanCloud Yes N/A 知乎 Yes 部分用户达成 V2EX Yes Yes SegmentFault Yes 部分用户达成 Apple4us Yes N/A 豌豆荚 Yes N/A Ruby China Yes 标题达成 PHPHub Yes 标题达成 少数派 Yes N/A 参考文献 ¶ Guidelines for Using Capital Letters Letter case - Wikipedia Punctuation - Oxford Dictionaries Punctuation - The Purdue OWL How to Use English Punctuation Corrently - wikiHow 格式 - openSUSE 全角和半角 - 维基百科 引号 - 维基百科 疑问惊叹号 - 维基百科 中文文案排版指北 ¶ 统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。 Other languages: [English] Chinese Traditional [Chinese Simplified] 目录 ¶ 目录 空格 中英文之间需要增加空格 中文与数字之间需要增加空格 数字与单位之间无需增加空格 全角标点与其他字符之间不加空格 -ms-text-autospace to the rescue? 标点符号 不重复使用标点符号 全角和半角 使用全角中文标点 数字使用半角字符 遇到完整的英文整句、特殊名词，其內容使用半角标点 名词 专有名词使用正确的大小写 不要使用不地道的缩写 争议 链接之间增加空格 简体中文使用直角引号 工具 谁在这样做？ 参考文献 中文文案排版指北 目录 空格 中英文之间需要增加空格 中文与数字之间需要增加空格 数字与单位之间无需增加空格 全角标点与其他字符之间不加空格 -ms-text-autospace to the rescue? 标点符号 不重复使用标点符号 全角和半角 使用全角中文标点 数字使用半角字符 遇到完整的英文整句、特殊名词，其內容使用半角标点 名词 专有名词使用正确的大小写 不要使用不地道的缩写 争议 链接之间增加空格 简体中文使用直角引号 工具 谁在这样做？ 参考文献 空格 ¶ 「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。 与大家共勉之。」—— vinta/paranoid-auto-spacing 中英文之间需要增加空格 ¶ 正确： 在 LeanCloud 上，数据存储是围绕 AVObject 进行的。 错误： 在LeanCloud上，数据存储是围绕 AVObject 进行的。 在 LeanCloud上，数据存储是围绕 AVObject 进行的。 完整的正确用法： 在 LeanCloud 上，数据存储是围绕 AVObject 进行的。每个 AVObject 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 AVObject 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。 例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。 中文与数字之间需要增加空格 ¶ 正确： 今天出去买菜花了 5000 元。 错误： 今天出去买菜花了 5000元。 今天出去买菜花了5000元。 数字与单位之间无需增加空格 ¶ 正确： 我家的光纤入户宽带有 10Gbps，SSD 一共有 10TB。 错误： 我家的光纤入户宽带有 10 Gbps，SSD 一共有 20 TB。 另外，度／百分比与数字之间不需要增加空格： 正确： 今天是 233° 的高温。 新 MacBook Pro 有 15% 的 CPU 性能提升。 错误： 今天是 233 ° 的高温。 新 MacBook Pro 有 15 % 的 CPU 性能提升。 全角标点与其他字符之间不加空格 ¶ 正确： 刚刚买了一部 iPhone，好开心！ 错误： 刚刚买了一部 iPhone ，好开心！ -ms-text-autospace to the rescue? ¶ Microsoft 有个 -ms-text-autospace 的 CSS 属性可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 OS X、iOS 的用户界面目前并不存在这个特性，所以请继续保持随手加空格的习惯。 标点符号 ¶ 不重复使用标点符号 ¶ 正确： 德国队竟然战胜了巴西队！ 她竟然对你说「喵」？！ 错误： 德国队竟然战胜了巴西队！！ 德国队竟然战胜了巴西队！！！！！！！！ 她竟然对你说「喵」？？！！ 她竟然对你说「喵」？！？！？？！！ 全角和半角 ¶ 不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『 全角和半角 』。 使用全角中文标点 ¶ 正确： 嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！ 核磁共振成像（NMRI）是什么原理都不知道？JFGI！ 错误： 嗨! 你知道嘛? 今天前台的小妹跟我说 \"喵\" 了哎! 嗨!你知道嘛?今天前台的小妹跟我说\"喵\"了哎! 核磁共振成像 (NMRI) 是什么原理都不知道? JFGI! 核磁共振成像(NMRI)是什么原理都不知道?JFGI! 数字使用半角字符 ¶ 正确： 这件蛋糕只卖 1000 元。 错误： 这件蛋糕只卖 １０００ 元。 例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全角数字的。 遇到完整的英文整句、特殊名词，其內容使用半角标点 ¶ 正确： 乔布斯那句话是怎么说的？「Stay hungry, stay foolish.」 推荐你阅读《Hackers & Painters: Big Ideas from the Computer Age》，非常的有趣。 错误： 乔布斯那句话是怎么说的？「Stay hungry，stay foolish。」 推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。 名词 ¶ 专有名词使用正确的大小写 ¶ 大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论內容，在这里只对部分易错用法进行简述。 正确： 使用 GitHub 登录 我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。 错误： 使用 github 登录 使用 GITHUB 登录 使用 Github 登录 使用 gitHub 登录 使用 gｲんĤЦ8 登录 我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。 我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。 我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。 我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。 我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。 注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标准的大小写规范进行书写；并通过 text-transform: uppercase; ／ text-transform: lowercase; 对表现形式进行定义。 不要使用不地道的缩写 ¶ 正确： 我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。 错误： 我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。 争议 ¶ 以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是**正确**的。 链接之间增加空格 ¶ 用法： 请 提交一个 issue 并分配给相关同事。 访问我们网站的最新动态，请 点击这里 进行订阅！ 对比用法： 请 提交一个 issue 并分配给相关同事。 访问我们网站的最新动态，请 点击这里 进行订阅！ 简体中文使用直角引号 ¶ 用法： 「老师，『有条不紊』的『紊』是什么意思？」 对比用法： “老师，‘有条不紊’的‘紊’是什么意思？” 工具 ¶ 仓库 语言 vinta/paranoid-auto-spacing JavaScript huei90/pangu.node Node.js huacnlee/auto-correct Ruby sparanoid/space-lover PHP (WordPress) nauxliu/auto-correct PHP ricoa/copywriting-correct PHP hotoo/pangu.vim Vim sparanoid/grunt-auto-spacing Node.js (Grunt) hjiang/scripts/add-space-between-latin-and-cjk Python 谁在这样做？ ¶ 网站 文案 UGC Apple 中国 Yes N/A Apple 香港 Yes N/A Apple 台湾 Yes N/A Microsoft 中国 Yes N/A Microsoft 香港 Yes N/A Microsoft 台湾 Yes N/A LeanCloud Yes N/A 知乎 Yes 部分用户达成 V2EX Yes Yes SegmentFault Yes 部分用户达成 Apple4us Yes N/A 豌豆荚 Yes N/A Ruby China Yes 标题达成 PHPHub Yes 标题达成 少数派 Yes N/A 参考文献 ¶ Guidelines for Using Capital Letters Letter case - Wikipedia Punctuation - Oxford Dictionaries Punctuation - The Purdue OWL How to Use English Punctuation Corrently - wikiHow 格式 - openSUSE 全角和半角 - 维基百科 引号 - 维基百科 疑问惊叹号 - 维基百科","text_tokens":["重复","segmentfault","围绕","hjiang","qu","设定","中英文","分配","这里","兼容","访问","打字","查看","ricoa","最后","增加","大家","范畴","big","ë","punctuation","foolish","&"," ","时候","宣传","等","ĥ","即","不过","研究","无需","元","对比","我","香港","phphub","完整","例如","重复使用","10","%","豆荚","facebook","》","8","34","格式","专有名词","哎","“","维基百","以下","跟","ק","目前","t","从","通过","这件","vim","上","自动","实现","mzlogin","10gbps","css","可以","豌豆荚","ん","age","风格","hungry","会","了","不爱","宽带","from","很","°","三成","5000","中","a","我家","阅读","grunt","买","词条","讨论","嗨",":","整句","大写","ideas","度","毕竟","cpu","10tb","加","官方","os","原理","pro","对","明白","推荐","（","者","內容","少数","全部","前端","๏","略带","ugc","*","opensuse","scripts","huei90","她","百科","稿","paranoid","?","233","」","乔布斯","战胜","h5","这个","继续","ou","做","大小",",","标点","乔布","指北","＆","保持","豆瓣","今天","ios","в","当","单位","other","属于","时","无论","‘","小妹","vinta","角度","哪些","属性","md","表现","所以","ᄃ","个人",".","另外","angularjs","huacnlee","wordpress","letters","存储","感情","极少","jfgi","用户界面","how","简体","团队","rjs","给","cjk","(","惊叹号","add","０","painters","成员","avobject","html5","macbook","德国","色彩","按照","数派","比例","配合","方便","github","缩写","显示","即可","留白","corporation","n","布斯","只要","场景","的","工具","知乎","链接","ƒ","i","ц","uppercase","１","规则","键","参考文献","hackers","]","和","降低","蛋糕","ŧ","表现形式","』","共勉","界面","维基百科","都","latin","blob","指定","readme","豌豆","其內容","g","竟然","进行","v2ex","之间","《","schema","磁共振","一种","应用","／","’","between","易错","、","成本","并","同事","中文标点","普及","岁","名词","leancloud","框架","）","不要","lover","一个","路","computer","只","є","例外","什么","疑问","新","4","如","rescue","angular","直接","动态","case","出现","特性","用法","前端开发","simplified","成像","适时","wiki","issue","文献","中国","适时地","本","oxford","语法","维基","ﾑ","text","猫","非常","[","？","人","gbps","，","遗产","辛苦","网站","喵","遇到","统一","正确","เ","一位","react","简述","к","transform",")","\"","fed","apple4us","而","ｲ","correct","对齐","每个","小写","pangu","copywriting","语言","com","其他","怎么","chinese","走","/","一共","直角","少数派","德国队","熟悉","标题",";","视觉","文字","fm","corrently","iphone","在","use","核磁共振","inc","ssd","符号","得","ร","出去","php","全角","spacing","-","to","「","只能","来讲","and","ｷ","hotoo","ς","nmri","喜欢","tb","15","用户","自己","原","设计","lowercase","最新","下述","提前","是否","只卖","数字","я","错误","并未","意思","我们","至少","七成","需要","与","๓","一部","排版","提升","！","那句话","english","规范","简体中文","习惯","紊","wikihow","autospace","不","前台","dictionaries","半角","js","目录","ms","定义","整体","之","形式","开发","中文","书写","backbone","这样","for","增强","有趣","中英","产品","microsoft","现形","情形","foursquare","百分","理解","开心","为","¶","json","15%","china","气质","引号","owl","老师","专有","留给","中如","ruby","space","是","ค","部分","谁","数据","capital","google","结婚","争议","对应","『","达成","嘛","相关","核磁","。","purdue","nauxliu","标准","空格","所","html","；","海报","使用","free","沟通","共振","中请","少量","台湾","the","ภ","好开心","大小写","请","英文","特殊","ƨ","登录","п","languages","高温","：","你","有个","入户","刚刚","1000","客户","性能","标点符号","知道","traditional","包含","—","叹号","点击","”","value","node","x","存在","!","仓库","apple","key","г","javascript","sparanoid","有名","网页","全形","巴西","百分比","遵循","python","爱情","有条不紊","提交","注意","20","把","stay","letter","地道","900913","说","随手","using","字符","auto","巴西队","yes","半形","菜花","文案","光纤","有","订阅","guidelines","参考","其余","wikipedia","极少量","空白","惊叹"],"title":"180919","title_tokens":["180919"]},{"location":"docs/digest/180919/#_1","text":"统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。 Other languages: [English] Chinese Traditional [Chinese Simplified]","text_tokens":["用法","之间","团队","simplified","中文","的","、","成本","增强","相关","languages","。","成员","]","排版","traditional","降低","other","[","english","文案","，","气质","chinese","沟通"," ","网站","统一",":"],"title":"","title_tokens":[]},{"location":"docs/digest/180919/#_2","text":"目录 空格 中英文之间需要增加空格 中文与数字之间需要增加空格 数字与单位之间无需增加空格 全角标点与其他字符之间不加空格 -ms-text-autospace to the rescue? 标点符号 不重复使用标点符号 全角和半角 使用全角中文标点 数字使用半角字符 遇到完整的英文整句、特殊名词，其內容使用半角标点 名词 专有名词使用正确的大小写 不要使用不地道的缩写 争议 链接之间增加空格 简体中文使用直角引号 工具 谁在这样做？ 参考文献 中文文案排版指北 目录 空格 中英文之间需要增加空格 中文与数字之间需要增加空格 数字与单位之间无需增加空格 全角标点与其他字符之间不加空格 -ms-text-autospace to the rescue? 标点符号 不重复使用标点符号 全角和半角 使用全角中文标点 数字使用半角字符 遇到完整的英文整句、特殊名词，其內容使用半角标点 名词 专有名词使用正确的大小写 不要使用不地道的缩写 争议 链接之间增加空格 简体中文使用直角引号 工具 谁在这样做？ 参考文献","text_tokens":["整句","the","重复","其內容","有名","?","大小写","无需","目录","简体","之间","ms","谁","在","数字","英文","加","中英文","特殊","争议","中文","的","工具","文献","、","这样","链接","做","需要","完整","符号","大小","中文标点","中英","重复使用","地道","标点","指北","增加","与","名词","小写","参考文献","全角","标点符号","text","-","to","单位","和","不要","排版","字符","？","专有名词","空格","其他","文案","，","简体中文","使用","半角","参考"," ","autospace","引号","不","直角","遇到","专有","正确","缩写","rescue"],"title":"目录","title_tokens":["目录"]},{"location":"docs/digest/180919/#_3","text":"「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。 与大家共勉之。」—— vinta/paranoid-auto-spacing","text_tokens":["显示","感情","留白","paranoid","研究","」","之间","毕竟","在","适时","英文","加","爱情","之","结婚","中文","的","书写","七成","打字","会","而","把","需要","适时地","最后","。","得","岁","不爱","与","大家","spacing","和","「","很","34","只能","猫","三成","-","路","—","人","auto","空格","共勉","vinta","，","喜欢","走","有","比例","都","辛苦","跟","遗产","时候"," ","/","不","其余","自己","留给"],"title":"空格","title_tokens":["空格"]},{"location":"docs/digest/180919/#_4","text":"正确： 在 LeanCloud 上，数据存储是围绕 AVObject 进行的。 错误： 在LeanCloud上，数据存储是围绕 AVObject 进行的。 在 LeanCloud上，数据存储是围绕 AVObject 进行的。 完整的正确用法： 在 LeanCloud 上，数据存储是围绕 AVObject 进行的。每个 AVObject 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 AVObject 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。 例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。","text_tokens":["直接","存储","是","即可","用法","围绕","进行","fm","」","提前","schema","定义","数据","在","设定","错误","只要","官方","对应","的","书写","兼容","需要","完整","。","了","每个","产品","键","与","avobject","豆瓣","：","leancloud","你","名词","-","「","格式","包含","所","按照","value","json","哪些","，","存在","都","key","free","例外"," ","等","不","指定","正确","上"],"title":"中英文之间需要增加空格","title_tokens":["需要","之间","中英","空格","增加","英文","中英文"]},{"location":"docs/digest/180919/#_5","text":"正确： 今天出去买菜花了 5000 元。 错误： 今天出去买菜花了 5000元。 今天出去买菜花了5000元。","text_tokens":["元"," ","：","买","。","了","5000","正确","菜花","错误","今天","出去"],"title":"中文与数字之间需要增加空格","title_tokens":["中文","增加","需要","之间","空格","数字","与"]},{"location":"docs/digest/180919/#_6","text":"正确： 我家的光纤入户宽带有 10Gbps，SSD 一共有 10TB。 错误： 我家的光纤入户宽带有 10 Gbps，SSD 一共有 20 TB。 另外，度／百分比与数字之间不需要增加空格： 正确： 今天是 233° 的高温。 新 MacBook Pro 有 15% 的 CPU 性能提升。 错误： 今天是 233 ° 的高温。 新 MacBook Pro 有 15 % 的 CPU 性能提升。","text_tokens":["是","新","233","10gbps","度","百分比","之间","cpu","10tb","／","数字","错误","的","pro","20","ssd","需要","。","10","高温","%","增加","宽带","与","今天","入户","：","macbook","性能","提升","百分","°","空格","gbps","15%","，","光纤","有","我家","tb"," ","15","一共","不","正确","另外"],"title":"数字与单位之间无需增加空格","title_tokens":["增加","单位","无需","之间","空格","数字","与"]},{"location":"docs/digest/180919/#_7","text":"正确： 刚刚买了一部 iPhone，好开心！ 错误： 刚刚买了一部 iPhone ，好开心！","text_tokens":["，","一部","好开心","！"," ","开心","买","了","iphone","正确","错误","：","刚刚"],"title":"全角标点与其他字符之间不加空格","title_tokens":["全角","字符","之间","不","标点","空格","与","其他","加"]},{"location":"docs/digest/180919/#-ms-text-autospace-to-the-rescue","text":"Microsoft 有个 -ms-text-autospace 的 CSS 属性可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 OS X、iOS 的用户界面目前并不存在这个特性，所以请继续保持随手加空格的习惯。","text_tokens":["自动","实现","不过","请","用户界面","特性","之间","ms","css","可以","在","应用","英文","并未","中英文","os","加","场景","的","这个","继续","、","并","例如","中英","。","普及","增加","microsoft","ios","保持","有个","text","-","随手","为","空格","其他","界面","属性","，","x","存在","所以","习惯"," ","autospace","目前","用户","不","另外","空白"],"title":"-ms-text-autospace to the rescue?","title_tokens":["the","?","text","-","to"," ","autospace","ms","rescue"]},{"location":"docs/digest/180919/#_8","text":"","text_tokens":[],"title":"标点符号","title_tokens":["符号","标点符号","标点"]},{"location":"docs/digest/180919/#_9","text":"正确： 德国队竟然战胜了巴西队！ 她竟然对你说「喵」？！ 错误： 德国队竟然战胜了巴西队！！ 德国队竟然战胜了巴西队！！！！！！！！ 她竟然对你说「喵」？？！！ 她竟然对你说「喵」？！？！？？！！","text_tokens":["德国队","竟然","巴西","」","战胜","错误","对","了","：","你","德国","「","说","！","？","巴西队"," ","她","喵","正确"],"title":"不重复使用标点符号","title_tokens":["重复","标点符号","使用","符号","不","重复使用","标点"]},{"location":"docs/digest/180919/#_10","text":"不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『 全角和半角 』。","text_tokens":["是","请","全形","『","明白","查看","符号","（","。","与","维基","全角","和","）","？","』","半形","维基百","维基百科","什么"," ","不","词条","百科","半角"],"title":"全角和半角","title_tokens":["全角","和","半角"]},{"location":"docs/digest/180919/#_11","text":"正确： 嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！ 核磁共振成像（NMRI）是什么原理都不知道？JFGI！ 错误： 嗨! 你知道嘛? 今天前台的小妹跟我说 \"喵\" 了哎! 嗨!你知道嘛?今天前台的小妹跟我说\"喵\"了哎! 核磁共振成像 (NMRI) 是什么原理都不知道? JFGI! 核磁共振成像(NMRI)是什么原理都不知道?JFGI!","text_tokens":["是","?","jfgi","」","磁共振","成像",")","错误","\"","(","原理","我","的","核磁共振","嘛","核磁","（","了","今天","：","你","）","「","说","知道","！","？","小妹","哎","nmri","!","都","跟"," ","共振","什么","喵","不","前台","正确","嗨"],"title":"使用全角中文标点","title_tokens":["中文","全角","使用","中文标点","标点"]},{"location":"docs/digest/180919/#_12","text":"正确： 这件蛋糕只卖 1000 元。 错误： 这件蛋糕只卖 １０００ 元。 例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全角数字的。","text_tokens":["设计","是","出现","极少","元","文字","中如","只卖","在","可以","数字","错误","的","、","１","。","０","对齐","：","1000","全角","情形","为","蛋糕","时","极少量","，","海报","使用","例外"," ","宣传","少量","方便","这件","正确","稿"],"title":"数字使用半角字符","title_tokens":["字符","数字","使用","半角"]},{"location":"docs/digest/180919/#_13","text":"正确： 乔布斯那句话是怎么说的？「Stay hungry, stay foolish.」 推荐你阅读《Hackers & Painters: Big Ideas from the Computer Age》，非常的有趣。 错误： 乔布斯那句话是怎么说的？「Stay hungry，stay foolish。」 推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。","text_tokens":["the","是","ideas","」","《","乔布斯","布斯","错误","的","age","hungry","有趣","stay","推荐","。","painters",",","乔布","from","＆","：","你","》","hackers","「","说","big","非常","那句话","？","computer","，","怎么","foolish","&","阅读"," ",".","正确",":"],"title":"遇到完整的英文整句、特殊名词，其內容使用半角标点","title_tokens":["整句","，","其內容","的","、","使用","完整","遇到","名词","标点","英文","特殊","半角"]},{"location":"docs/digest/180919/#_14","text":"","text_tokens":[],"title":"名词","title_tokens":["名词"]},{"location":"docs/digest/180919/#_15","text":"大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论內容，在这里只对部分易错用法进行简述。 正确： 使用 GitHub 登录 我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。 错误： 使用 github 登录 使用 GITHUB 登录 使用 Github 登录 使用 gitHub 登录 使用 gｲんĤЦ8 登录 我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。 我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。 我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。 我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。 我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。 注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标准的大小写规范进行书写；并通过 text-transform: uppercase; ／ text-transform: lowercase; 对表现形式进行定义。","text_tokens":["出现","用法","整体","定义","qu","形式","wiki","书写","这里","ou","大小","本",",","；","microsoft","в","当","范畴","ﾑ","现形","text","情形","foursquare","属于","ë","，","表现","ᄃ"," ","ĥ",".","正确","เ","简述","к","ค","部分","transform","google","相关","ｲ","而","。","facebook","小写","8","标准","html","使用","ק","t","中请","配合","通过","github","ภ","大小写",";","corporation","n","视觉","在","英文","ん","ƨ","的","风格","登录","inc","ƒ","i","ц","п","uppercase","ร","：","客户","-","ｷ","ŧ","表现形式","中","ς","г","讨论","原",":","大写","lowercase","g","网页","进行","я","／","错误","我们","易错","对","注意","、","需要","并","๓","內容","900913","全部","规范","๏","只","有","є","不","4"],"title":"专有名词使用正确的大小写","title_tokens":["小写","的","有名","大小写","专有","使用","大小","专有名词","正确","名词"]},{"location":"docs/digest/180919/#_16","text":"正确： 我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。 错误： 我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。","text_tokens":["熟悉","js","前端开发","rjs","一种","h5","错误","我们","开发","fed","的","backbone","、","需要","（","。","至少","html5","：","框架","者","）","理解","前端","angular","react","，"," ","等","javascript",".","正确","angularjs","一位","如"],"title":"不要使用不地道的缩写","title_tokens":["的","不要","使用","不","地道","缩写"]},{"location":"docs/digest/180919/#_17","text":"以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是**正确**的。","text_tokens":["是","下述","用法","遵循","是否","的","。","规则","：","语法","正确","来讲","色彩","略带","无论","*","角度","以下","，","有","都","个人","从","即"],"title":"争议","title_tokens":["争议"]},{"location":"docs/digest/180919/#_18","text":"用法： 请 提交一个 issue 并分配给相关同事。 访问我们网站的最新动态，请 点击这里 进行订阅！ 对比用法： 请 提交一个 issue 并分配给相关同事。 访问我们网站的最新动态，请 点击这里 进行订阅！","text_tokens":["最新","请","用法","进行","给","我们","对比","提交","issue","分配","的","这里","访问","相关","并","同事","。","：","！","一个","点击","，","订阅"," ","网站","动态"],"title":"链接之间增加空格","title_tokens":["空格","之间","增加","链接"]},{"location":"docs/digest/180919/#_19","text":"用法： 「老师，『有条不紊』的『紊』是什么意思？」 对比用法： “老师，‘有条不紊’的‘紊’是什么意思？”","text_tokens":["是","用法","」","’","意思","对比","有条不紊","『","的","：","「","？","‘","』","”","“","，","紊"," ","什么","老师"],"title":"简体中文使用直角引号","title_tokens":["简体中文","中文","使用","简体","引号","直角"]},{"location":"docs/digest/180919/#_20","text":"仓库 语言 vinta/paranoid-auto-spacing JavaScript huei90/pangu.node Node.js huacnlee/auto-correct Ruby sparanoid/space-lover PHP (WordPress) nauxliu/auto-correct PHP ricoa/copywriting-correct PHP hotoo/pangu.vim Vim sparanoid/grunt-auto-spacing Node.js (Grunt) hjiang/scripts/add-space-between-latin-and-cjk Python","text_tokens":["space","paranoid","js","huacnlee","hjiang","python",")","cjk","between","(","ricoa","correct","add","php","nauxliu","spacing","-","lover","pangu","wordpress","copywriting","and","语言","hotoo","auto","node","vinta","仓库","scripts","huei90","grunt","latin"," ","/","javascript",".","ruby","vim","sparanoid"],"title":"工具","title_tokens":["工具"]},{"location":"docs/digest/180919/#_21","text":"网站 文案 UGC Apple 中国 Yes N/A Apple 香港 Yes N/A Apple 台湾 Yes N/A Microsoft 中国 Yes N/A Microsoft 香港 Yes N/A Microsoft 台湾 Yes N/A LeanCloud Yes N/A 知乎 Yes 部分用户达成 V2EX Yes Yes SegmentFault Yes 部分用户达成 Apple4us Yes N/A 豌豆荚 Yes N/A Ruby China Yes 标题达成 PHPHub Yes 标题达成 少数派 Yes N/A","text_tokens":["segmentfault","标题","n","v2ex","部分","豌豆荚","apple4us","香港","达成","知乎","中国","phphub","microsoft","豆荚","leancloud","少数","少数派","yes","ugc","文案","china","数派","apple","a"," ","/","网站","用户","ruby","豌豆","台湾"],"title":"谁在这样做？","title_tokens":["这样","做","？","谁","在"]},{"location":"docs/digest/180919/#_22","text":"Guidelines for Using Capital Letters Letter case - Wikipedia Punctuation - Oxford Dictionaries Punctuation - The Purdue OWL How to Use English Punctuation Corrently - wikiHow 格式 - openSUSE 全角和半角 - 维基百科 引号 - 维基百科 疑问惊叹号 - 维基百科","text_tokens":["the","case","how","corrently","use","capital","for","oxford","惊叹号","letter","purdue","维基","全角","和","-","to","格式","using","english","叹号","punctuation","opensuse","维基百","维基百科","guidelines","半角"," ","wikihow","引号","owl","疑问","wikipedia","百科","dictionaries","惊叹","letters"],"title":"参考文献","title_tokens":["参考文献","参考","文献"]},{"location":"docs/digest/180919/#_23","text":"统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。 Other languages: [English] Chinese Traditional [Chinese Simplified]","text_tokens":["用法","之间","团队","simplified","中文","的","、","成本","增强","相关","languages","。","成员","]","排版","traditional","降低","other","[","english","文案","，","气质","chinese","沟通"," ","网站","统一",":"],"title":"中文文案排版指北","title_tokens":["排版","中文","文案","指北"]},{"location":"docs/digest/180919/#_24","text":"目录 空格 中英文之间需要增加空格 中文与数字之间需要增加空格 数字与单位之间无需增加空格 全角标点与其他字符之间不加空格 -ms-text-autospace to the rescue? 标点符号 不重复使用标点符号 全角和半角 使用全角中文标点 数字使用半角字符 遇到完整的英文整句、特殊名词，其內容使用半角标点 名词 专有名词使用正确的大小写 不要使用不地道的缩写 争议 链接之间增加空格 简体中文使用直角引号 工具 谁在这样做？ 参考文献 中文文案排版指北 目录 空格 中英文之间需要增加空格 中文与数字之间需要增加空格 数字与单位之间无需增加空格 全角标点与其他字符之间不加空格 -ms-text-autospace to the rescue? 标点符号 不重复使用标点符号 全角和半角 使用全角中文标点 数字使用半角字符 遇到完整的英文整句、特殊名词，其內容使用半角标点 名词 专有名词使用正确的大小写 不要使用不地道的缩写 争议 链接之间增加空格 简体中文使用直角引号 工具 谁在这样做？ 参考文献","text_tokens":["整句","the","重复","其內容","有名","?","大小写","无需","目录","简体","之间","ms","谁","在","数字","英文","加","中英文","特殊","争议","中文","的","工具","文献","、","这样","链接","做","需要","完整","符号","大小","中文标点","中英","重复使用","地道","标点","指北","增加","与","名词","小写","参考文献","全角","标点符号","text","-","to","单位","和","不要","排版","字符","？","专有名词","空格","其他","文案","，","简体中文","使用","半角","参考"," ","autospace","引号","不","直角","遇到","专有","正确","缩写","rescue"],"title":"目录","title_tokens":["目录"]},{"location":"docs/digest/180919/#_25","text":"「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。 与大家共勉之。」—— vinta/paranoid-auto-spacing","text_tokens":["显示","感情","留白","paranoid","研究","」","之间","毕竟","在","适时","英文","加","爱情","之","结婚","中文","的","书写","七成","打字","会","而","把","需要","适时地","最后","。","得","岁","不爱","与","大家","spacing","和","「","很","34","只能","猫","三成","-","路","—","人","auto","空格","共勉","vinta","，","喜欢","走","有","比例","都","辛苦","跟","遗产","时候"," ","/","不","其余","自己","留给"],"title":"空格","title_tokens":["空格"]},{"location":"docs/digest/180919/#_26","text":"正确： 在 LeanCloud 上，数据存储是围绕 AVObject 进行的。 错误： 在LeanCloud上，数据存储是围绕 AVObject 进行的。 在 LeanCloud上，数据存储是围绕 AVObject 进行的。 完整的正确用法： 在 LeanCloud 上，数据存储是围绕 AVObject 进行的。每个 AVObject 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 AVObject 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。 例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。","text_tokens":["直接","存储","是","即可","用法","围绕","进行","fm","」","提前","schema","定义","数据","在","设定","错误","只要","官方","对应","的","书写","兼容","需要","完整","。","了","每个","产品","键","与","avobject","豆瓣","：","leancloud","你","名词","-","「","格式","包含","所","按照","value","json","哪些","，","存在","都","key","free","例外"," ","等","不","指定","正确","上"],"title":"中英文之间需要增加空格","title_tokens":["需要","之间","中英","空格","增加","英文","中英文"]},{"location":"docs/digest/180919/#_27","text":"正确： 今天出去买菜花了 5000 元。 错误： 今天出去买菜花了 5000元。 今天出去买菜花了5000元。","text_tokens":["元"," ","：","买","。","了","5000","正确","菜花","错误","今天","出去"],"title":"中文与数字之间需要增加空格","title_tokens":["中文","增加","需要","之间","空格","数字","与"]},{"location":"docs/digest/180919/#_28","text":"正确： 我家的光纤入户宽带有 10Gbps，SSD 一共有 10TB。 错误： 我家的光纤入户宽带有 10 Gbps，SSD 一共有 20 TB。 另外，度／百分比与数字之间不需要增加空格： 正确： 今天是 233° 的高温。 新 MacBook Pro 有 15% 的 CPU 性能提升。 错误： 今天是 233 ° 的高温。 新 MacBook Pro 有 15 % 的 CPU 性能提升。","text_tokens":["是","新","233","10gbps","度","百分比","之间","cpu","10tb","／","数字","错误","的","pro","20","ssd","需要","。","10","高温","%","增加","宽带","与","今天","入户","：","macbook","性能","提升","百分","°","空格","gbps","15%","，","光纤","有","我家","tb"," ","15","一共","不","正确","另外"],"title":"数字与单位之间无需增加空格","title_tokens":["增加","单位","无需","之间","空格","数字","与"]},{"location":"docs/digest/180919/#_29","text":"正确： 刚刚买了一部 iPhone，好开心！ 错误： 刚刚买了一部 iPhone ，好开心！","text_tokens":["，","一部","好开心","！"," ","开心","买","了","iphone","正确","错误","：","刚刚"],"title":"全角标点与其他字符之间不加空格","title_tokens":["全角","字符","之间","不","标点","空格","与","其他","加"]},{"location":"docs/digest/180919/#-ms-text-autospace-to-the-rescue_1","text":"Microsoft 有个 -ms-text-autospace 的 CSS 属性可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 OS X、iOS 的用户界面目前并不存在这个特性，所以请继续保持随手加空格的习惯。","text_tokens":["自动","实现","不过","请","用户界面","特性","之间","ms","css","可以","在","应用","英文","并未","中英文","os","加","场景","的","这个","继续","、","并","例如","中英","。","普及","增加","microsoft","ios","保持","有个","text","-","随手","为","空格","其他","界面","属性","，","x","存在","所以","习惯"," ","autospace","目前","用户","不","另外","空白"],"title":"-ms-text-autospace to the rescue?","title_tokens":["the","?","text","-","to"," ","autospace","ms","rescue"]},{"location":"docs/digest/180919/#_30","text":"","text_tokens":[],"title":"标点符号","title_tokens":["符号","标点符号","标点"]},{"location":"docs/digest/180919/#_31","text":"正确： 德国队竟然战胜了巴西队！ 她竟然对你说「喵」？！ 错误： 德国队竟然战胜了巴西队！！ 德国队竟然战胜了巴西队！！！！！！！！ 她竟然对你说「喵」？？！！ 她竟然对你说「喵」？！？！？？！！","text_tokens":["德国队","竟然","巴西","」","战胜","错误","对","了","：","你","德国","「","说","！","？","巴西队"," ","她","喵","正确"],"title":"不重复使用标点符号","title_tokens":["重复","标点符号","使用","符号","不","重复使用","标点"]},{"location":"docs/digest/180919/#_32","text":"不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『 全角和半角 』。","text_tokens":["是","请","全形","『","明白","查看","符号","（","。","与","维基","全角","和","）","？","』","半形","维基百","维基百科","什么"," ","不","词条","百科","半角"],"title":"全角和半角","title_tokens":["全角","和","半角"]},{"location":"docs/digest/180919/#_33","text":"正确： 嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！ 核磁共振成像（NMRI）是什么原理都不知道？JFGI！ 错误： 嗨! 你知道嘛? 今天前台的小妹跟我说 \"喵\" 了哎! 嗨!你知道嘛?今天前台的小妹跟我说\"喵\"了哎! 核磁共振成像 (NMRI) 是什么原理都不知道? JFGI! 核磁共振成像(NMRI)是什么原理都不知道?JFGI!","text_tokens":["是","?","jfgi","」","磁共振","成像",")","错误","\"","(","原理","我","的","核磁共振","嘛","核磁","（","了","今天","：","你","）","「","说","知道","！","？","小妹","哎","nmri","!","都","跟"," ","共振","什么","喵","不","前台","正确","嗨"],"title":"使用全角中文标点","title_tokens":["中文","全角","使用","中文标点","标点"]},{"location":"docs/digest/180919/#_34","text":"正确： 这件蛋糕只卖 1000 元。 错误： 这件蛋糕只卖 １０００ 元。 例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全角数字的。","text_tokens":["设计","是","出现","极少","元","文字","中如","只卖","在","可以","数字","错误","的","、","１","。","０","对齐","：","1000","全角","情形","为","蛋糕","时","极少量","，","海报","使用","例外"," ","宣传","少量","方便","这件","正确","稿"],"title":"数字使用半角字符","title_tokens":["字符","数字","使用","半角"]},{"location":"docs/digest/180919/#_35","text":"正确： 乔布斯那句话是怎么说的？「Stay hungry, stay foolish.」 推荐你阅读《Hackers & Painters: Big Ideas from the Computer Age》，非常的有趣。 错误： 乔布斯那句话是怎么说的？「Stay hungry，stay foolish。」 推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。","text_tokens":["the","是","ideas","」","《","乔布斯","布斯","错误","的","age","hungry","有趣","stay","推荐","。","painters",",","乔布","from","＆","：","你","》","hackers","「","说","big","非常","那句话","？","computer","，","怎么","foolish","&","阅读"," ",".","正确",":"],"title":"遇到完整的英文整句、特殊名词，其內容使用半角标点","title_tokens":["整句","，","其內容","的","、","使用","完整","遇到","名词","标点","英文","特殊","半角"]},{"location":"docs/digest/180919/#_36","text":"","text_tokens":[],"title":"名词","title_tokens":["名词"]},{"location":"docs/digest/180919/#_37","text":"大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论內容，在这里只对部分易错用法进行简述。 正确： 使用 GitHub 登录 我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。 错误： 使用 github 登录 使用 GITHUB 登录 使用 Github 登录 使用 gitHub 登录 使用 gｲんĤЦ8 登录 我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。 我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。 我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。 我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。 我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。 注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标准的大小写规范进行书写；并通过 text-transform: uppercase; ／ text-transform: lowercase; 对表现形式进行定义。","text_tokens":["出现","用法","整体","定义","qu","形式","wiki","书写","这里","ou","大小","本",",","；","microsoft","в","当","范畴","ﾑ","现形","text","情形","foursquare","属于","ë","，","表现","ᄃ"," ","ĥ",".","正确","เ","简述","к","ค","部分","transform","google","相关","ｲ","而","。","facebook","小写","8","标准","html","使用","ק","t","中请","配合","通过","github","ภ","大小写",";","corporation","n","视觉","在","英文","ん","ƨ","的","风格","登录","inc","ƒ","i","ц","п","uppercase","ร","：","客户","-","ｷ","ŧ","表现形式","中","ς","г","讨论","原",":","大写","lowercase","g","网页","进行","я","／","错误","我们","易错","对","注意","、","需要","并","๓","內容","900913","全部","规范","๏","只","有","є","不","4"],"title":"专有名词使用正确的大小写","title_tokens":["小写","的","有名","大小写","专有","使用","大小","专有名词","正确","名词"]},{"location":"docs/digest/180919/#_38","text":"正确： 我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。 错误： 我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。","text_tokens":["熟悉","js","前端开发","rjs","一种","h5","错误","我们","开发","fed","的","backbone","、","需要","（","。","至少","html5","：","框架","者","）","理解","前端","angular","react","，"," ","等","javascript",".","正确","angularjs","一位","如"],"title":"不要使用不地道的缩写","title_tokens":["的","不要","使用","不","地道","缩写"]},{"location":"docs/digest/180919/#_39","text":"以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是**正确**的。","text_tokens":["是","下述","用法","遵循","是否","的","。","规则","：","语法","正确","来讲","色彩","略带","无论","*","角度","以下","，","有","都","个人","从","即"],"title":"争议","title_tokens":["争议"]},{"location":"docs/digest/180919/#_40","text":"用法： 请 提交一个 issue 并分配给相关同事。 访问我们网站的最新动态，请 点击这里 进行订阅！ 对比用法： 请 提交一个 issue 并分配给相关同事。 访问我们网站的最新动态，请 点击这里 进行订阅！","text_tokens":["最新","请","用法","进行","给","我们","对比","提交","issue","分配","的","这里","访问","相关","并","同事","。","：","！","一个","点击","，","订阅"," ","网站","动态"],"title":"链接之间增加空格","title_tokens":["空格","之间","增加","链接"]},{"location":"docs/digest/180919/#_41","text":"用法： 「老师，『有条不紊』的『紊』是什么意思？」 对比用法： “老师，‘有条不紊’的‘紊’是什么意思？”","text_tokens":["是","用法","」","’","意思","对比","有条不紊","『","的","：","「","？","‘","』","”","“","，","紊"," ","什么","老师"],"title":"简体中文使用直角引号","title_tokens":["简体中文","中文","使用","简体","引号","直角"]},{"location":"docs/digest/180919/#_42","text":"仓库 语言 vinta/paranoid-auto-spacing JavaScript huei90/pangu.node Node.js huacnlee/auto-correct Ruby sparanoid/space-lover PHP (WordPress) nauxliu/auto-correct PHP ricoa/copywriting-correct PHP hotoo/pangu.vim Vim sparanoid/grunt-auto-spacing Node.js (Grunt) hjiang/scripts/add-space-between-latin-and-cjk Python","text_tokens":["space","paranoid","js","huacnlee","hjiang","python",")","cjk","between","(","ricoa","correct","add","php","nauxliu","spacing","-","lover","pangu","wordpress","copywriting","and","语言","hotoo","auto","node","vinta","仓库","scripts","huei90","grunt","latin"," ","/","javascript",".","ruby","vim","sparanoid"],"title":"工具","title_tokens":["工具"]},{"location":"docs/digest/180919/#_43","text":"网站 文案 UGC Apple 中国 Yes N/A Apple 香港 Yes N/A Apple 台湾 Yes N/A Microsoft 中国 Yes N/A Microsoft 香港 Yes N/A Microsoft 台湾 Yes N/A LeanCloud Yes N/A 知乎 Yes 部分用户达成 V2EX Yes Yes SegmentFault Yes 部分用户达成 Apple4us Yes N/A 豌豆荚 Yes N/A Ruby China Yes 标题达成 PHPHub Yes 标题达成 少数派 Yes N/A","text_tokens":["segmentfault","标题","n","v2ex","部分","豌豆荚","apple4us","香港","达成","知乎","中国","phphub","microsoft","豆荚","leancloud","少数","少数派","yes","ugc","文案","china","数派","apple","a"," ","/","网站","用户","ruby","豌豆","台湾"],"title":"谁在这样做？","title_tokens":["这样","做","？","谁","在"]},{"location":"docs/digest/180919/#_44","text":"Guidelines for Using Capital Letters Letter case - Wikipedia Punctuation - Oxford Dictionaries Punctuation - The Purdue OWL How to Use English Punctuation Corrently - wikiHow 格式 - openSUSE 全角和半角 - 维基百科 引号 - 维基百科 疑问惊叹号 - 维基百科","text_tokens":["the","case","how","corrently","use","capital","for","oxford","惊叹号","letter","purdue","维基","全角","和","-","to","格式","using","english","叹号","punctuation","opensuse","维基百","维基百科","guidelines","半角"," ","wikihow","引号","owl","疑问","wikipedia","百科","dictionaries","惊叹","letters"],"title":"参考文献","title_tokens":["参考文献","参考","文献"]},{"location":"docs/digest/180920/","text":"github.com/ruanyf/document-style-guide/blob/master/docs/structure.md 结构 ¶ 软件手册是一部完整的书，建议采用下面的结构。 简介 （Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明 快速上手 （Getting Started）：[可选] [文件] 如何最快速地使用产品 入门篇 （Basics）： [必备] [目录] 又称”使用篇“，提供初级的使用教程 环境准备 （Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件 安装 （Installation）：[可选] [文件] 软件的安装方法 设置 （Configuration）：[必备] [文件] 软件的设置 进阶篇 （Advanced)：[可选] [目录] 又称”开发篇“，提供中高级的开发教程 API （Reference）：[可选] [目录|文件] 软件 API 的逐一介绍 FAQ ：[可选] [文件] 常见问题解答 附录 （Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容 Glossary ：[可选] [文件] 名词解释 Recipes ：[可选] [文件] 最佳实践 Troubleshooting ：[可选] [文件] 故障处理 ChangeLog ：[可选] [文件] 版本说明 Feedback ：[可选] [文件] 反馈方式 下面是两个真实范例，可参考。 Redux 手册 Atom 手册 文件名 ¶ 文档的文件名不得含有空格。 文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。 错误： 名词解释.md 正确： glossary.md 文件名建议只使用小写字母，不使用大写字母。 错误：TroubleShooting.md 正确：troubleshooting.md 为了醒目，某些说明文件的文件名，可以使用大写字母，比如 README 、 LICENSE 。 文件名包含多个单词时，单词之间建议使用半角的连词线（ - ）分隔。 不佳：advanced_usage.md 正确：advanced-usage.md","text_tokens":["中高级","环境","目录","处理","basics","安装","开发","中文","structure","也","这","又称","最","入门","初级","产品","master","prerequisite","单词","故障","docs","configuration","分隔","[","属于","¶","时","结构","准备","，","md","设置","介绍","比如","前置条件","glossary"," ","大写字母","下面","手",".","意味","正确","符","是","某些","feedback","为了","篇","版本","两个","简介",")","usage","附录","快速","题解","完整","帮助","。","advanced","建议","解释","必须","license","可","小写","atom","说明","started","最佳","方式","入门篇","document","空格","_","com","但","“","条件","使用","全角字","/","写字","方法","不佳","github","教程","常见","含有","上","getting","醒目","多个","redux","问题解答","faq","不能","|","问题","可以","前置","的","文件名","guide","ruanyf","：","不得","全角","]","和","-","style","api","名词解释","用于","线","逐一","包含","文件","本身","”","troubleshooting","提供","阅读","真实","blob","意味着","中高","地","高级","readme","大写","字母","实践","之间","总体","进阶","reference","错误","采用","反馈","连词","对","、","小写字母","文档","扼要","需要","手册","（","appendix","必备","名词","选","一部","）","installation","内容","recipes","changelog","范例","进阶篇","软件","字符","解答","只","如何","有","书","满足","参考","introduction","不","半角"],"title":"180920","title_tokens":["180920"]},{"location":"docs/digest/180920/#_1","text":"软件手册是一部完整的书，建议采用下面的结构。 简介 （Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明 快速上手 （Getting Started）：[可选] [文件] 如何最快速地使用产品 入门篇 （Basics）： [必备] [目录] 又称”使用篇“，提供初级的使用教程 环境准备 （Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件 安装 （Installation）：[可选] [文件] 软件的安装方法 设置 （Configuration）：[必备] [文件] 软件的设置 进阶篇 （Advanced)：[可选] [目录] 又称”开发篇“，提供中高级的开发教程 API （Reference）：[可选] [目录|文件] 软件 API 的逐一介绍 FAQ ：[可选] [文件] 常见问题解答 附录 （Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容 Glossary ：[可选] [文件] 名词解释 Recipes ：[可选] [文件] 最佳实践 Troubleshooting ：[可选] [文件] 故障处理 ChangeLog ：[可选] [文件] 版本说明 Feedback ：[可选] [文件] 反馈方式 下面是两个真实范例，可参考。 Redux 手册 Atom 手册","text_tokens":["中高级","环境","目录","处理","basics","安装","开发","又称","最","入门","初级","产品","prerequisite","故障","configuration","[","属于","结构","准备","，","设置","介绍","前置条件","glossary"," ","下面","手","是","feedback","篇","版本","两个","简介",")","附录","快速","题解","完整","帮助","。","advanced","建议","解释","可","atom","说明","started","最佳","方式","入门篇","但","“","条件","使用","方法","教程","常见","上","getting","redux","问题解答","faq","|","问题","前置","的","：","]","和","名词解释","api","逐一","文件","本身","”","troubleshooting","提供","阅读","真实","中高","地","高级","实践","总体","进阶","reference","采用","反馈","对","、","文档","扼要","需要","手册","（","appendix","必备","名词","选","一部","）","installation","内容","recipes","changelog","范例","进阶篇","软件","解答","如何","有","书","满足","参考","introduction","不"],"title":"结构","title_tokens":["结构"]},{"location":"docs/digest/180920/#_2","text":"文档的文件名不得含有空格。 文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。 错误： 名词解释.md 正确： glossary.md 文件名建议只使用小写字母，不使用大写字母。 错误：TroubleShooting.md 正确：troubleshooting.md 为了醒目，某些说明文件的文件名，可以使用大写字母，比如 README 、 LICENSE 。 文件名包含多个单词时，单词之间建议使用半角的连词线（ - ）分隔。 不佳：advanced_usage.md 正确：advanced-usage.md","text_tokens":["多个","符","大写","字母","某些","为了","之间","不能","可以","错误","连词","中文","的","醒目","usage","文件名","、","也","小写字母","这","文档","。","（","解释","建议","必须","advanced","license","：","名词","小写","不得","全角","说明","名词解释","单词","用于","线","-","）","包含","文件","字符","分隔","时","空格","_","，","md","只","troubleshooting","使用","比如","glossary"," ","全角字","写字","大写字母","不","意味着",".","不佳","意味","正确","readme","含有","半角"],"title":"文件名","title_tokens":["文件","文件名"]},{"location":"docs/digest/180921/","text":"language.chinadaily.com.cn/trans/2009-12/18/content_9201156.htm 英译汉的翻译方法和技巧是建立在英汉两种语言的对比之上的。这两种语言在词汇和句法方面的一些表达手段上各有其特点。语序调整主要指词序、句序两方面的调整。 首先我们谈谈词序的调整。 英汉语句中的主要成分主语、谓语、宾语或表语的词序基本上是一致的，但各种定语的位置和各种状语的次序在英、汉语言中则有同有异。汉语说“他正在卧室里睡觉”，而在英语中却说He is sleeping in the bedroom.（他睡觉在卧室。）；英语汉语都说“他出生于北京”，\"He was born in Beijing\"。 定语位置的调整 ¶ 单词作定语。 ¶ 英语中，单词作定语时，通常放在它所修饰的名词前，汉语中也大体如此。有时英语中有后置的，译成汉语时一般都前置。 something important（后置） 重要的事情（前置） 如果英语中名词前的定语过多，译文中则不宜完全前置，因为汉语不习惯在名词前用过多的定语。 a little,yellow,ragged beggar（前置） 一个要饭的，身材矮小，面黄肌瘦，衣衫褴褛。（后置） 短语作定语。 ¶ 英语中，修饰名词的短语一般放在名词之后，而汉语则反之，但间或也有放在后面的，视汉语习惯而定。 their attempt to cross the river（后置） 　　 他们渡江的企图（前置） the decimal system of counting（后置） 　　 十进制计算法（后置） 状语位置的调整 ¶ 单词作状语。 ¶ 英语中单词作状语修饰形容词或其他状语时，通常放在它所修饰的形容词或状语的前面，这一点与汉语相同。 He was very active in class.（前置） 　　 他在班上很活跃。（前置） 英语中单词作状语修饰动词时，一般放在动词之后，而在汉语里则放在动词之前。 Modern science and technology are developing rapidly．（后置） 现代科学技术正在迅速发展。（前置） 英语中表示程度的状语在修饰状语时可前置也可后置，而在汉语中一般都前置。 He is running fast enough.（后置） 　 　他跑得够快的了。（前置） 短语作状语。 ¶ 英语中短语状语可放在被修饰的动词之前或之后，译成汉语时则大多数放在被修饰的动词之前，但也有放在后面的。 Seeing this,some of us became very worried．（前置） 看到这种情况，我们有些人心里很着急。（前置） A jeep full sped fast,drenching me in spray．（后置） 一辆坐满人的吉普车急驶而过，溅了我一身水。（后置） 英语中地点状语一般在时间状语之前，而汉语中时间状语则往往放在地点状语之前。 He was born in Beijing on May 20,1970．（地点在前） - 他是1970年5月20日在北京出生的。（时间在前） 英语中时间状语、地点状语的排列一般是从小到大，而汉语中则是从大到小。其次我们谈谈句序的调整。这里，句序是指复合句中主句和从句的时间和逻辑关系叙述的顺序。 时间顺序的调整。 ¶ 英语复合句中，表示时间的从句可以放在主句之前，也可以放在主句之后，汉语中则通常先叙述先发生的事，后叙述后发生的事。 I went out for a walk after I had my dinner．（从句在主句之后） 我吃了晚饭后出去散步。（从句在主句之前） 英语复合句中有时包含两个以上的时间从句，各个时间从句的次序比较灵活，汉语则一般按事情发生的先后安排其位置。 He had flown yesterday from Beijing where he spent his vocation after finishing the meeting he had taken part in Tianjin． 他本来在天津开会，会议一结束，他就去北京度假了，昨天才坐飞机回来。 英汉语复合句中的逻辑顺序的调整。 ¶ 表示因果关系的英语复合句中，因果顺序灵活，在汉语中多数情况是原因在前，结果在后。 He had to stay in bed because he was ill．（后置） 因为他病了，他只好呆在床上。（前置） 表示条件（假设）与结果关系的英语复合句中，条件（假设）与结果的顺序也不固定，在汉语中则是条件在前，结果在后。 I still hope you will come back if arrangements could be made．（后置） 如果安排得好，我还是希望你来。（前置） 表示目的与行动关系的英语复合句中，目的与行动的顺序比较固定，多数是行动在前，目的在后，汉语也如此，但有时为了强调，也可把目的放在行动之前。 Better take your umbrella in case it rains．（后置） 最好带上伞以防下雨。（前置）","text_tokens":["will","则","衣衫褴褛","十进制","以上","中则","　","be","小","后置","little","这里","很着急","发生","这","this","身材矮小","开会","一致","英语","年","其次","重要"," ","假设","调整","动词","something","为了","他们","对比","我","好","developing","度假","这种","大到","过多","ill","中有","英汉","两种","飞机","“","结果","往往","要饭","身材","法","上","词汇","而定","drenching","可以","前置","其","渡江","一身","dinner","现代","2009","了","关系","from","两","状语","很","排列","他病","ragged","中","system","a","表达","后","伞","比较","或","yellow","才","同","固定","有时","原因","目的","只好","科学技术","汉语言","attempt","（","htm","rapidly","科学","．","昨天","前用","吃","被","视","主语","9201156","带上","发展","arrangements","情况","come","vocation","chinadaily","也","after","；",",","his","jeep","still","单词","语句","时","基本上","水","could","may","月","表示",".","散步","spray","褴褛","前面","两个","英译汉","meeting","成分","class","is","因果关系","从小到大","可","天津","指","was","_","是从","bedroom","事情","逻辑","首先","多数","英译","修饰","之上","形容词","if","各","还是","的","复合句","面黄","过","顺序","i","一辆","先","面黄肌瘦","之后","和","叙述","时则","事","表语","you","都","out","计算","安排","me","程度","翻译","very","enough","看到","因为","多","定语","、","基本","beijing","坐满","间或","名词","希望","完全","特点","译文","）","一个","正在","大多","full","有些","of","important","counting","大体","复合","12","强调","case","went","your","宾语","modern","he","跑","汉语","建立","吉普车","part","它","本来","北京","人","，","相同","cross","bed","短语","主要","1970","sleeping","位置","\"","晚饭","从小","呆","技术","而","来","如果","trans","where","rains","made","日","企图","technology","语言","com","其他","手段","他","条件","/","us","够快","急驶","前","because","译成","在","灵活","回来","下雨","就","得","会议","出去","矮小","-","to","18","and","sped","各个","进制","谓语","之前","时间","活跃","我们","5","became","行动","river","some","与","大多数","seeing","习惯","迅速","英","结束","不","不宜","their","他出","一点","spent","如此","一般","take","walk","better","着急","先后","for","心里","技巧","语序","yesterday","句序","谈谈","最好","班上","taken","¶","是","生于","一些","in","cn","次序","beggar","方面","。","词序","反之","通常","作","are","my","所","但","吉普","逻辑关系","卧室","方法","the","一","it","按","flown","放在","decimal","finishing","坐飞机","umbrella","以防","形容","你","睡觉","on","science","包含","language","active","back","tianjin","”","去","里","born","地点","后面","fast","主句","异","20","因果","content","把","stay","句法","hope","出生","从句","说","却说","worried","溅","running","有","衣衫","had","床上","各种"],"title":"180921","title_tokens":["180921"]},{"location":"docs/digest/180921/#_1","text":"","text_tokens":[],"title":"定语位置的调整","title_tokens":["位置","调整","的","定语"]},{"location":"docs/digest/180921/#_2","text":"英语中，单词作定语时，通常放在它所修饰的名词前，汉语中也大体如此。有时英语中有后置的，译成汉语时一般都前置。 something important（后置） 重要的事情（前置） 如果英语中名词前的定语过多，译文中则不宜完全前置，因为汉语不习惯在名词前用过多的定语。 a little,yellow,ragged beggar（前置） 一个要饭的，身材矮小，面黄肌瘦，衣衫褴褛。（后置）","text_tokens":["褴褛","前","yellow","衣衫褴褛","修饰","something","译成","如此","一般","有时","中则","因为","在","前置","beggar","多","放在","的","后置","little","定语","面黄","也","过","汉语","。","（","如果",",","名词","它","身材矮小","面黄肌瘦","完全","矮小","单词","过多","）","译文","通常","前用","作","一个","中有","ragged","时","英语","所","中","，","important","习惯","a","都","重要","事情","衣衫"," ","要饭","不","身材","不宜","大体"],"title":"单词作定语。","title_tokens":["。","单词","定语","作"]},{"location":"docs/digest/180921/#_3","text":"英语中，修饰名词的短语一般放在名词之后，而汉语则反之，但间或也有放在后面的，视汉语习惯而定。 their attempt to cross the river（后置） 　　 他们渡江的企图（前置） the decimal system of counting（后置） 　　 十进制计算法（后置）","text_tokens":["their","the","后面","则","修饰","而定","十进制","一般","他们","　","前置","放在","的","后置","渡江","decimal","也","汉语","而","attempt","。","river","（","间或","名词","反之","之后","）","to","企图","英语","中","但","system","，","of","习惯","有","counting","cross","视"," ","短语","进制","法","计算"],"title":"短语作定语。","title_tokens":["短语","。","定语","作"]},{"location":"docs/digest/180921/#_4","text":"","text_tokens":[],"title":"状语位置的调整","title_tokens":["位置","状语","调整","的"]},{"location":"docs/digest/180921/#_5","text":"英语中单词作状语修饰形容词或其他状语时，通常放在它所修饰的形容词或状语的前面，这一点与汉语相同。 He was very active in class.（前置） 　　 他在班上很活跃。（前置） 英语中单词作状语修饰动词时，一般放在动词之后，而在汉语里则放在动词之前。 Modern science and technology are developing rapidly．（后置） 现代科学技术正在迅速发展。（前置） 英语中表示程度的状语在修饰状语时可前置也可后置，而在汉语中一般都前置。 He is running fast enough.（后置） 　 　他跑得够快的了。（前置）","text_tokens":["一点","则","发展","modern","he","一般","　","后置","也","跑","这","汉语","它","单词","班上","时","英语","，","相同"," ","表示","动词",".","in","前面","技术","class","is","而","developing","。","可","通常","作","are","was","technology","所","其他","他","够快","修饰","形容词","在","前置","放在","的","现代","形容","了","得","状语","之后","很","science","active","and","中","里","都","之前","或","程度","very","enough","fast","活跃","科学技术","（","rapidly","与","．","科学","）","正在","迅速","running"],"title":"单词作状语。","title_tokens":["状语","。","单词","作"]},{"location":"docs/digest/180921/#_6","text":"英语中短语状语可放在被修饰的动词之前或之后，译成汉语时则大多数放在被修饰的动词之前，但也有放在后面的。 Seeing this,some of us became very worried．（前置） 看到这种情况，我们有些人心里很着急。（前置） A jeep full sped fast,drenching me in spray．（后置） 一辆坐满人的吉普车急驶而过，溅了我一身水。（后置） 英语中地点状语一般在时间状语之前，而汉语中时间状语则往往放在地点状语之前。 He was born in Beijing on May 20,1970．（地点在前） - 他是1970年5月20日在北京出生的。（时间在前） 英语中时间状语、地点状语的排列一般是从小到大，而汉语中则是从大到小。其次我们谈谈句序的调整。这里，句序是指复合句中主句和从句的时间和逻辑关系叙述的顺序。","text_tokens":["则","情况","一般","he","中则","小","后置","这里","着急","很着急","也","心里","汉语","this",",","吉普车","jeep","句序","谈谈","北京","人","英语","水","，","年","may","其次","月"," ","短语","调整","动词","spray","1970","是","in","从小","我","而","。","从小到大","这种","可","大到","日","was","指","但","他","是从","吉普","逻辑关系","往往","逻辑","us","多数","急驶","前","修饰","译成","drenching","在","前置","放在","的","复合句","一身","过","顺序","一辆","了","关系","状语","之后","on","和","-","排列","叙述","时则","中","sped","born","a","地点","之前","时间","me","或","后面","very","看到","fast","主句","我们","5","became","20","、","beijing","（","some","坐满","．","出生","从句","）","大多数","seeing","被","大多","worried","溅","full","有些","of","有","复合"],"title":"短语作状语。","title_tokens":["状语","短语","。","作"]},{"location":"docs/digest/180921/#_7","text":"英语复合句中，表示时间的从句可以放在主句之前，也可以放在主句之后，汉语中则通常先叙述先发生的事，后叙述后发生的事。 I went out for a walk after I had my dinner．（从句在主句之后） 我吃了晚饭后出去散步。（从句在主句之前） 英语复合句中有时包含两个以上的时间从句，各个时间从句的次序比较灵活，汉语则一般按事情发生的先后安排其位置。 He had flown yesterday from Beijing where he spent his vocation after finishing the meeting he had taken part in Tianjin． 他本来在天津开会，会议一结束，他就去北京度假了，昨天才坐飞机回来。","text_tokens":["went","则","spent","以上","he","一般","中则","walk","vocation","发生","先后","也","for","汉语","after","part","his","yesterday","本来","开会","北京","taken","英语","，"," ","表示","散步","in","两个","位置","meeting","次序","晚饭","我","。","度假","where","天津","通常","my","飞机","他","事情","the","一","按","flown","可以","在","灵活","回来","放在","其","的","就","复合句","finishing","坐飞机","dinner","i","了","from","先","会议","出去","之后","叙述","包含","事","tianjin","中","去","a","各个","后","out","比较","安排","之前","时间","才","主句","有时","beijing","（","．","从句","）","昨天","吃","结束","had","复合"],"title":"时间顺序的调整。","title_tokens":["时间","的","顺序","调整","。"]},{"location":"docs/digest/180921/#_8","text":"表示因果关系的英语复合句中，因果顺序灵活，在汉语中多数情况是原因在前，结果在后。 He had to stay in bed because he was ill．（后置） 因为他病了，他只好呆在床上。（前置） 表示条件（假设）与结果关系的英语复合句中，条件（假设）与结果的顺序也不固定，在汉语中则是条件在前，结果在后。 I still hope you will come back if arrangements could be made．（后置） 如果安排得好，我还是希望你来。（前置） 表示目的与行动关系的英语复合句中，目的与行动的顺序比较固定，多数是行动在前，目的在后，汉语也如此，但有时为了强调，也可把目的放在行动之前。 Better take your umbrella in case it rains．（后置） 最好带上伞以防下雨。（前置）","text_tokens":["will","强调","case","arrangements","your","如此","情况","he","中则","be","take","come","后置","better","也","汉语","still","最好","英语","could","，"," ","表示","bed","假设","是","为了","in","呆","我","好","因果关系","来","。","如果","rains","可","made","ill","was","但","他","条件","结果","多数","前","because","if","it","还是","在","灵活","前置","下雨","放在","的","复合句","umbrella","以防","顺序","i","了","关系","得","你","to","他病","back","中","you","后","伞","比较","安排","之前","固定","原因","因为","目的","有时","因果","行动","只好","把","stay","（","与","．","hope","希望","）","had","不","床上","复合","带上"],"title":"英汉语复合句中的逻辑顺序的调整。","title_tokens":["复合","的","复合句","英","汉语","顺序","逻辑","调整","。","中"]},{"location":"docs/digest/180927_2/","text":"xurongyang.github.io/ synchronized 用法 ¶ synchronized是Java语言中用于线程间并发互斥访问的关键字，通常有两种用法。 synchronized 修饰对象 ¶ public void method () { synchronized ( someObject ) { // code } // no effect synchronized ( new Object ()) { } } 当synchronized修饰的是对象时，实际上对synchronized块的代码加了一个对象锁，只有获取到这个锁才能执行synchronized块的代码，达到了互斥访问的效果。 倘若synchronized修饰的是new Object()呢？因为每次执行到此处时都会对这个新创建出来的对象加锁，而每次加锁的对象又都不相同，所以没有办法达到互斥访问的目的。 synchronized 修饰方法 ¶ public synchronized method1 () {} public static synchronized method2 () {} synchronized修饰方法需要区分修饰的是实例方法还是类方法，倘若修饰的是实例方法的话，那么synchronized加锁的对象就是对应的类实例，倘若修饰的是类方法的话，那么synchronized加锁的对象就是该类的Class对象。 synchronized的字节码表示 synchronized作为一个关键字在代码层面就是这样了，下面我们分析下它在字节码层面的表示。先看一段代码： public class SyncCodeBlock { public int i ; public void syncTask (){ //同步代码库 synchronized ( this ){ i ++ ; } } } 通过javap反编译，得到的字节码如下： Compiled from \"SyncCodeBlock.java\" public class SyncCodeBlock { public int i ; public SyncCodeBlock (); Code : 0 : aload_0 1 : invokespecial # 1 // Method java/lang/Object.\"<init>\":()V 4 : return public void syncTask (); Code : 0 : aload_0 1 : dup 2 : astore_1 3 : monitorenter 4 : aload_0 5 : dup 6 : getfield # 2 // Field i:I 9 : iconst_1 10 : iadd 11 : putfield # 2 // Field i:I 14 : aload_1 15 : monitorexit 16 : goto 24 19 : astore_2 20 : aload_1 21 : monitorexit 22 : aload_2 23 : athrow 24 : return Exception table : from to target type 4 16 19 any 19 22 19 any } 对上面的代码做个简化，去掉与synchronized没关系的逻辑，简化版如下 ： 3 : monitorenter //进入同步方法 //..........省略其他 15 : monitorexit //退出同步方法 16 : goto 24 //省略其他....... 21 : monitorexit //退出同步方法 当执行monitorenter指令时，会尝试获取对象的锁，如果该对象锁在执行前没有被锁定或者当前线程已经拥有了该对象的锁，就把锁的计数器加一。相应的，在执行monitorexit指令时会将锁计数器减一，当锁计数器值为0时，锁就被释放。如果获取锁失败，该线程就要阻塞等待，知道对象锁被另外一个线程释放。 值得注意的是编译器将会确保无论方法通过何种方式完成，方法中调用过的每条 monitorenter 指令都有执行其对应 monitorexit 指令，而无论这个方法是正常结束还是异常结束。为了保证在方法异常完成时 monitorenter 和 monitorexit 指令依然可以正确配对执行，编译器会自动产生一个异常处理器，这个异常处理器声明可处理所有的异常，它的目的就是用来执行 monitorexit 指令。从字节码中也可以看出多了一个monitorexit指令，它就是异常结束时被执行的释放monitor 的指令。 对于synchronized修饰的是方法的情况，在反编译的字节码中并没有monitorenter和monitorexit指令，字节码中的方法申明和代码中保持一致，例如： public static synchronized void syncTask (); Code : 0 : getstatic # 2 // Field i:I 3 : iconst_1 4 : iadd 5 : putstatic # 2 // Field i:I 8 : return 其实无论字节码中是monitorenter也好，还是monitorexit也好，都只是告知虚拟机进行锁操作的标志。 synchronized锁优化 ¶ 对象头 ¶ 在 HotSpot 虚拟机中，对象在内存中存储布局分为 3 块区域：对象头（Header）、实例数据（Instance Data）、对齐填充。 HotSpot 虚拟机的对象头包括两部分（非数组对象）信息，如下图所示： 第一部分用于存储对象自身的运行时数据，如哈希码（HashCode）、GC 分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳、对象分代年龄，这部分信息称为“Mark Word”；Mark Word 被设计成一个非固定的数据结构以便在极小的空间内存储尽量多的信息，它会根据自己的状态复用自己的存储空间。 第二部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例； 如果对象是一个 Java 数组，那在对象头中还必须有一块用于记录数组长度的数据。因为虚拟机可以通过普通 Java 对象的元数据信息确定 Java 对象的大小，但是从数组的元数据中无法确定数组的大小。 这部分数据的长度在 32 位和 64 位的虚拟机（未开启压缩指针）中分别为 32bit 和 64bit。 在 32 位系统下，存放 Class 指针的空间大小是 4 字节，Mark Word 空间大小也是4字节，因此头部就是 8 字节，如果是数组就需要再加 4 字节表示数组的长度，如下表所示： 实例数据 ¶ 实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。 这部分的存储顺序会受到虚拟机分配策略参数（FieldsAllocationStyle）和字段在 Java 源码中定义顺序的影响。 对齐填充 ¶ 对齐填充不是必然存在的，没有特别的含义，它仅起到占位符的作用。 由于 HotSpot VM 的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，也就是说对象的大小必须是 8 字节的整数倍。对象头部分是 8 字节的倍数，所以当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。 偏向锁 ¶ 偏向锁是Java 6之后加入的新锁，它是一种针对加锁操作的优化手段，经过研究发现，在大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，因此为了减少同一线程获取锁(会涉及到一些CAS操作,耗时)的代价而引入偏向锁。偏向锁的核心思想是，如果一个线程获得了锁，那么锁就进入偏向模式，此时Mark Word 的结构也变为偏向锁结构，当这个线程再次请求锁时，无需再做任何同步操作，即获取锁的过程，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能。所以，对于没有锁竞争的场合，偏向锁有很好的优化效果，毕竟极有可能连续多次是同一个线程申请相同的锁。但是对于锁竞争比较激烈的场合，偏向锁就失效了，因为这样场合极有可能每次申请锁的线程都是不相同的，因此这种场合下不应该使用偏向锁，否则会得不偿失，需要注意的是，偏向锁失败后，并不会立即膨胀为重量级锁，而是先升级为轻量级锁。下面我们接着了解轻量级锁。 轻量级锁 ¶ 倘若偏向锁失败，虚拟机并不会立即升级为重量级锁，它还会尝试使用一种称为轻量级锁的优化手段(1.6之后加入的)，此时Mark Word 的结构也变为轻量级锁的结构。轻量级锁能够提升程序性能的依据是“对绝大部分的锁，在整个同步周期内都不存在竞争”，注意这是经验数据。需要了解的是，轻量级锁所适应的场景是线程交替执行同步块的场合，如果存在同一时间访问同一锁的场合，就会导致轻量级锁膨胀为重量级锁。 自旋锁 ¶ 轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此自旋锁会假设在不久将来，当前的线程可以获得锁，因此虚拟机会让当前想要获取锁的线程做几个空循环(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。 参考 ¶ VM——深入分析对象的内存布局 深入理解 Java 并发之 synchronized 实现原理","text_tokens":["该","非","不是","22","到","16","轻量级","开启","void","得到","源码","省去","减少","还","分配","编译","指向","访问","这是","这","this","段","javap","由于","引入","最后","iadd","失效","记录","一致","1.6","总是","关键字","锁","想要","vm"," ","假设","省略","导致","1","即","字","}","起到","研究","元","无需","为了","立即","码中","有效","存储空间","好","整个","要求","例如","尝试","10","不仅","这种","占位","8","标志","data","code","14","方式","位","两种","含义","布局","synctask","“","依据","出来","周期","从","优化","通过","lang","instance","类型","自动","实现","数倍","因此","压缩","效率","可以","管理","绝大部分","其","何种","新创建","必然","会","了","关系","代价","from","两","数据结构","public","很","机会","获取","每条","中","new","让","所示","提供","后","反编译","进入","比较","依然",":","等待","数组","或","根据","goto","毕竟","年龄","补全","目的","固定","原因","getfield","23","加","原理","对","32","只有","该类","所有","（","普通","运行","target","被","影响","核心","倍数","未","自身","但是","异常","理器","转换","每次","情况","头","effect","fieldsallocationstyle","上面","第一","持有","这个","地址","也","做","大小","去掉","；",",","模式","table","保持","同一时间","field","invokespecial","当","量级","word","同步","库","极小","时","就要","无论","#","高","相对","空间","0","所以","表示","any","表",".","整数倍","另外","做个","经过","实例","存储","区域","这部","(","class","method","计数","接着","putstatic","可","monitorenter","由","没关系","compiled","{","达到","或者","层面","获得","_","int","倘若","应该","避免","monitor","块","逻辑","static","能够","多数","github","包括","程序代码","没关","膨胀","而且","修饰","执行","还是","哪个","管理系统","偏向","不能","类元","someobject","大部分","第二","场景","此时","的","内","过","i","顺序","init","exception","成","产生","先","竞争","之后","和","以便","完成","多次","hashcode","仅","都","简化版","真实","保证","编译器","没","进行","这部分","之间","因为","指针","一种","多","间","策略","实际","、","成本","synchronized","管理系","极有","并","若干","cas","9","类","）","关键","不久","一个","虚拟机","轻量","又","大多","也好","多线","互斥","整数","4","如","直接","如下","就是","用法",">","那么","处理","值得","++","变为","锁定","从而","id","区分","64","长","场合","io","它","减一","起始","复用","一时","已经","？","指令","值得注意","结构","同一时","程序","aload","，","释放","相同","无法","字节","区","gc","6","正确","码","21","深入","激烈",")","\"","太","确定","挂","配对","而","来","对齐","如果","系统","过程","态","的话","状态","当前","语言","升级","其他","手段","任何","v","得不偿失","阻塞","/","那","100","xurongyang","否则","空","大量","64bit","前",";","称为","发现","大部","在","重量级","新创","请求","就","同一","加入","此处","monitorexit","可能","astore","退出","正常","核心思想","特别","用于","no","to","只能","对象","有关","戳","hotspot","先看","几个","虚拟","处理器","15","针对","还会","用户","临界","自己","地","经验","时间","设计","操作","并发","将","用来","起","种类","我们","5","值为","锁时","需要","心思","..........","与","分为","一段","当锁","声明","各种类型","连续","内容","提升","大多数","计数器","适应","分别","putfield","头中","锁会","涉及","结束","参数","不","分析","2","切换","信息","object","顺利","内存","确保","存放","定义","一般","尽量","确实","之","method1","循环","新锁","这样","java","就是说","深入分析","将来","实际上","理解","加一","失败","为","¶","受到","作用","调用","若干次","看出","下面","下","符","是","时会","dup","一些","部分","数据","申请","简化","加锁","对应","自旋","type","只是","再","。","它会","必须","交替","通常","method2","重量","所","填充","作为","了解","使用","mark","保持一致","方法","没有","分代","绝大","办法","24","不会","操作系统","效果","长度","一时间","也就是说","太久","拥有","：","同一个","基于","性能","耗时","知道","—","getstatic","<","思想","代码","3","”","iconst","个","19","存在","一块","头部","创建","将会","athrow","一项","再次","同步操作","32bit","return","synccodeblock","线程","申明","较","注意","哈希","20","50","把","才能","图","其实","呢","真正","对于","11","header","而是","告知","有","参考","相应",".......","多线程","各种"],"title":"synchronized 实现","title_tokens":["synchronized"," ","实现"]},{"location":"docs/digest/180927_2/#synchronized","text":"synchronized是Java语言中用于线程间并发互斥访问的关键字，通常有两种用法。","text_tokens":["是","并发","用法","线程","间","的","访问","synchronized","java","。","用于","关键","通常","语言","两种","中","关键字","，","有","互斥"],"title":"synchronized 用法","title_tokens":["synchronized","用法"," "]},{"location":"docs/digest/180927_2/#synchronized_1","text":"public void method () { synchronized ( someObject ) { // code } // no effect synchronized ( new Object ()) { } } 当synchronized修饰的是对象时，实际上对synchronized块的代码加了一个对象锁，只有获取到这个锁才能执行synchronized块的代码，达到了互斥访问的效果。 倘若synchronized修饰的是new Object()呢？因为每次执行到此处时都会对这个新创建出来的对象加锁，而每次加锁的对象又都不相同，所以没有办法达到互斥访问的目的。","text_tokens":["}","是","修饰","到","执行","每次","目的","void","因为","办法","effect","someobject",")","新创","加","(","加锁","效果","的","对","这个","实际","此处","访问","新创建","synchronized","会","只有","method","而","。","了","才能","当","呢","public","no","{","code","实际上","达到","一个","对象","获取","？","时","又","代码","倘若","锁","，","出来","new","所以","都","相同"," ","块","/","创建","不","没有","互斥","object"],"title":"synchronized 修饰对象","title_tokens":["对象","synchronized","修饰"," "]},{"location":"docs/digest/180927_2/#synchronized_2","text":"public synchronized method1 () {} public static synchronized method2 () {} synchronized修饰方法需要区分修饰的是实例方法还是类方法，倘若修饰的是实例方法的话，那么synchronized加锁的对象就是对应的类实例，倘若修饰的是类方法的话，那么synchronized加锁的对象就是该类的Class对象。 synchronized的字节码表示 synchronized作为一个关键字在代码层面就是这样了，下面我们分析下它在字节码层面的表示。先看一段代码： public class SyncCodeBlock { public int i ; public void syncTask (){ //同步代码库 synchronized ( this ){ i ++ ; } } } 通过javap反编译，得到的字节码如下： Compiled from \"SyncCodeBlock.java\" public class SyncCodeBlock { public int i ; public SyncCodeBlock (); Code : 0 : aload_0 1 : invokespecial # 1 // Method java/lang/Object.\"<init>\":()V 4 : return public void syncTask (); Code : 0 : aload_0 1 : dup 2 : astore_1 3 : monitorenter 4 : aload_0 5 : dup 6 : getfield # 2 // Field i:I 9 : iconst_1 10 : iadd 11 : putfield # 2 // Field i:I 14 : aload_1 15 : monitorexit 16 : goto 24 19 : astore_2 20 : aload_1 21 : monitorexit 22 : aload_2 23 : athrow 24 : return Exception table : from to target type 4 16 19 any 19 22 19 any } 对上面的代码做个简化，去掉与synchronized没关系的逻辑，简化版如下 ： 3 : monitorenter //进入同步方法 //..........省略其他 15 : monitorexit //退出同步方法 16 : goto 24 //省略其他....... 21 : monitorexit //退出同步方法 当执行monitorenter指令时，会尝试获取对象的锁，如果该对象锁在执行前没有被锁定或者当前线程已经拥有了该对象的锁，就把锁的计数器加一。相应的，在执行monitorexit指令时会将锁计数器减一，当锁计数器值为0时，锁就被释放。如果获取锁失败，该线程就要阻塞等待，知道对象锁被另外一个线程释放。 值得注意的是编译器将会确保无论方法通过何种方式完成，方法中调用过的每条 monitorenter 指令都有执行其对应 monitorexit 指令，而无论这个方法是正常结束还是异常结束。为了保证在方法异常完成时 monitorenter 和 monitorexit 指令依然可以正确配对执行，编译器会自动产生一个异常处理器，这个异常处理器声明可处理所有的异常，它的目的就是用来执行 monitorexit 指令。从字节码中也可以看出多了一个monitorexit指令，它就是异常结束时被执行的释放monitor 的指令。 对于synchronized修饰的是方法的情况，在反编译的字节码中并没有monitorenter和monitorexit指令，字节码中的方法申明和代码中保持一致，例如： public static synchronized void syncTask (); Code : 0 : getstatic # 2 // Field i:I 3 : iconst_1 4 : iadd 5 : putstatic # 2 // Field i:I 8 : return 其实无论字节码中是monitorenter也好，还是monitorexit也好，都只是告知虚拟机进行锁操作的标志。","text_tokens":["如下","就是","该","异常","理器","22",">","16","那么","处理","确保","情况","值得","void","得到","++","上面","锁定","method1","区分","编译","这个","这样","也","java","this","去掉","javap","iadd","table","保持","field","invokespecial","它","当","减一","同步","加一","已经","库","失败","一致","指令","时","就要","#","值得注意","无论","关键字","aload","，","锁","释放","0","调用"," ","表示","any","下面","字节","看出","省略",".","1","6","下","另外","做个","正确","实例","}","码","是","21","时会","dup","为了","码中",")","\"","(","加锁","简化","对应","class","type","只是","配对","而","method","例如","计数","。","10","尝试","如果","putstatic","可","的话","monitorenter","8","标志","没关系","compiled","当前","{","code","14","或者","方式","method2","层面","_","其他","int","synctask","倘若","作为","v","monitor","阻塞","保持一致","/","逻辑","static","方法","通过","没有","lang","从","没关","自动","前",";","修饰","执行","还是","可以","在","24","其","就","的","何种","过","monitorexit","i","会","init","astore","exception","了","退出","关系","产生","from","拥有","正常","：","public","和","to","完成","知道","对象","获取","每条","getstatic","<","代码","3","中","iconst","先看","19","都","简化版","处理器","虚拟","反编译","15","将会","进入","athrow","保证","依然","编译器",":","等待","操作","将","return","synccodeblock","goto","进行","用来","线程","目的","申明","getfield","23","多","我们","5","对","值为","20","注意","synchronized","需要","把","并","该类","所有","9","..........","与","一段","当锁","类","其实","声明","对于","关键","一个","11","计数器","虚拟机","target","被","putfield","告知","有","也好","相应","结束","分析","2",".......","4","object"],"title":"synchronized 修饰方法","title_tokens":["方法","synchronized","修饰"," "]},{"location":"docs/digest/180927_2/#synchronized_3","text":"","text_tokens":[],"title":"synchronized锁优化","title_tokens":["锁","synchronized","优化"]},{"location":"docs/digest/180927_2/#_1","text":"在 HotSpot 虚拟机中，对象在内存中存储布局分为 3 块区域：对象头（Header）、实例数据（Instance Data）、对齐填充。 HotSpot 虚拟机的对象头包括两部分（非数组对象）信息，如下图所示： 第一部分用于存储对象自身的运行时数据，如哈希码（HashCode）、GC 分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳、对象分代年龄，这部分信息称为“Mark Word”；Mark Word 被设计成一个非固定的数据结构以便在极小的空间内存储尽量多的信息，它会根据自己的状态复用自己的存储空间。 第二部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例； 如果对象是一个 Java 数组，那在对象头中还必须有一块用于记录数组长度的数据。因为虚拟机可以通过普通 Java 对象的元数据信息确定 Java 对象的大小，但是从数组的元数据中无法确定数组的大小。 这部分数据的长度在 32 位和 64 位的虚拟机（未开启压缩指针）中分别为 32bit 和 64bit。 在 32 位系统下，存放 Class 指针的空间大小是 4 字节，Mark Word 空间大小也是4字节，因此头部就是 8 字节，如果是数组就需要再加 4 字节表示数组的长度，如下表所示：","text_tokens":["如下","但是","非","就是","内存","开启","存放","头","尽量","第一","持有","id","还","指向","这个","也","java","大小","64","；","它","word","复用","记录","为","极小","时","结构","空间","锁","，","无法"," ","表示","表","字节","gc","即","下","实例","码","存储","是","区域","元","这部","部分","数据","存储空间","确定","class","再","来","对齐","。","它会","如果","系统","必须","状态","标志","8","data","位","布局","填充","“","块","mark","那","从","通过","包括","instance","64bit","类型","分代","因此","称为","哪个","压缩","偏向","类元","在","可以","第二","就","的","内","长度","成","：","两","数据结构","以便","和","用于","hashcode","对象","中","3","戳","”","hotspot","虚拟","所示","一块","头部","自己","数组","时间","设计","32bit","根据","这部分","线程","年龄","固定","因为","指针","加","多","哈希","、","32","需要","（","分为","图","类","普通","）","运行","一个","虚拟机","被","header","分别","头中","有","未","自身","信息","4","如"],"title":"对象头","title_tokens":["对象","头"]},{"location":"docs/digest/180927_2/#_2","text":"实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。 这部分的存储顺序会受到虚拟机分配策略参数（FieldsAllocationStyle）和字段在 Java 源码中定义顺序的影响。","text_tokens":["实例","存储","是","类型","这部","这部分","信息","部分","定义","种类","字","在","数据","源码","fieldsallocationstyle","有效","分配","的","策略","也","顺序","会","java","段","。","（","真正","各种类型","）","内容","和","对象","虚拟机","所","中","代码","程序","受到","影响","，","虚拟"," ","参数","程序代码","各种"],"title":"实例数据","title_tokens":["实例","数据"]},{"location":"docs/digest/180927_2/#_3","text":"对齐填充不是必然存在的，没有特别的含义，它仅起到占位符的作用。 由于 HotSpot VM 的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，也就是说对象的大小必须是 8 字节的整数倍。对象头部分是 8 字节的倍数，所以当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。","text_tokens":["实例","符","是","自动","不是","起到","数倍","就是","内存","管理系统","部分","补全","头","管理","数据","就","的","地址","必然","管理系","要求","就是说","大小","需要","对齐","。","由于","也就是说","来","系统","必须","占位","它","当","8","特别","起始","对象","含义","时","填充","hotspot","，","仅","存在","作用","vm","倍数","所以"," ","字节","没有","通过","整数倍","整数"],"title":"对齐填充","title_tokens":["对齐","填充"]},{"location":"docs/digest/180927_2/#_4","text":"偏向锁是Java 6之后加入的新锁，它是一种针对加锁操作的优化手段，经过研究发现，在大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，因此为了减少同一线程获取锁(会涉及到一些CAS操作,耗时)的代价而引入偏向锁。偏向锁的核心思想是，如果一个线程获得了锁，那么锁就进入偏向模式，此时Mark Word 的结构也变为偏向锁结构，当这个线程再次请求锁时，无需再做任何同步操作，即获取锁的过程，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能。所以，对于没有锁竞争的场合，偏向锁有很好的优化效果，毕竟极有可能连续多次是同一个线程申请相同的锁。但是对于锁竞争比较激烈的场合，偏向锁就失效了，因为这样场合极有可能每次申请锁的线程都是不相同的，因此这种场合下不应该使用偏向锁，否则会得不偿失，需要注意的是，偏向锁失败后，并不会立即膨胀为重量级锁，而是先升级为轻量级锁。下面我们接着了解轻量级锁。","text_tokens":["但是","到","那么","轻量级","情况","每次","变为","省去","减少","从而","这个","新锁","也","做","这样","java","引入",",","模式","场合","失效","它","当","量级","word","同步","失败","为","结构","总是","程序","锁","，","所以","相同"," ","下面","6","下","经过","即","是","研究","无需","立即","为了","一些","激烈",")","申请","(","加锁","好","再","而","。","不仅","如果","接着","过程","这种","由","升级","获得","重量","手段","任何","应该","了解","得不偿失","使用","mark","优化","没有","否则","多数","大量","膨胀","而且","因此","发现","偏向","在","重量级","不会","请求","效果","同一","的","就","此时","加入","可能","会","了","代价","核心思想","先","同一个","竞争","之后","耗时","性能","很","多次","获取","思想","有关","存在","都","提供","后","针对","进入","比较","再次","操作","同步操作","线程","毕竟","因为","一种","我们","注意","锁时","极有","需要","并","心思","cas","对于","连续","大多数","一个","轻量","大多","核心","而是","有","涉及","不","多线","多线程"],"title":"偏向锁","title_tokens":["锁","偏向"]},{"location":"docs/digest/180927_2/#_5","text":"倘若偏向锁失败，虚拟机并不会立即升级为重量级锁，它还会尝试使用一种称为轻量级锁的优化手段(1.6之后加入的)，此时Mark Word 的结构也变为轻量级锁的结构。轻量级锁能够提升程序性能的依据是“对绝大部分的锁，在整个同步周期内都不存在竞争”，注意这是经验数据。需要了解的是，轻量级锁所适应的场景是线程交替执行同步块的场合，如果存在同一时间访问同一锁的场合，就会导致轻量级锁膨胀为重量级锁。","text_tokens":["轻量级","变为","还","也","这是","访问","场合","同一时间","它","量级","word","同步","一时","失败","为","1.6","结构","同一时","程序","锁","，"," ","导致","是","立即","部分","数据",")","(","整个","尝试","。","如果","交替","升级","重量","所","手段","倘若","“","依据","了解","使用","周期","mark","块","优化","能够","绝大","膨胀","执行","称为","偏向","大部","在","重量级","不会","大部分","绝大部分","场景","此时","的","内","同一","就","加入","会","一时间","竞争","之后","性能","”","存在","虚拟","都","经验","时间","线程","一种","对","注意","需要","并","提升","虚拟机","轻量","适应","不"],"title":"轻量级锁","title_tokens":["轻量级","轻量","锁","量级"]},{"location":"docs/digest/180927_2/#_6","text":"轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此自旋锁会假设在不久将来，当前的线程可以获得锁，因此虚拟机会让当前想要获取锁的线程做几个空循环(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。","text_tokens":["直接","就是","转换","到","轻量级","情况","一般","得到","确实","持有","还","循环","这个","这是","做","这","也","长","最后","将来","量级","失败","为","时","高","相对","锁","，","想要","若干次","假设","区","下","经过","是","为了",")","(","太","自旋","挂","。","如果","系统","态","这种","状态","当前","方式","层面","升级","获得","重量","手段","避免","得不偿失","那","100","从","优化","空","多数","实现","因此","称为","效率","不能","可以","在","办法","重量级","不会","操作系统","就","的","可能","会","了","太久","基于","只能","机会","获取","个","几个","让","虚拟","都","后","还会","真实","用户","临界","进入","比较","一项","地","时间","操作","或","将","没","进行","起","线程","毕竟","之间","原因","较","50","成本","需要","若干","提升","大多数","不久","虚拟机","轻量","大多","核心","锁会","切换","顺利"],"title":"自旋锁","title_tokens":["锁","自旋"]},{"location":"docs/digest/180927_2/#_7","text":"VM——深入分析对象的内存布局 深入理解 Java 并发之 synchronized 实现原理","text_tokens":["原理","的","实现","并发","vm","理解","synchronized","内存"," ","java","分析","—","对象","深入","布局","之","深入分析"],"title":"参考","title_tokens":["参考"]},{"location":"docs/digest/180927_3/","text":"xurongyang.github.io/2017/05/20/JSR-133-FAQ%E7%BF%BB%E8%AF%91/ www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html 内存模型到底是什么 ¶ 在多处理器计算机系统中，处理器一般拥有多层次的内存缓存，内存缓存一方面能够提高访问数据的速度（因为数据离处理器更近了），另一方面能降低总线的流量（因为许多内存操作可以被缓存替代）。内存缓存能极大的提高性能，但是也带来了一些挑战。例如，当两个处理器同时访问同一个内存地址时会发生什么事情？在什么情况下他们能看到相同的值？ 在处理器级别，存储器模型定义了必要和充分的条件，用于知道其他处理器对存储器的写入对于当前处理器是可见的，并且当前处理器的写入对于其他处理器是可见的。一些处理器应用了强一致内存模型，所有的处理器对于同一个内存地址，看到的值都是一样的。其它一些处理器应用了弱一些的内存模型，利用内存屏障来刷新处理器本地缓存，这样处理器就能看到其它处理器的写操作的结果。这些内存屏障通常在lock和unlock操作时执行，它们对于高级程序设计语言是透明的。 在强一致内存模型下编写程序通常更为容易，因为不需要用到内存屏障。然而，即使是一致性最强的内存模型也经常会用到内存屏障。往往他们的位置都是违反直觉的。处理器设计的最新趋势鼓励了较弱的内存模型，因为它们对缓存一致性的放宽使得可以在多个处理器和更大量的内存中实现更大的可扩展性。 一个写入操作什么时间对另外一个线程可见的问题部分是由编译器重排序导致的。例如，编译器可能会决定把一个写入操作推迟执行会更加高效。只有不改变程序的语义即可。如果编译器推迟了一个操作，另一个线程直到它真正执行后才会看到操作结果，这反应了缓存的效果（最后半句有点奇怪）。 此外，写操作也可能会提前，在这种情况下，其它线程可能会提前看到一个写操作发生。所有这些都是特意设计的 - 通过给编译器，运行时或硬件提供灵活性，以最佳顺序在内存模型的范围内执行操作，我们可以实现更高的性能。 举一个简单的例子： Class Reordering { int x = 0 , y = 0 ; public void writer () { x = 1 ; y = 2 ; } public void reader () { int r1 = y ; int r2 = x ; } } 假设这段代码被两个线程并发执行，并且y读取到的值是2。因为y的写入在x之后，所以程序员可能会认为x的值必定是1。然而，写操作可能被重排序了，如果发生这种情况，可能会先写入y，然后发生两个变量的读取，最后写入x。 结果是r1的值为2，但r2的值为0。 Java内存模型描述了多线程代码中的哪些行为是合法的，以及线程如何通过内存进行交互。 它描述了程序中变量之间的关系以及在实际计算机系统中存储和检索内存或寄存器的底层细节。 它可以使用各种各样的硬件和各种编译器优化来正确实现。 Java包括几种语言结构，包括volatile，final和synchronized，它们旨在帮助程序员将程序的并发要求提供给编译器。 Java内存模型定义了volatile和synchronized的行为，更重要的是确保正确同步的Java程序在所有处理器架构上正确运行。 其它语言有没有内存模型 大多数其他编程语言（如C和C ++）并没有直接支持多线程。 这些语言抑制编译器和体系结构中的重排序提供给程序员的保护在很大程度上取决于所使用的线程库（例如pthreads），使用的编译器以及运行代码的平台提供的保证。 JSR 133讲了什么内容 ¶ 自1997年以来，在Java语言规范第17章定义的Java Memory Model中发现了几个严重的缺陷。 这些缺陷允许混淆行为（例如观察到final改变了其值），并且破坏了编译器执行常见优化的能力。 Java内存模型是一项雄心勃勃的工作; 这是第一次编程语言规范试图并入一个内存模型，可以为各种架构的并发提供一致的语义。 不幸的是，定义一个一致和直观的记忆模型比预期的困难得多。 JSR 133定义了一种用于Java语言的新内存模型，它修复了较早内存模型的缺陷。 为了做到这一点，final和volatile的语义需要改变。 完整内容可以在 The Java Memory Model 找到，but the formal semantics are not for the timid（这句不懂）.It is surprising, and sobering, to discover how complicated seemingly simple concepts like synchronization really are（这句也是）.幸运的是，你不需要了解正式语义的细节 - JSR 133的目标是创建一套语义，为volatile，synchronized和final提供了一个直观的框架。 JSR 133的目标包括： ¶ 保持现有的安全保障，如类型安全，加强其他。 例如，变量值可能不会被创建为某个没有赋值给它的值：由某个线程观察到的变量的每个值必须是由某个线程设置过的值。 正确同步程序的语义应尽可能简单直观。 应该定义不完整或不正确同步的程序的语义，以使潜在的安全隐患最小化。（不懂） 程序员应该能够自信地说明多线程程序如何与内存交互。 应该可以在广泛的流行硬件架构中设计正确的，高性能的JVM实现。 应提供初始化安全的新保证。 如果对象被正确构造（这意味着在构造过程中它的引用不会逸出），那么可以看到对该对象的引用的所有线程也将看到在构造函数中设置的final域的值，而不需要同步。 对已存在的代码有很小的影响 重排序的含义是什么？ ¶ 有许多情况下，程序变量（对象实例字段，类静态字段和数组元素）的访问可能会以与程序指定的不同的顺序执行。 编译器可以按照优化的名义，对指令进行重排序。 数据可以在寄存器，处理器高速缓存和主存储器之间以与程序指定的顺序不同的顺序移动。 例如，如果线程先写入字段a，然后写入字段b，并且b的值不依赖于a的值，则编译器可以自由地对这些操作进行重新排序，并且缓存可以自由地刷新b的值到内存，在a之前。 有一些潜在的重新排序来源，如编译器，JIT和缓存。 编译器，运行时和硬件会创造一个as-if-serial语义的错觉，这意味着在一个单线程程序中，该程序不应该能够观察到重排序的影响。 然而，重排序可能会在不正确同步的多线程程序中发挥作用，其中一个线程能够观察到其他线程的影响，并且可能能够检测到该变量访问以与代码顺序不同的方式显示给其他线程。 大多数时候，一个线程不在乎其它线程在做什么。 但是，如果它在乎，就需要用到同步。 旧内存模型有什么问题？ ¶ 旧的内存模型有几个严重的问题。它很难理解，因此被广泛的违背。例如，旧的内存模型在很多情况下都没有允许在大多数JVM中应用的重排序措施。这带来了JSR 133的形成。 例如，一个广泛认同的观点是，如果使用final，则线程之间的同步是不必要的，以保证另一个线程将看到该字段的值。 虽然这是一个合理的假设和一个明智的行为，实际上我们想要的东西如何工作，在旧的记忆模式下，根本不是这么做的。 旧的内存模型中没有任何内容表明它处理final字段与任何其他字段不同 - 意思是同步是确保所有线程都看到由构造函数编写的最终字段的值的唯一方法。 因此，线程可能会看到该字段的默认值，然后在稍后的时间内看到其构造的值。 这意味着，例如，像String这样的不可变对象似乎可以改变它们的值 - 这是一个令人不安的现象。 旧的内存模型允许volatile与非volatile的读写操作进行重排序，这与大多数开发人员对volatile的直觉不一致，从而导致混乱。 最后，正如我们将看到的那样，程序员对程序错误同步时可能会发生什么的直觉通常是错误的。 JSR-133的目标之一是提请注意到这一事实。 “非正确同步”是什么意思？ ¶ 不正确同步的代码对于不同人的含义不一样。 当我们谈到在Java内存模型的上下文中错误地同步的代码时，我们的意思是任何代码 有一个线程写入一个变量 有另一个线程读取相同的变量 写入和读取没有用同步操作来排序 当这些规则被违反时，我们说我们在这个变量上有一个数据竞争。 具有数据竞争的程序是一个不正确同步的程序。 Synchronization同步操作做了什么 ¶ 同步有几个方面。 最容易理解的是互斥 - 只有一个线程可以拿到一个监视器锁，因此在监视器锁上同步意味着一旦一个线程进入被监视器锁保护的同步块，则没有其他线程可以进入该监视器锁保护的块，直到第一个线程退出同步块。 但是不仅仅是互斥访问，Synchronization同步确保在同步块之前或期间，线程的内存写入以可预测的方式显示给同一监视器上同步的其他线程。 在我们退出同步程序段后，我们释放监视器锁，该监视器锁具有将缓存刷新到内存的作用，使得此线程所做的写入对其他线程可见。 在我们可以进入同步块之前，我们需要获取监视器锁，该监视器锁具有使本地处理器缓存无效的效果，以便从内存重新加载变量。 然后，我们将能够看到所有的上一版本都可以看到的写入。 在缓存方面进行讨论，可能听起来好像这些问题只影响多处理器机器。 然而，可以在单个处理器上轻松看到重新排序的效果。 例如，编译器不会将acquire之后的代码移动到它之前，也不会把release之前的代码移动到它之后。当我们说acquire和release对缓存的操作时，我们忽略了很多的细节内容。 新的内存模型语义在内存操作（读取字段，写入字段，加锁，解锁）和其他线程操作（启动和连接）上创建了一些偏序规则，其中一些操作在其他操作之前发生。 当一个动作发生在另一个动作之前，第一个被保证在第二个之前被执行并且结果对其可见。 此排序的规则如下： 单线程中是完全按照代码顺序执行的 监视器的解锁操作发生在该监视器随后的加锁操作之前 对volatile字段的写入发生在该volatile字段每次后续读取之前 线程的start操作发生于该线程内的任何一行代码之前 一个线程内的所有操作都发生在join了这个线程的线程之前 这意味着一个线程在退出同步块之前的所有内存操作对于任何其它进入该同步块的线程都是可见的，因为所有的内存操作都发生在release之前，release发生在acquire之前。 另外一个含义是，下面的这个被许多人用作内存屏障的操作不起作用： synchronized ( new Object ()) {} 这实际上没有任何效果，你的编译器可以完全删除它，因为编译器知道没有其他线程将在同一个监视器上同步。如果一个线程想看到另外一个线程的结果，就必须设置一个happens before规则。 重要提示：两个线程必须在同一个监视器锁上进行同步，这样才能设置happens before规则。如果线程A在X上同步，线程B在Y上同步，这样是没有效果的。release和acquire必须匹配，否则会存在数据竞争的问题。 不可见变量如何看起来修改了它的值 ¶ 最好的例子是String类的一个实现。 字符串可以实现为具有三个字段的对象 - 字符数组，该数组中的偏移量和长度。 以这种方式实现String的理由，而不是仅使用字符数组，它允许多个String和StringBuffer对象共享相同的字符数组，并避免额外的对象分配和复制。 所以，例如，String.substring（）方法可以通过创建一个新的字符串来实现，该字符串与原始的String共享相同的字符数组，并且在长度和偏移量字段中只是不同。 对于字符串，这些字段都是final字段。 String s1 = \"/usr/tmp\" ; String s2 = s1 . substring ( 4 ); 字符串s2的偏移量为4，长度为4.但是，在旧内存模型下，另一个线程可以将偏移量看作默认值为0，然后看到正确的值为4， 它将显示为字符串“/usr”更改为“/tmp”。 旧内存模型允许这种行为，几个JVM禁止了这些行为，在新的内存模型下，这种行为是违法的。 新的内存模型下final域的工作原理是怎样的？ ¶ 对象的final字段的值在其构造函数中设置。假设对象被正确构造，一旦构造完成，在构造函数中分配的final字段的值将对所有其他线程都是可见的，不需要同步。 此外，final字段引用的任何其他对象或数组的值将与final字段保持同步更新。 对象被正确构造是什么意思？ 这仅仅意味着在构造过程中，不允许正在构造的对象的引用“逃脱”。 （参见安全构造技术的例子）换句话说，不要对正在构造的对象引用另外一个线程可能看到的对象; 不要将其分配给静态字段，不要将其注册为与任何其他对象的监听器，等等。 这些任务应该在构造函数完成之后完成，而不是在构造函数中完成。 class FinalFieldExample { final int x ; int y ; static FinalFieldExample f ; public FinalFieldExample () { x = 3 ; y = 4 ; } static void writer () { f = new FinalFieldExample (); } static void reader () { if ( f != null ) { int i = f . x ; int j = f . y ; } } } 上面的类是一个使用final字段的例子。 线程执行reader保证为f.x看到值3，因为它是final的。不能保证为y看到值4，因为它不是final的。 如果FinalFieldExample的构造函数如下所示： public FinalFieldExample () { // bad! x = 3 ; y = 4 ; // bad construction - allowing this to escape global . obj = this ; } 那么从 global.obj 读取this的线程不能保证为x看到3。 能看到正确构造的字段值的能力是很好的，但是如果字段本身是引用，那么你还希望你的代码可以看到它指向的对象（或数组）的最新值。 如果你的领域是一个final域，这也是保证的。 所以，你可以有一个final指向数组的指针，而不用担心其他线程看到数组的引用是正确的，但数组的内容不正确。Again, by “correct” here, we mean “up to date as of the end of the object’s constructor”, not “the latest value available”. 现在，说完所有这一切，如果在一个线程构造一个不可变对象（即只包含final字段的对象）之后，你想要确保所有其他线程都能看到正确的值，你通常还需要使用同步。 没有其他方法来确保，例如，第二个线程将会看到对不可变对象的引用。程序从final字段获得的保证应该非常小心，深入细心地了解如何在代码中管理并发性。 用JNI修改final字段的值，这样的行为没有具体定义。 volatile做了什么 ¶ volatile字段是用于在线程之间通信状态的特殊字段。每个读取的volatile的线程都会看到最后写入volatile的值; 实际上，它们被程序员设计为不会因为缓存或者重排序看不到最新的值的字段。禁止编译器和运行时环境在寄存器中分配volatile变量。 他们还必须确保在写入之后，将它们从缓存中刷新到内存，以便它们可以立即变得对其他线程可见。 类似地，在读取volatile字段之前，缓存必须被设置为无效，使得内存（而不是本地处理器高速缓存）中的值是最新的值。对volatile变量的访问重新排序也有其他限制。 在旧的内存模型下，volatile变量之间是不可以重排序的，但是和普通变量之间是可以重排序的，这破坏了volatile对于线程间传递信号的有用性。 在新的内存模型下，volatile变量之间还是不可以重排序，但是和普通变量之间也不可以重排序了。写入volatile的值和释放synchronized锁的内存效果是一样的，读取volatile的值和synchronized加锁的内存效果是一样的。实际上，因为新的存储器模型对于其他字段和volatile字段的重排序进行了更加严格的约束，无论是不是volatile变量，线程A在写入volatile字段f时可见的任何东西对于线程B在读取f时都是可见的。 下面是使用volatile的一个例子： class VolatileExample { int x = 0 ; volatile boolean v = false ; public void writer () { x = 42 ; v = true ; } public void reader () { if ( v == true ) { //uses x - guaranteed to see 42. } } } 假设一个线程正在调用writer，另一个线程是调用reader。 对v的写入器会把x的值写入到内存，并且v从内存中获取该值。 因此，如果读者看到v的值为true，那么也可以保证看到之前发生的写入42。 在旧的记忆模型下不是这样。 如果v不是volatile的，那么编译器可以对写入器中的写入进行重新排序，读者对x的读取可能会看到0。 volatile的语义被大大加强，几乎到达了synchronized的水平。对于可见性来说，volatile操作几乎和synchronized一样。 重要提示：和synchronized一样，必须用同一个volatile才能保证可见性。 新的内存模型是否修复了“双重锁定”问题？ （臭名昭着的）双重检查锁定成语（也称为多线程单例模式）是一种技巧，旨在支持延迟初始化，同时避免同步的开销。在非常早期的JVM中，同步非常缓慢，开发人员急于删除它 - 也许太渴望了。双重锁定的模式如下所示： // double-checked-locking - don't do this! private static Something instance = null ; public Something getInstance () { if ( instance == null ) { synchronized ( this ) { if ( instance == null ) instance = new Something (); } } return instance ; } 这看起来很聪明 - 在公共代码路径上避免了同步。 它只有一个问题 - 它没有作用。为什么没有作用？最明显的原因是初始化实例和对实例字段的写入可以由编译器或缓存重新排序，这将具有返回看起来是部分构造的对象的效果。 结果将是我们读取一个未初始化的对象。 还有很多其他原因能说明为什么这是错误的。没有办法使用旧的Java内存模型进行修复。更多信息可以查看：Double-checked locking: Clever, but broken和The “Double Checked Locking is broken” declaration 许多人认为使用volatile关键字会消除在尝试使用双重检查锁定模式时出现的问题。 在1.5之前的JVM中，volatile不会确保它有效。 在新的内存模型下，使实例字段volatile将“修复”双重锁定的问题，因为在构造和读取之间存在happens before关系。 用另外一种方式更好： private static class LazySomethingHolder { public static Something something = new Something (); } public static Something getInstance () { return LazySomethingHolder . something ; } 由于静态字段的初始化保证，该代码保证是正确的; 如果在静态初始化程序中设置了一个字段，那么它将被保证被正确地显示给访问该类的任何线程。 对虚拟机从业者 你应该看 The JSR-133 Cookbook for Compiler Writers 为什么要关心内存模型？ ¶ 你为什么要关心？ 并发错误很难调试。他们经常不出现在测试中，需要等待，直到你的程序在高负载下运行，并且难以重现。 你最好提前花费额外的努力，以确保您的程序正确同步; 虽然这不容易，但比尝试调试严重同步的应用程序要容易得多。","text_tokens":["该","不是","则","非","程序设计","到","到达","换句话说","void","刷新","pthreads","逃脱","boolean","它们","提高","还","分配","写入","编译","指向","用到","发生","访问","这是","这","查看","this","最后","段","期间","由于","必要","认同","usr","启动","www","更加","初始","锁上","发人","有用","一致","决定","timid","f","escape","before","关键字","读写操作","虽然","锁","年","想要","重要"," ","假设","懂","时候","导致","1","即","重新","字","更新","}","与非","已","don","立即","为了","something","令人","他们","guaranteed","根本","成语","有效","读写","allowing","133","目标","正如","1.5","合理","好","好像","要求","完整","例如","段值","尝试","后续","cookbook","不仅","这种","这些","多处","缓慢","即使","方式","含义","确保您","“","违背","业者","认为","结果","要","往往","轻松","变得","t","从","优化","通过","volatileexample","编写","up","instance","上","类型","昭着","离","1997","实现","创造","null","因此","机器","一样","扩展性","强","可以","管理","参见","返回","model","其","行为","~","会","唯一","s1","double","了","关系","三个","奇怪","直到","public","不必要","很","传递","雄心勃勃","获取","很大","like","中","写","同时","new","a","所示","提供","后","读取","进入","讨论","constructor","试图",":","等待","数组","体系结构","级别","听","或","才","主存储器","监听","此","偏序","原因","其它","从业","随后","edu","加强","仅仅","原理","对","很难","鼓励","只有","急于","屏障","该类","所有","（","层次","不仅仅","读者","安全","普通","聪明","领域","程序员","然而","运行","混乱","pugh","r2","一方","字符串","趋势","被","例子","uses","影响","逸","如何","重","开销","未","2017","date","找到","memorymodel","但是","支持","理器","另一方","具体","see","重现","情况","每次","其值","细心","心地","上面","do","第一","记忆","字段","这个","地址","也","cs","做","类似","偏移","程序段","高速","直觉","最",",","模式","保持","当","共享","construction","really","带来","会以","同步","库","替代","之一","不起作用","时","语义","高","出","无论","观点","哪些","原始","locking","设置","0","所以","s2","放宽","该值","by","42","复制",".","弱","不可","另外","在乎","解锁","看起来","引用","实例","存储","surprising","自信","how","提请","final","监视器","版本","两个","给","一切","展性","或硬件","(","潜在","class","synchronization","事实","允许","is","第一个","帮助","b","寄存器","seemingly","由","jit","可","像","{","或者","合法","寄存","上下","获得","灵活性","按照","int","臭名","应该","避免","高性能","名义","使","事情","不必","91","块","负载","更","static","是不是","能够","具有","多数","github","包括","but","延迟","最终","显示","即可","稍后","finalfieldexample","执行","if","最小化","simple","faq","元素","还是","不能","另一方面","加载","单线","不在","第二","许多","的","内","旧","信号","过","不到","顺序","i","以来","这么","更为","规则","动作","again","先","declaration","formal","机系统","竞争","之后","和","以便","忽略","完成","双重","默认值","降低","本身","保障","缓存","仅","reader","都","路径","一旦","指定","更近","尽可能","计算","保证","高级","编译器","acquire","计算机","删除","额外","程度","赖于","进行","看到","之间","担心","因为","本地","一种","应用","一套","理由","指针","’","多","间","编程","实际","e8%","synchronized","渴望","经常","并","serial","内存地址","简单","严重","框架","类","希望","很小","完全","）","不要","关键","一个","正在","虚拟机","公共","半句","大多","算机","做到","换句话","r1","只","谈到","of","预期","多层次","什么","然后","concepts","多线","取决于","互斥","看作","新","4","如","最小","直接","如下","出现","编写程序","底层","更大","处理","那么","比","很多","令人不安","以及","早","++","尽可","移动","锁定","从而","怎样","getinstance","措施","tmp","检索","观察","发挥","保护","io","并且","高速缓存","容易","它","破坏","j","现象","调试","第二个","substring","勃勃","join","非常","？","人","指令","checked","结构","难以","臭名昭着","程序","错觉","必定","释放","，","代码移动","注册","相同","umd","静态","困难","意味","交互","正确","here","总线","速度","活性","writers","位置","深入",")","\"","直观","太","技术","stringbuffer","监听器","第","并入","而","correct","来","如果","每个","系统","过程","变量值","连接","状态","性","应用程序","雄心","平台","当前","最佳","明智","一方面","语言","值","clever","范围","其他","happens","任何","不幸","条件","多层","v","/","xurongyang","否则","明显","各种各样","最强","构造","拿到","大量","多个","在线","更好","特意",";","违反","称为","为什么","构造函数","发现","努力","问题","在","灵活","小心","17","依赖","同一","就","那样","可能","几乎","as","退出","得","s","reordering","faq%","-","用于","unlock","to","幸运","量值","单个","and","对象","应","latest","取决","中是","现在","几种","变量","几个","虚拟","处理器","存储器","挑战","看起","人员","e7%","硬件","地","流行","jvm","之前","true","架构","设计","时间","操作","end","最新","早期","并发","将","似乎","各样","能力","提前","是否","较弱","隐患","自","错误","赋值","意思","我们","bf%","预测","需要","上下文","默认","消除","测试","与","改变","描述","内容","大多数","规范","第一次","发挥作用","不在乎","看","来源","release","一次","工作","不","2","形成","信息","object","discover","极大","一点","利用","单例","环境","内存","大大","确保","这句","定义","一般","章","排序","高效","volatile","函数","开发","推迟","以","这样","for","器会","关心","java","一行","修改","技巧","bb%","另","改变程序","实际上","理解","最好","等等","为","通信","¶","c","=","现有","bad","作用","严格","调用","private","模型","string","限制","有点","下面","y","af%","下","来说","器中","使得","lazysomethingholder","提示","是","时会","反应","主存","安全隐患","开发人员","一些","部分","用作","程","数据","域","obj","加锁","方面","只是","依赖于","无效","一致性","有没有","表明","broken","说完","。","某个","必须","水平","还有","mean","说明","违法","能","memory","约束","下文","通常","are","lock","'","偏移量","html","所","但","了解","东西","其中","修复","可扩展性","使用","体系","不同","正式","方法","没有","也许","常见","会先","the","we","起来","扩展","一","it","complicated","检测","初始化","混淆","办法","不会","特殊","效果","讲","start","长度","false","拥有","看不到","同一个","：","你","性能","透明","知道","该字","包含","抑制","代码","”","匹配","3","value","检查","x","存在","自由","!","不安","sobering","创建","举","将会","缺陷","意味着","一项","jsr","花费","二个","compiler","同步操作","用","return","从业者","线程","监视","此外","semantics","较","高性","编程语言","广泛","注意","细心地","20","多处理器","旨在","把","变","换句","单线程","充分","才能","available","计算机系统","真正","对于","禁止","说","任务","jni","字符","writer","到底","可见","global","于","流量","有","想","05","不用","not","难","细节","多线程","改为","各种"],"title":"180927 3","title_tokens":["3","180927"," "]},{"location":"docs/digest/180927_3/#_1","text":"在多处理器计算机系统中，处理器一般拥有多层次的内存缓存，内存缓存一方面能够提高访问数据的速度（因为数据离处理器更近了），另一方面能降低总线的流量（因为许多内存操作可以被缓存替代）。内存缓存能极大的提高性能，但是也带来了一些挑战。例如，当两个处理器同时访问同一个内存地址时会发生什么事情？在什么情况下他们能看到相同的值？ 在处理器级别，存储器模型定义了必要和充分的条件，用于知道其他处理器对存储器的写入对于当前处理器是可见的，并且当前处理器的写入对于其他处理器是可见的。一些处理器应用了强一致内存模型，所有的处理器对于同一个内存地址，看到的值都是一样的。其它一些处理器应用了弱一些的内存模型，利用内存屏障来刷新处理器本地缓存，这样处理器就能看到其它处理器的写操作的结果。这些内存屏障通常在lock和unlock操作时执行，它们对于高级程序设计语言是透明的。 在强一致内存模型下编写程序通常更为容易，因为不需要用到内存屏障。然而，即使是一致性最强的内存模型也经常会用到内存屏障。往往他们的位置都是违反直觉的。处理器设计的最新趋势鼓励了较弱的内存模型，因为它们对缓存一致性的放宽使得可以在多个处理器和更大量的内存中实现更大的可扩展性。 一个写入操作什么时间对另外一个线程可见的问题部分是由编译器重排序导致的。例如，编译器可能会决定把一个写入操作推迟执行会更加高效。只有不改变程序的语义即可。如果编译器推迟了一个操作，另一个线程直到它真正执行后才会看到操作结果，这反应了缓存的效果（最后半句有点奇怪）。 此外，写操作也可能会提前，在这种情况下，其它线程可能会提前看到一个写操作发生。所有这些都是特意设计的 - 通过给编译器，运行时或硬件提供灵活性，以最佳顺序在内存模型的范围内执行操作，我们可以实现更高的性能。 举一个简单的例子： Class Reordering { int x = 0 , y = 0 ; public void writer () { x = 1 ; y = 2 ; } public void reader () { int r1 = y ; int r2 = x ; } } 假设这段代码被两个线程并发执行，并且y读取到的值是2。因为y的写入在x之后，所以程序员可能会认为x的值必定是1。然而，写操作可能被重排序了，如果发生这种情况，可能会先写入y，然后发生两个变量的读取，最后写入x。 结果是r1的值为2，但r2的值为0。 Java内存模型描述了多线程代码中的哪些行为是合法的，以及线程如何通过内存进行交互。 它描述了程序中变量之间的关系以及在实际计算机系统中存储和检索内存或寄存器的底层细节。 它可以使用各种各样的硬件和各种编译器优化来正确实现。 Java包括几种语言结构，包括volatile，final和synchronized，它们旨在帮助程序员将程序的并发要求提供给编译器。 Java内存模型定义了volatile和synchronized的行为，更重要的是确保正确同步的Java程序在所有处理器架构上正确运行。 其它语言有没有内存模型 大多数其他编程语言（如C和C ++）并没有直接支持多线程。 这些语言抑制编译器和体系结构中的重排序提供给程序员的保护在很大程度上取决于所使用的线程库（例如pthreads），使用的编译器以及运行代码的平台提供的保证。","text_tokens":["程序设计","到","void","刷新","pthreads","它们","提高","写入","编译","用到","发生","访问","这","最后","段","必要","更加","一致","决定","重要"," ","假设","导致","1","}","他们","要求","例如","这种","这些","多处","即使","认为","结果","往往","优化","通过","编写","上","离","实现","一样","扩展性","强","可以","行为","会","了","关系","奇怪","直到","public","很大","中","写","同时","提供","后","读取","体系结构","级别","或","才","其它","对","鼓励","只有","屏障","所有","（","层次","程序员","然而","运行","r2","一方","趋势","被","例子","如何","重","但是","支持","理器","另一方","情况","地址","也","直觉",",","当","带来","同步","库","替代","时","语义","高","哪些","0","所以","放宽","弱","另外","存储","final","两个","给","展性","或硬件","(","class","帮助","寄存器","由","{","合法","寄存","灵活性","int","事情","更","能够","多数","包括","即可","执行","另一方面","许多","的","内","顺序","更为","机系统","之后","和","降低","缓存","reader","都","更近","计算","保证","高级","编译器","计算机","程度","进行","看到","之间","因为","本地","应用","编程","实际","synchronized","经常","并","内存地址","简单","）","一个","半句","大多","算机","r1","多层次","什么","然后","多线","取决于","如","直接","编写程序","底层","更大","处理","以及","++","检索","保护","并且","容易","它","？","结构","程序","必定","，","相同","交互","正确","总线","速度","活性","位置",")","来","如果","系统","平台","当前","最佳","一方面","语言","值","范围","其他","条件","多层","各种各样","最强","大量","多个","特意",";","违反","问题","在","灵活","同一","就","可能","reordering","用于","-","unlock","取决","几种","变量","处理器","存储器","挑战","硬件","架构","设计","时间","操作","最新","并发","将","各样","提前","较弱","我们","需要","改变","描述","大多数","不","2","极大","利用","内存","确保","定义","一般","排序","高效","volatile","推迟","以","这样","java","另","改变程序","为","c","=","模型","有点","y","下","使得","是","时会","反应","一些","部分","数据","方面","一致性","有没有","。","能","通常","lock","所","但","可扩展性","使用","体系","没有","会先","扩展","效果","拥有","同一个","：","性能","透明","知道","抑制","代码","x","举","线程","此外","编程语言","多处理器","旨在","把","充分","计算机系统","真正","对于","writer","可见","流量","细节","多线程","各种"],"title":"内存模型到底是什么","title_tokens":["是","模型","什么","内存","到底"]},{"location":"docs/digest/180927_3/#jsr-133","text":"自1997年以来，在Java语言规范第17章定义的Java Memory Model中发现了几个严重的缺陷。 这些缺陷允许混淆行为（例如观察到final改变了其值），并且破坏了编译器执行常见优化的能力。 Java内存模型是一项雄心勃勃的工作; 这是第一次编程语言规范试图并入一个内存模型，可以为各种架构的并发提供一致的语义。 不幸的是，定义一个一致和直观的记忆模型比预期的困难得多。 JSR 133定义了一种用于Java语言的新内存模型，它修复了较早内存模型的缺陷。 为了做到这一点，final和volatile的语义需要改变。 完整内容可以在 The Java Memory Model 找到，but the formal semantics are not for the timid（这句不懂）.It is surprising, and sobering, to discover how complicated seemingly simple concepts like synchronization really are（这句也是）.幸运的是，你不需要了解正式语义的细节 - JSR 133的目标是创建一套语义，为volatile，synchronized和final提供了一个直观的框架。","text_tokens":["找到","一点","到","内存","这句","定义","比","章","早","其值","volatile","第一","记忆","编译","这是","for","这","也","java","观察",",","并且","它","破坏","really","勃勃","为","一致","timid","语义","，","年","模型"," ","懂",".","困难","是","surprising","how","final","为了","直观","133","目标","synchronization","第","允许","is","并入","完整","例如","。","seemingly","这些","雄心","memory","are","语言","了解","不幸","修复","正式","优化","but","常见","the","1997",";","执行","it","complicated","simple","发现","混淆","在","可以","17","model","的","行为","以来","了","得","formal","你","和","幸运","用于","to","-","and","雄心勃勃","like","中","几个","提供","sobering","创建","缺陷","一项","试图","编译器","架构","jsr","并发","能力","一种","semantics","一套","自","较","多","编程语言","编程","synchronized","需要","（","严重","框架","改变","）","内容","一个","规范","第一次","做到","预期","concepts","一次","工作","不","not","细节","新","各种","discover"],"title":"JSR 133讲了什么内容","title_tokens":["jsr","133","内容","讲"," ","什么","了"]},{"location":"docs/digest/180927_3/#jsr-133_1","text":"保持现有的安全保障，如类型安全，加强其他。 例如，变量值可能不会被创建为某个没有赋值给它的值：由某个线程观察到的变量的每个值必须是由某个线程设置过的值。 正确同步程序的语义应尽可能简单直观。 应该定义不完整或不正确同步的程序的语义，以使潜在的安全隐患最小化。（不懂） 程序员应该能够自信地说明多线程程序如何与内存交互。 应该可以在广泛的流行硬件架构中设计正确的，高性能的JVM实现。 应提供初始化安全的新保证。 如果对象被正确构造（这意味着在构造过程中它的引用不会逸出），那么可以看到对该对象的引用的所有线程也将看到在构造函数中设置的final域的值，而不需要同步。 对已存在的代码有很小的影响","text_tokens":["最小","该","新","到","内存","那么","定义","尽可","函数","以","也","这","观察","保持","它","初始","同步","为","语义","出","现有","程序","，","设置"," ","懂","意味","交互","正确","引用","是","已","自信","安全隐患","final","给","域","直观","潜在","完整","而","例如","。","某个","如果","每个","过程","必须","变量值","由","说明","值","其他","应该","高性能","使","没有","能够","构造","类型","实现","最小化","构造函数","初始化","可以","在","不会","的","过","可能","：","性能","量值","对象","应","中","代码","变量","存在","提供","创建","意味着","尽可能","保证","地","流行","硬件","jvm","架构","设计","或","将","看到","线程","隐患","赋值","高性","加强","广泛","对","需要","所有","（","简单","与","安全","很小","）","程序员","被","影响","逸","如何","有","不","多线","保障","多线程","如"],"title":"JSR 133的目标包括：","title_tokens":["jsr","的","133","目标"," ","包括","："]},{"location":"docs/digest/180927_3/#_2","text":"有许多情况下，程序变量（对象实例字段，类静态字段和数组元素）的访问可能会以与程序指定的不同的顺序执行。 编译器可以按照优化的名义，对指令进行重排序。 数据可以在寄存器，处理器高速缓存和主存储器之间以与程序指定的顺序不同的顺序移动。 例如，如果线程先写入字段a，然后写入字段b，并且b的值不依赖于a的值，则编译器可以自由地对这些操作进行重新排序，并且缓存可以自由地刷新b的值到内存，在a之前。 有一些潜在的重新排序来源，如编译器，JIT和缓存。 编译器，运行时和硬件会创造一个as-if-serial语义的错觉，这意味着在一个单线程程序中，该程序不应该能够观察到重排序的影响。 然而，重排序可能会在不正确同步的多线程程序中发挥作用，其中一个线程能够观察到其他线程的影响，并且可能能够检测到该变量访问以与代码顺序不同的方式显示给其他线程。 大多数时候，一个线程不在乎其它线程在做什么。 但是，如果它在乎，就需要用到同步。","text_tokens":["但是","该","则","理器","到","内存","处理","情况","刷新","排序","移动","写入","字段","编译","用到","以","访问","做","这","高速","段","观察","发挥","并且","高速缓存","它","会以","同步","指令","时","语义","程序","错觉","，","作用"," ","时候","静态","意味","下","重新","正确","在乎","字","实例","存储","主存","一些","给","数据","潜在","依赖于","例如","。","b","如果","寄存器","jit","这些","方式","寄存","值","按照","其他","应该","其中","名义","不同","优化","能够","多数","显示","创造","执行","if","元素","检测","可以","在","单线","不在","依赖","许多","就","的","可能","顺序","会","as","先","和","-","对象","中","代码","缓存","变量","自由","a","处理器","存储器","指定","意味着","地","硬件","编译器","之前","数组","操作","主存储器","赖于","进行","之间","线程","其它","对","需要","serial","（","单线程","与","类","）","运行","然而","大多数","一个","发挥作用","不在乎","大多","影响","有","重","来源","什么","然后","不","多线","多线程","如"],"title":"重排序的含义是什么？","title_tokens":["的","是","重","什么","？","含义","排序"]},{"location":"docs/digest/180927_3/#_3","text":"旧的内存模型有几个严重的问题。它很难理解，因此被广泛的违背。例如，旧的内存模型在很多情况下都没有允许在大多数JVM中应用的重排序措施。这带来了JSR 133的形成。 例如，一个广泛认同的观点是，如果使用final，则线程之间的同步是不必要的，以保证另一个线程将看到该字段的值。 虽然这是一个合理的假设和一个明智的行为，实际上我们想要的东西如何工作，在旧的记忆模式下，根本不是这么做的。 旧的内存模型中没有任何内容表明它处理final字段与任何其他字段不同 - 意思是同步是确保所有线程都看到由构造函数编写的最终字段的值的唯一方法。 因此，线程可能会看到该字段的默认值，然后在稍后的时间内看到其构造的值。 这意味着，例如，像String这样的不可变对象似乎可以改变它们的值 - 这是一个令人不安的现象。 旧的内存模型允许volatile与非volatile的读写操作进行重排序，这与大多数开发人员对volatile的直觉不一致，从而导致混乱。 最后，正如我们将看到的那样，程序员对程序错误同步时可能会发生什么的直觉通常是错误的。 JSR-133的目标之一是提请注意到这一事实。","text_tokens":["不是","则","到","内存","处理","确保","很多","情况","令人不安","排序","volatile","函数","它们","从而","开发","措施","记忆","字段","发生","以","这是","做","这","这样","段","直觉","最后","模式","认同","必要","它","带来","另","现象","发人","实际上","理解","同步","一致","之一","时","观点","程序","读写操作","虽然","，","想要","模型","string"," ","假设","导致","意味","下","不可","字","与非","是","提请","final","开发人员","令人","根本","读写","133","正如","目标","事实","合理","允许","表明","例如","。","如果","由","像","通常","明智","值","其他","任何","违背","东西","使用","不必","不同","方法","没有","多数","编写","构造","最终","稍后","一","因此","构造函数","问题","在","可以","其","的","旧","行为","内","那样","可能","会","唯一","这么","了","不必要","和","很","-","该字","默认值","对象","中","几个","都","不安","意味着","保证","人员","jvm","jsr","时间","操作","将","似乎","进行","之间","线程","看到","应用","错误","意思","我们","广泛","对","注意","实际","变","所有","默认","严重","与","改变","程序员","内容","混乱","大多数","一个","被","大多","如何","有","重","什么","然后","工作","不","难","形成"],"title":"旧内存模型有什么问题？","title_tokens":["旧","有","模型","什么","内存","？","问题"]},{"location":"docs/digest/180927_3/#_4","text":"不正确同步的代码对于不同人的含义不一样。 当我们谈到在Java内存模型的上下文中错误地同步的代码时，我们的意思是任何代码 有一个线程写入一个变量 有另一个线程读取相同的变量 写入和读取没有用同步操作来排序 当这些规则被违反时，我们说我们在这个变量上有一个数据竞争。 具有数据竞争的程序是一个不正确同步的程序。","text_tokens":["是","操作","同步操作","用","违反","内存","一样","线程","在","排序","数据","错误","意思","我们","的","写入","这个","java","上下文","来","。","规则","当","竞争","这些","对于","和","另","说","下文","同步","一个","人","含义","上下","时","被","代码","中","程序","任何","，","变量","谈到","有","模型","读取","相同"," ","不","不同","没有","具有","地","正确","上"],"title":"“非正确同步”是什么意思？","title_tokens":["是","意思","非","同步","什么","？","正确","”","“"]},{"location":"docs/digest/180927_3/#synchronization","text":"同步有几个方面。 最容易理解的是互斥 - 只有一个线程可以拿到一个监视器锁，因此在监视器锁上同步意味着一旦一个线程进入被监视器锁保护的同步块，则没有其他线程可以进入该监视器锁保护的块，直到第一个线程退出同步块。 但是不仅仅是互斥访问，Synchronization同步确保在同步块之前或期间，线程的内存写入以可预测的方式显示给同一监视器上同步的其他线程。 在我们退出同步程序段后，我们释放监视器锁，该监视器锁具有将缓存刷新到内存的作用，使得此线程所做的写入对其他线程可见。 在我们可以进入同步块之前，我们需要获取监视器锁，该监视器锁具有使本地处理器缓存无效的效果，以便从内存重新加载变量。 然后，我们将能够看到所有的上一版本都可以看到的写入。 在缓存方面进行讨论，可能听起来好像这些问题只影响多处理器机器。 然而，可以在单个处理器上轻松看到重新排序的效果。 例如，编译器不会将acquire之后的代码移动到它之前，也不会把release之前的代码移动到它之后。当我们说acquire和release对缓存的操作时，我们忽略了很多的细节内容。 新的内存模型语义在内存操作（读取字段，写入字段，加锁，解锁）和其他线程操作（启动和连接）上创建了一些偏序规则，其中一些操作在其他操作之前发生。 当一个动作发生在另一个动作之前，第一个被保证在第二个之前被执行并且结果对其可见。 此排序的规则如下： 单线程中是完全按照代码顺序执行的 监视器的解锁操作发生在该监视器随后的加锁操作之前 对volatile字段的写入发生在该volatile字段每次后续读取之前 线程的start操作发生于该线程内的任何一行代码之前 一个线程内的所有操作都发生在join了这个线程的线程之前 这意味着一个线程在退出同步块之前的所有内存操作对于任何其它进入该同步块的线程都是可见的，因为所有的内存操作都发生在release之前，release发生在acquire之前。 另外一个含义是，下面的这个被许多人用作内存屏障的操作不起作用： synchronized ( new Object ()) {} 这实际上没有任何效果，你的编译器可以完全删除它，因为编译器知道没有其他线程将在同一个监视器上同步。如果一个线程想看到另外一个线程的结果，就必须设置一个happens before规则。 重要提示：两个线程必须在同一个监视器锁上进行同步，这样才能设置happens before规则。如果线程A在X上同步，线程B在Y上同步，这样是没有效果的。release和acquire必须匹配，否则会存在数据竞争的问题。","text_tokens":["如下","但是","该","则","理器","到","内存","处理","确保","很多","每次","刷新","排序","移动","volatile","第一","写入","编译","字段","这个","发生","以","访问","做","也","这","这样","一行","程序段","段","最","保护","期间","并且","容易","它","当","启动","锁上","另","实际上","理解","同步","第二个","join","不起作用","人","时","语义","程序","before","锁","，","释放","设置","作用","代码移动","重要","模型"," ","下面","y","意味","重新","另外","解锁","字","使得","}","提示","是","一些","用作","监视器","版本","给","两个","数据",")","(","加锁","方面","synchronization","好像","无效","第一个","例如","。","后续","b","不仅","如果","必须","可","连接","这些","多处","{","方式","含义","所","按照","其他","happens","任何","其中","结果","使","轻松","块","从","没有","具有","能够","否则","拿到","上","显示","起来","一","因此","机器","执行","可以","在","加载","问题","不会","单线","第二","许多","效果","同一","的","其","内","就","可能","顺序","start","会","规则","退出","了","动作","：","你","同一个","直到","竞争","之后","以便","和","-","单个","忽略","知道","获取","代码","匹配","缓存","中是","变量","x","几个","new","存在","a","都","处理器","后","读取","一旦","创建","进入","意味着","讨论","acquire","保证","之前","编译器","听","操作","或","二个","将","删除","此","偏序","进行","看到","线程","因为","监视","本地","其它","随后","我们","仅仅","对","实际","预测","多处理器","把","需要","只有","synchronized","屏障","所有","（","单线程","不仅仅","才能","完全","对于","）","然而","说","内容","一个","被","可见","于","影响","只","有","release","想","然后","互斥","细节","新","object"],"title":"Synchronization同步操作做了什么","title_tokens":["操作","synchronization","同步操作","做","同步","什么","了"]},{"location":"docs/digest/180927_3/#_5","text":"最好的例子是String类的一个实现。 字符串可以实现为具有三个字段的对象 - 字符数组，该数组中的偏移量和长度。 以这种方式实现String的理由，而不是仅使用字符数组，它允许多个String和StringBuffer对象共享相同的字符数组，并避免额外的对象分配和复制。 所以，例如，String.substring（）方法可以通过创建一个新的字符串来实现，该字符串与原始的String共享相同的字符数组，并且在长度和偏移量字段中只是不同。 对于字符串，这些字段都是final字段。 String s1 = \"/usr/tmp\" ; String s2 = s1 . substring ( 4 ); 字符串s2的偏移量为4，长度为4.但是，在旧内存模型下，另一个线程可以将偏移量看作默认值为0，然后看到正确的值为4， 它将显示为字符串“/usr”更改为“/tmp”。 旧内存模型允许这种行为，几个JVM禁止了这些行为，在新的内存模型下，这种行为是违法的。","text_tokens":["但是","该","不是","内存","分配","字段","tmp","以","偏移","并且","它","usr","共享","另","最好","substring","为","=","原始","，","0","所以","s2","string","相同","模型"," ","复制",".","下","正确","是","final",")","\"","(","只是","stringbuffer","允许","而","例如","来","。","这种","这些","违法","方式","值","偏移量","“","避免","使用","/","不同","更","方法","具有","通过","多个","显示","实现",";","可以","在","的","旧","行为","长度","s1","了","三个","和","-","默认值","对象","中","”","仅","几个","都","创建","jvm","数组","额外","将","看到","线程","理由","并","默认","（","与","类","对于","禁止","）","一个","字符串","字符","例子","然后","改为","看作","新","4"],"title":"不可见变量如何看起来修改了它的值","title_tokens":["它","值","变量","起来","的","如何","不","看起","了","修改","看起来","可见"]},{"location":"docs/digest/180927_3/#final","text":"对象的final字段的值在其构造函数中设置。假设对象被正确构造，一旦构造完成，在构造函数中分配的final字段的值将对所有其他线程都是可见的，不需要同步。 此外，final字段引用的任何其他对象或数组的值将与final字段保持同步更新。 对象被正确构造是什么意思？ 这仅仅意味着在构造过程中，不允许正在构造的对象的引用“逃脱”。 （参见安全构造技术的例子）换句话说，不要对正在构造的对象引用另外一个线程可能看到的对象; 不要将其分配给静态字段，不要将其注册为与任何其他对象的监听器，等等。 这些任务应该在构造函数完成之后完成，而不是在构造函数中完成。 class FinalFieldExample { final int x ; int y ; static FinalFieldExample f ; public FinalFieldExample () { x = 3 ; y = 4 ; } static void writer () { f = new FinalFieldExample (); } static void reader () { if ( f != null ) { int i = f . x ; int j = f . y ; } } } 上面的类是一个使用final字段的例子。 线程执行reader保证为f.x看到值3，因为它是final的。不能保证为y看到值4，因为它不是final的。 如果FinalFieldExample的构造函数如下所示： public FinalFieldExample () { // bad! x = 3 ; y = 4 ; // bad construction - allowing this to escape global . obj = this ; } 那么从 global.obj 读取this的线程不能保证为x看到3。 能看到正确构造的字段值的能力是很好的，但是如果字段本身是引用，那么你还希望你的代码可以看到它指向的对象（或数组）的最新值。 如果你的领域是一个final域，这也是保证的。 所以，你可以有一个final指向数组的指针，而不用担心其他线程看到数组的引用是正确的，但数组的内容不正确。Again, by “correct” here, we mean “up to date as of the end of the object’s constructor”, not “the latest value available”. 现在，说完所有这一切，如果在一个线程构造一个不可变对象（即只包含final字段的对象）之后，你想要确保所有其他线程都能看到正确的值，你通常还需要使用同步。 没有其他方法来确保，例如，第二个线程将会看到对不可变对象的引用。程序从final字段获得的保证应该非常小心，深入细心地了解如何在代码中管理并发性。 用JNI修改final字段的值，这样的行为没有具体定义。","text_tokens":["如下","但是","不是","具体","换句话说","那么","确保","定义","void","逃脱","细心","心地","函数","上面","还","分配","字段","指向","也","这样","这","this","段",",","修改","保持","j","它","construction","等等","同步","第二个","为","非常","？","f","=","escape","bad","程序","，","设置","所以","想要","注册","假设"," ","by","静态","y",".","意味","正确","另外","here","不可","字","更新","引用","}","即","是","final","给","深入","域",")","一切","(","obj","技术","allowing","class","好","监听器","允许","而","correct","例如","来","段值","。","说完","如果","过程","mean","这些","性","能","{","通常","值","获得","其他","int","“","任何","应该","但","了解","使用","/","static","从","没有","方法","构造","up","the","we","null",";","finalfieldexample","执行","if","构造函数","不能","可以","在","参见","小心","管理","第二","其","的","行为","可能","i","as","again","：","你","s","之后","public","-","完成","to","很","包含","对象","本身","latest","中","”","3","代码","value","现在","x","new","reader","!","都","所示","读取","一旦","将会","意味着","constructor","保证","数组","end","二个","或","监听","将","最新","并发","用","能力","看到","线程","担心","因为","指针","此外","’","意思","仅仅","对","细心地","需要","变","所有","（","换句","与","available","类","安全","希望","领域","）","不要","内容","任务","jni","一个","正在","writer","被","可见","例子","global","换句话","只","of","如何","有","什么","不","date","不用","not","4","object"],"title":"新的内存模型下final域的工作原理是怎样的？","title_tokens":["原理","的","是","模型","final","内存","工作","？","域","下","新","怎样"]},{"location":"docs/digest/180927_3/#volatile","text":"volatile字段是用于在线程之间通信状态的特殊字段。每个读取的volatile的线程都会看到最后写入volatile的值; 实际上，它们被程序员设计为不会因为缓存或者重排序看不到最新的值的字段。禁止编译器和运行时环境在寄存器中分配volatile变量。 他们还必须确保在写入之后，将它们从缓存中刷新到内存，以便它们可以立即变得对其他线程可见。 类似地，在读取volatile字段之前，缓存必须被设置为无效，使得内存（而不是本地处理器高速缓存）中的值是最新的值。对volatile变量的访问重新排序也有其他限制。 在旧的内存模型下，volatile变量之间是不可以重排序的，但是和普通变量之间是可以重排序的，这破坏了volatile对于线程间传递信号的有用性。 在新的内存模型下，volatile变量之间还是不可以重排序，但是和普通变量之间也不可以重排序了。写入volatile的值和释放synchronized锁的内存效果是一样的，读取volatile的值和synchronized加锁的内存效果是一样的。实际上，因为新的存储器模型对于其他字段和volatile字段的重排序进行了更加严格的约束，无论是不是volatile变量，线程A在写入volatile字段f时可见的任何东西对于线程B在读取f时都是可见的。 下面是使用volatile的一个例子： class VolatileExample { int x = 0 ; volatile boolean v = false ; public void writer () { x = 42 ; v = true ; } public void reader () { if ( v == true ) { //uses x - guaranteed to see 42. } } } 假设一个线程正在调用writer，另一个线程是调用reader。 对v的写入器会把x的值写入到内存，并且v从内存中获取该值。 因此，如果读者看到v的值为true，那么也可以保证看到之前发生的写入42。 在旧的记忆模型下不是这样。 如果v不是volatile的，那么编译器可以对写入器中的写入进行重新排序，读者对x的读取可能会看到0。 volatile的语义被大大加强，几乎到达了synchronized的水平。对于可见性来说，volatile操作几乎和synchronized一样。 重要提示：和synchronized一样，必须用同一个volatile才能保证可见性。 新的内存模型是否修复了“双重锁定”问题？ （臭名昭着的）双重检查锁定成语（也称为多线程单例模式）是一种技巧，旨在支持延迟初始化，同时避免同步的开销。在非常早期的JVM中，同步非常缓慢，开发人员急于删除它 - 也许太渴望了。双重锁定的模式如下所示： // double-checked-locking - don't do this! private static Something instance = null ; public Something getInstance () { if ( instance == null ) { synchronized ( this ) { if ( instance == null ) instance = new Something (); } } return instance ; } 这看起来很聪明 - 在公共代码路径上避免了同步。 它只有一个问题 - 它没有作用。为什么没有作用？最明显的原因是初始化实例和对实例字段的写入可以由编译器或缓存重新排序，这将具有返回看起来是部分构造的对象的效果。 结果将是我们读取一个未初始化的对象。 还有很多其他原因能说明为什么这是错误的。没有办法使用旧的Java内存模型进行修复。更多信息可以查看：Double-checked locking: Clever, but broken和The “Double Checked Locking is broken” declaration 许多人认为使用volatile关键字会消除在尝试使用双重检查锁定模式时出现的问题。 在1.5之前的JVM中，volatile不会确保它有效。 在新的内存模型下，使实例字段volatile将“修复”双重锁定的问题，因为在构造和读取之间存在happens before关系。 用另外一种方式更好： private static class LazySomethingHolder { public static Something something = new Something (); } public static Something getInstance () { return LazySomethingHolder . something ; } 由于静态字段的初始化保证，该代码保证是正确的; 如果在静态初始化程序中设置了一个字段，那么它将被保证被正确地显示给访问该类的任何线程。 对虚拟机从业者 你应该看 The JSR-133 Cookbook for Compiler Writers","text_tokens":["不是","该","到","到达","void","刷新","boolean","它们","还","分配","写入","编译","发生","访问","这是","这","查看","this","段","最后","由于","更加","初始","发人","有用","f","关键字","before","锁","重要"," ","假设","重新","字","}","don","立即","something","他们","guaranteed","成语","有效","1.5","133","尝试","cookbook","缓慢","方式","“","业者","认为","结果","变得","t","从","volatileexample","instance","上","昭着","null","因此","一样","可以","返回","会","double","了","关系","public","很","传递","获取","中","同时","new","a","所示","读取",":","或","原因","从业","加强","对","急于","只有","该类","（","读者","普通","聪明","程序员","运行","被","例子","uses","重","开销","未","但是","支持","理器","see","do","记忆","字段","也","类似","高速","最",",","模式","同步","时","语义","无论","locking","设置","0","该值","42",".","看起来","另外","实例","存储","给","(","class","is","b","寄存器","由","{","或者","寄存","int","臭名","应该","避免","使","更","static","是不是","具有","but","延迟","显示","if","还是","许多","的","旧","信号","不到","declaration","之后","和","以便","双重","缓存","reader","都","路径","保证","编译器","删除","进行","之间","看到","因为","本地","一种","多","间","实际","synchronized","渴望","）","关键","一个","正在","虚拟机","公共","什么","多线","新","如下","出现","处理","那么","很多","锁定","getinstance","并且","高速缓存","它","破坏","非常","？","人","checked","臭名昭着","程序","释放","，","静态","正确","writers",")","太","而","如果","每个","状态","性","值","clever","其他","happens","任何","v","/","明显","构造","在线","更好",";","为什么","称为","问题","在","同一","可能","几乎","用于","-","to","对象","变量","虚拟","处理器","存储器","看起","人员","地","之前","jvm","true","早期","设计","操作","最新","将","是否","错误","我们","消除","看","不","信息","单例","环境","内存","大大","确保","排序","volatile","开发","器会","这样","for","java","技巧","另","实际上","通信","为","=","作用","严格","调用","private","模型","限制","下面","下","来说","器中","使得","lazysomethingholder","提示","是","开发人员","部分","程","加锁","无效","broken","。","必须","水平","还有","说明","约束","能","'","东西","修复","使用","没有","也许","the","起来","初始化","办法","不会","特殊","效果","false","看不到","：","同一个","你","”","代码","检查","x","存在","!","jsr","compiler","用","return","从业者","线程","旨在","把","才能","对于","禁止","writer","可见","有","多线程"],"title":"volatile做了什么","title_tokens":["做","volatile","了","什么"]},{"location":"docs/digest/180927_3/#_6","text":"你为什么要关心？ 并发错误很难调试。他们经常不出现在测试中，需要等待，直到你的程序在高负载下运行，并且难以重现。 你最好提前花费额外的努力，以确保您的程序正确同步; 虽然这不容易，但比尝试调试严重同步的应用程序要容易得多。","text_tokens":["花费","额外","出现","并发",";","为什么","确保","重现","提前","比","他们","努力","在","应用","错误","多","的","很难","以","关心","这","需要","经常","。","尝试","测试","严重","得","并且","你","容易","直到","正确","运行","调试","最好","同步","？","高","确保您","中","难以","程序","但","虽然","，","要","什么"," ","负载","不","应用程序","下","等待"],"title":"为什么要关心内存模型？","title_tokens":["要","关心","模型","为什么","内存","什么","？"]},{"location":"docs/digest/181001_6/","text":"gist.github.com/tzmartin/fb1f4a8e95ef5fb79596bd4719671b5d.js ffmpeg -i \"http://host/folder/file.m3u8\" -bsf:a aac_adtstoasc -vcodec copy -c copy -crf 50 file.mp4","text_tokens":["bsf","file","js","folder","copy","tzmartin","ffmpeg","\"","50","i","gist","adtstoasc","vcodec","m3u8","-","host","crf","c","mp4","_","com","fb1f4a8e95ef5fb79596bd4719671b5d","http","a"," ","/","aac",".","github",":"],"title":"m3u8 转 mp4","title_tokens":[" ","转","m3u8","mp4"]},{"location":"docs/digest/181004_1/","text":"- > github.com/ruanyf/document-style-guide/blob/master/docs/structure.md ¶ 文档体系 ¶ 结构 ¶ 软件手册是一部完整的书，建议采用下面的结构。 简介 （Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明 快速上手 （Getting Started）：[可选] [文件] 如何最快速地使用产品 入门篇 （Basics）： [必备] [目录] 又称”使用篇“，提供初级的使用教程 环境准备 （Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件 安装 （Installation）：[可选] [文件] 软件的安装方法 设置 （Configuration）：[必备] [文件] 软件的设置 进阶篇 （Advanced)：[可选] [目录] 又称”开发篇“，提供中高级的开发教程 API （Reference）：[可选] [目录|文件] 软件 API 的逐一介绍 FAQ ：[可选] [文件] 常见问题解答 附录 （Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容 Glossary ：[可选] [文件] 名词解释 Recipes ：[可选] [文件] 最佳实践 Troubleshooting ：[可选] [文件] 故障处理 ChangeLog ：[可选] [文件] 版本说明 Feedback ：[可选] [文件] 反馈方式","text_tokens":["中高级","环境",">","目录","处理","basics","安装","开发","structure","又称","最","入门","初级","产品","master","prerequisite","故障","docs","configuration","[","属于","¶","结构","准备","，","md","设置","介绍","前置条件","glossary"," ","下面","手",".","是","feedback","篇","版本","简介",")","附录","快速","题解","完整","帮助","。","advanced","建议","解释","可","说明","started","最佳","方式","入门篇","document","com","但","“","条件","体系","使用","/","方法","github","教程","常见","上","getting","问题解答","faq","|","问题","前置","的","guide","ruanyf","：","]","和","-","style","api","名词解释","逐一","文件","本身","”","troubleshooting","提供","阅读","blob","中高","地","高级","实践","总体","进阶","reference","采用","反馈","对","、","文档","扼要","需要","手册","（","appendix","必备","名词","选","一部","）","installation","内容","recipes","changelog","进阶篇","软件","解答","如何","有","书","满足","introduction","不"],"title":"中文技术文档的写作规范","title_tokens":["技术","中文","的","文档","规范","写作"]},{"location":"docs/digest/181004_1/#-githubcomruanyfdocument-style-guideblobmasterdocsstructuremd","text":"","text_tokens":[],"title":"- &gt; github.com/ruanyf/document-style-guide/blob/master/docs/structure.md","title_tokens":["gt","md","structure","&",";","-","style","guide","docs"," ","/","document","blob",".","github","master","ruanyf","com"]},{"location":"docs/digest/181004_1/#_1","text":"","text_tokens":[],"title":"文档体系","title_tokens":["体系","文档"]},{"location":"docs/digest/181004_1/#_2","text":"软件手册是一部完整的书，建议采用下面的结构。 简介 （Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明 快速上手 （Getting Started）：[可选] [文件] 如何最快速地使用产品 入门篇 （Basics）： [必备] [目录] 又称”使用篇“，提供初级的使用教程 环境准备 （Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件 安装 （Installation）：[可选] [文件] 软件的安装方法 设置 （Configuration）：[必备] [文件] 软件的设置 进阶篇 （Advanced)：[可选] [目录] 又称”开发篇“，提供中高级的开发教程 API （Reference）：[可选] [目录|文件] 软件 API 的逐一介绍 FAQ ：[可选] [文件] 常见问题解答 附录 （Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容 Glossary ：[可选] [文件] 名词解释 Recipes ：[可选] [文件] 最佳实践 Troubleshooting ：[可选] [文件] 故障处理 ChangeLog ：[可选] [文件] 版本说明 Feedback ：[可选] [文件] 反馈方式","text_tokens":["中高级","环境","目录","处理","basics","安装","开发","又称","最","入门","初级","产品","prerequisite","故障","configuration","[","属于","结构","准备","，","设置","介绍","前置条件","glossary"," ","下面","手","是","feedback","篇","版本","简介",")","附录","快速","题解","完整","帮助","。","advanced","建议","解释","可","说明","started","最佳","方式","入门篇","但","“","条件","使用","方法","教程","常见","上","getting","问题解答","faq","|","问题","前置","的","：","]","和","名词解释","api","逐一","文件","本身","”","troubleshooting","提供","阅读","中高","地","高级","实践","总体","进阶","reference","采用","反馈","对","、","文档","扼要","需要","手册","（","appendix","必备","名词","选","一部","）","installation","内容","recipes","changelog","进阶篇","软件","解答","如何","有","书","满足","introduction","不"],"title":"结构","title_tokens":["结构"]},{"location":"docs/digest/181016_1/","text":"<!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > flowchart.js · Playground </ title > < style type = \"text/css\" > . end-element { background-color : #FFCCFF ; } </ style > < script src = \"http://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.0/raphael-min.js\" ></ script > < script src = \"http://cdnjs.cloudflare.com/ajax/libs/jquery/1.11.0/jquery.min.js\" ></ script > < script src = \"http://flowchart.js.org/flowchart-latest.js\" ></ script > <!-- <script src=\"../release/flowchart.min.js\"></script> --> < script > window . onload = function () { var btn = document . getElementById ( \"run\" ), cd = document . getElementById ( \"code\" ), chart ; ( btn . onclick = function () { var code = cd . value ; if ( chart ) { chart . clean (); } chart = flowchart . parse ( code ); chart . drawSVG ( 'canvas' , { // 'x': 30, // 'y': 50, 'line-width' : 3 , 'maxWidth' : 3 , //ensures the flowcharts fits within a certian width 'line-length' : 50 , 'text-margin' : 10 , 'font-size' : 14 , 'font' : 'normal' , 'font-family' : 'Helvetica' , 'font-weight' : 'normal' , 'font-color' : 'black' , 'line-color' : 'black' , 'element-color' : 'black' , 'fill' : 'white' , 'yes-text' : 'yes' , 'no-text' : 'no' , 'arrow-end' : 'block' , 'scale' : 1 , 'symbols' : { 'start' : { 'font-color' : 'red' , 'element-color' : 'green' , 'fill' : 'yellow' }, 'end' : { 'class' : 'end-element' } }, 'flowstate' : { 'past' : { 'fill' : '#CCCCCC' , 'font-size' : 12 }, 'current' : { 'fill' : 'yellow' , 'font-color' : 'red' , 'font-weight' : 'bold' }, 'future' : { 'fill' : '#FFFF99' }, 'request' : { 'fill' : 'blue' }, 'invalid' : { 'fill' : '#444444' }, 'approved' : { 'fill' : '#58C4A3' , 'font-size' : 12 , 'yes-text' : 'APPROVED' , 'no-text' : 'n/a' }, 'rejected' : { 'fill' : '#C45879' , 'font-size' : 12 , 'yes-text' : 'n/a' , 'no-text' : 'REJECTED' } } }); $ ( '[id^=sub1]' ). click ( function (){ alert ( 'info here' ); }); })(); }; </ script > </ head > < body > < div >< textarea id = \"code\" style = \"width: 100%;\" rows = \"11\" > st=>start: Start|past:>http://www.google.com[blank] e=>end: End:>http://www.google.com op1=>operation: My Operation|past op2=>operation: Stuff|current sub1=>subroutine: My Subroutine|invalid cond=>condition: Yes or No?|approved:>http://www.google.com c2=>condition: Good idea|rejected io=>inputoutput: catch something...|request st->op1(right)->cond cond(yes, right)->c2 cond(no)->sub1(left)->op1 c2(yes)->io->e c2(no)->op2->e st@>op1({\"stroke\":\"Red\"})@>cond({\"stroke\":\"Red\",\"stroke-width\":6,\"arrow-end\":\"classic-wide-long\"})@>c2({\"stroke\":\"Red\"})@>op2({\"stroke\":\"Red\"})@>e({\"stroke\":\"Red\"}) </ textarea ></ div > < div >< button id = \"run\" type = \"button\" > Run </ button ></ div > < div id = \"canvas\" ></ div > </ body > </ html >","text_tokens":["info","?","js","drawsvg",">","fits","right","$","flowstate","..","arrow","id","flowchart","run","btn","inputoutput","body","cond",",","scale","·","utf","stuff","io","org","ffff99","www","condition","text","flowcharts","--","block","[","click","op2","#","=","bold","0","alert","line"," ","y",".","1","6","here","white","current","}","blue","blank","something","size",")","\"","chart","canvas","(","getelementbyid","google","function","class","type","maxwidth","family","op1","58c4a3","^","10","ffccff","cdnjs","444444","title","8","c45879","length","textarea","stroke","{","code","font","14","st","idea","document","cccccc","my","playground","'","rejected","html","cloudflare","com","c2","within","approved","/","lang","weight","the","button",";","n","charset","background","cd","if","black","css","future","|","width","start","red","script","catch","]","-","style","clean","jquery","no","sub1","symbols","green","<","latest","classic","1.11","onload","value","3","2.2","meta","rows","x","!","a","past","window",":","src","end","e","yellow","wide","element","certian","left","...","libs","normal","request","ajax","color","50","doctype","min","raphael","helvetica","operation","invalid","@","div","100%","onclick","11","30","ensures","head","yes","good","long","fill","or","parse","subroutine","http","release","en","margin","var","12"],"title":"一段用 html 创建流程图的源码","title_tokens":["的","流程图","用"," ","创建","html","源码","一段","流程"]},{"location":"docs/digest/190218_1/","text":"note tag: markdown digest github.com/DavidAnson/markdownlint/blob/master/doc/Rules.md MD001 - Heading levels should only increment by one level at a time | 标题级别一次只能增加一级 ¶ Tags: headings, headers Aliases: heading-increment, header-increment This rule is triggered when you skip heading levels in a markdown document, for example: # Heading 1 ### Heading 3 We skipped out a 2nd level heading in this document When using multiple heading levels, nested headings should increase by only one level at a time: # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ## Another Heading 2 ### Another Heading 3 MD002 - First heading should be a top level heading | 第一个标题应该是顶级标题 ¶ Tags: headings, headers Aliases: first-heading-h1, first-header-h1 Parameters: level (number; default 1) This rule is triggered when the first heading in the document isn't a h1 heading: ## This isn't a H1 heading ### Another heading The first heading in the document should be a h1 heading: # Start with a H1 heading ## Then use a H2 for subsections Note: The level parameter can be used to change the top level (ex: to h2) in cases where an h1 is added externally. MD003 - Heading style | 标题样式 ¶ Tags: headings, headers Aliases: heading-style, header-style Parameters: style (\"consistent\", \"atx\", \"atx_closed\", \"setext\", \"setext_with_atx\", \"setext_with_atx_closed\"; default \"consistent\") This rule is triggered when different heading styles (atx, setext, and 'closed' atx) are used in the same document: # ATX style H1 ## Closed ATX style H2 ## Setext style H1 =============== Be consistent with the style of heading used in a document: # ATX style H1 ## ATX style H2 The setext_with_atx and setext_with_atx_closed doc styles allow atx-style headings of level 3 or more in documents with setext style headings: Setext style H1 =============== Setext style H2 --------------- ### ATX style H3 Note: the configured heading style can be a specific style to use (atx, atx_closed, setext, setext_with_atx, setext_with_atx_closed), or simply require that the usage be consistent within the document. MD004 - Unordered list style | 无序列表样式 ¶ Tags: bullet, ul Aliases: ul-style Parameters: style (\"consistent\", \"asterisk\", \"plus\", \"dash\", \"sublist\"; default \"consistent\") This rule is triggered when the symbols used in the document for unordered list items do not match the configured unordered list style: * Item 1 + Item 2 - Item 3 To fix this issue, use the configured style for list items throughout the document: * Item 1 * Item 2 * Item 3 The configured list style can be a specific symbol to use (asterisk, plus, dash), can require that usage be consistent within the document, or can require that each sublist have a consistent symbol that is different from its parent list. For example, the following is valid for the sublist style because the outer-most indent uses asterisk, the middle indent uses plus, and the inner-most indent uses dash: * Item 1 + Item 2 - Item 3 + Item 4 * Item 4 + Item 5 MD005 - Inconsistent indentation for list items at the same level | 同一级别的列表项的缩进不一致 ¶ Tags: bullet, ul, indentation Aliases: list-indent This rule is triggered when list items are parsed as being at the same level, but don't have the same indentation: * Item 1 * Nested Item 1 * Nested Item 2 * A misaligned item Usually this rule will be triggered because of a typo. Correct the indentation for the list to fix it: * Item 1 * Nested Item 1 * Nested Item 2 * Nested Item 3 Sequentially-ordered list markers are usually left-aligned such that all items have the same starting column: ... 8. Item 9. Item 10. Item 11. Item ... This rule also supports right-alignment of list markers such that all items have the same ending column: ... 8. Item 9. Item 10. Item 11. Item ... MD006 - Consider starting bulleted lists at the beginning of the line | 考虑在行的开头开始项目符号列表 ¶ Tags: bullet, ul, indentation Aliases: ul-start-left This rule is triggered when top level lists don't start at the beginning of a line: Some text * List item * List item To fix, ensure that top level list items are not indented: Some test * List item * List item Rationale: Starting lists at the beginning of the line means that nested list items can all be indented by the same amount when an editor's indent function or the tab key is used to indent. Starting a list 1 space in means that the indent of the first nested list is less than the indent of the second level (3 characters if you use 4 space tabs, or 1 character if you use 2 space tabs). Note: This rule is triggered for the following scenario because the unordered sublist is not recognized as such by the parser. Not being nested 3 characters as required by the outer ordered list, it creates a top-level unordered list instead. 1. List item - List item - List item 1. List item MD007 - Unordered list indentation | 无序列表缩进 ¶ Tags: bullet, ul, indentation Aliases: ul-indent Parameters: indent (number; default 2) This rule is triggered when list items are not indented by the configured number of spaces (default: 2). Example: * List item * Nested list item indented by 3 spaces Corrected Example: * List item * Nested list item indented by 2 spaces Rationale (2 space indent): indenting by 2 spaces allows the content of a nested list to be in line with the start of the content of the parent list when a single space is used after the list marker. Rationale (4 space indent): Same indent as code blocks, simpler for editors to implement. See www.cirosantilli.com/markdown-style-guide/#indentation-of-content-inside-lists for more information. In addition, this is a compatibility issue with multi-markdown parsers, which require a 4 space indents. See support.markedapp.com/discussions/problems/21-sub-lists-not-indenting for a description of the problem. Note: This rule applies to a sublist only if its parent lists are all also unordered (otherwise, extra indentation of ordered lists interferes with the rule). MD009 - Trailing spaces | 尾随空格 ¶ Tags: whitespace Aliases: no-trailing-spaces Parameters: br_spaces, list_item_empty_lines (number; default 2, boolean; default false) This rule is triggered on any lines that end with unexpected whitespace. To fix this, remove the trailing space from the end of the line. The br_spaces parameter allows an exception to this rule for a specific number of trailing spaces, typically used to insert an explicit line break. The default value allows 2 spaces to indicate a hard break (\\ element). Note: You must set br_spaces to a value >= 2 for this parameter to take effect. Setting br_spaces to 1 behaves the same as 0, disallowing any trailing spaces. Using spaces to indent blank lines inside a list item is usually not necessary, but some parsers require it. Set the list_item_empty_lines parameter to true to allow this: - list item text [2 spaces] list item text MD010 - Hard tabs | 严格标签 ¶ Tags: whitespace, hard_tab Aliases: no-hard-tabs Parameters: code_blocks (boolean; default true) This rule is triggered by any lines that contain hard tab characters instead of using spaces for indentation. To fix this, replace any hard tab characters with spaces instead. Example: Some text * hard tab character used to indent the list item Corrected example: Some text * Spaces used to indent the list item instead You have the option to exclude this rule for code blocks. To do so, set the code_blocks parameter to false . Code blocks are included by default since handling of tabs by tools is often inconsistent (ex: using 4 vs. 8 spaces). MD011 - Reversed link syntax | 反向链接语法 ¶ Tags: links Aliases: no-reversed-links This rule is triggered when text that appears to be a link is encountered, but where the syntax appears to have been reversed (the [] and () are reversed): (Incorrect link syntax)[https://www.example.com/] To fix this, swap the [] and () around: [Correct link syntax](https://www.example.com/) Note: Markdown Extra -style footnotes do not trigger this rule: For (example)[^1] MD012 - Multiple consecutive blank lines | 多个连续的空白行 ¶ Tags: whitespace, blank_lines Aliases: no-multiple-blanks Parameters: maximum (number; default 1) This rule is triggered when there are multiple consecutive blank lines in the document: Some text here Some more text here To fix this, delete the offending lines: Some text here Some more text here Note: this rule will not be triggered if there are multiple consecutive blank lines inside code blocks. Note: The maximum parameter can be used to configure the maximum number of consecutive blank lines. MD013 - Line length | 行长度 ¶ Tags: line_length Aliases: line-length Parameters: line_length, code_blocks, tables, headings, headers (number; default 80, boolean; default true) If headings is not provided, headers (deprecated) will be used. This rule is triggered when there are lines that are longer than the configured line length (default: 80 characters). To fix this, split the line up into multiple lines. This rule has an exception where there is no whitespace beyond the configured line length. This allows you to still include items such as long URLs without being forced to break them in the middle. You have the option to exclude this rule for code blocks, tables, or headings. To do so, set the code_blocks , tables , or headings parameter(s) to false. Code blocks are included in this rule by default since it is often a requirement for document readability, and tentatively compatible with code rules. Still, some languages do not lend themselves to short lines. MD014 - Dollar signs used before commands without showing output | 在命令之前使用的美元符号，不显示输出 ¶ Tags: code Aliases: commands-show-output This rule is triggered when there are code blocks showing shell commands to be typed, and the shell commands are preceded by dollar signs ($): $ ls $ cat foo $ less bar The dollar signs are unnecessary in the above situation, and should not be included: ls cat foo less bar However, an exception is made when there is a need to distinguish between typed commands and command output, as in the following example: $ ls foo bar $ cat foo Hello world $ cat bar baz Rationale: it is easier to copy and paste and less noisy if the dollar signs are omitted when they are not needed. See www.cirosantilli.com/markdown-style-guide/#dollar-signs-in-shell-code for more information. MD018 - No space after hash on atx style heading | 在atx样式标题上散列后没有空格 ¶ Tags: headings, headers, atx, spaces Aliases: no-missing-space-atx This rule is triggered when spaces are missing after the hash characters in an atx style heading: #Heading 1 ##Heading 2 To fix this, separate the heading text from the hash character by a single space: # Heading 1 ## Heading 2 MD019 - Multiple spaces after hash on atx style heading | 在atx样式标题上散列后的多个空格 ¶ Tags: headings, headers, atx, spaces Aliases: no-multiple-space-atx This rule is triggered when more than one space is used to separate the heading text from the hash characters in an atx style heading: # Heading 1 ## Heading 2 To fix this, separate the heading text from the hash character by a single space: # Heading 1 ## Heading 2 MD020 - No space inside hashes on closed atx style heading | 在关闭的atx样式标题上没有内部空间的空间 ¶ Tags: headings, headers, atx_closed, spaces Aliases: no-missing-space-closed-atx This rule is triggered when spaces are missing inside the hash characters in a closed atx style heading: #Heading 1# ##Heading 2## To fix this, separate the heading text from the hash character by a single space: # Heading 1 # ## Heading 2 ## Note: this rule will fire if either side of the heading is missing spaces. MD021 - Multiple spaces inside hashes on closed atx style heading | 封闭的atx样式标题内的哈希内部的多个空格 ¶ Tags: headings, headers, atx_closed, spaces Aliases: no-multiple-space-closed-atx This rule is triggered when more than one space is used to separate the heading text from the hash characters in a closed atx style heading: # Heading 1 # ## Heading 2 ## To fix this, separate the heading text from the hash character by a single space: # Heading 1 # ## Heading 2 ## Note: this rule will fire if either side of the heading contains multiple spaces. MD022 - Headings should be surrounded by blank lines | 标题应该用空白行包围 ¶ Tags: headings, headers, blank_lines Aliases: blanks-around-headings, blanks-around-headers This rule is triggered when headings (any style) are either not preceded or not followed by a blank line: # Heading 1 Some text Some more text ## Heading 2 To fix this, ensure that all headings have a blank line both before and after (except where the heading is at the beginning or end of the document): # Heading 1 Some text Some more text ## Heading 2 Rationale: Aside from aesthetic reasons, some parsers, including kramdown, will not parse headings that don't have a blank line before, and will parse them as regular text. MD023 - Headings must start at the beginning of the line | 标题必须从行的开头开始 ¶ Tags: headings, headers, spaces Aliases: heading-start-left, header-start-left This rule is triggered when a heading is indented by one or more spaces: Some text # Indented heading To fix this, ensure that all headings start at the beginning of the line: Some text # Heading Rationale: Headings that don't start at the beginning of the line will not be parsed as headings, and will instead appear as regular text. MD024 - Multiple headings with the same content | 具有相同内容的多个标题 ¶ Tags: headings, headers Aliases: no-duplicate-heading, no-duplicate-header Parameters: siblings_only, allow_different_nesting (boolean; default false ) This rule is triggered if there are multiple headings in the document that have the same text: # Some text ## Some text To fix this, ensure that the content of each heading is different: # Some text ## Some more text Rationale: Some markdown parses generate anchors for headings based on the heading name, and having headings with the same content can cause problems with this. If the parameter siblings_only (alternatively allow_different_nesting ) is set to true , heading duplication is allowed for non-sibling headings (common in change logs): # Change log ## 1.0.0 ### Features ## 2.0.0 ### Features MD025 - Multiple top level headings in the same document | 同一文档中的多个顶级标题 ¶ Tags: headings, headers Aliases: single-h1 Parameters: level (number; default 1) This rule is triggered when a top level heading is in use (the first line of the file is a h1 heading), and more than one h1 heading is in use in the document: # Top level heading # Another top level heading To fix, structure your document so that there is a single h1 heading that is the title for the document, and all later headings are h2 or lower level headings: # Title ## Heading ## Another heading Rationale: A top level heading is a h1 on the first line of the file, and serves as the title for the document. If this convention is in use, then there can not be more than one title for the document, and the entire document should be contained within this heading. Note: The level parameter can be used to change the top level (ex: to h2) in cases where an h1 is added externally. MD026 - Trailing punctuation in heading | 标题中的尾随标点符号 ¶ Tags: headings, headers Aliases: no-trailing-punctuation Parameters: punctuation (string; default \".,;:!?\") This rule is triggered on any heading that has a punctuation character as the last character in the line: # This is a heading. To fix this, remove any trailing punctuation: # This is a heading Note: The punctuation parameter can be used to specify what characters class as punctuation at the end of the heading. For example, you can set it to \".,;:!\" to allow headings with question marks in them, such as might be used in an FAQ. MD027 - Multiple spaces after blockquote symbol | blockquote符号后的多个空格 ¶ Tags: blockquote, whitespace, indentation Aliases: no-multiple-space-blockquote This rule is triggered when blockquotes have more than one space after the blockquote ( > ) symbol: > This is a block quote with bad indentation > there should only be one. To fix, remove any extraneous space: > This is a blockquote with correct > indentation. MD028 - Blank line inside blockquote | blockquote中的空行 ¶ Tags: blockquote, whitespace Aliases: no-blanks-blockquote This rule is triggered when two blockquote blocks are separated by nothing except for a blank line: > This is a blockquote > which is immediately followed by > this blockquote. Unfortunately > In some parsers, these are treated as the same blockquote. To fix this, ensure that any blockquotes that are right next to each other have some text in between: > This is a blockquote. And Jimmy also said: > This too is a blockquote. Alternatively, if they are supposed to be the same quote, then add the blockquote symbol at the beginning of the blank line: > This is a blockquote. > > This is the same blockquote. Rationale: Some markdown parsers will treat two blockquotes separated by one or more blank lines as the same blockquote, while others will treat them as separate blockquotes.","text_tokens":["will","them","multi","md003","into","ensure","boolean","be","unnecessary","markdownlint","all","hashes","####","non","this","treat","typically","增加","md025","www","考虑","triggered","lines","others","一致","interferes","punctuation","before","remove","开头","typo","compatibility","include","allow","needed","line","when"," ","change","1","log","isn","description","quote","blanks","don","supposed","包围","2.0","copy","shell","column","instead","function","levels","time","10","ls","serves","8","surrounded","empty","code","heading","commands","lists","contain","spaces","externally","configure","appear","t","up","上","exclude","items","trigger","only","have","footnotes","delete","fix","from","convention","反向","style","handling","should","nothing","both","symbols","closed","including","中","md010","simply","starting","a","required","sequentially","often","后","valid","md019","allowed",":","级别","editor","skip","subsections","whitespace","documents","plus","contained","headings","###","indicate","...","corrected","内部空间","duplication","尾随","misaligned","at","require","*","or","uses","command","separate","requirement","match","hash","marker","?","tentatively","see","these","right","$","skipped","md002","effect","do","第一","cat","increase","same","being","themselves","disallowing","空白","after","indent",",","标点","master","项","editors","still","parsers","common","other","next","alternatively","#","atx","空间","reversed","inconsistent","md","0","specific","appears","omitted","by","any","aliases","separated",".","md006","scenario","implement","compatible","one","setext","(","unexpected","default","siblings","sublist","class","world","is","too","indenting","第一个","^","add","rule","generate","single","following","title","typed","rules","\\","md027","beginning","otherwise","behaves","problem","level","recognized","headers","_","列后","应该","they","tags","added","paste","md005","具有","but","github","creates","显示","markedapp","addition","if","faq","another","can","的","内","guide","链接","exception","increment","throughout","deprecated","cause","md022","multiple","]","ending","dollar","tabs","you","davidanson","输出","blob","out","outer","that","element","supports","parent","applies","nested","parses","inside","https","between","extraneous","urls","80","9","sibling","must","一个","offending","except","h2","side","parameters","parse","封闭","of","parsed","lend","4","---------------","duplicate",">","your","jimmy","issue","structure","link","asterisk","语法","从行","text","[","character","without","block","note","item","baz","insert","，","has","configured","entire","list","相同","its","内部","here","21","used",")","\"","each","indents","short","either","usage","incorrect","kramdown","缩进","foo","fire","correct","md007","bullet","where","output","aligned","necessary","around","easier","made","length","styles","simpler","aesthetic","two","while","md014","document","links","such","com","need","name","replace","vs","within","consider","then","/","indented","多个","which","标题",";","support","because","less","|","在","use","showing","同一","符号","as","syntax","anchors","hello","been","tables","longer","s","swap","br","-","只能","to","no","aside","might","situation","and","what","most","consecutive","bar","example","+","extra","之前","true","end","forced","also","cases","middle","number","file","nesting","left","reasons","markdown","later","discussions","alignment","5","having","md012","文档","开始","some","md021","unfortunately","tools","连续","内容","first","样式","ul","md020","long","trailing","noisy","information","一次","2","不","md028","关闭","than","readability","sub","show","explicit","rationale","beyond","digest","take","split","md026","for","preceded","top","¶","with","=","specify","bad","项目","严格","2nd","string","tab","ordered","行","option","immediately","different","无序","space","是","lower","an","blank","in","空白行","consistent","more","doc","second","break","based","followed","usually","features","cirosantilli","命令","treated","included","test","必须","hard","inner","are","blockquote","marks","means","'","空格","since","ex","characters","md011","signs","dash","distinguish","unordered","使用","没有","美元","md018","the","we","said","1.0","symbol","it","question","amount","h1","start","长度","blockquotes","logs","标签","false","languages","on","标点符号","indentation","allows","set","contains","setting","3","value","so","md024","encountered","!","key","provided","maximum","missing","h3","md009","md013","parameter","顶级","列表","用","bulleted","##","md001","哈希","md023","markers","content","there","above","using","11","problems","header","tag","上散","空行","md004","last","not","however","一级","regular","blocks","parser"],"title":"190218 1","title_tokens":["1","190218"," "]},{"location":"docs/digest/190218_1/#md001-heading-levels-should-only-increment-by-one-level-at-a-time","text":"Tags: headings, headers Aliases: heading-increment, header-increment This rule is triggered when you skip heading levels in a markdown document, for example: # Heading 1 ### Heading 3 We skipped out a 2nd level heading in this document When using multiple heading levels, nested headings should increase by only one level at a time: # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ## Another Heading 2 ### Another Heading 3","text_tokens":["we","skip","in","headings","4","###","skipped","##","markdown","nested","one","another","increase","levels","####","for","is","only","this","time","increment",",","rule","multiple","-","triggered","using","should","document","heading","level","at","headers","#","3","header","you","tags","a","2nd","when","example"," ","by","aliases","out","2","1",":"],"title":"MD001 - Heading levels should only increment by one level at a time | 标题级别一次只能增加一级","title_tokens":["级别","标题","md001","|","one","levels","only","time","increment","增加","-","只能","should","at","heading","level","a"," ","一次","by","一级"]},{"location":"docs/digest/190218_1/#md002-first-heading-should-be-a-top-level-heading","text":"Tags: headings, headers Aliases: first-heading-h1, first-header-h1 Parameters: level (number; default 1) This rule is triggered when the first heading in the document isn't a h1 heading: ## This isn't a H1 heading ### Another heading The first heading in the document should be a h1 heading: # Start with a H1 heading ## Then use a H2 for subsections Note: The level parameter can be used to change the top level (ex: to h2) in cases where an h1 is added externally.","text_tokens":["the","parameter","subsections",";","used","number","cases","an","in","headings","##","###","be",")","another","use","can","(","default","for","h1","is","start","this",",","rule","where","-","to","first","triggered","top","should","document","heading","level","h2","'","headers","#","with","note","header","parameters","ex","tags","added","a","when","externally"," ","then","t","aliases","change","1",".","isn",":"],"title":"MD002 - First heading should be a top level heading | 第一个标题应该是顶级标题","title_tokens":["应该","是","标题","顶级","-","a","first"," ","一个","top","should","第一个","heading","level","|","md002","be","第一"]},{"location":"docs/digest/190218_1/#md003-heading-style","text":"Tags: headings, headers Aliases: heading-style, header-style Parameters: style (\"consistent\", \"atx\", \"atx_closed\", \"setext\", \"setext_with_atx\", \"setext_with_atx_closed\"; default \"consistent\") This rule is triggered when different heading styles (atx, setext, and 'closed' atx) are used in the same document: # ATX style H1 ## Closed ATX style H2 ## Setext style H1 =============== Be consistent with the style of heading used in a document: # ATX style H1 ## ATX style H2 The setext_with_atx and setext_with_atx_closed doc styles allow atx-style headings of level 3 or more in documents with setext style headings: Setext style H1 =============== Setext style H2 --------------- ### ATX style H3 Note: the configured heading style can be a specific style to use (atx, atx_closed, setext, setext_with_atx, setext_with_atx_closed), or simply require that the usage be consistent within the document.","text_tokens":["the","used",";","documents","in","headings","consistent","##","more","###","doc","be",")","\"","can","setext","(","use","default","usage","same","is","h1","this",",","rule","require","styles","-","style","to","triggered","are","and","heading","document","h2","level","closed","headers","with","'","_","atx","parameters","header","#","=","3","or","tags","note","of","allow","configured","a","specific","simply","when","within"," ","aliases","different","h3",".","that",":","---------------"],"title":"MD003 - Heading style | 标题样式","title_tokens":["标题","md003","-","style"," ","样式","heading","|"]},{"location":"docs/digest/190218_1/#md004-unordered-list-style","text":"Tags: bullet, ul Aliases: ul-style Parameters: style (\"consistent\", \"asterisk\", \"plus\", \"dash\", \"sublist\"; default \"consistent\") This rule is triggered when the symbols used in the document for unordered list items do not match the configured unordered list style: * Item 1 + Item 2 - Item 3 To fix this issue, use the configured style for list items throughout the document: * Item 1 * Item 2 * Item 3 The configured list style can be a specific symbol to use (asterisk, plus, dash), can require that usage be consistent within the document, or can require that each sublist have a consistent symbol that is different from its parent list. For example, the following is valid for the sublist style because the outer-most indent uses asterisk, the middle indent uses plus, and the inner-most indent uses dash: * Item 1 + Item 2 - Item 3 + Item 4 * Item 4 + Item 5","text_tokens":["be","do","issue","for","this","indent",",","asterisk","triggered","item","configured","specific","list","when"," ","aliases","its","1","different",".","used","in","consistent",")","\"","each","(","default","usage","sublist","is","bullet","rule","following","inner","document","dash","tags","unordered","within","the",";","because","symbol","use","can","items","have","throughout","fix","from","-","style","to","and","symbols","3","most","a","example","valid","outer","+","that",":","middle","plus","parent","5","ul","require","*","or","parameters","uses","match","2","not","4"],"title":"MD004 - Unordered list style | 无序列表样式","title_tokens":["列表","-","md004","list","unordered","style"," ","样式","|","无序"]},{"location":"docs/digest/190218_1/#md005-inconsistent-indentation-for-list-items-at-the-same-level","text":"Tags: bullet, ul, indentation Aliases: list-indent This rule is triggered when list items are parsed as being at the same level, but don't have the same indentation: * Item 1 * Nested Item 1 * Nested Item 2 * A misaligned item Usually this rule will be triggered because of a typo. Correct the indentation for the list to fix it: * Item 1 * Nested Item 1 * Nested Item 2 * Nested Item 3 Sequentially-ordered list markers are usually left-aligned such that all items have the same starting column: ... 8. Item 9. Item 10. Item 11. Item ... This rule also supports right-alignment of list markers such that all items have the same ending column: ... 8. Item 9. Item 10. Item 11. Item ...","text_tokens":["will","the","don","also","because","it","supports","right","left","...","nested","be","column","items","alignment","all","markers","being","same","for","is","have","usually","correct","this","indent","as","10",",","rule","bullet","9","fix","aligned","8","indentation","-","to","triggered","are","ul","at","misaligned","level","11","ending","'","such","*","item","3","typo","tags","starting","of","a","list","when","sequentially"," ","parsed","t","ordered","aliases","2","1",".","but","that",":"],"title":"MD005 - Inconsistent indentation for list items at the same level | 同一级别的列表项的缩进不一致","title_tokens":["the","级别","列表","|","items","同一","的","缩进","same","for","项","-","indentation","at","一致","level","inconsistent","list"," ","md005","不"]},{"location":"docs/digest/190218_1/#md006-consider-starting-bulleted-lists-at-the-beginning-of-the-line","text":"Tags: bullet, ul, indentation Aliases: ul-start-left This rule is triggered when top level lists don't start at the beginning of a line: Some text * List item * List item To fix, ensure that top level list items are not indented: Some test * List item * List item Rationale: Starting lists at the beginning of the line means that nested list items can all be indented by the same amount when an editor's indent function or the tab key is used to indent. Starting a list 1 space in means that the indent of the first nested list is less than the indent of the second level (3 characters if you use 4 space tabs, or 1 character if you use 2 space tabs). Note: This rule is triggered for the following scenario because the unordered sublist is not recognized as such by the parser. Not being nested 3 characters as required by the outer ordered list, it creates a top-level unordered list instead. 1. List item - List item - List item 1. List item","text_tokens":["ensure","rationale","be","all","same","being","for","this","indent",",","text","triggered","top","character","note","item","line","list","when"," ","tab","by","ordered","aliases",".","1","space","scenario","don","used","an","in","second",")","instead","(","function","sublist","is","bullet","rule","test","following","beginning","are","level","means","recognized","lists","'","such","characters","tags","unordered","t","indented","the","creates","because","if","it","less","use","can","items","amount","start","as","fix","s","indentation","-","to","3","tabs","you","starting","a","key","required","outer","that",":","editor","left","nested","some","first","ul","at","*","or","of","2","not","parser","4","than"],"title":"MD006 - Consider starting bulleted lists at the beginning of the line | 考虑在行的开头开始项目符号列表","title_tokens":["the","列表","bulleted","|","在","的","符号","开始","-","beginning","考虑","at","lists","开头","starting","of","项目","line","consider"," ","行","md006"]},{"location":"docs/digest/190218_1/#md007-unordered-list-indentation","text":"Tags: bullet, ul, indentation Aliases: ul-indent Parameters: indent (number; default 2) This rule is triggered when list items are not indented by the configured number of spaces (default: 2). Example: * List item * Nested list item indented by 3 spaces Corrected Example: * List item * Nested list item indented by 2 spaces Rationale (2 space indent): indenting by 2 spaces allows the content of a nested list to be in line with the start of the content of the parent list when a single space is used after the list marker. Rationale (4 space indent): Same indent as code blocks, simpler for editors to implement. See www.cirosantilli.com/markdown-style-guide/#indentation-of-content-inside-lists for more information. In addition, this is a compatibility issue with multi-markdown parsers, which require a 4 space indents. See support.markedapp.com/discussions/problems/21-sub-lists-not-indenting for a description of the problem. Note: This rule applies to a sublist only if its parent lists are all also unordered (otherwise, extra indentation of ordered lists interferes with the rule).","text_tokens":["marker","multi","sub","see","rationale","be","issue","all","same","for","after","this","indent",",","editors","www","triggered","parsers","interferes","note","with","#","item","compatibility","configured","list","line","when"," ","by","ordered","aliases","its",".","21","description","space","used","implement","in","more",")","indents","(","default","sublist","is","indenting","cirosantilli","bullet","rule","single","simpler","code","otherwise","are","problem","lists","com","tags","spaces","unordered","/","indented","the","which",";","support","markedapp","addition","if","items","guide","start","only","as","indentation","-","to","allows","style","3","a","example","extra",":","also","number","parent","markdown","applies","nested","inside","discussions","content","corrected","ul","problems","require","*","parameters","information","of","2","not","blocks","4"],"title":"MD007 - Unordered list indentation | 无序列表缩进","title_tokens":["列表","-","unordered","list","indentation","缩进"," ","md007","|","无序"]},{"location":"docs/digest/190218_1/#md009-trailing-spaces","text":"Tags: whitespace Aliases: no-trailing-spaces Parameters: br_spaces, list_item_empty_lines (number; default 2, boolean; default false) This rule is triggered on any lines that end with unexpected whitespace. To fix this, remove the trailing space from the end of the line. The br_spaces parameter allows an exception to this rule for a specific number of trailing spaces, typically used to insert an explicit line break. The default value allows 2 spaces to indicate a hard break (\\ element). Note: You must set br_spaces to a value >= 2 for this parameter to take effect. Setting br_spaces to 1 behaves the same as 0, disallowing any trailing spaces. Using spaces to indent blank lines inside a list item is usually not necessary, but some parsers require it. Set the list_item_empty_lines parameter to true to allow this: - list item text [2 spaces] list item text","text_tokens":["explicit",">","boolean","effect","take","same","for","disallowing","this","indent","typically",",","text","triggered","parsers","lines","[","note","with","=","item","remove","insert","0","specific","allow","list","line"," ","any","aliases",".","1","space","used","an","blank",")","break","unexpected","(","default","is","usually","rule","necessary","hard","\\","empty","behaves","_","tags","spaces","but","the",";","it","false","exception","as","fix","from","br","on","-","no","to","allows","set","]","setting","value","you","a","that",":","true","parameter","end","whitespace","number","element","indicate","inside","some","must","using","require","trailing","parameters","of","2","not"],"title":"MD009 - Trailing spaces | 尾随空格","title_tokens":["spaces","-","尾随"," ","|","空格","md009","trailing"]},{"location":"docs/digest/190218_1/#md010-hard-tabs","text":"Tags: whitespace, hard_tab Aliases: no-hard-tabs Parameters: code_blocks (boolean; default true) This rule is triggered by any lines that contain hard tab characters instead of using spaces for indentation. To fix this, replace any hard tab characters with spaces instead. Example: Some text * hard tab character used to indent the list item Corrected example: Some text * Spaces used to indent the list item instead You have the option to exclude this rule for code blocks. To do so, set the code_blocks parameter to false . Code blocks are included by default since handling of tabs by tools is often inconsistent (ex: using 4 vs. 8 spaces).","text_tokens":["the","parameter","used","whitespace",";","exclude","4","boolean",")","true","instead","(","do","default","for","is","have","this","false","indent","handling","corrected",",","rule","some","included","fix","tools","hard","8","text","-","no","indentation","code","triggered","to","set","are","lines","using","ex","character","since","with","characters","_","tabs","parameters","contain","*","item","you","so","tags","spaces","of","replace","inconsistent","list","vs","example","often"," ","tab","by","any","aliases","option",".","blocks","that",":"],"title":"MD010 - Hard tabs | 严格标签","title_tokens":["hard","严格","-"," ","标签","|","tabs","md010"]},{"location":"docs/digest/190218_1/#md011-reversed-link-syntax","text":"Tags: links Aliases: no-reversed-links This rule is triggered when text that appears to be a link is encountered, but where the syntax appears to have been reversed (the [] and () are reversed): (Incorrect link syntax)[https://www.example.com/] To fix this, swap the [] and () around: [Correct link syntax](https://www.example.com/) Note: Markdown Extra -style footnotes do not trigger this rule: For (example)[^1]","text_tokens":["the","extra","markdown","be",")","https","do","(","incorrect","trigger","for","is","have","correct","footnotes","this","link","^","syntax",",","rule","where","been","fix","around","www","swap","]","text","-","no","to","triggered","style","are","and","[","links","note","com","reversed","tags","encountered","appears","a","when","example"," ","/","aliases","not",".","1","but","that",":"],"title":"MD011 - Reversed link syntax | 反向链接语法","title_tokens":["反向","-","链接"," ","link","syntax","md011","|","语法","reversed"]},{"location":"docs/digest/190218_1/#md012-multiple-consecutive-blank-lines","text":"Tags: whitespace, blank_lines Aliases: no-multiple-blanks Parameters: maximum (number; default 1) This rule is triggered when there are multiple consecutive blank lines in the document: Some text here Some more text here To fix this, delete the offending lines: Some text here Some more text here Note: this rule will not be triggered if there are multiple consecutive blank lines inside code blocks. Note: The maximum parameter can be used to configure the maximum number of consecutive blank lines.","text_tokens":["will","the","parameter","blanks","used","whitespace",";","number","blank","if","in","more","be",")","inside","can","(","default","is","this","delete",",","rule","some","fix","there","multiple","text","-","no","to","triggered","code","are","lines","offending","document","note","_","parameters","tags","consecutive","of","when","configure"," ","aliases","maximum","not","1",".","blocks","here",":"],"title":"MD012 - Multiple consecutive blank lines | 多个连续的空白行","title_tokens":["多个","的","multiple","consecutive","连续","md012","-","blank"," ","lines","空白行","|","空白"]},{"location":"docs/digest/190218_1/#md013-line-length","text":"Tags: line_length Aliases: line-length Parameters: line_length, code_blocks, tables, headings, headers (number; default 80, boolean; default true) If headings is not provided, headers (deprecated) will be used. This rule is triggered when there are lines that are longer than the configured line length (default: 80 characters). To fix this, split the line up into multiple lines. This rule has an exception where there is no whitespace beyond the configured line length. This allows you to still include items such as long URLs without being forced to break them in the middle. You have the option to exclude this rule for code blocks, tables, or headings. To do so, set the code_blocks , tables , or headings parameter(s) to false. Code blocks are included in this rule by default since it is often a requirement for document readability, and tentatively compatible with code rules. Still, some languages do not lend themselves to short lines.","text_tokens":["will","them","readability","tentatively","into","beyond","boolean","be","do","split","being","themselves","for","this",",","still","triggered","lines","without","with","has","configured","include","line","when"," ","by","aliases","option",".","used","an","compatible","in",")","break","(","short","default","is","included","rule","where","length","rules","code","are","document","headers","such","characters","_","since","tags","up","the",";","exclude","if","it","items","have","false","exception","as","languages","deprecated","tables","longer","fix","s","multiple","-","to","no","allows","set","and","you","so","a","provided","often","that","true",":","parameter","forced","whitespace","middle","number","headings","urls","80","some","there","long","or","parameters","requirement","lend","not","blocks","than"],"title":"MD013 - Line length | 行长度","title_tokens":["length","-","line","长度"," ","行","|","md013"]},{"location":"docs/digest/190218_1/#md014-dollar-signs-used-before-commands-without-showing-output","text":"Tags: code Aliases: commands-show-output This rule is triggered when there are code blocks showing shell commands to be typed, and the shell commands are preceded by dollar signs ($): $ ls $ cat foo $ less bar The dollar signs are unnecessary in the above situation, and should not be included: ls cat foo less bar However, an exception is made when there is a need to distinguish between typed commands and command output, as in the following example: $ ls foo bar $ cat foo Hello world $ cat bar baz Rationale: it is easier to copy and paste and less noisy if the dollar signs are omitted when they are not needed. See www.cirosantilli.com/markdown-style-guide/#dollar-signs-in-shell-code for more information.","text_tokens":["show","see","rationale","$","be","unnecessary","cat","for","this",",","preceded","www","triggered","#","baz","needed","when","omitted"," ","by","aliases",".","an","in","more","copy","shell",")","(","world","foo","is","cirosantilli","included","rule","ls","output","following","easier","typed","made","code","are","commands","com","signs","need","they","tags","distinguish","paste","/","the","it","if","less","showing","guide","exception","as","hello","-","to","style","dollar","and","situation","should","bar","a","example",":","markdown","between","there","above","command","noisy","information","not","however","blocks"],"title":"MD014 - Dollar signs used before commands without showing output |  在命令之前使用的美元符号，不显示输出","title_tokens":["显示","used","|","在","showing","的","符号","命令","output","-","md014","dollar","without","commands","before","signs","，","使用"," ","输出","不","美元","之前"]},{"location":"docs/digest/190218_1/#md018-no-space-after-hash-on-atx-style-heading-atx","text":"Tags: headings, headers, atx, spaces Aliases: no-missing-space-atx This rule is triggered when spaces are missing after the hash characters in an atx style heading: #Heading 1 ##Heading 2 To fix this, separate the heading text from the hash character by a single space: # Heading 1 ## Heading 2","text_tokens":["the","space","an","in","headings","##","is","after","this",",","rule","fix","from","single","text","-","no","style","triggered","to","are","heading","character","headers","#","characters","atx","tags","spaces","separate","a","when"," ","by","aliases","missing","hash","2","1",":"],"title":"MD018 - No space after hash on atx style heading | 在atx样式标题上散列后没有空格","title_tokens":["space","标题","|","在","after","on","-","no","style","样式","heading","空格","atx","列后","上散"," ","hash","没有","md018"]},{"location":"docs/digest/190218_1/#md019-multiple-spaces-after-hash-on-atx-style-heading-atx","text":"Tags: headings, headers, atx, spaces Aliases: no-multiple-space-atx This rule is triggered when more than one space is used to separate the heading text from the hash characters in an atx style heading: # Heading 1 ## Heading 2 To fix this, separate the heading text from the hash character by a single space: # Heading 1 ## Heading 2","text_tokens":["the","space","used","an","in","headings","##","more","one","is","this",",","rule","from","fix","single","multiple","text","-","no","to","triggered","style","heading","character","headers","#","characters","atx","tags","spaces","separate","a","when"," ","by","aliases","hash","2","1",":","than"],"title":"MD019 - Multiple spaces after hash on atx style heading | 在atx样式标题上散列后的多个空格","title_tokens":["多个","标题","|","在","的","after","multiple","on","-","style","样式","heading","空格","atx","列后","spaces","上散"," ","hash","md019"]},{"location":"docs/digest/190218_1/#md020-no-space-inside-hashes-on-closed-atx-style-heading-atx","text":"Tags: headings, headers, atx_closed, spaces Aliases: no-missing-space-closed-atx This rule is triggered when spaces are missing inside the hash characters in a closed atx style heading: #Heading 1# ##Heading 2## To fix this, separate the heading text from the hash character by a single space: # Heading 1 # ## Heading 2 ## Note: this rule will fire if either side of the heading is missing spaces.","text_tokens":["will","the","space","if","in","headings","##","inside","either","is","fire","this",",","rule","fix","from","single","text","-","no","style","triggered","to","are","heading","character","side","closed","headers","#","characters","_","atx","note","tags","spaces","of","separate","a","when"," ","by","aliases","missing","hash","2","1",".",":"],"title":"MD020 - No space inside hashes on closed atx style heading | 在关闭的atx样式标题上没有内部空间的空间","title_tokens":["space","标题","|","在","inside","的","hashes","内部空间","on","-","no","style","样式","md020","heading","closed","atx","空间"," ","内部","没有","关闭","上"]},{"location":"docs/digest/190218_1/#md021-multiple-spaces-inside-hashes-on-closed-atx-style-heading-atx","text":"Tags: headings, headers, atx_closed, spaces Aliases: no-multiple-space-closed-atx This rule is triggered when more than one space is used to separate the heading text from the hash characters in a closed atx style heading: # Heading 1 # ## Heading 2 ## To fix this, separate the heading text from the hash character by a single space: # Heading 1 # ## Heading 2 ## Note: this rule will fire if either side of the heading contains multiple spaces.","text_tokens":["will","the","space","used","if","in","headings","##","more","one","either","is","fire","this",",","rule","from","fix","single","multiple","text","-","no","to","triggered","style","contains","heading","character","side","closed","headers","#","characters","_","atx","note","tags","spaces","of","separate","a","when"," ","by","aliases","hash","2","1",".",":","than"],"title":"MD021 - Multiple spaces inside hashes on closed atx style heading | 封闭的atx样式标题内的哈希内部的多个空格","title_tokens":["多个","标题","|","inside","的","hashes","内","哈希","md021","multiple","on","-","style","样式","heading","closed","空格","atx","spaces","封闭"," ","内部"]},{"location":"docs/digest/190218_1/#md022-headings-should-be-surrounded-by-blank-lines","text":"Tags: headings, headers, blank_lines Aliases: blanks-around-headings, blanks-around-headers This rule is triggered when headings (any style) are either not preceded or not followed by a blank line: # Heading 1 Some text Some more text ## Heading 2 To fix this, ensure that all headings have a blank line both before and after (except where the heading is at the beginning or end of the document): # Heading 1 Some text Some more text ## Heading 2 Rationale: Aside from aesthetic reasons, some parsers, including kramdown, will not parse headings that don't have a blank line before, and will parse them as regular text.","text_tokens":["will","the","end","blanks","don","them","blank","ensure","headings","rationale","##","more","reasons",")","(","either","kramdown","all","is","followed","have","after","this","as",",","rule","some","where","fix","from","around","preceded","aesthetic","text","-","style","to","triggered","beginning","aside","parsers","are","lines","except","and","heading","both","at","document","'","headers","#","including","_","or","before","parse","tags","of","a","line","when"," ","any","by","aliases","2","t","not","1",".","regular","that",":"],"title":"MD022 - Headings should be surrounded by blank lines | 标题应该用空白行包围","title_tokens":["应该","surrounded","标题","-","用","包围","blank"," ","headings","by","should","lines","空白行","|","be","空白","md022"]},{"location":"docs/digest/190218_1/#md023-headings-must-start-at-the-beginning-of-the-line","text":"Tags: headings, headers, spaces Aliases: heading-start-left, header-start-left This rule is triggered when a heading is indented by one or more spaces: Some text # Indented heading To fix this, ensure that all headings start at the beginning of the line: Some text # Heading Rationale: Headings that don't start at the beginning of the line will not be parsed as headings, and will instead appear as regular text.","text_tokens":["will","the","don","ensure","headings","rationale","left","more","one","be","instead","all","is","start","this","as",",","rule","some","fix","text","-","to","beginning","triggered","at","and","heading","'","headers","#","header","or","tags","spaces","of","a","line","when"," ","parsed","by","t","aliases","appear","not",".","regular","that",":","indented"],"title":"MD023 - Headings must start at the beginning of the line | 标题必须从行的开头开始","title_tokens":["the","从行","的","标题","of","md023","开头","-","beginning","line","must","start"," ","headings","at","开始","|","必须"]},{"location":"docs/digest/190218_1/#md024-multiple-headings-with-the-same-content","text":"Tags: headings, headers Aliases: no-duplicate-heading, no-duplicate-header Parameters: siblings_only, allow_different_nesting (boolean; default false ) This rule is triggered if there are multiple headings in the document that have the same text: # Some text ## Some text To fix this, ensure that the content of each heading is different: # Some text ## Some more text Rationale: Some markdown parses generate anchors for headings based on the heading name, and having headings with the same content can cause problems with this. If the parameter siblings_only (alternatively allow_different_nesting ) is set to true , heading duplication is allowed for non-sibling headings (common in change logs): # Change log ## 1.0.0 ### Features ## 2.0.0 ### Features","text_tokens":["duplicate","ensure","rationale","boolean","same","for","non","this",",","text","triggered","common","alternatively","#","with","0","allow"," ","aliases","change","different",".","log","2.0","in","more",")","each","(","siblings","default","based","is","features","rule","generate","are","document","heading","headers","_","name","tags","the",";","1.0","if","can","only","have","logs","false","anchors","fix","cause","multiple","on","-","no","to","set","and","allowed","that","true",":","parameter","headings","nesting","##","###","markdown","parses","having","content","some","there","duplication","sibling","problems","header","parameters","of"],"title":"MD024 - Multiple headings with the same content | 具有相同内容的多个标题","title_tokens":["多个","the","md024","multiple","的","标题","-","same","content","相同","内容"," ","headings","具有","|","with"]},{"location":"docs/digest/190218_1/#md025-multiple-top-level-headings-in-the-same-document","text":"Tags: headings, headers Aliases: single-h1 Parameters: level (number; default 1) This rule is triggered when a top level heading is in use (the first line of the file is a h1 heading), and more than one h1 heading is in use in the document: # Top level heading # Another top level heading To fix, structure your document so that there is a single h1 heading that is the title for the document, and all later headings are h2 or lower level headings: # Title ## Heading ## Another heading Rationale: A top level heading is a h1 on the first line of the file, and serves as the title for the document. If this convention is in use, then there can not be more than one title for the document, and the entire document should be contained within this heading. Note: The level parameter can be used to change the top level (ex: to h2) in cases where an h1 is added externally.","text_tokens":["your","rationale","be","structure","all","for","this",",","triggered","top","note","#","entire","line","when"," ","aliases","change","1",".","lower","used","an","in","more","one",")","(","default","is","rule","where","single","title","serves","are","document","level","heading","headers","ex","tags","added","within","externally","then","the",";","if","use","another","can","h1","as","fix","convention","on","-","to","should","and","so","a","that",":","parameter","cases","file","number","contained","headings","##","later","there","first","h2","or","parameters","of","not","than"],"title":"MD025 - Multiple top level headings in the same document | 同一文档中的多个顶级标题","title_tokens":["多个","the","标题","顶级","in","headings","|","同一","的","same","文档","md025","multiple","-","top","document","level","中"," "]},{"location":"docs/digest/190218_1/#md026-trailing-punctuation-in-heading","text":"Tags: headings, headers Aliases: no-trailing-punctuation Parameters: punctuation (string; default \".,;:!?\") This rule is triggered on any heading that has a punctuation character as the last character in the line: # This is a heading. To fix this, remove any trailing punctuation: # This is a heading Note: The punctuation parameter can be used to specify what characters class as punctuation at the end of the heading. For example, you can set it to \".,;:!\" to allow headings with question marks in them, such as might be used in an FAQ.","text_tokens":["the","parameter","end","them","?",";","used","an","it","in","headings","faq","be",")","\"","can","question","(","such","default","class","for","is","this","with","as",",","rule","fix","on","-","no","to","triggered","set","might","at","heading","character","marks","headers","punctuation","#","note","trailing","parameters","remove","specify","what","characters","you","tags","has","of","allow","!","a","last","string","line","example"," ","any","aliases",".","that",":"],"title":"MD026 - Trailing punctuation in heading | 标题中的尾随标点符号","title_tokens":["的","标题","标点","md026","标点符号","-","尾随"," ","in","符号","heading","|","punctuation","中","trailing"]},{"location":"docs/digest/190218_1/#md027-multiple-spaces-after-blockquote-symbol-blockquote","text":"Tags: blockquote, whitespace, indentation Aliases: no-multiple-space-blockquote This rule is triggered when blockquotes have more than one space after the blockquote ( > ) symbol: > This is a block quote with bad indentation > there should only be one. To fix, remove any extraneous space: > This is a blockquote with correct > indentation.","text_tokens":["the","space","quote","whitespace",">","symbol","more","one","be",")","extraneous","(","is","blockquotes","have","after","this","only","correct",",","rule","fix","there","multiple","indentation","no","-","triggered","to","blockquote","should","block","with","bad","remove","tags","a","when"," ","any","aliases",".",":","than"],"title":"MD027 - Multiple spaces after blockquote symbol | blockquote符号后的多个空格","title_tokens":["多个","spaces","multiple","的","md027","-","后","symbol"," ","after","符号","blockquote","|","空格"]},{"location":"docs/digest/190218_1/#md028-blank-line-inside-blockquote-blockquote","text":"Tags: blockquote, whitespace Aliases: no-blanks-blockquote This rule is triggered when two blockquote blocks are separated by nothing except for a blank line: > This is a blockquote > which is immediately followed by > this blockquote. Unfortunately > In some parsers, these are treated as the same blockquote. To fix this, ensure that any blockquotes that are right next to each other have some text in between: > This is a blockquote. And Jimmy also said: > This too is a blockquote. Alternatively, if they are supposed to be the same quote, then add the blockquote symbol at the beginning of the blank line: > This is a blockquote. > > This is the same blockquote. Rationale: Some markdown parsers will treat two blockquotes separated by one or more blank lines as the same blockquote, while others will treat them as separate blockquotes.","text_tokens":["will","them","these","ensure",">","right","rationale","jimmy","be","same","for","this","treat",",","text","triggered","parsers","lines","others","other","next","alternatively","line","when"," ","by","any","aliases","separated","immediately",".","quote","blanks","supposed","blank","in","more","one","each","is","followed","too","add","treated","rule","while","two","beginning","are","blockquote","they","tags","then","the","which","said","if","symbol","blockquotes","have","as","fix","-","no","to","nothing","and","a","that",":","also","whitespace","markdown","between","some","unfortunately","except","at","or","of","separate","blocks"],"title":"MD028 - Blank line inside blockquote | blockquote中的空行","title_tokens":["的","空行","-","line","blank"," ","blockquote","md028","|","中","inside"]},{"location":"docs/digest/190218_2/","text":"note tag: markdown digest github.com/DavidAnson/markdownlint/blob/master/doc/Rules.md MD029 - Ordered list item prefix | 有序列表项前缀 ¶ Tags: ol Aliases: ol-prefix Parameters: style (\"one\", \"ordered\", \"one_or_ordered\"; default \"one_or_ordered\") This rule is triggered on ordered lists that do not either start with '1.' or do not have a prefix that increases in numerical order (depending on the configured style). Example valid list if the style is configured as 'one': 1. Do this. 1. Do that. 1. Done. Example valid list if the style is configured as 'ordered': 1. Do this. 2. Do that. 3. Done. Both examples are valid when the style is configured as 'one_or_ordered'. Example invalid list for all styles: 1. Do this. 3. Done. This rule supports 0-prefixing ordered list items for uniform indentation: ... 08. Item 09. Item 10. Item 11. Item ... MD030 - Spaces after list markers | 列表标记后的空格 ¶ Tags: ol, ul, whitespace Aliases: list-marker-space Parameters: ul_single, ol_single, ul_multi, ol_multi (number; default 1) This rule checks for the number of spaces between a list marker (e.g. ' - ', ' * ', ' + ' or ' 1. ') and the text of the list item. The number of spaces checked for depends on the document style in use, but the default is 1 space after any list marker: * Foo * Bar * Baz 1. Foo 1. Bar 1. Baz 1. Foo * Bar 1. Baz A document style may change the number of spaces after unordered list items and ordered list items independently, as well as based on whether the content of every item in the list consists of a single paragraph, or multiple paragraphs (including sub-lists and code blocks). For example, the style guide at www.cirosantilli.com/markdown-style-guide/#spaces-after-list-marker specifies that 1 space after the list marker should be used if every item in the list fits within a single paragraph, but to use 2 or 3 spaces (for ordered and unordered lists respectively) if there are multiple paragraphs of content inside the list: * Foo * Bar * Baz vs. * Foo Second paragraph * Bar or 1. Foo Second paragraph 1. Bar To fix this, ensure the correct number of spaces are used after list marker for your selected document style. MD031 - Fenced code blocks should be surrounded by blank lines | 受控代码块应该用空行包围 ¶ Tags: code, blank_lines Aliases: blanks-around-fences This rule is triggered when fenced code blocks are either not preceded or not followed by a blank line: Some text ``` Code block ``` ``` Another code block ``` Some more text To fix this, ensure that all fenced code blocks have a blank line both before and after (except where the block is at the beginning or end of the document): Some text ``` Code block ``` ``` Another code block ``` Some more text Rationale: Aside from aesthetic reasons, some parsers, including kramdown, will not parse fenced code blocks that don't have blank lines before and after them. MD032 - Lists should be surrounded by blank lines | 列表应该用空行包围 ¶ Tags: bullet, ul, ol, blank_lines Aliases: blanks-around-lists This rule is triggered when lists (of any kind) are either not preceded or not followed by a blank line: Some text * Some * List 1. Some 2. List Some text To fix this, ensure that all lists have a blank line both before and after (except where the block is at the beginning or end of the document): Some text * Some * List 1. Some 2. List Some text Rationale: Aside from aesthetic reasons, some parsers, including kramdown, will not parse lists that don't have blank lines before and after them. Note: List items without hanging indents are a violation of this rule; list items with hanging indents are okay: * This is not okay * This is okay MD033 - Inline HTML | 内联HTML ¶ Tags: html Aliases: no-inline-html Parameters: allowed_elements (array of string; default empty) This rule is triggered whenever raw HTML is used in a markdown document: <h1>Inline HTML heading</h1> To fix this, use 'pure' markdown instead of including raw HTML: # Markdown heading Rationale: Raw HTML is allowed in markdown, but this rule is included for those who want their documents to only include \"pure\" markdown, or for those who are rendering markdown documents in something other than HTML. Note: To allow specific HTML elements, use the 'allowed_elements' parameter. MD034 - Bare URL used | 使用裸 URL ¶ Tags: links, url Aliases: no-bare-urls This rule is triggered whenever a URL is given that isn't surrounded by angle brackets: For more information, see https://www.example.com/. To fix this, add angle brackets around the URL: For more information, see <https://www.example.com/>. Rationale: Without angle brackets, the URL isn't converted into a link in many markdown parsers. Note: if you do want a bare URL without it being converted into a link, enclose it in a code block, otherwise in some markdown parsers it will be converted: `https://www.example.com` MD035 - Horizontal rule style | 水平规则样式 ¶ Tags: hr Aliases: hr-style Parameters: style (\"consistent\", \"---\", \"***\", or other string specifying the horizontal rule; default \"consistent\") This rule is triggered when inconsistent styles of horizontal rules are used in the document: --- - - - *** * * * **** To fix this, ensure any horizontal rules used in the document are consistent, or match the given style if the rule is so configured: --- --- Note: by default, this rule is configured to just require that all horizontal rules in the document are the same, and will trigger if any of the horizontal rules are different than the first one encountered in the document. If you want to configure the rule to match a specific style, the parameter given to the 'style' option is a string containing the exact horizontal rule text that is allowed. MD036 - Emphasis used instead of a heading | 强调使用而不是标题 ¶ Tags: headings, headers, emphasis Aliases: no-emphasis-as-heading, no-emphasis-as-header Parameters: punctuation (string; default \".,;:!?\") This check looks for instances where emphasized (i.e. bold or italic) text is used to separate sections, where a heading should be used instead: **My document** Lorem ipsum dolor sit amet... _Another section_ Consectetur adipiscing elit, sed do eiusmod. To fix this, use markdown headings instead of emphasized text to denote sections: # My document Lorem ipsum dolor sit amet... ## Another section Consectetur adipiscing elit, sed do eiusmod. Note: this rule looks for single line paragraphs that consist entirely of emphasized text. It won't fire on emphasis used within regular text, multi-line emphasized paragraphs, and paragraphs ending in punctuation. Similarly to rule MD026, you can configure what characters are recognized as punctuation. MD037 - Spaces inside emphasis markers | 重点标记内的空格 ¶ Tags: whitespace, emphasis Aliases: no-space-in-emphasis This rule is triggered when emphasis markers (bold, italic) are used, but they have spaces between the markers and the text: Here is some ** bold ** text. Here is some * italic * text. Here is some more __ bold __ text. Here is some more _ italic _ text. To fix this, remove the spaces around the emphasis markers: Here is some **bold** text. Here is some *italic* text. Here is some more __bold__ text. Here is some more _italic_ text. Rationale: Emphasis is only parsed as such when the asterisks/underscores aren't completely surrounded by spaces. This rule attempts to detect where they were surrounded by spaces, but it appears that emphasized text was intended by the author. MD038 - Spaces inside code span elements | 代码范围内的空格元素 ¶ Tags: whitespace, code Aliases: no-space-in-code This rule is triggered on code span elements that have spaces right inside the backticks: ` some text ` `some text ` ` some text` To fix this, remove the spaces inside the codespan markers: `some text` Note: A single leading or trailing space is allowed if used to separate codespan markers from an embedded backtick: `` ` embedded backtick`` MD039 - Spaces inside link text | 链接文本中的空格 ¶ Tags: whitespace, links Aliases: no-space-in-links This rule is triggered on links that have spaces surrounding the link text: [ a link ](https://www.example.com/) To fix this, remove the spaces surrounding the link text: [a link](https://www.example.com/) MD040 - Fenced code blocks should have a language specified | 受控代码块应具有指定的语言 ¶ Tags: code, language Aliases: fenced-code-language This rule is triggered when fenced code blocks are used, but a language isn't specified: ``` #!/bin/bash echo Hello world ``` To fix this, add a language specifier to the code block: ```bash #!/bin/bash echo Hello world ``` MD041 - First line in file should be a top level heading | 文件中的第一行应该是顶级标题 ¶ Tags: headings, headers Aliases: first-line-h1 Parameters: level, front_matter_title (number; default 1, string; default \"^\\s*title:\") This rule is triggered when the first line in the file isn't a top level (h1) heading: This is a file without a heading To fix this, add a heading to the top of your file: # File with heading This is a file with a top level heading The level parameter can be used to change the top level (ex: to h2) in cases where an h1 is added externally. If front matter is present and contains a YAML title property (commonly used with blog posts), this rule will not report a violation. To use a different property name in front matter, specify the text of a regular expression via the front_matter_title parameter. To disable the use of front matter by this rule, specify \"\" for front_matter_title . MD042 - No empty links | 没有空链接 ¶ Tags: links Aliases: no-empty-links This rule is triggered when an empty link is encountered: [an empty link]() To fix the violation, provide a destination for the link: [a valid link](https://example.com/) Empty fragments will trigger this rule: [an empty fragment](#) But non-empty fragments will not: [a valid fragment](#fragment) MD043 - Required heading structure | 必需的标题结构 ¶ Tags: headings, headers Aliases: required-headings, required-headers Parameters: headings, headers (array of string; default null for disabled) If headings is not provided, headers (deprecated) will be used. This rule is triggered when the headings in a file do not match the array of headings passed to the rule. It can be used to enforce a standard heading structure for a set of files. To require exactly the following structure: # Head ## Item ### Detail Set the headings parameter to: [ \"# Head\" , \"## Item\" , \"### Detail\" ] To allow optional headings as with the following structure: # Head ## Item ### Detail (optional) ## Foot ### Notes (optional) Use the special value \"*\" meaning \"one or more unspecified headings\" and set the headings parameter to: [ \"# Head\" , \"## Item\" , \"*\" , \"## Foot\" , \"*\" ] When an error is detected, this rule outputs the line number of the first problematic heading (otherwise, it outputs the last line number of the file). Note that while the headings parameter uses the \"## Text\" ATX heading style for simplicity, a file may use any supported heading style. MD044 - Proper names should have the correct capitalization | 正确的名称应具有正确的大小写 ¶ Tags: spelling Aliases: proper-names Parameters: names, code_blocks (string array; default null , boolean; default true ) This rule is triggered when any of the strings in the names array do not have the specified capitalization. It can be used to enforce a standard letter case for the names of projects and products. For example, the language \"JavaScript\" is usually written with both the 'J' and 'S' capitalized - though sometimes the 's' or 'j' appear in lower-case. To enforce the proper capitalization, specify the desired letter case in the names array: [ \"JavaScript\" ] Set the code_blocks parameter to false to disable this rule for code blocks. MD045 - Images should have alternate text (alt text) | 图像应具有替代文本（替代文字） ¶ Tags: accessibility, images Aliases: no-alt-text This rule is triggered when an image is missing alternate text (alt text) information. Alternate text is important for accessibility, describing the content of an image for people who may not be able to see it. Alternate text is commonly specified inline as: ![Alternate text](image.jpg) Or with reference syntax as: ![Alternate text][ref] ... [ref]: image.jpg \"Optional title\" Guidance for writing alternate text is available from the W3C , Wikipedia , and other locations .","text_tokens":["will","them","bash","multi","不是","into","ensure","fits","md038","alternate","boolean","be","emphasis","markdownlint","all","non","order","eiusmod","this","projects","respectively","文本","prefixing","www","triggered","amet","strings","lines","punctuation","before","remove","uniform","include","allow","line","when"," ","elit","change","1","isn","blanks","don","包围","something","bare","instead","embedded","10","surrounded","md045","underscores","empty","code","heading","outputs","image","lists","标记","spaces","externally","configure","property","appear","t","looks","disable","numerical","blog","null","capitalization","items","enclose","sit","trigger","have","only","md044","09","fix","from","style","present","check","序列表","should","both","hr","including","中","md043","md041","a","required","后","destination","md040","valid","allowed",":","whitespace","documents","headings","###","...","special","were","（","names","guidance","at","head","require","fenced","*","or","uses","given","separate","match","marker","?","see","right","do","第一","being","same","raw","many","after","---","files","大小",",","master","项","backticks","url","exact","parsers","describing","exactly","other","替代","angle","#","atx","inconsistent","passed","md","0","ref","may","specific","appears","any","by","aliases",".","inline","desired","one","echo","(","default","those","world","is","simplicity","add","^","rule","consists","expression","single","following","title","md030","rules","\\","horizontal","beginning","converted","otherwise","was","whether","level","products","capitalized","recognized","headers","_","ol","specifying","instances","应该","they","tags","kind","added","brackets","enforce","specified","块","具有","but","github","okay","codespan","if","asterisks","violation","元素","front","detected","another","can","hanging","的","内","guide","链接","i","规则","selected","deprecated","multiple","]","w3c","ending","you","davidanson","blob","指定","that","consectetur","g","supports","reference","inside","between","depends","https","urls","md036","matter","images","）","provide","必需","except","h2","containing","detail","parameters","parse","increases","of","important","parsed","paragraphs","people","名称","强调","specifier","case",">","your","disabled","前缀","structure","report","link","surrounding","j","section","text","though","yaml","block","[","without","elements","checked","note","结构","item","baz","bold","configured","list","正确","here","used",")","\"","indents","either","kramdown","checks","foo","fire","correct","而","bullet","where","小写","around","aesthetic","optional","styles","while","who","document","语言","links","such","范围","com","name","depending","vs","within","/","examples","空","sometimes","标题",";","文字","emphasized","sed","|","italic","use","consist","alt","as","syntax","hello","notes","sections","s","-","to","aside","no","backtick","文件","and","应","what","bar","just","spelling","author","序列","example","+","true","end","cases","file","number","attempts","unspecified","reasons","markdown","md033","invalid","some","aren","first","样式","ul","paragraph","trailing","information","fragment","md029","2","than","their","sub","rationale","standard","digest","detect","md034","md026","for","md035","一行","md031","preceded","intended","top","¶","with","commonly","written","specify","well","similarly","span","jpg","string","ordered","option","done","different","space","completely","是","lower","blank","an","__","in","consistent","more","doc","second","裸","independently","every","md039","locations","based","followed","whenever","usually","pure","cirosantilli","`","included","水平","via","entirely","specifies","want","lorem","writing","are","受控","fragments","my","'","空格","html","characters","ex","error","problematic","supported","unordered","使用","重点","没有","the","大小写","leading","it","dolor","bin","foot","won","h1","start","内联","meaning","false","第一行","array","08","on","indentation","posts","contains","set","language","<","代码","3","value","so","encountered","adipiscing","!","provided","md037","missing","javascript","parameter","e","列表","顶级","用","prefix","proper","##","markers","content","md042","letter","md032","there","accessibility","available","fences","11","图像","rendering","header","tag","空行","有","ipsum","denote","last","able","not","wikipedia","regular","blocks"],"title":"190218 2","title_tokens":["2","190218"," "]},{"location":"docs/digest/190218_2/#md029-ordered-list-item-prefix","text":"Tags: ol Aliases: ol-prefix Parameters: style (\"one\", \"ordered\", \"one_or_ordered\"; default \"one_or_ordered\") This rule is triggered on ordered lists that do not either start with '1.' or do not have a prefix that increases in numerical order (depending on the configured style). Example valid list if the style is configured as 'one': 1. Do this. 1. Do that. 1. Done. Example valid list if the style is configured as 'ordered': 1. Do this. 2. Do that. 3. Done. Both examples are valid when the style is configured as 'one_or_ordered'. Example invalid list for all styles: 1. Do this. 3. Done. This rule supports 0-prefixing ordered list items for uniform indentation: ... 08. Item 09. Item 10. Item 11. Item ...","text_tokens":["the","numerical",";","if","in","supports","prefix","...","one",")","\"","do","items","(","either","default","all","for","is","start","have","order","this","as","10","08",",","rule","invalid","09","prefixing","on","styles","-","style","indentation","triggered","are","11","both","lists","'","with","_","or","parameters","ol","3","item","tags","increases","depending","configured","0","a","uniform","list","example","when"," ","ordered","aliases","2","valid","not","1",".","done","examples","that",":"],"title":"MD029 - Ordered list item prefix | 有序列表项前缀","title_tokens":["前缀","列表","-","有","list","序列","md029"," ","序列表","ordered","prefix","|","项","item"]},{"location":"docs/digest/190218_2/#md030-spaces-after-list-markers","text":"Tags: ol, ul, whitespace Aliases: list-marker-space Parameters: ul_single, ol_single, ul_multi, ol_multi (number; default 1) This rule checks for the number of spaces between a list marker (e.g. ' - ', ' * ', ' + ' or ' 1. ') and the text of the list item. The number of spaces checked for depends on the document style in use, but the default is 1 space after any list marker: * Foo * Bar * Baz 1. Foo 1. Bar 1. Baz 1. Foo * Bar 1. Baz A document style may change the number of spaces after unordered list items and ordered list items independently, as well as based on whether the content of every item in the list consists of a single paragraph, or multiple paragraphs (including sub-lists and code blocks). For example, the style guide at www.cirosantilli.com/markdown-style-guide/#spaces-after-list-marker specifies that 1 space after the list marker should be used if every item in the list fits within a single paragraph, but to use 2 or 3 spaces (for ordered and unordered lists respectively) if there are multiple paragraphs of content inside the list: * Foo * Bar * Baz vs. * Foo Second paragraph * Bar or 1. Foo Second paragraph 1. Bar To fix this, ensure the correct number of spaces are used after list marker for your selected document style.","text_tokens":["marker","multi","sub","ensure","fits","your","be","for","after","this",",","respectively","www","text","checked","#","item","baz","well","may","list"," ","any","ordered","aliases","change","1",".","space","used","in",")","independently","every","second","(","default","checks","foo","is","based","correct","cirosantilli","rule","consists","single","specifies","code","are","document","whether","lists","'","_","ol","com","tags","spaces","unordered","vs","within","/","but","the",";","if","use","items","guide","as","selected","fix","multiple","on","-","style","to","should","and","including","3","bar","a","example","+","that",":","e","whitespace","g","number","markdown","inside","between","depends","content","there","ul","at","paragraph","*","or","parameters","of","paragraphs","2","blocks"],"title":"MD030 - Spaces after list markers | 列表标记后的空格","title_tokens":["标记","md030","spaces","的","markers","-","列表","list","后","after"," ","|","空格"]},{"location":"docs/digest/190218_2/#md031-fenced-code-blocks-should-be-surrounded-by-blank-lines","text":"Tags: code, blank_lines Aliases: blanks-around-fences This rule is triggered when fenced code blocks are either not preceded or not followed by a blank line: Some text ``` Code block ``` ``` Another code block ``` Some more text To fix this, ensure that all fenced code blocks have a blank line both before and after (except where the block is at the beginning or end of the document): Some text ``` Code block ``` ``` Another code block ``` Some more text Rationale: Aside from aesthetic reasons, some parsers, including kramdown, will not parse fenced code blocks that don't have blank lines before and after them.","text_tokens":["will","the","end","blanks","don","them","blank","ensure","rationale","reasons","more","parsers",")","another","(","either","kramdown","all","is","followed","have","after","this",",","rule","some","`","fix","where","from","around","preceded","aesthetic","text","-","to","beginning","code","triggered","fences","aside","are","lines","except","and","block","both","at","document","fenced","'","including","_","or","before","parse","tags","of","a","line","when"," ","by","t","aliases","not",".","blocks","that",":"],"title":"MD031 - Fenced code blocks should be surrounded by blank lines | 受控代码块应该用空行包围","title_tokens":["包围","用","blank","|","be","md031","surrounded","-","code","lines","should","受控","fenced","代码","应该","空行"," ","块","by","blocks"]},{"location":"docs/digest/190218_2/#md032-lists-should-be-surrounded-by-blank-lines","text":"Tags: bullet, ul, ol, blank_lines Aliases: blanks-around-lists This rule is triggered when lists (of any kind) are either not preceded or not followed by a blank line: Some text * Some * List 1. Some 2. List Some text To fix this, ensure that all lists have a blank line both before and after (except where the block is at the beginning or end of the document): Some text * Some * List 1. Some 2. List Some text Rationale: Aside from aesthetic reasons, some parsers, including kramdown, will not parse lists that don't have blank lines before and after them. Note: List items without hanging indents are a violation of this rule; list items with hanging indents are okay: * This is not okay * This is okay","text_tokens":["will","them","ensure","rationale","all","after","this",",","preceded","text","triggered","parsers","lines","block","without","note","with","before","line","list","when"," ","any","by","aliases","1",".","blanks","don","blank",")","indents","(","either","kramdown","is","followed","bullet","rule","where","around","aesthetic","beginning","are","document","lists","'","_","ol","tags","kind","t","the","okay",";","violation","items","hanging","have","fix","from","-","to","aside","and","both","including","a","that",":","end","reasons","some","except","ul","at","*","or","parse","of","2","not"],"title":"MD032 - Lists should be surrounded by blank lines | 列表应该用空行包围","title_tokens":["应该","surrounded","列表","-","用","空行","blank","包围"," ","by","should","lines","lists","md032","be","|"]},{"location":"docs/digest/190218_2/#md033-inline-html-html","text":"Tags: html Aliases: no-inline-html Parameters: allowed_elements (array of string; default empty) This rule is triggered whenever raw HTML is used in a markdown document: <h1>Inline HTML heading</h1> To fix this, use 'pure' markdown instead of including raw HTML: # Markdown heading Rationale: Raw HTML is allowed in markdown, but this rule is included for those who want their documents to only include \"pure\" markdown, or for those who are rendering markdown documents in something other than HTML. Note: To allow specific HTML elements, use the 'allowed_elements' parameter.","text_tokens":["their","the","parameter","used",";","documents","inline",">","in","rationale","something","markdown",")","use","instead","\"","(","default","those","for","is","whenever","raw","h1","only","this","pure","array",",","rule","included","fix","-","no","empty","triggered","to","want","who","are","document","heading","other","elements","<","'","html","including","_","#","parameters","or","rendering","note","tags","include","of","allow","specific","a","string"," ","/","aliases","allowed",".","but",":","than"],"title":"MD033 - Inline HTML | 内联HTML","title_tokens":["-","inline","内联"," ","md033","|","html"]},{"location":"docs/digest/190218_2/#md034-bare-url-used-url","text":"Tags: links, url Aliases: no-bare-urls This rule is triggered whenever a URL is given that isn't surrounded by angle brackets: For more information, see https://www.example.com/. To fix this, add angle brackets around the URL: For more information, see <https://www.example.com/>. Rationale: Without angle brackets, the URL isn't converted into a link in many markdown parsers. Note: if you do want a bare URL without it being converted into a link, enclose it in a code block, otherwise in some markdown parsers it will be converted: `https://www.example.com`","text_tokens":["will","the","see","into",">","in","rationale","if","it","more","bare","markdown","be","https","do","enclose","urls","being","for","is","whenever","many","this","add","link",",","rule","some","`","fix","url","around","surrounded","www","-","no","to","triggered","converted","parsers","want","code","otherwise","block","links","angle","'","<","without","note","com","you","given","tags","information","brackets","a","example"," ","t","by","aliases","/",".","isn","that",":"],"title":"MD034 - Bare URL used | 使用裸 URL","title_tokens":["url","md034","used","-","使用"," ","bare","|","裸"]},{"location":"docs/digest/190218_2/#md035-horizontal-rule-style","text":"Tags: hr Aliases: hr-style Parameters: style (\"consistent\", \"---\", \"***\", or other string specifying the horizontal rule; default \"consistent\") This rule is triggered when inconsistent styles of horizontal rules are used in the document: --- - - - *** * * * **** To fix this, ensure any horizontal rules used in the document are consistent, or match the given style if the rule is so configured: --- --- Note: by default, this rule is configured to just require that all horizontal rules in the document are the same, and will trigger if any of the horizontal rules are different than the first one encountered in the document. If you want to configure the rule to match a specific style, the parameter given to the 'style' option is a string containing the exact horizontal rule text that is allowed.","text_tokens":["will","the","parameter","used",";","ensure","if","in","consistent","one",")","\"","(","default","all","same","trigger","is","---","this",",","rule","fix","styles","rules","-","style","horizontal","triggered","to","first","want","are","exact","document","other","and","require","'","note","hr","containing","*","specifying","parameters","or","given","so","inconsistent","you","tags","configured","of","just","encountered","a","specific","string","when","configure"," ","match","any","by","aliases","option","allowed","different",".","that",":","text","than"],"title":"MD035 - Horizontal rule style | 水平规则样式","title_tokens":["水平","-","horizontal","style","md035"," ","样式","规则","rule","|"]},{"location":"docs/digest/190218_2/#md036-emphasis-used-instead-of-a-heading","text":"Tags: headings, headers, emphasis Aliases: no-emphasis-as-heading, no-emphasis-as-header Parameters: punctuation (string; default \".,;:!?\") This check looks for instances where emphasized (i.e. bold or italic) text is used to separate sections, where a heading should be used instead: **My document** Lorem ipsum dolor sit amet... _Another section_ Consectetur adipiscing elit, sed do eiusmod. To fix this, use markdown headings instead of emphasized text to denote sections: # My document Lorem ipsum dolor sit amet... ## Another section Consectetur adipiscing elit, sed do eiusmod. Note: this rule looks for single line paragraphs that consist entirely of emphasized text. It won't fire on emphasis used within regular text, multi-line emphasized paragraphs, and paragraphs ending in punctuation. Similarly to rule MD026, you can configure what characters are recognized as punctuation.","text_tokens":["multi","?","be","emphasis","do","md026","for","eiusmod","this",",","section","text","amet","note","punctuation","#","bold","similarly","line","string"," ","elit","aliases",".","used","in",")","\"","instead","(","default","is","fire","rule","where","single","entirely","lorem","are","document","heading","my","recognized","'","headers","characters","instances","_","tags","within","configure","t","looks",";","it","emphasized","dolor","sed","italic","use","another","can","sit","consist","won","i","as","fix","sections","on","-","no","to","check","should","and","ending","what","you","adipiscing","!","a","that",":","consectetur","e","headings","##","...","markdown","*","header","parameters","or","of","separate","ipsum","denote","paragraphs","regular"],"title":"MD036 - Emphasis used instead of a heading | 强调使用而不是标题","title_tokens":["强调","标题","of","used","不是","-","a","使用"," ","而","md036","heading","|","emphasis","instead"]},{"location":"docs/digest/190218_2/#md037-spaces-inside-emphasis-markers","text":"Tags: whitespace, emphasis Aliases: no-space-in-emphasis This rule is triggered when emphasis markers (bold, italic) are used, but they have spaces between the markers and the text: Here is some ** bold ** text. Here is some * italic * text. Here is some more __ bold __ text. Here is some more _ italic _ text. To fix this, remove the spaces around the emphasis markers: Here is some **bold** text. Here is some *italic* text. Here is some more __bold__ text. Here is some more _italic_ text. Rationale: Emphasis is only parsed as such when the asterisks/underscores aren't completely surrounded by spaces. This rule attempts to detect where they were surrounded by spaces, but it appears that emphasized text was intended by the author.","text_tokens":["the","space","completely","used","whitespace","attempts","__","in","rationale","asterisks","it","emphasized","more","italic",")","emphasis","between","were","(","detect","markers","is","have","only","this","as",",","rule","some","aren","fix","where","around","surrounded","intended","text","-","no","to","triggered","underscores","are","was","and","'","such","*","_","remove","they","bold","tags","spaces","appears","author","when"," ","parsed","/","t","aliases","by",".","but","that","here",":"],"title":"MD037 - Spaces inside emphasis markers |  重点标记内的空格","title_tokens":["标记","spaces","内","的","markers","-","emphasis"," ","重点","md037","|","空格","inside"]},{"location":"docs/digest/190218_2/#md038-spaces-inside-code-span-elements","text":"Tags: whitespace, code Aliases: no-space-in-code This rule is triggered on code span elements that have spaces right inside the backticks: ` some text ` `some text ` ` some text` To fix this, remove the spaces inside the codespan markers: `some text` Note: A single leading or trailing space is allowed if used to separate codespan markers from an embedded backtick: `` ` embedded backtick``","text_tokens":["the","space","used","whitespace","codespan","leading","an","right","in","if","inside","markers","is","have","embedded","this",",","rule","`","some","fix","from","backticks","single","on","text","-","no","to","code","triggered","backtick","elements","note","or","trailing","remove","span","tags","spaces","separate","a"," ","aliases","allowed","that",":"],"title":"MD038 - Spaces inside code span elements | 代码范围内的空格元素","title_tokens":["span","spaces","内","的","-","code"," ","元素","md038","elements","|","空格","代码","范围","inside"]},{"location":"docs/digest/190218_2/#md039-spaces-inside-link-text","text":"Tags: whitespace, links Aliases: no-space-in-links This rule is triggered on links that have spaces surrounding the link text: [ a link ](https://www.example.com/) To fix this, remove the spaces surrounding the link text: [a link](https://www.example.com/)","text_tokens":["the","space","whitespace","in",")","https","(","is","have","this","link",",","rule","surrounding","fix","www","on","text","-","no","]","triggered","to","[","links","com","remove","tags","spaces","a","example"," ","/","aliases",".","that",":"],"title":"MD039 - Spaces inside link text | 链接文本中的空格","title_tokens":["md039","spaces","的","text","-","链接"," ","link","|","空格","中","inside","文本"]},{"location":"docs/digest/190218_2/#md040-fenced-code-blocks-should-have-a-language-specified","text":"Tags: code, language Aliases: fenced-code-language This rule is triggered when fenced code blocks are used, but a language isn't specified: ``` #!/bin/bash echo Hello world ``` To fix this, add a language specifier to the code block: ```bash #!/bin/bash echo Hello world ```","text_tokens":["specifier","the","bash","used","echo","bin","world","is","this","add",",","rule","`","hello","fix","-","to","code","triggered","are","language","block","fenced","'","#","isn","tags","!","a","specified","when"," ","t","/","aliases","but","blocks",":"],"title":"MD040 - Fenced code blocks should have a language specified | 受控代码块应具有指定的语言","title_tokens":["|","的","have","-","code","should","language","受控","语言","应","fenced","代码","a","specified"," ","md040","块","指定","具有","blocks"]},{"location":"docs/digest/190218_2/#md041-first-line-in-file-should-be-a-top-level-heading","text":"Tags: headings, headers Aliases: first-line-h1 Parameters: level, front_matter_title (number; default 1, string; default \"^\\s*title:\") This rule is triggered when the first line in the file isn't a top level (h1) heading: This is a file without a heading To fix this, add a heading to the top of your file: # File with heading This is a file with a top level heading The level parameter can be used to change the top level (ex: to h2) in cases where an h1 is added externally. If front matter is present and contains a YAML title property (commonly used with blog posts), this rule will not report a violation. To use a different property name in front matter, specify the text of a regular expression via the front_matter_title parameter. To disable the use of front matter by this rule, specify \"\" for front_matter_title .","text_tokens":["will","your","be","report","for","this",",","text","triggered","top","yaml","without","#","with","commonly","specify","line","string","when"," ","by","aliases","change","1",".","different","isn","used","an","in",")","\"","(","default","is","^","add","rule","where","expression","via","title","\\","level","heading","'","headers","ex","_","name","tags","added","externally","property","t","the","disable","blog",";","if","front","violation","use","can","h1","fix","s","-","to","present","contains","posts","and","a",":","parameter","cases","file","number","headings","matter","first","h2","*","parameters","of","not","regular"],"title":"MD041 - First line in file should be a top level heading | 文件中的第一行应该是顶级标题","title_tokens":["是","标题","顶级","file","in","|","be","第一","的","一行","第一行","-","first","top","should","文件","level","heading","中","应该","md041","a","line"," "]},{"location":"docs/digest/190218_2/#md042-no-empty-links","text":"Tags: links Aliases: no-empty-links This rule is triggered when an empty link is encountered: [an empty link]() To fix the violation, provide a destination for the link: [a valid link](https://example.com/) Empty fragments will trigger this rule: [an empty fragment](#) But non-empty fragments will not: [a valid fragment](#fragment)","text_tokens":["will","the","an","violation",")","https","(","trigger","for","is","non","this","link",",","rule","fix","]","-","no","empty","triggered","to","provide","fragments","[","links","#","com","tags","encountered","fragment","a","when","destination"," ","example","/","aliases","valid","not",".","but",":"],"title":"MD042 - No empty links | 没有空链接","title_tokens":["-","no","empty","链接"," ","md042","links","没有","|","空"]},{"location":"docs/digest/190218_2/#md043-required-heading-structure","text":"Tags: headings, headers Aliases: required-headings, required-headers Parameters: headings, headers (array of string; default null for disabled) If headings is not provided, headers (deprecated) will be used. This rule is triggered when the headings in a file do not match the array of headings passed to the rule. It can be used to enforce a standard heading structure for a set of files. To require exactly the following structure: # Head ## Item ### Detail Set the headings parameter to: [ \"# Head\" , \"## Item\" , \"### Detail\" ] To allow optional headings as with the following structure: # Head ## Item ### Detail (optional) ## Foot ### Notes (optional) Use the special value \"*\" meaning \"one or more unspecified headings\" and set the headings parameter to: [ \"# Head\" , \"## Item\" , \"*\" , \"## Foot\" , \"*\" ] When an error is detected, this rule outputs the line number of the first problematic heading (otherwise, it outputs the last line number of the file). Note that while the headings parameter uses the \"## Text\" ATX heading style for simplicity, a file may use any supported heading style.","text_tokens":["will","disabled","standard","be","do","structure","for","this","files",",","text","triggered","exactly","[","note","#","with","item","atx","passed","allow","may","line","string","when"," ","any","aliases",".","used","an","in","more","one",")","\"","(","default","is","simplicity","rule","following","optional","while","otherwise","heading","outputs","headers","error","problematic","supported","tags","enforce","the","null",";","if","it","detected","use","can","foot","meaning","as","array","notes","deprecated","]","-","to","style","set","and","value","a","required","provided","that",":","parameter","file","number","headings","unspecified","##","###","special","first","head","require","detail","*","or","parameters","uses","of","last","match","not"],"title":"MD043 - Required heading structure | 必需的标题结构","title_tokens":["的","structure","md043","标题","-","required","必需"," ","heading","|","结构"]},{"location":"docs/digest/190218_2/#md044-proper-names-should-have-the-correct-capitalization","text":"Tags: spelling Aliases: proper-names Parameters: names, code_blocks (string array; default null , boolean; default true ) This rule is triggered when any of the strings in the names array do not have the specified capitalization. It can be used to enforce a standard letter case for the names of projects and products. For example, the language \"JavaScript\" is usually written with both the 'J' and 'S' capitalized - though sometimes the 's' or 'j' appear in lower-case. To enforce the proper capitalization, specify the desired letter case in the names array: [ \"JavaScript\" ] Set the code_blocks parameter to false to disable this rule for code blocks.","text_tokens":["case","standard","boolean","be","do","for","this",",","projects","j","triggered","though","strings","[","written","with","specify","string","when"," ","any","aliases",".","lower","used","desired","in",")","\"","(","default","is","usually","rule","code","capitalized","products","'","_","tags","enforce","specified","appear","sometimes","the","disable","null",";","it","capitalization","can","have","false","array","s","]","-","to","set","language","and","both","spelling","a","example","javascript","true",":","parameter","proper","letter","names","or","parameters","of","not","blocks"],"title":"MD044 - Proper names should have the correct capitalization | 正确的名称应具有正确的大小写","title_tokens":["the","大小写","proper","|","capitalization","的","have","correct","大小","md044","names","小写","-","should","应"," ","具有","名称","正确"]},{"location":"docs/digest/190218_2/#md045-images-should-have-alternate-text-alt-text","text":"Tags: accessibility, images Aliases: no-alt-text This rule is triggered when an image is missing alternate text (alt text) information. Alternate text is important for accessibility, describing the content of an image for people who may not be able to see it. Alternate text is commonly specified inline as: ![Alternate text](image.jpg) Or with reference syntax as: ![Alternate text][ref] ... [ref]: image.jpg \"Optional title\" Guidance for writing alternate text is available from the W3C , Wikipedia , and other locations .","text_tokens":["the","see","an","inline","it","alternate","...","reference","be",")","\"","(","alt","locations","for","is","content","this","as","syntax",",","rule","from","accessibility","available","guidance","title","images","optional","]","text","-","no","to","triggered","writing","w3c","who","describing","and","[","other","image","with","commonly","or","tags","information","of","may","important","!","specified","jpg","ref","when"," ","people","aliases","missing","able","not",".","wikipedia",":"],"title":"MD045 - Images should have alternate text (alt text) | 图像应具有替代文本（替代文字）","title_tokens":["文字","alternate","|",")","(","alt","have","（","文本","images","md045","text","-","）","should","替代","图像","应"," ","具有"]},{"location":"docs/digest/190606_1/","text":"digest tag: java via: marlkiller/module-web-service Constants 常量 ¶ // WebService俩个参数,帐号跟密码 private static final String USERNAME = \"void\" ; private static final String PASSWORD = \"password\" ; // namespace工作空间 private static final String NAME_SPACE = \"http://xxx/kunlun/kws/1.1/\" ; // 接口wsdl地址 private static final String WSDL_URL = \"http://xxx/kws/SecurityService.asmx?WSDL\" ; // SOAPAction地址 private static final String ACTION_URI = \"http://xxx/kunlun/kws/1.1/AppLogin\" ; 方式1.Axis2将wsdl转为java代码 ¶ 转换源码 ¶ 点击下载 下载完毕后,解压 找到bin目录下的wsdl2java.bat 之后将WebService接口的wsdl文件保存到该目录下,命名为xxx.WSDL cmd下运行该命令生成java代码 ​ cmd wsdl2java -uri SecurityService.wsdl -o C:\\Users\\voidm\\Desktop\\tmp ​ - url 对应WSDL文件名 - o 对应SRC对应输出文件夹 源码输出文件夹 Java实现 ¶ 生成完毕后,将源码copy到ide,写一个Main方法运行 直接new对象,运行方法即可,参数都生成好了 ​```java private static void forAxis2() { try { SecurityServiceStub securityServiceStub = new SecurityServiceStub(); SecurityServiceStub.AppLogin params = new SecurityServiceStub.AppLogin(); params.setUsername(USERNAME); params.setPassword(PASSWORD); SecurityServiceStub.AppLoginResponse response = securityServiceStub.appLogin(params); System.out.println(response.getAppLoginResult() ? \"登录成功\" : \"登录失败\"); } catch (Exception e) { } } ``` 方式2.maven引入Axis1包 远程调用 ¶ Pom依赖 ¶ xml <dependency> <groupId>commons-discovery</groupId> <artifactId>commons-discovery</artifactId> <version>0.5</version> </dependency> <dependency> <groupId>org.apache.axis</groupId> <artifactId>axis</artifactId> <version>1.4</version> </dependency> <dependency> <groupId>javax.xml</groupId> <artifactId>jaxrpc</artifactId> <version>1.1</version> </dependency> ​ Java实现 ¶ 注意下面这俩句一定要加,.Net的WebService似乎必须要在header里添加 SOAPAction call.setUseSOAPAction(true); call.setSOAPActionURI(\" xxxxx/kws/1.1/AppLogin \"); ```java private static void forAxis1RPC() { try { // 直接引用远程的wsdl文件 // 以下都是套路 Service service = new Service(); Call call = (Call) service.createCall(); // WSDL里面描述的接口名称 call.setOperationName(new QName(NAME_SPACE, \"AppLogin\")); call.setTargetEndpointAddress(WSDL_URL); // 接口的参数 call.addParameter(\"username\", XMLType.XSD_STRING, ParameterMode.IN); call.addParameter(\"password\", XMLType.XSD_STRING, ParameterMode.IN); // 设置返回类型 call.setReturnType(XMLType.XSD_BOOLEAN); // 设置SOAPAction call.setUseSOAPAction(true); call.setSOAPActionURI(ACTION_URI); String result = call.invoke(new Object[]{USERNAME, PASSWORD}).toString(); // 给方法传递参数，并且调用方法 System.out.println(Boolean.valueOf(result) ? \"登录成功\" : \"登录失败\"); } catch (Exception e) { System.err.println(e.toString()); } } ``` 方式3.maven引入Axis2包 远程调用 ¶ POM依赖 ¶ <dependency> <groupId> org.apache.axis2 </groupId> <artifactId> axis2-spring </artifactId> <version> 1.7.8 </version> </dependency> <dependency> <groupId> org.apache.axis2 </groupId> <artifactId> axis2-transport-http </artifactId> <version> 1.7.8 </version> </dependency> <dependency> <groupId> org.apache.axis2 </groupId> <artifactId> axis2-transport-local </artifactId> <version> 1.7.8 </version> </dependency> <dependency> <groupId> org.apache.axis2 </groupId> <artifactId> axis2-xmlbeans </artifactId> <version> 1.7.8 </version> </dependency> ​``` ### Java实现 注意下面这俩句一定要加,.Net的WebService似乎必须要在header里添加 SOAPAction > options.setAction(ACTION_URI); ```java private static void forAxis2RPC() throws AxisFault { // 使用RPC方式调用WebService RPCServiceClient serviceClient = new RPCServiceClient(); Options options = serviceClient.getOptions(); // 指定调用WebService的URL EndpointReference targetEPR = new EndpointReference(WSDL_URL); options.setTo(targetEPR); options.setAction(ACTION_URI); // 指定AppLogin方法的参数值 Object[] opAddEntryArgs = new Object[]{USERNAME, PASSWORD}; Class[] classes = new Class[]{String.class}; // 指定要调用的AppLogin方法及WSDL文件的命名空间 QName opAddEntry = new QName(NAME_SPACE, \"AppLogin\"); // 输出该方法的返回值 System.out.println(serviceClient.invokeBlocking(opAddEntry, opAddEntryArgs, classes)[0].equals(\"false\") ? \"登录失败\" : \"登录成功\"); } ​``` ## 方式4.HTTP方式调用 > 这里也要注意 添加header: SOAPAction,否则请求会失败 > postMethod.addRequestHeader(\"SOAPAction\", ACTION_URI); ### Java实现 ```java private static void forHttpClient() { //language=XML String xml = \" <soap:Envelope xmlns:xsi= \\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:xsd= \\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:soap= \\\"http://schemas.xmlsoap.org/soap/envelope/\\\" > \\n\" + \" <soap:Body> \\n\" + \" <AppLogin xmlns= \\\"\" + NAME_SPACE + \"\\\" > \\n\" + \" <username> \" + USERNAME + \" </username> \\n\" + \" <password> \" + PASSWORD + \" </password> \\n\" + \" </AppLogin> \\n\" + \" </soap:Body> \\n\" + \" </soap:Envelope> \"; //用来盛放返回值 String result = \"\"; PostMethod postMethod = new PostMethod(WSDL_URL); HttpClientParams httpClientParams = new HttpClientParams(); //设置链接的访问时间 httpClientParams.setConnectionManagerTimeout(999999); //设置超时时间 httpClientParams.setSoTimeout(999999); //创建http线程 MultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager(); HttpClient httpClient = new HttpClient(httpClientParams, connectionManager); postMethod.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler(11, true)); try { //设置返回值的编码格式 postMethod.setRequestEntity(new StringRequestEntity(xml, \"text/xml\", \"UTF-8\")); postMethod.addRequestHeader(\"SOAPAction\", ACTION_URI); httpClient.executeMethod(postMethod); //下面还是老规矩进行流和字符串之间的转换 InputStream out = postMethod.getResponseBodyAsStream(); BufferedReader in = new BufferedReader(new InputStreamReader(out)); StringBuilder buffer = new StringBuilder(); String line = \"\"; while ((line = in.readLine()) != null) { buffer.append(line); } result = buffer.toString(); } catch (Exception e) { e.printStackTrace(); } finally { postMethod.releaseConnection(); } System.out.println(result); } PostMan调试 ¶ 总结 ¶ 因为帐号密码是随便写的, 所以登录失败,权限不足 不知道是什么鬼... 贴上接口Response响应 <?xml version=\"1.0\" encoding=\"utf-8\"?> <soap:Envelope xmlns:soap= \"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd= \"http://www.w3.org/2001/XMLSchema\" > <soap:Header> <KwsSoapHeader xmlns= \"http://www.shijinet.com.cn/kunlun/kws/1.1/\" > <RetCode> 0000 </RetCode> <ErrReason> 权限不够 </ErrReason> </KwsSoapHeader> </soap:Header> <soap:Body> <AppLoginResponse xmlns= \"http://www.shijinet.com.cn/kunlun/kws/1.1/\" > <AppLoginResult> false </AppLoginResult> </AppLoginResponse> </soap:Body> </soap:Envelope> ​```","text_tokens":["该","foraxis2rpc","到","transport","void","boolean","源码","这里","httpclient","wsdl","访问","文件夹","引入","www","append","句","line"," ","securityservicestub","version","1","接口","}","axisfault","999999","apploginresponse","帐号","copy","setparameter","opaddentry","好","call","xmltype","8","格式","方式","schemas","总结","以下","要","俩个","跟","instance","apploginresult","上","类型","null","实现","pom","返回","addparameter","parametermode","xmlsoap","会","了","转为","valueof","传递","完毕","httpmethodparams","invokeblocking","返回值","0.5","编码","system","写","new","postman","后",":","套路","shijinet","src","xmlns","###","...","数值","0000","dependency","运行","字符串","try","找到","commons","inputstreamreader","?","转换","setoperationname","地址","也","流","密码",",","setrequestentity","utf","url","kunlun","随便","multithreadedhttpconnectionmanager","空间","设置","0","鬼","所以",".","引用","targetepr","apache","final","printstacktrace","给","成功","(","class","规矩","\\","{","解压","_","远程","setreturntype","bat","响应","static","result","constants","即可","createcall","n","marlkiller","setusername","还是","2001","的","axis","链接","exception","里面","权限","catch","之后","]","和","kwssoapheader","这俩","setsoapactionuri","desktop","都","输出","out","指定","uri","帐号密码","securityservice","ide","贴","进行","之间","因为","asmx","encoding","1.7","getresponsebodyasstream","w3","常量","releaseconnection","rpcserviceclient","一个","1.1","http","什么","名称","4","直接","xmlbeans","jaxrpc","options","inputstream",">","retcode","tmp","foraxis2","并且","text","调试","[","invoke","，","及","envelope","bufferedreader","response",")","\"","stringbuilder","下载","throws","main","while","1.4","setusesoapaction","com","name","/","要加","否则",";","axis2","params","在","executemethod","请求","依赖","opaddentryargs","xmlschema","javax","生成","service","settargetendpointaddress","password","不足","action","-","cmd","文件","对象","包","artifactid","equals","getapploginresult","discovery","+","true","rpc","时间","classes","将","似乎","foraxis1rpc","net","用来","不够","module","xsd","描述","stringrequestentity","xsi","endpointreference","kws","参数","工作","2","不","qname","object","setaction","setsotimeout","println","目录","xxxxx","digest","spring","handler","添加","java","body","​","username","org","盛放","postmethod","maven","为","失败","addrequestheader","¶","c","=","getparams","groupid","调用","超时","private","string","下面","wsdl2java","getoptions","下","setpassword","space","是","buffer","in","axis1","cn","retry","forhttpclient","老规矩","对应","voidm","err","命令","`","必须","via","xxx","o","参数值","使用","方法","保存","errreason","1.0","命名","namespace","bin","文件名","登录","finally","serviceclient","false","知道","language","connectionmanager","点击","<","代码","3","里","!","readline","applogin","soap","创建","httpclientparams","e","##","线程","setconnectionmanagertimeout","一定","件夹","注意","webservice","users","soapaction","11","字符","header","tostring","tag","xml","defaulthttpmethodretryhandler","setto","local","web"],"title":"190606 1","title_tokens":["1","190606"," "]},{"location":"docs/digest/190606_1/#constants","text":"// WebService俩个参数,帐号跟密码 private static final String USERNAME = \"void\" ; private static final String PASSWORD = \"password\" ; // namespace工作空间 private static final String NAME_SPACE = \"http://xxx/kunlun/kws/1.1/\" ; // 接口wsdl地址 private static final String WSDL_URL = \"http://xxx/kws/SecurityService.asmx?WSDL\" ; // SOAPAction地址 private static final String ACTION_URI = \"http://xxx/kunlun/kws/1.1/AppLogin\" ;","text_tokens":["space","securityservice","?",";","final","帐号","void","asmx","\"","namespace","wsdl","地址","webservice","password","密码",",","username","soapaction","url","action","kunlun","xxx","=","_","空间","name","1.1","http","俩个","private","applogin","string","跟","kws"," ","参数","/","工作","static",".","uri","接口",":"],"title":"Constants 常量","title_tokens":["常量","constants"," "]},{"location":"docs/digest/190606_1/#1axis2wsdljava","text":"","text_tokens":[],"title":"方式1.Axis2将wsdl转为java代码","title_tokens":["wsdl","将","方式","axis2","java",".","1","代码","转为"]},{"location":"docs/digest/190606_1/#_1","text":"点击下载 下载完毕后,解压 找到bin目录下的wsdl2java.bat 之后将WebService接口的wsdl文件保存到该目录下,命名为xxx.WSDL cmd下运行该命令生成java代码 ​ cmd wsdl2java -uri SecurityService.wsdl -o C:\\Users\\voidm\\Desktop\\tmp ​ - url 对应WSDL文件名 - o 对应SRC对应输出文件夹 源码输出文件夹","text_tokens":["src","找到","securityservice","该","将","到","目录","源码","命名","件夹","对应","bin","的","wsdl","voidm","tmp","webservice","文件名","java","生成","文件夹","下载","命令",",","​","users","url","之后","\\","cmd","运行","-","解压","为","完毕","文件","xxx","点击","c","代码","o","bat","desktop","后"," ","输出","wsdl2java",".","uri","下","接口",":","保存"],"title":"转换源码","title_tokens":["转换","源码"]},{"location":"docs/digest/190606_1/#java","text":"生成完毕后,将源码copy到ide,写一个Main方法运行 直接new对象,运行方法即可,参数都生成好了 ​```java private static void forAxis2() { try { SecurityServiceStub securityServiceStub = new SecurityServiceStub(); SecurityServiceStub.AppLogin params = new SecurityServiceStub.AppLogin(); params.setUsername(USERNAME); params.setPassword(PASSWORD); SecurityServiceStub.AppLoginResponse response = securityServiceStub.appLogin(params); System.out.println(response.getAppLoginResult() ? \"登录成功\" : \"登录失败\"); } catch (Exception e) { } } ```","text_tokens":["直接","}","ide","即可","?","将",";","e","到","apploginresponse","println","setusername","copy","void","params","response","源码",")","\"","成功","(","好","登录","java","生成","exception","password","了",",","​","`","foraxis2",":","username","catch","main","运行","{","一个","失败","完毕","对象","=","system","写","new","private","都","applogin","后"," ","参数","getapploginresult","out","static","方法","securityservicestub",".","try","setpassword"],"title":"Java实现","title_tokens":["java","实现"]},{"location":"docs/digest/190606_1/#2mavenaxis1","text":"","text_tokens":[],"title":"方式2.maven引入Axis1包 远程调用","title_tokens":["调用","maven","方式"," ","2","axis1","包","引入",".","远程"]},{"location":"docs/digest/190606_1/#pom","text":"xml <dependency> <groupId>commons-discovery</groupId> <artifactId>commons-discovery</artifactId> <version>0.5</version> </dependency> <dependency> <groupId>org.apache.axis</groupId> <artifactId>axis</artifactId> <version>1.4</version> </dependency> <dependency> <groupId>javax.xml</groupId> <artifactId>jaxrpc</artifactId> <version>1.1</version> </dependency> ​","text_tokens":["jaxrpc","commons","apache",">","axis","javax","dependency","​","org","-","<","1.4","0.5","artifactid","groupid","1.1","xml"," ","/","version","discovery","."],"title":"Pom依赖","title_tokens":["pom","依赖"]},{"location":"docs/digest/190606_1/#java_1","text":"注意下面这俩句一定要加,.Net的WebService似乎必须要在header里添加 SOAPAction call.setUseSOAPAction(true); call.setSOAPActionURI(\" xxxxx/kws/1.1/AppLogin \"); ```java private static void forAxis1RPC() { try { // 直接引用远程的wsdl文件 // 以下都是套路 Service service = new Service(); Call call = (Call) service.createCall(); // WSDL里面描述的接口名称 call.setOperationName(new QName(NAME_SPACE, \"AppLogin\")); call.setTargetEndpointAddress(WSDL_URL); // 接口的参数 call.addParameter(\"username\", XMLType.XSD_STRING, ParameterMode.IN); call.addParameter(\"password\", XMLType.XSD_STRING, ParameterMode.IN); // 设置返回类型 call.setReturnType(XMLType.XSD_BOOLEAN); // 设置SOAPAction call.setUseSOAPAction(true); call.setSOAPActionURI(ACTION_URI); String result = call.invoke(new Object[]{USERNAME, PASSWORD}).toString(); // 给方法传递参数，并且调用方法 System.out.println(Boolean.valueOf(result) ? \"登录成功\" : \"登录失败\"); } catch (Exception e) { System.err.println(e.toString()); } } ```","text_tokens":["直接","?","println","xxxxx","void","boolean","setoperationname","wsdl","添加","java",",","并且","username","url","失败","[","invoke","=","句","，","设置","调用","private","string"," ","下面","名称",".","接口","引用","}","space","是","in","给",")","\"","成功","(","call","err","xmltype","`","必须","{","setusesoapaction","_","远程","setreturntype","以下","name","要","/","要加","static","方法","result","类型",";","createcall","在","返回","addparameter","parametermode","的","登录","service","settargetendpointaddress","password","exception","里面","catch","valueof","action","]","传递","文件","这俩","setsoapactionuri","system","里","new","applogin","都","out","uri","true","套路",":","e","似乎","foraxis1rpc","net","一定","注意","webservice","xsd","soapaction","描述","header","tostring","1.1","kws","参数","qname","try","object"],"title":"Java实现","title_tokens":["java","实现"]},{"location":"docs/digest/190606_1/#3mavenaxis2","text":"","text_tokens":[],"title":"方式3.maven引入Axis2包 远程调用","title_tokens":["调用","maven","方式","axis2"," ","包","引入",".","3","远程"]},{"location":"docs/digest/190606_1/#pom_1","text":"<dependency> <groupId> org.apache.axis2 </groupId> <artifactId> axis2-spring </artifactId> <version> 1.7.8 </version> </dependency> <dependency> <groupId> org.apache.axis2 </groupId> <artifactId> axis2-transport-http </artifactId> <version> 1.7.8 </version> </dependency> <dependency> <groupId> org.apache.axis2 </groupId> <artifactId> axis2-transport-local </artifactId> <version> 1.7.8 </version> </dependency> <dependency> <groupId> org.apache.axis2 </groupId> <artifactId> axis2-xmlbeans </artifactId> <version> 1.7.8 </version> </dependency> ​``` ### Java实现 注意下面这俩句一定要加,.Net的WebService似乎必须要在header里添加 SOAPAction > options.setAction(ACTION_URI); ```java private static void forAxis2RPC() throws AxisFault { // 使用RPC方式调用WebService RPCServiceClient serviceClient = new RPCServiceClient(); Options options = serviceClient.getOptions(); // 指定调用WebService的URL EndpointReference targetEPR = new EndpointReference(WSDL_URL); options.setTo(targetEPR); options.setAction(ACTION_URI); // 指定AppLogin方法的参数值 Object[] opAddEntryArgs = new Object[]{USERNAME, PASSWORD}; Class[] classes = new Class[]{String.class}; // 指定要调用的AppLogin方法及WSDL文件的命名空间 QName opAddEntry = new QName(NAME_SPACE, \"AppLogin\"); // 输出该方法的返回值 System.out.println(serviceClient.invokeBlocking(opAddEntry, opAddEntryArgs, classes)[0].equals(\"false\") ? \"登录失败\" : \"登录成功\"); } ​``` ## 方式4.HTTP方式调用 > 这里也要注意 添加header: SOAPAction,否则请求会失败 > postMethod.addRequestHeader(\"SOAPAction\", ACTION_URI); ### Java实现 ```java private static void forHttpClient() { //language=XML String xml = \" <soap:Envelope xmlns:xsi= \\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:xsd= \\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:soap= \\\"http://schemas.xmlsoap.org/soap/envelope/\\\" > \\n\" + \" <soap:Body> \\n\" + \" <AppLogin xmlns= \\\"\" + NAME_SPACE + \"\\\" > \\n\" + \" <username> \" + USERNAME + \" </username> \\n\" + \" <password> \" + PASSWORD + \" </password> \\n\" + \" </AppLogin> \\n\" + \" </soap:Body> \\n\" + \" </soap:Envelope> \"; //用来盛放返回值 String result = \"\"; PostMethod postMethod = new PostMethod(WSDL_URL); HttpClientParams httpClientParams = new HttpClientParams(); //设置链接的访问时间 httpClientParams.setConnectionManagerTimeout(999999); //设置超时时间 httpClientParams.setSoTimeout(999999); //创建http线程 MultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager(); HttpClient httpClient = new HttpClient(httpClientParams, connectionManager); postMethod.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler(11, true)); try { //设置返回值的编码格式 postMethod.setRequestEntity(new StringRequestEntity(xml, \"text/xml\", \"UTF-8\")); postMethod.addRequestHeader(\"SOAPAction\", ACTION_URI); httpClient.executeMethod(postMethod); //下面还是老规矩进行流和字符串之间的转换 InputStream out = postMethod.getResponseBodyAsStream(); BufferedReader in = new BufferedReader(new InputStreamReader(out)); StringBuilder buffer = new StringBuilder(); String line = \"\"; while ((line = in.readLine()) != null) { buffer.append(line); } result = buffer.toString(); } catch (Exception e) { e.printStackTrace(); } finally { postMethod.releaseConnection(); } System.out.println(result); }","text_tokens":["xmlbeans","setaction","setsotimeout","inputstreamreader","该","options","?","foraxis2rpc","转换","inputstream",">","println","transport","void","spring","这里","httpclient","wsdl","handler","也","访问","添加","java","body","流","​",",","setrequestentity","utf","username","org","url","盛放","www","text","postmethod","append","失败","addrequestheader","[","=","multithreadedhttpconnectionmanager","空间","getparams","句","groupid","设置","0","调用","及","private","超时","string","line"," ","下面","version","envelope",".","getoptions","bufferedreader","}","targetepr","qname","space","apache","axisfault","999999","buffer","in","retry","setparameter","printstacktrace","forhttpclient",")","\"","老规矩","成功","(","opaddentry","class","stringbuilder","`","throws","必须","规矩","8","\\","while","格式","{","方式","schemas","_","name","要","参数值","使用","/","要加","static","方法","否则","instance","result","null","实现",";","n","axis2","还是","2001","在","executemethod","返回","命名","请求","opaddentryargs","xmlschema","的","登录","finally","xmlsoap","链接","会","serviceclient","false","exception","password","catch","action","]","-","和","文件","这俩","language","connectionmanager","invokeblocking","返回值","<","httpmethodparams","artifactid","编码","system","里","new","!","readline","applogin","equals","soap","输出","创建","out","指定","uri","+",":","httpclientparams","rpc","true","时间","e","classes","似乎","xmlns","net","进行","用来","###","##","setconnectionmanagertimeout","线程","之间","一定","注意","1.7","webservice","数值","dependency","xsd","getresponsebodyasstream","soapaction","w3","releaseconnection","rpcserviceclient","stringrequestentity","字符串","11","字符","header","tostring","xsi","endpointreference","xml","defaulthttpmethodretryhandler","http","参数","setto","local","try","4","object"],"title":"POM依赖","title_tokens":["pom","依赖"]},{"location":"docs/digest/190606_1/#postman","text":"","text_tokens":[],"title":"PostMan调试","title_tokens":["调试","postman"]},{"location":"docs/digest/190606_1/#_2","text":"因为帐号密码是随便写的, 所以登录失败,权限不足 不知道是什么鬼... 贴上接口Response响应 <?xml version=\"1.0\" encoding=\"utf-8\"?> <soap:Envelope xmlns:soap= \"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd= \"http://www.w3.org/2001/XMLSchema\" > <soap:Header> <KwsSoapHeader xmlns= \"http://www.shijinet.com.cn/kunlun/kws/1.1/\" > <RetCode> 0000 </RetCode> <ErrReason> 权限不够 </ErrReason> </KwsSoapHeader> </soap:Header> <soap:Body> <AppLoginResponse xmlns= \"http://www.shijinet.com.cn/kunlun/kws/1.1/\" > <AppLoginResult> false </AppLoginResult> </AppLoginResponse> </soap:Body> </soap:Envelope> ​```","text_tokens":["是","errreason","?","1.0","xmlns","贴",">","apploginresponse","帐号","2001","cn","...","因为","response","不够","retcode","\"","encoding","xmlschema","的","登录","xmlsoap","0000","body","false","密码",",","不足","xsd","​","`","权限","utf","org","w3","8","www","-","kwssoapheader","知道","失败","kunlun","<","schemas","随便","=","header","com","xsi","1.1","写","鬼","xml","所以","http","soap","kws"," ","什么","/","不","响应","version","envelope",".","帐号密码","instance","shijinet","接口",":","apploginresult","上"],"title":"总结","title_tokens":["总结"]},{"location":"docs/log/firefox-addon/","text":"Firefox 临时加载扩展 ¶ 方法一 - 打包 zip -r ../titleUrl.xpi * 方法二 - about:debugging 加载 更多 - blog.csdn.net/freedomswings/article/details/81747886","text_tokens":["freedomswings","二","zip","blog","扩展","一","article","net","加载","..","firefox","多","about","xpi","csdn","打包","-","details","r","81747886","¶","debugging","*","titleurl"," ","/","更","方法",".","临时",":"],"title":"Firefox 临时加载扩展","title_tokens":["扩展"," ","加载","临时","firefox"]},{"location":"docs/log/firefox-addon/#firefox","text":"方法一 - 打包 zip -r ../titleUrl.xpi * 方法二 - about:debugging 加载 更多 - blog.csdn.net/freedomswings/article/details/81747886","text_tokens":["freedomswings","二","zip","blog","一","article","net","加载","..","多","about","xpi","csdn","打包","-","details","r","81747886","debugging","*","titleurl"," ","/","更","方法",".",":"],"title":"Firefox 临时加载扩展","title_tokens":["扩展"," ","加载","临时","firefox"]},{"location":"docs/log/fix-bugs/","text":"Fix bug ¶ 2020-08-28 ¶ VSCODE REMOTE SSH 的时候不能使用 windows 自带的 openssh，把环境变量改掉，可以直接用 git ssh","text_tokens":["直接","用","环境","不能","可以","的","bug","remote","把","改掉","08","28","fix","环境变","ssh","-","vscode","openssh","¶","，","变量","环境变量","git","自带","使用"," ","时候","2020","windows"],"title":"Fix bug","title_tokens":["fix","bug"," "]},{"location":"docs/log/fix-bugs/#fix-bug","text":"","text_tokens":[],"title":"Fix bug","title_tokens":["fix","bug"," "]},{"location":"docs/log/fix-bugs/#2020-08-28","text":"VSCODE REMOTE SSH 的时候不能使用 windows 自带的 openssh，把环境变量改掉，可以直接用 git ssh","text_tokens":["直接","用","环境","不能","可以","的","remote","把","改掉","环境变","ssh","vscode","openssh","，","变量","环境变量","git","自带","使用"," ","时候","windows"],"title":"2020-08-28","title_tokens":["-","2020","08","28"]},{"location":"docs/note/ISO-8601/","text":"[hackettyu'note] ISO 8601 ¶ REF: zh.wikipedia.org/wiki/ISO_8601#%E6%97%A5%E5%8E%86%E6%97%A5%E6%9C%9F%E8%A1%A8%E7%A4%BA%E6%B3%95 日期时间表示法 只使用数字为基本格式。使用冒号\":\"间隔开小时、分、秒的为扩展格式。小时、分和秒都用2位数表示。 对于当地时间15时27分46秒， 完全表示：152746或15:27:46 缺省小时的特定分和秒：-2746或-27:46 降低精度仅有小时和分：1528或15:28 缺省小时的特定分：-28 缺省日的特定小时：15 带有小数的当地时间的完全表示：152735.5或15:27:35.5 缺省小时的分，带有小数的秒：-2735.5或-27:35.5 午夜，一日的开始：完全表示为000000或00:00:00；仅有小时和分表示为0000或00:00 午夜，一日的终止：完全表示为240000或24:00:00；仅有小时和分表示为2400或24:00 如果时间在零时区，并恰好与协调世界时相同，那么（不加空格地）在时间最后加一个大写字母Z。Z是相对协调世界时时间0偏移的代号。如下午2点30分5秒表示为14:30:05Z或143005Z；只表示小时和分，为1430Z或14:30Z；只表示小时，则为14Z或14Z。 其他时区用实际时间加时差表示，当时的UTC+8时间表示为22:30:05+08:00或223005+0800，也可以简化成223005+08。 日期和时间的组合表示法 合并表示时，要在时间前面加一大写字母T，如要表示东八区时间2004年5月3日下午5点30分8秒，可以写成2004-05-03T17:30:08+08:00或20040503T173008+08 时间段表示法 如果要表示某一作为一段时间间隔，前面加一大写字母P，但时间段后都要加上相应的代表时间的大写字母。如在一年三个月五天六小时七分三十秒内，可以写成P1Y3M5DT6H7M30S。 时间间隔表示法 例如19850412/19860101，19850412/P6M 循环时间表示法 前面加上一大写字母R，格式为 R【循环次数】【/开始时间】/时间间隔【/结束时间】 如要从2004年5月6日北京时间下午1点起时间间隔半年零5天3小时循环，且循环3次，可以表示为R3/20040506T130000+08/P0Y6M5DT3H0M0S。 如以1年2个月为循环间隔，无限次循环，最后循环终止于2025年1月1日，可表示为R/P1Y2M/20250101","text_tokens":["下午","】","则","22","那么","240000","05z","0800","00","iso","wiki","某一","间隔","循环","zh","9c%","也","段时间","偏移","最后","28","000000","；","东八区","152746","org","天","20250101","缺省","北京","加一","为","e5%","[","9f%","时","¶","note","8601","开","相对","表示法","utc","8e%","日期","，","ref","0","年","20040503t173008","相同","月"," ","表示","大写字母","区","a1%","代表",".","27","七分","6","1","一段时间","五天","97%","次","是","p","半年","e6%","恰好","十秒","前面","2025","20040506t130000","\"","简化","223005","无限","特定","2735.5","终止","例如","。","如果","19850412","a8%","可","8","合并","格式","分","日","14","a5%","【","'","空格","位数","冒号","_","其他","但","加上","作为","三十秒","要","使用","/","2400","ba%","写字","t","从","小数","a4%","六小时","代号","扩展","次数","一","一日","八区","三十","可以","在","零","24","p1y2m","p0y6m5dt3h0m0s","的","内","时区","成","点起","08","三个","：","35.5","协调","组合","写成","]","和","-","19860101","降低","且","p1y3m5dt6h7m30s","3","hackettyu","点","86%","世界","六小","个","仅","152735.5","都","当时","后","15","秒","#%","当地","95","2746","+","e7%","地",":","零时","时间","一年","大写","或","字母","14z","用","1430z","r3","数字","加","5","、","午夜","0000","实际","e8%","时差","基本","并","开始","（","精度","时间段","与","小时","一段","p6m","完全","143005z","对于","如以","）","r","一个","30","b3%","1528","协调世界时","于","z","2004","只","有","03t17","带有","46","相应","结束","2","不","05","如要","wikipedia","30z","如"],"title":"[hackettyu'note] ISO 8601","title_tokens":["]"," ","[","'","note","8601","iso","hackettyu"]},{"location":"docs/note/ISO-8601/#hackettyunote-iso-8601","text":"REF: zh.wikipedia.org/wiki/ISO_8601#%E6%97%A5%E5%8E%86%E6%97%A5%E6%9C%9F%E8%A1%A8%E7%A4%BA%E6%B3%95 日期时间表示法 只使用数字为基本格式。使用冒号\":\"间隔开小时、分、秒的为扩展格式。小时、分和秒都用2位数表示。 对于当地时间15时27分46秒， 完全表示：152746或15:27:46 缺省小时的特定分和秒：-2746或-27:46 降低精度仅有小时和分：1528或15:28 缺省小时的特定分：-28 缺省日的特定小时：15 带有小数的当地时间的完全表示：152735.5或15:27:35.5 缺省小时的分，带有小数的秒：-2735.5或-27:35.5 午夜，一日的开始：完全表示为000000或00:00:00；仅有小时和分表示为0000或00:00 午夜，一日的终止：完全表示为240000或24:00:00；仅有小时和分表示为2400或24:00 如果时间在零时区，并恰好与协调世界时相同，那么（不加空格地）在时间最后加一个大写字母Z。Z是相对协调世界时时间0偏移的代号。如下午2点30分5秒表示为14:30:05Z或143005Z；只表示小时和分，为1430Z或14:30Z；只表示小时，则为14Z或14Z。 其他时区用实际时间加时差表示，当时的UTC+8时间表示为22:30:05+08:00或223005+0800，也可以简化成223005+08。 日期和时间的组合表示法 合并表示时，要在时间前面加一大写字母T，如要表示东八区时间2004年5月3日下午5点30分8秒，可以写成2004-05-03T17:30:08+08:00或20040503T173008+08 时间段表示法 如果要表示某一作为一段时间间隔，前面加一大写字母P，但时间段后都要加上相应的代表时间的大写字母。如在一年三个月五天六小时七分三十秒内，可以写成P1Y3M5DT6H7M30S。 时间间隔表示法 例如19850412/19860101，19850412/P6M 循环时间表示法 前面加上一大写字母R，格式为 R【循环次数】【/开始时间】/时间间隔【/结束时间】 如要从2004年5月6日北京时间下午1点起时间间隔半年零5天3小时循环，且循环3次，可以表示为R3/20040506T130000+08/P0Y6M5DT3H0M0S。 如以1年2个月为循环间隔，无限次循环，最后循环终止于2025年1月1日，可表示为R/P1Y2M/20250101","text_tokens":["下午","】","则","22","那么","240000","05z","0800","00","iso","wiki","某一","间隔","循环","zh","9c%","也","段时间","偏移","最后","28","000000","；","东八区","152746","org","天","20250101","缺省","北京","加一","为","e5%","9f%","时","开","8601","相对","表示法","utc","8e%","日期","，","ref","0","年","20040503t173008","相同","月"," ","表示","大写字母","区","a1%","代表",".","27","七分","6","1","一段时间","五天","97%","次","是","p","半年","e6%","恰好","十秒","前面","2025","20040506t130000","\"","简化","223005","无限","特定","2735.5","终止","例如","。","如果","19850412","a8%","可","8","合并","格式","分","日","14","a5%","【","空格","位数","冒号","_","其他","但","加上","作为","三十秒","要","使用","/","2400","ba%","写字","t","从","小数","a4%","六小时","代号","扩展","次数","一","一日","八区","三十","可以","在","零","24","p1y2m","p0y6m5dt3h0m0s","的","内","时区","成","点起","08","三个","：","35.5","协调","组合","写成","和","-","19860101","降低","且","p1y3m5dt6h7m30s","3","点","六小","86%","世界","个","仅","152735.5","都","当时","后","15","秒","#%","当地","95","2746","+","e7%","地",":","零时","时间","一年","大写","或","字母","14z","用","1430z","r3","数字","加","5","、","午夜","0000","实际","e8%","时差","基本","并","开始","（","精度","时间段","与","小时","一段","p6m","完全","143005z","对于","如以","）","r","一个","30","b3%","1528","协调世界时","于","z","2004","只","有","03t17","带有","46","相应","结束","2","不","05","如要","wikipedia","30z","如"],"title":"[hackettyu'note] ISO 8601","title_tokens":["]"," ","[","'","note","8601","iso","hackettyu"]},{"location":"docs/note/code-pushdown/","text":"[hackettyu'note] Code pusudown 准则 ¶ 利用SELECT COUNT直接在数据库层完成统计工作。这也是SAP推荐的做法，所谓Code pusudown准则，即能放到HANA数据库层面进行的操作，就尽量放进去，以充分利用HANA强大的计算能力。在数据库能够完成计算逻辑的前提下，尽量避免把计算逻辑放到Netweaver ABAP应用层去做。","text_tokens":["准则","直接","是","操作","hana","利用","计算能力","进行","能力","netweaver","下","尽量","在","数据","应用","分利","就","的","count","层","以","也","数据库","这","把","做","推荐","前提","应用层","。","放到","所谓","充分","sap","]","完成","尽量避免","code","即能","进去","[","层面","¶","'","note","放进","pusudown","hackettyu","，","避免","去","据库","统计","abap"," ","工作","充分利用","逻辑","做法","能够","计算","放进去","select","强大"],"title":"[hackettyu'note] Code pusudown 准则","title_tokens":["准则","]","code"," ","[","'","note","pusudown","hackettyu"]},{"location":"docs/note/code-pushdown/#hackettyunote-code-pusudown","text":"利用SELECT COUNT直接在数据库层完成统计工作。这也是SAP推荐的做法，所谓Code pusudown准则，即能放到HANA数据库层面进行的操作，就尽量放进去，以充分利用HANA强大的计算能力。在数据库能够完成计算逻辑的前提下，尽量避免把计算逻辑放到Netweaver ABAP应用层去做。","text_tokens":["准则","直接","是","操作","hana","利用","计算能力","进行","能力","netweaver","下","尽量","数据","在","应用","分利","就","的","count","层","以","也","数据库","这","把","做","推荐","前提","应用层","。","放到","所谓","充分","sap","完成","尽量避免","code","即能","进去","层面","放进","pusudown","去","，","避免","据库","统计","abap"," ","工作","充分利用","逻辑","做法","能够","计算","放进去","select","强大"],"title":"[hackettyu'note] Code pusudown 准则","title_tokens":["准则","]","code"," ","[","'","note","pusudown","hackettyu"]},{"location":"docs/note/code-smell/","text":"[hackettyu'note] 常见的代码异味 ¶ 代码重复: 相同或者相似的代码存在于一个以上的地方。 长方法: 一个非常长的方法、函数或者过程。 巨类: 一个非常庞大的类。 太多的参数: 函数或者过程的冗长的参数列表使得代码可读性和质量非常差。 特性依恋: 一个类过度的使用另一个类的方法。 亲密关系: 一个类依赖另一个类的实现细节。 拒绝继承: 子类以一种‘拒绝’的态度，覆盖基类中的方法，换句话说，子类不想继承父类中的方法，参考里氏替换原则。 冗余类 / 寄生虫: 一个功能太少的类。 人为的复杂: 在简单设计已经满足需求的时候，强迫使用极度复杂的设计模式。 超长标识符: 尤其，在软件工程中，应该毫无保留的使用命名规则来消除歧义。 超短标识符: 除非很明显，一个变量名应该反映它的功用。 过度使用字面值: 为提高可读性和避免编码错误，应该使用命名常量。此外，字面值可以且应该在可能的情况下，独立存放于资源文件或者脚本中，在软件部署- 到不同区域时，可以很方便的本地化。 Reference ¶ https://zh.m.wikipedia.org/wiki/%E4%BB%A3%E7%A0%81%E5%BC%82%E5%91%B3","text_tokens":["重复","庞大","特性","到","可读","换句话说","异味","以上","情况","存放","人为","函数","超长","提高","wiki","尤其","以","zh","里氏","长","模式","它","org","bb%","另","已经","为","非常","e4%","[","e5%","¶","时","note","‘","，","寄生虫","极度","标识","相同"," ","时候",".","继承","下","字","使得","不想","原则","区域","毫无","本地化","父类","a0%","依恋","巨类","差","变量名","替换","来","。","设计模式","%","过程","面值","毫无保留","无保留","态度","b3","部署","或者","'","标识符","应该","避免","使用","/","不同","亲密","方法","明显","方便","常见","保留","资源","功用","复杂","实现","功能","太多","独立","可以","在","覆盖","82%","命名","依赖","的","需求","可能","软件工程","规则","关系","bc%","质量","]","和","很","-","文件","且","代码","亲密关系","中","编码","hackettyu","变量","存在","基类","子类","强迫","e7%",":","反映","设计","冗余","列表","寄生","一种","此外","本地","reference","错误","’","https","太少","、","消除","换句","工程","过度","简单","歧义","脚本","81%","类","常量","a3%","一个","软件","91%","相似","于","换句话","地方","m","参考","满足","参数","可读性","拒绝","冗长","wikipedia","细节","除非","超短"],"title":"[hackettyu'note] 常见的代码异味","title_tokens":["的","]"," ","异味","[","'","note","常见","代码","hackettyu"]},{"location":"docs/note/code-smell/#hackettyunote","text":"代码重复: 相同或者相似的代码存在于一个以上的地方。 长方法: 一个非常长的方法、函数或者过程。 巨类: 一个非常庞大的类。 太多的参数: 函数或者过程的冗长的参数列表使得代码可读性和质量非常差。 特性依恋: 一个类过度的使用另一个类的方法。 亲密关系: 一个类依赖另一个类的实现细节。 拒绝继承: 子类以一种‘拒绝’的态度，覆盖基类中的方法，换句话说，子类不想继承父类中的方法，参考里氏替换原则。 冗余类 / 寄生虫: 一个功能太少的类。 人为的复杂: 在简单设计已经满足需求的时候，强迫使用极度复杂的设计模式。 超长标识符: 尤其，在软件工程中，应该毫无保留的使用命名规则来消除歧义。 超短标识符: 除非很明显，一个变量名应该反映它的功用。 过度使用字面值: 为提高可读性和避免编码错误，应该使用命名常量。此外，字面值可以且应该在可能的情况下，独立存放于资源文件或者脚本中，在软件部署- 到不同区域时，可以很方便的本地化。","text_tokens":["重复","庞大","特性","到","可读","换句话说","以上","情况","存放","人为","函数","超长","提高","尤其","以","里氏","长","模式","它","另","已经","为","非常","时","‘","，","寄生虫","极度","标识","相同"," ","时候","继承","下","字","使得","不想","原则","区域","毫无","本地化","父类","依恋","巨类","差","变量名","替换","来","。","设计模式","过程","面值","毫无保留","无保留","态度","部署","或者","标识符","应该","避免","使用","/","不同","亲密","方法","明显","方便","保留","资源","功用","复杂","实现","功能","太多","独立","可以","在","覆盖","命名","依赖","的","需求","可能","软件工程","规则","关系","质量","和","很","-","文件","且","代码","亲密关系","中","编码","变量","存在","基类","子类","强迫",":","反映","设计","冗余","列表","寄生","一种","此外","本地","错误","’","太少","、","消除","换句","工程","过度","简单","歧义","脚本","类","常量","一个","软件","相似","于","换句话","地方","参考","满足","参数","可读性","拒绝","冗长","细节","除非","超短"],"title":"[hackettyu'note] 常见的代码异味","title_tokens":["的","]"," ","异味","[","'","note","常见","代码","hackettyu"]},{"location":"docs/note/code-smell/#reference","text":"https://zh.m.wikipedia.org/wiki/%E4%BB%A3%E7%A0%81%E5%BC%82%E5%91%B3","text_tokens":["a0%","82%","https","wiki","zh","bc%","%","81%","org","bb%","b3","a3%","91%","e5%","e4%","m","/",".","wikipedia","e7%",":"],"title":"Reference","title_tokens":["reference"]},{"location":"docs/note/json-styleguide-note/","text":"[hackettyu'note] Json 风格指南笔记 ¶ REF: github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md JSON Example { \"apiVersion\" : \"2.0\" , \"data\" : { \"updated\" : \"2010-02-04T19:29:54.001Z\" , \"totalItems\" : 6741 , \"startIndex\" : 1 , \"itemsPerPage\" : 1 , \"items\" : [ { \"id\" : \"BGODurRfVv4\" , \"uploaded\" : \"2009-11-17T20:10:06.000Z\" , \"updated\" : \"2010-02-04T06:25:57.000Z\" , \"uploader\" : \"docchat\" , \"category\" : \"Animals\" , \"title\" : \"From service dog to SURFice dog\" , \"description\" : \"Surf dog Ricochets inspirational video ...\" , \"tags\" : [ \"Surf dog\" , \"dog surfing\" , \"dog\" , \"golden retriever\" , ], \"thumbnail\" : { \"default\" : \"http://i.ytimg.com/vi/BGODurRfVv4/default.jpg\" , \"hqDefault\" : \"http://i.ytimg.com/vi/BGODurRfVv4/hqdefault.jpg\" }, \"player\" : { \"default\" : \"http://www.youtube.com/watch?v=BGODurRfVv4&feature=youtube_gdata\" , \"mobile\" : \"http://m.youtube.com/details?v=BGODurRfVv4\" }, \"content\" : { \"1\" : \"rtsp://v5.cache6.c.youtube.com/CiILENy73wIaGQn-Vl-0uoNjBBMYDSANFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\" , \"5\" : \"http://www.youtube.com/v/BGODurRfVv4?f=videos&app=youtube_gdata\" , \"6\" : \"rtsp://v7.cache7.c.youtube.com/CiILENy73wIaGQn-Vl-0uoNjBBMYESARFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\" }, \"duration\" : 315 , \"rating\" : 4.96 , \"ratingCount\" : 2043 , \"viewCount\" : 1781691 , \"favoriteCount\" : 3363 , \"commentCount\" : 1007 , \"commentsAllowed\" : true } ] } }","text_tokens":["?","jsonstyleguide","4.96","category","1781691","id","04t19","rating","thumbnail",",","master","itemsperpage","0uonjbbmydsanfeggugz2awrlb3mm","favoritecount","www","youtube","[","f","¶","uploaded","note","startindex","指南","=","c","json","md","ref","jpg","&","57.000","0","updated"," ","笔记","02",".","1","6","description","}","surf","surfice","inspirational","video.3","6741","2.0","gdata","1007","v5","duration","\"","google","default","10","2043","commentsallowed","title","rtsp","data","details","{","ciileny73wiagqn","feature","'","_","com","tags","v","totalitems","uploader","/","github","0uonjbbmyesarfeggugz2awrlb3mm","v7","bgodurrfvv4","29","items","cache6","viewcount","风格","i","2009","service","apiversion","from","dog","commentcount","]","-","to","golden","videos","hackettyu","17t20","example","gp","blob",":","cache7","true","retriever","hqdefault","ricochets","25","315","docchat","video","...","ratingcount","2010","vl","5","player","surfing","content","watch","vi","ytimg","darcyliu","3363","11","app","z","06.000","styleguide","m","http","mobile","animals","04t06","54.001"],"title":"[hackettyu'note] Json 风格指南笔记","title_tokens":["风格","]"," ","笔记","[","'","note","指南","json","hackettyu"]},{"location":"docs/note/json-styleguide-note/#hackettyunote-json","text":"REF: github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md JSON Example { \"apiVersion\" : \"2.0\" , \"data\" : { \"updated\" : \"2010-02-04T19:29:54.001Z\" , \"totalItems\" : 6741 , \"startIndex\" : 1 , \"itemsPerPage\" : 1 , \"items\" : [ { \"id\" : \"BGODurRfVv4\" , \"uploaded\" : \"2009-11-17T20:10:06.000Z\" , \"updated\" : \"2010-02-04T06:25:57.000Z\" , \"uploader\" : \"docchat\" , \"category\" : \"Animals\" , \"title\" : \"From service dog to SURFice dog\" , \"description\" : \"Surf dog Ricochets inspirational video ...\" , \"tags\" : [ \"Surf dog\" , \"dog surfing\" , \"dog\" , \"golden retriever\" , ], \"thumbnail\" : { \"default\" : \"http://i.ytimg.com/vi/BGODurRfVv4/default.jpg\" , \"hqDefault\" : \"http://i.ytimg.com/vi/BGODurRfVv4/hqdefault.jpg\" }, \"player\" : { \"default\" : \"http://www.youtube.com/watch?v=BGODurRfVv4&feature=youtube_gdata\" , \"mobile\" : \"http://m.youtube.com/details?v=BGODurRfVv4\" }, \"content\" : { \"1\" : \"rtsp://v5.cache6.c.youtube.com/CiILENy73wIaGQn-Vl-0uoNjBBMYDSANFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\" , \"5\" : \"http://www.youtube.com/v/BGODurRfVv4?f=videos&app=youtube_gdata\" , \"6\" : \"rtsp://v7.cache7.c.youtube.com/CiILENy73wIaGQn-Vl-0uoNjBBMYESARFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\" }, \"duration\" : 315 , \"rating\" : 4.96 , \"ratingCount\" : 2043 , \"viewCount\" : 1781691 , \"favoriteCount\" : 3363 , \"commentCount\" : 1007 , \"commentsAllowed\" : true } ] } }","text_tokens":["?","jsonstyleguide","4.96","category","1781691","id","04t19","rating","thumbnail",",","master","itemsperpage","0uonjbbmydsanfeggugz2awrlb3mm","favoritecount","www","youtube","[","f","c","uploaded","startindex","=","json","md","ref","jpg","&","57.000","0","updated"," ","02",".","1","6","description","}","surf","surfice","inspirational","video.3","6741","2.0","gdata","1007","v5","duration","\"","google","default","10","2043","commentsallowed","title","rtsp","data","details","{","ciileny73wiagqn","feature","_","com","tags","v","totalitems","uploader","/","github","0uonjbbmyesarfeggugz2awrlb3mm","v7","bgodurrfvv4","29","items","cache6","viewcount","i","2009","service","apiversion","from","dog","commentcount","]","-","to","golden","videos","17t20","example","gp","blob",":","cache7","true","retriever","hqdefault","ricochets","25","315","docchat","video","...","ratingcount","2010","vl","5","player","surfing","content","watch","vi","ytimg","darcyliu","3363","11","app","z","06.000","styleguide","m","http","mobile","animals","04t06","54.001"],"title":"[hackettyu'note] Json 风格指南笔记","title_tokens":["风格","]"," ","笔记","[","'","note","指南","json","hackettyu"]},{"location":"docs/note/my-todoist/","text":"我的 Todoist 使用心得 ¶ some daily tasks name ¶ Daily meditation Learning Daily workout Inbox Zero Check out Sidebar Pending Tips ¶ 每个任务都分配项目，并且给每个项目分配不同的颜色，这样你就可以在 你的效率 里 Review 各个项目的完成占比 Reference ¶ https://superorganizers.substack.com/p/the-ceo-with-an-empty-calendar","text_tokens":["sidebar","the","p","心得","an","效率","比","给","可以","learning","tasks","在","reference","https","daily","我","的","分配","就","calendar","这样","ceo","workout","some","todoist","每个","并且","substack","你","superorganizers","-","完成","empty","任务","check","tips","¶","inbox","meditation","with","颜色","com","name","，","里","review","项目","zero","使用","都","各个"," ","占","/","不同","out",".","pending",":"],"title":"我的 Todoist 使用心得","title_tokens":["我","的","心得","使用"," ","todoist"]},{"location":"docs/note/my-todoist/#todoist","text":"","text_tokens":[],"title":"我的 Todoist 使用心得","title_tokens":["我","的","心得","使用"," ","todoist"]},{"location":"docs/note/my-todoist/#some-daily-tasks-name","text":"Daily meditation Learning Daily workout Inbox Zero Check out Sidebar Pending","text_tokens":["sidebar","inbox","zero","check"," ","out","workout","learning","meditation","pending","daily"],"title":"some daily tasks name","title_tokens":["name"," ","some","tasks","daily"]},{"location":"docs/note/my-todoist/#tips","text":"每个任务都分配项目，并且给每个项目分配不同的颜色，这样你就可以在 你的效率 里 Review 各个项目的完成占比","text_tokens":["效率","比","给","可以","在","分配","的","就","这样","每个","并且","你","完成","任务","颜色","里","，","review","项目","都","各个"," ","占","不同"],"title":"Tips","title_tokens":["tips"]},{"location":"docs/note/my-todoist/#reference","text":"https://superorganizers.substack.com/p/the-ceo-with-an-empty-calendar","text_tokens":["superorganizers","the","p","calendar","-","empty","an","https","substack","/","ceo",".","with","com",":"],"title":"Reference","title_tokens":["reference"]},{"location":"docs/note/ubuntu/","text":"UBUNTU ¶ 在Ubuntu中 可以设置环境变量有4个 优先级从高到底 /etc/profile:在登录时,操作系统定制用户环境时使用的第一个文件,此文件为系统的每个用户设置环境信息,用户第一次登录时,该文件被执行。 /etc/environment:在登录时操作系统使用的第二个文件,系统在读取你自己的profile前,设置环境文件的环变量。 ~/.bash_profile 在登录时用到的第三个文件是.profile文件,每个用户都可使用该文件输入专用于自己使用的shell信息,当用登录时,该 文件仅仅执行一次!默认情况下,他设置一些环境变游戏量,执行用户的.bashrc文件。/etc/bashrc为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取. ~/.bashrc:该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被取。","text_tokens":["bash","该","定制","环境","情况","每次","以及","第一","bashrc","用到",",","当","第二个","为","第三","¶","高","时","每","设置","环境变量","量"," ","被取","专用",".","下","是","一些","shell","第一个","。","每个","系统","可","优先","_","他","etc","使用","环","/","从","前","执行","可以","在","操作系统","第二","的","登录","~","三个","你","包含","文件","打开","中","profile","个","变量","!","environment","读取","都","用户","自己",":","ubuntu","操作","二个","此","用","第三个","仅仅","默认","环境变","运行","优先级","一个","第一次","到底","被","输入","游戏","于","有","一次","信息","新","4"],"title":"UBUNTU","title_tokens":["ubuntu"]},{"location":"docs/note/ubuntu/#ubuntu","text":"在Ubuntu中 可以设置环境变量有4个 优先级从高到底 /etc/profile:在登录时,操作系统定制用户环境时使用的第一个文件,此文件为系统的每个用户设置环境信息,用户第一次登录时,该文件被执行。 /etc/environment:在登录时操作系统使用的第二个文件,系统在读取你自己的profile前,设置环境文件的环变量。 ~/.bash_profile 在登录时用到的第三个文件是.profile文件,每个用户都可使用该文件输入专用于自己使用的shell信息,当用登录时,该 文件仅仅执行一次!默认情况下,他设置一些环境变游戏量,执行用户的.bashrc文件。/etc/bashrc为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取. ~/.bashrc:该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被取。","text_tokens":["bash","该","定制","环境","情况","每次","以及","第一","bashrc","用到",",","当","第二个","为","第三","时","高","每","设置","环境变量","量"," ","被取","专用",".","下","是","一些","shell","第一个","。","每个","系统","可","优先","_","他","etc","使用","环","/","从","前","执行","可以","在","操作系统","第二","的","登录","~","三个","你","包含","文件","打开","中","profile","个","变量","!","environment","读取","都","用户","自己",":","ubuntu","操作","二个","此","用","第三个","仅仅","默认","环境变","运行","优先级","一个","第一次","到底","被","输入","游戏","于","有","一次","信息","新","4"],"title":"UBUNTU","title_tokens":["ubuntu"]},{"location":"docs/snippets/emoji-snippets/","text":"[hackettyu'snippets] Emoji Snippets ¶ Emoji List ¶ Github 支持的 Emoji API api.github.com/emojis 预览地址: https://github.com/liguoqinjim/github_emoji/tree/master/github_all Unicode Emoji List unicode.org/emoji/charts/full-emoji-list.html Emoji cheatsheet www.webfx.com/tools/emoji-cheat-sheet/ Normals ¶ :astronaut: :cook: :crossed_fingers: Types ¶ Smileys & People : emojipedia.org/people/ Animals & Nature : emojipedia.org/nature/ Foor & Drink : emojipedia.org/food-drink/ Activity : emojipedia.org/activity/ Travel & Places : emojipedia.org/travel-places/ Objects : emojipedia.org/objects/ Symbols : emojipedia.org/symbols/ Flags : emojipedia.org/flags/","text_tokens":["支持","unicode","webfx","smileys","types","objects","emoji","liguoqinjim","nature","sheet","https","的","all","snippets","地址","foor","预览","emojis","emojipedia","travel","master","cook","tree","astronaut","org","tools","www","]","-","api","cheat","[","places","symbols","¶","'","html","_","com","hackettyu","full","food","&","activity","list","fingers","animals"," ","/","people","drink","crossed","normals",".","cheatsheet","flags","github","charts",":"],"title":"[hackettyu'snippets] Emoji Snippets","title_tokens":["snippets","]"," ","[","emoji","'","hackettyu"]},{"location":"docs/snippets/emoji-snippets/#hackettyusnippets-emoji-snippets","text":"","text_tokens":[],"title":"[hackettyu'snippets] Emoji Snippets","title_tokens":["snippets","]"," ","[","emoji","'","hackettyu"]},{"location":"docs/snippets/emoji-snippets/#emoji-list","text":"Github 支持的 Emoji API api.github.com/emojis 预览地址: https://github.com/liguoqinjim/github_emoji/tree/master/github_all Unicode Emoji List unicode.org/emoji/charts/full-emoji-list.html Emoji cheatsheet www.webfx.com/tools/emoji-cheat-sheet/","text_tokens":["支持","unicode","webfx","emoji","liguoqinjim","sheet","https","的","all","地址","预览","emojis","master","tree","org","tools","www","-","api","cheat","html","_","com","full","list"," ","/",".","cheatsheet","github","charts",":"],"title":"Emoji List","title_tokens":["list","emoji"," "]},{"location":"docs/snippets/emoji-snippets/#normals","text":":astronaut: :cook: :crossed_fingers:","text_tokens":["astronaut","fingers"," ","crossed","_",":","cook"],"title":"Normals","title_tokens":["normals"]},{"location":"docs/snippets/emoji-snippets/#types","text":"Smileys & People : emojipedia.org/people/ Animals & Nature : emojipedia.org/nature/ Foor & Drink : emojipedia.org/food-drink/ Activity : emojipedia.org/activity/ Travel & Places : emojipedia.org/travel-places/ Objects : emojipedia.org/objects/ Symbols : emojipedia.org/symbols/ Flags : emojipedia.org/flags/","text_tokens":["smileys","objects","nature","foor","emojipedia","travel","org","-","places","symbols","food","&","animals"," ","/","people","drink",".","activity","flags",":"],"title":"Types","title_tokens":["types"]},{"location":"docs/snippets/abap/abap-gui-shortcuts/","text":"[hackettyu'snippets] abap gui shortcuts ¶ Shortcut Description Ctrl + D Duplicate any line. Ctrl + / Jump to the \"command field\" where we enter t-codes. This comes really handy and saves a jump from keyboard to mouse and back to the keyboard Ctrl + J Convert to Proper case where the first letter of every word becomes a capital letter. This is pretty useful when writing comments Ctrl + I & Incremental search. This is a little improved 'Find' (Ctrl + F) function which searches as soon as you type. Useful for impatient people Ctrl + Shift + I Add shift to search backwards Ctrl + K Toggle between Upper case and Lower Case Ctrl + L All text lowercase Ctrl + U All text uppercase Ctrl + N Open a new Window in SAP Shift + F1 Execute Pretty Printer Ctrl + F2 Check Syntax Ctrl + F3 Activate Object Ctrl+F Search Ctrl+G Find next ) Ctrl+O Go to line Ctrl+L Small letters Ctrl+U Uppercase letters Ctrl+J Camel case letters Ctrl+K Switch between Upper and Lower Case Ctrl+H Find and Replace Ctrl+Shift+I Increment search Backward Ctrl+Shift+S Save Hard copy Ctrl+Shift+L/X Deletes whole line Ctrl+Shift+V Gives All Paste options Ctrl+Alt+T Swaps line with Upper case Tab & Shift tab Increase and Decrease Intend Ctrl + O Go to a particular line in the program Ctrl + Shift + S Save your program in Desktop in.abap format. Ctrl + <. & Ctrl + > , Comment and Un-comment selected lines Ctrl+Shift+L/X Deletes the whole line Ctrl + Space Display options to complete a command","text_tokens":["case","duplicate","options",">","un","your","little","all","increase","enter","for","this","whole",",","ctrl","becomes","field","j","shortcuts","really","text","word","execute","lines","[","f","next","¶","jump","with","searches","activate","improved","intend","&","line","when","d"," ","tab","any",".","u","letters","shift","description","impatient","space","lower","find","l","in","camel","copy",")","\"","keyboard","every","capital","(","function","type","is","backward","add","complete","where","pretty","sap","f2","hard","upper","writing","useful","'","o","replace","v","particular","paste","/","t","the","we","which","decrease","go","f1","mouse","n","handy","f3","open","program","snippets","alt","i","uppercase","backwards","as","soon","syntax","increment","selected","from","s","save","]","to","gui","-","check","and","back","<","small","display","you","hackettyu","k","new","x","a","desktop","+","window","printer","lowercase","switch","g","codes","proper","between","convert","format","incremental","letter","search","h","comment","first","toggle","shortcut","comes","comments","swaps","command","saves","of","abap","gives","people","deletes","object"],"title":"[hackettyu'snippets] abap gui shortcuts","title_tokens":["snippets","]","shortcuts","abap","gui"," ","[","'","hackettyu"]},{"location":"docs/snippets/abap/abap-gui-shortcuts/#hackettyusnippets-abap-gui-shortcuts","text":"Shortcut Description Ctrl + D Duplicate any line. Ctrl + / Jump to the \"command field\" where we enter t-codes. This comes really handy and saves a jump from keyboard to mouse and back to the keyboard Ctrl + J Convert to Proper case where the first letter of every word becomes a capital letter. This is pretty useful when writing comments Ctrl + I & Incremental search. This is a little improved 'Find' (Ctrl + F) function which searches as soon as you type. Useful for impatient people Ctrl + Shift + I Add shift to search backwards Ctrl + K Toggle between Upper case and Lower Case Ctrl + L All text lowercase Ctrl + U All text uppercase Ctrl + N Open a new Window in SAP Shift + F1 Execute Pretty Printer Ctrl + F2 Check Syntax Ctrl + F3 Activate Object Ctrl+F Search Ctrl+G Find next ) Ctrl+O Go to line Ctrl+L Small letters Ctrl+U Uppercase letters Ctrl+J Camel case letters Ctrl+K Switch between Upper and Lower Case Ctrl+H Find and Replace Ctrl+Shift+I Increment search Backward Ctrl+Shift+S Save Hard copy Ctrl+Shift+L/X Deletes whole line Ctrl+Shift+V Gives All Paste options Ctrl+Alt+T Swaps line with Upper case Tab & Shift tab Increase and Decrease Intend Ctrl + O Go to a particular line in the program Ctrl + Shift + S Save your program in Desktop in.abap format. Ctrl + <. & Ctrl + > , Comment and Un-comment selected lines Ctrl+Shift+L/X Deletes the whole line Ctrl + Space Display options to complete a command","text_tokens":["case","duplicate","options",">","un","your","little","all","increase","enter","for","this","whole",",","ctrl","becomes","field","j","really","text","word","execute","lines","f","next","jump","with","searches","activate","improved","intend","&","line","when","d"," ","tab","any",".","u","letters","shift","description","impatient","space","lower","find","l","in","camel","copy",")","\"","keyboard","every","capital","(","function","type","is","backward","add","complete","where","pretty","sap","f2","hard","upper","writing","useful","'","o","replace","v","particular","paste","/","t","the","we","which","decrease","go","f1","mouse","n","handy","f3","open","program","alt","i","uppercase","backwards","as","soon","syntax","increment","selected","from","s","save","to","-","check","and","back","<","small","display","you","k","new","x","a","desktop","+","window","printer","lowercase","switch","g","codes","proper","between","convert","format","incremental","letter","search","h","comment","first","toggle","shortcut","comes","comments","swaps","command","saves","of","abap","gives","people","deletes","object"],"title":"[hackettyu'snippets] abap gui shortcuts","title_tokens":["snippets","]","shortcuts","abap","gui"," ","[","'","hackettyu"]},{"location":"docs/snippets/others/cons-function/","text":"[hackettyu'snippets] case function ¶ function getStatus ( action ) { switch ( action ) { case \"ON\" : return \"1\" case \"OFF\" return \"0\" default : return \"\" } } // turn to this const STATUS = { \"ON\" : \"1\" , \"OFF\" : \"0\" , \"DEFAULT\" : \"\" } function getStatus ( action = STATUS . DEFAULT ) { return STATUS [ action ] }","text_tokens":["}","case","switch","return","turn","off",")","getstatus","\"","(","default","function","snippets","this","const",",","]","action","on","to","{","[","¶","'","=","hackettyu","0","status"," ","/","1",".",":"],"title":"[hackettyu'snippets] case function","title_tokens":["case","function","snippets","]"," ","[","'","hackettyu"]},{"location":"docs/snippets/others/cons-function/#hackettyusnippets-case-function","text":"function getStatus ( action ) { switch ( action ) { case \"ON\" : return \"1\" case \"OFF\" return \"0\" default : return \"\" } } // turn to this const STATUS = { \"ON\" : \"1\" , \"OFF\" : \"0\" , \"DEFAULT\" : \"\" } function getStatus ( action = STATUS . DEFAULT ) { return STATUS [ action ] }","text_tokens":["}","case","switch","return","turn","off",")","getstatus","\"","(","default","function","this","const",",","action","on","to","]","{","[","=","0","status"," ","/","1",".",":"],"title":"[hackettyu'snippets] case function","title_tokens":["case","function","snippets","]"," ","[","'","hackettyu"]},{"location":"docs/snippets/others/function-prefix-words/","text":"[hackettyu'snippets] function prefix words ¶ The check searches for methods with a boolean returning value and checks then, if the name starts with one of the following words: * is_ * has_ * are_ * try_ * can_ * have_ * starts_ * ends_ * must_ * should_ or if the name contains one of the following words: * exist * equal * contain","text_tokens":["the","returning","words","if","prefix","ends","boolean","one","can","function","snippets","checks","for","is","methods","have","exist",",","equal","following","]","contains","must","check","starts","are","should","and","[","¶","'","with","searches","value","*","_","hackettyu","name","or","contain","has","of","a"," ","then","try",":"],"title":"[hackettyu'snippets] function prefix words","title_tokens":["function","snippets","]","words"," ","prefix","[","'","hackettyu"]},{"location":"docs/snippets/others/function-prefix-words/#hackettyusnippets-function-prefix-words","text":"The check searches for methods with a boolean returning value and checks then, if the name starts with one of the following words: * is_ * has_ * are_ * try_ * can_ * have_ * starts_ * ends_ * must_ * should_ or if the name contains one of the following words: * exist * equal * contain","text_tokens":["the","returning","if","words","ends","boolean","one","can","checks","for","is","methods","have","exist",",","equal","following","contains","must","check","starts","are","should","and","with","searches","value","*","_","or","name","contain","has","of","a"," ","then","try",":"],"title":"[hackettyu'snippets] function prefix words","title_tokens":["function","snippets","]","words"," ","prefix","[","'","hackettyu"]},{"location":"docs/snippets/others/markdown/","text":"[hackettyu'snippets] markdown snippets ¶ KEYBOARD ¶ Press W to go up, and A to go down. If you can find the ESC , pressing that will fire missiles COLORS ¶ GitHub contribution graph colors: #C6E48B #7AC96F #249A3C #196127 DETAILS ¶ Having some problems firing up the laser. Click here to see terminal history + debug info 488 cd /opt/LLL/controller/laser/ 489 vi LLLSDLaserControl.c 490 make 491 make install 492 ./sanity_check 493 ./configure -o test.cfg 494 vi test.cfg 495 vi ~/last_will_and_testament.txt 496 cat /proc/meminfo 497 ps -a -x -u 498 kill -9 2207 499 kill 2208 500 ps -a -x -u 501 touch /opt/LLL/run/ok 502 LLLSDLaserControl -ok1 ## CENTER IMAGE This is some centered text. ## SUB Fig 1: Megatocat into action View more octocats on the [Octodex](https://octodex.github.com/)! ## REFRENCE - [2020-04-09-github-protips-tips-tricks-hacks-and-secrets-from-lee-reilly](https://github.blog/2020-04-09-github-protips-tips-tricks-hacks-and-secrets-from-lee-reilly/)","text_tokens":["will","info","fig","controller","sub","see","into","w","sanity","octodex","cat","lee","run","make","this",",","text","octocats","[","¶","esc","click","#","c","centered","contribution","501"," ","2020",".","499","1","u","here","hacks","down","find","colors","7ac96f","more","firing","494","2207",")","keyboard","(","install","is","fire","opt","496","refrence","test","490","details","graph","touch","protips","image","'","reilly","center","_","kill","com","o","489","492","configure","/","github","up","the","go","blog","cd","if","missiles","can","secrets","snippets","~","488","tricks","ps","09","from","]","action","to","-","meminfo","on","check","and","491","you","hackettyu","x","!","a","lll","view","04","+","that","ok",":","2208","lllsdlasercontrol","196127","500","502","##","markdown","history","https","493","having","proc","cfg","testament","ok1","some","laser","9","txt","vi","495","497","megatocat","problems","tips","pressing","249a3c","c6e48b","last","debug","terminal","press","498"],"title":"[hackettyu'snippets] markdown snippets","title_tokens":["snippets","]"," ","[","markdown","'","hackettyu"]},{"location":"docs/snippets/others/markdown/#hackettyusnippets-markdown-snippets","text":"","text_tokens":[],"title":"[hackettyu'snippets] markdown snippets","title_tokens":["snippets","]"," ","[","markdown","'","hackettyu"]},{"location":"docs/snippets/others/markdown/#keyboard","text":"Press W to go up, and A to go down. If you can find the ESC , pressing that will fire missiles","text_tokens":["will","the","go","down","find","w","if","missiles","can","press","fire",",","to","and","esc","pressing","you","a"," ",".","that","up"],"title":"KEYBOARD","title_tokens":["keyboard"]},{"location":"docs/snippets/others/markdown/#colors","text":"GitHub contribution graph colors: #C6E48B #7AC96F #249A3C #196127","text_tokens":["c6e48b","196127","graph","colors"," ","#","7ac96f","github","249a3c",":","contribution"],"title":"COLORS","title_tokens":["colors"]},{"location":"docs/snippets/others/markdown/#details","text":"Having some problems firing up the laser. Click here to see terminal history + debug info 488 cd /opt/LLL/controller/laser/ 489 vi LLLSDLaserControl.c 490 make 491 make install 492 ./sanity_check 493 ./configure -o test.cfg 494 vi test.cfg 495 vi ~/last_will_and_testament.txt 496 cat /proc/meminfo 497 ps -a -x -u 498 kill -9 2207 499 kill 2208 500 ps -a -x -u 501 touch /opt/LLL/run/ok 502 LLLSDLaserControl -ok1 ## CENTER IMAGE This is some centered text. ## SUB Fig 1: Megatocat into action View more octocats on the [Octodex](https://octodex.github.com/)! ## REFRENCE - [2020-04-09-github-protips-tips-tricks-hacks-and-secrets-from-lee-reilly](https://github.blog/2020-04-09-github-protips-tips-tricks-hacks-and-secrets-from-lee-reilly/)","text_tokens":["will","info","fig","controller","sub","see","into","sanity","octodex","cat","lee","run","make","this","text","octocats","[","c","click","centered","501"," ","2020",".","499","1","u","here","hacks","more","firing","494","2207",")","(","install","is","opt","496","refrence","test","490","touch","protips","image","reilly","center","_","kill","com","o","489","492","configure","/","github","up","the","blog","cd","secrets","~","488","tricks","ps","09","from","action","on","to","-","meminfo","]","check","and","491","x","!","a","lll","view","04","+","ok","2208",":","lllsdlasercontrol","500","502","##","history","https","493","having","proc","cfg","testament","ok1","some","laser","9","txt","vi","495","497","megatocat","problems","tips","last","debug","terminal","498"],"title":"DETAILS","title_tokens":["details"]},{"location":"docs/snippets/others/regex/","text":"[hackettyu'snippets] Regex ¶ 末尾空格 /(^\\s*)|(\\s*$)","text_tokens":["$","|",")","(","snippets","末尾","^","s","]","\\","[","¶","'","空格","regex","*","hackettyu"," ","/"],"title":"[hackettyu'snippets] Regex","title_tokens":["snippets","]"," ","[","'","regex","hackettyu"]},{"location":"docs/snippets/others/regex/#hackettyusnippets-regex","text":"末尾空格 /(^\\s*)|(\\s*$)","text_tokens":["s","\\","末尾",")"," ","/","^","$","|","空格","*","("],"title":"[hackettyu'snippets] Regex","title_tokens":["snippets","]"," ","[","'","regex","hackettyu"]},{"location":"docs/snippets/others/test-if/","text":"[hackettyu'snippets] and operator 的妙用 ¶ 例如下面两种写法是等价的 if 1 != 2 and 2 != 1 and 1 == 1 : print ( 1 ) if 1 != 2 : print ( 1 ) elif 2 != 1 : print ( 1 ) elif 1 == 1 : print ( 1 ) elif 1 != 2 and 2 != 1 print ( 1 ) elif 1 != 2 and 2 != 1 and 1 == 1 : print ( 1 )","text_tokens":["是","elif","写法","if","operator",")","(","的","snippets","例如","妙用","等价","]","and","[","两种","¶","'","=","hackettyu","!"," ","下面","2","print","1",":"],"title":"[hackettyu'snippets] and operator 的妙用","title_tokens":["的","snippets","]"," ","妙用","and","[","operator","'","hackettyu"]},{"location":"docs/snippets/others/test-if/#hackettyusnippets-and-operator","text":"例如下面两种写法是等价的 if 1 != 2 and 2 != 1 and 1 == 1 : print ( 1 ) if 1 != 2 : print ( 1 ) elif 2 != 1 : print ( 1 ) elif 1 == 1 : print ( 1 ) elif 1 != 2 and 2 != 1 print ( 1 ) elif 1 != 2 and 2 != 1 and 1 == 1 : print ( 1 )","text_tokens":["是","elif","写法","if",")","(","的","例如","等价","and","两种","=","!"," ","下面","2","print","1",":"],"title":"[hackettyu'snippets] and operator 的妙用","title_tokens":["的","snippets","]"," ","妙用","and","[","operator","'","hackettyu"]},{"location":"docs/snippets/python/pytest/","text":"[hackettyu'snippets] Pytest snippets ¶ # List of snippets # praises with pytest . raises ( Exception ): pass # fixture @pytest . fixture def name ( request ): pass # mark @pytest . mark # parametrize @pytest . mark . parametrize ( 'foo' , [ 'bar' ]) a == assert 1 == 1 # afalse assert False is False # atrue assert True is True # a> assert 2 > 1 # a>= assert 1 >= 1 # ain assert 'a' in [ 'a' ] # anotin assert 1 not in [ 2 ] # ais assert 1 is 1 # aisnot assert 'a' is not 1 # a< assert 1 < 2 # a<= assert 1 <= 1 # a!= assert 1 != 2 pytest.ini [pytest] log_cli = 1 log_cli_level = INFO log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s) log_cli_date_format = %Y-%m-%d %H:%M:%S markers =","text_tokens":["info","def","afalse",">","in","message","ain",")","request","true","(","fixture","levelname","snippets","parametrize","pytest","markers","foo","is","ais","format","false","exception",",","@","aisnot","%","ini","asctime","h","s","anotin","]","8s","praises","-%","[","raises","level","¶","'","<","with","#","=","log","_","hackettyu","name","m","of","bar","!","a","filename","list","d"," ","mark","assert","2","cli","not",".","1","atrue","lineno","date","y",":","pass"],"title":"[hackettyu'snippets] Pytest snippets","title_tokens":["snippets","]","pytest"," ","[","'","hackettyu"]},{"location":"docs/snippets/python/pytest/#hackettyusnippets-pytest-snippets","text":"# List of snippets # praises with pytest . raises ( Exception ): pass # fixture @pytest . fixture def name ( request ): pass # mark @pytest . mark # parametrize @pytest . mark . parametrize ( 'foo' , [ 'bar' ]) a == assert 1 == 1 # afalse assert False is False # atrue assert True is True # a> assert 2 > 1 # a>= assert 1 >= 1 # ain assert 'a' in [ 'a' ] # anotin assert 1 not in [ 2 ] # ais assert 1 is 1 # aisnot assert 'a' is not 1 # a< assert 1 < 2 # a<= assert 1 <= 1 # a!= assert 1 != 2 pytest.ini [pytest] log_cli = 1 log_cli_level = INFO log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s) log_cli_date_format = %Y-%m-%d %H:%M:%S markers =","text_tokens":["info","def","afalse",">","in","message","ain",")","request","true","(","fixture","levelname","snippets","parametrize","pytest","markers","foo","is","ais","format","false","exception",",","@","aisnot","%","ini","asctime","h","s","anotin","]","8s","praises","-%","[","raises","level","'","<","with","#","=","log","_","name","m","of","bar","!","a","filename","list","d"," ","mark","assert","2","cli","not",".","1","atrue","lineno","date","y",":","pass"],"title":"[hackettyu'snippets] Pytest snippets","title_tokens":["snippets","]","pytest"," ","[","'","hackettyu"]},{"location":"docs/snippets/python/python-builder/","text":"[hackettyu'snippets] Python Builder ¶ from abc import ABC from abc import ABCMeta , abstractmethod class TestAbstract ( ABC ): @abstractmethod def add ( self , value ): pass @abstractmethod def init ( self ): pass @abstractmethod # @init.setter def set ( self , value ): pass class Test ( TestAbstract ): def __init__ ( self ): self . test = [] def add ( self , value ): self . test . append ( value ) return self def init ( self ): return self def set ( self , value ): self . test = {} return self test = Test () test . add ( 1 ) . add ( 2 ) print ( test . test [ 0 ], test . test [ 1 ])","text_tokens":["}","def","return","__","python","import",")","(","abc","snippets","class","init","add",",","abstractmethod","@","test","from","setter","self","]","set","append","{","[","¶","'","#","=","value","hackettyu","0","builder","abcmeta"," ","testabstract","2","print",".","1",":","pass"],"title":"[hackettyu'snippets] Python Builder","title_tokens":["snippets","]","builder"," ","[","python","'","hackettyu"]},{"location":"docs/snippets/python/python-builder/#hackettyusnippets-python-builder","text":"from abc import ABC from abc import ABCMeta , abstractmethod class TestAbstract ( ABC ): @abstractmethod def add ( self , value ): pass @abstractmethod def init ( self ): pass @abstractmethod # @init.setter def set ( self , value ): pass class Test ( TestAbstract ): def __init__ ( self ): self . test = [] def add ( self , value ): self . test . append ( value ) return self def init ( self ): return self def set ( self , value ): self . test = {} return self test = Test () test . add ( 1 ) . add ( 2 ) print ( test . test [ 0 ], test . test [ 1 ])","text_tokens":["}","def","return","__","import",")","(","abc","class","init","add",",","@","abstractmethod","test","from","setter","self","]","set","append","{","[","#","=","value","0","abcmeta"," ","testabstract","2","print",".","1",":","pass"],"title":"[hackettyu'snippets] Python Builder","title_tokens":["snippets","]","builder"," ","[","python","'","hackettyu"]},{"location":"docs/snippets/python/python-decorator/","text":"[hackettyu'snippets] Python decorator ¶ demo import functools def log ( func ): @functools . wraps ( func ) def wrapper ( * args , ** kwargs ): print ( 'call %s ():' % func . __name__ ) print ( 'args = {} ' . format ( * args )) return func ( * args , ** kwargs ) return wrapper # call @log def test ( p ): print ( test . __name__ + \" param: \" + p ) test ( \"I'm a param\" ) add a paramater import functools def log_with_param ( text ): def decorator ( func ): @functools . wraps ( func ) def wrapper ( * args , ** kwargs ): print ( 'call %s ():' % func . __name__ ) print ( 'args = {} ' . format ( * args )) print ( 'log_param = {} ' . format ( text )) return func ( * args , ** kwargs ) return wrapper return decorator @log_with_param ( \"param\" ) def test_with_param ( p ): print ( test_with_param . __name__ ) decorator = log_with_param ( \"param\" ) wrapper = decorator ( test_with_param )","text_tokens":["}","p","def","return","__","python","paramater","import",")","\"","decorator","(","snippets","call","format","i","add","args",",","@","%","test","wraps","s","+","]","text","{","[","¶","'","kwargs","#","=","*","_","param","with","hackettyu","name","m","func","a","functools"," ","wrapper","print",".","log",":","demo"],"title":"[hackettyu'snippets] Python decorator","title_tokens":["snippets","]"," ","[","python","'","decorator","hackettyu"]},{"location":"docs/snippets/python/python-decorator/#hackettyusnippets-python-decorator","text":"demo import functools def log ( func ): @functools . wraps ( func ) def wrapper ( * args , ** kwargs ): print ( 'call %s ():' % func . __name__ ) print ( 'args = {} ' . format ( * args )) return func ( * args , ** kwargs ) return wrapper # call @log def test ( p ): print ( test . __name__ + \" param: \" + p ) test ( \"I'm a param\" ) add a paramater import functools def log_with_param ( text ): def decorator ( func ): @functools . wraps ( func ) def wrapper ( * args , ** kwargs ): print ( 'call %s ():' % func . __name__ ) print ( 'args = {} ' . format ( * args )) print ( 'log_param = {} ' . format ( text )) return func ( * args , ** kwargs ) return wrapper return decorator @log_with_param ( \"param\" ) def test_with_param ( p ): print ( test_with_param . __name__ ) decorator = log_with_param ( \"param\" ) wrapper = decorator ( test_with_param )","text_tokens":["}","p","def","return","__","paramater","import",")","\"","decorator","(","call","format","i","add","args",",","@","%","test","wraps","s","+","text","{","kwargs","'","#","=","*","_","param","with","name","m","func","a","functools"," ","wrapper","print",".","log",":","demo"],"title":"[hackettyu'snippets] Python decorator","title_tokens":["snippets","]"," ","[","python","'","decorator","hackettyu"]},{"location":"docs/snippets/python/python-http-request-soap-xml/","text":"[hackettyu'snippets] Python http request soap xml ¶ import requests import xmltodict import xml import json import logging logger = logging.getLogger(__name__) def request() -> dict: domian = \"https://example.com/\" uri = \"soap/xml/foo\" url = f\"{domian}{uri}\" payload = \"\"\"<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\"> <soap-env:Header> </soap-env:Header> <soap-env:Body> </soap-env:Body> </soap-env:Envelope> \"\"\" headers = { \"Content-Type\": \"application/xml;charset=utf-8\", \"Authorization\": \"Basic {{base64.encode(username:password)}}\" } response = requests.request( \"POST\", url, headers=headers, data=payload.encode(\"utf-8\")) response_to_dict = {} try: response_to_dict = dict(xmltodict.parse(response.text.encode(\"utf-8\"))) logger.info(json.dumps(response_to_dict, indent=4, sort_keys=True)) output = response_to_dict.get(\"soapenv:Envelope\")[\"Body\"] logger.warning(output) except xml.parsers.expat.ExpatError as parser_error: logger.error(parser_error.code) return response_to_dict","text_tokens":["info","getlogger",">","import","keys","dumps","body","expaterror","indent",",","utf","username","url","org","logging","text","parsers","get","[","f","¶","env","=","json"," ","envelope",".","domian","sort","}","def","authorization","__","base64","response",")","\"","(","type","foo","parser","requests","xmltodict","logger","output","8","data","{","code","'","schemas","headers","_","com","error","name","/","encode",";","charset","warning","payload","snippets","basic","xmlsoap","password","expat","as","]","-","to","<","soapenv","hackettyu","soap","example","uri","post",":","dict","true","xmlns","return","python","request","https","content","application","except","header","parse","xml","http","try","4"],"title":"[hackettyu'snippets] Python http request soap xml","title_tokens":["xml","snippets","]","http","soap"," ","[","python","'","request","hackettyu"]},{"location":"docs/snippets/python/python-http-request-soap-xml/#hackettyusnippets-python-http-request-soap-xml","text":"import requests import xmltodict import xml import json import logging logger = logging.getLogger(__name__) def request() -> dict: domian = \"https://example.com/\" uri = \"soap/xml/foo\" url = f\"{domian}{uri}\" payload = \"\"\"<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\"> <soap-env:Header> </soap-env:Header> <soap-env:Body> </soap-env:Body> </soap-env:Envelope> \"\"\" headers = { \"Content-Type\": \"application/xml;charset=utf-8\", \"Authorization\": \"Basic {{base64.encode(username:password)}}\" } response = requests.request( \"POST\", url, headers=headers, data=payload.encode(\"utf-8\")) response_to_dict = {} try: response_to_dict = dict(xmltodict.parse(response.text.encode(\"utf-8\"))) logger.info(json.dumps(response_to_dict, indent=4, sort_keys=True)) output = response_to_dict.get(\"soapenv:Envelope\")[\"Body\"] logger.warning(output) except xml.parsers.expat.ExpatError as parser_error: logger.error(parser_error.code) return response_to_dict","text_tokens":["info","getlogger",">","import","keys","dumps","body","expaterror","indent",",","utf","username","url","org","logging","text","parsers","get","[","f","env","=","json"," ","envelope",".","domian","sort","}","def","authorization","__","base64","response",")","\"","(","type","foo","parser","requests","xmltodict","logger","output","8","data","{","code","schemas","headers","_","com","error","name","/","encode",";","charset","warning","payload","basic","xmlsoap","password","expat","as","]","-","to","<","soapenv","example","soap","uri","post","true",":","dict","xmlns","return","request","https","content","application","except","header","parse","xml","http","try","4"],"title":"[hackettyu'snippets] Python http request soap xml","title_tokens":["xml","snippets","]","http","soap"," ","[","python","'","request","hackettyu"]},{"location":"docs/snippets/python/python-logging/","text":"[hackettyu'snippets] Python logging ¶ import logging import logging.handlers import sys import os import time import datetime __location__ = os . path . realpath ( os . path . join ( os . getcwd (), os . path . dirname ( __file__ ))) logFolder = os . path . join ( __location__ , 'logs' ) if not os . path . exists ( logFolder ): os . makedirs ( logFolder ) logFileName = os . path . join ( logFolder , datetime . datetime . now () . strftime ( '%Y%m %d %H%M.log' )) log = logging . getLogger ( logFileName ) log . setLevel ( logging . DEBUG ) fileHandler = logging . handlers . TimedRotatingFileHandler ( logFileName , 'D' , 1 , 30 ) fileHandler . suffix = \"%Y%m %d %H%M.log\" formatter = logging . Formatter ( ' %(asctime)s - %(module)s . %(funcName)s : %(lineno)d - %(levelname)s - %(message)s ' ) fileHandler . setFormatter ( formatter ) log . addHandler ( fileHandler ) handler = logging . StreamHandler ( sys . stdout ) handler . setLevel ( logging . DEBUG ) handler . setFormatter ( formatter ) log . addHandler ( handler ) while True : log . debug ( \"debug debug\" ) log . info ( \"hello\" ) log . warning ( \"warn info\" ) log . error ( \"error\" ) time . sleep ( 1 )","text_tokens":["sleep","location","info","file","funcname","getlogger","__","if","warning","formatter","python","message","h%","import","setformatter",")","\"","true","module","os","(","exists","handlers","getcwd","levelname","snippets","handler","makedirs","now","logs","addhandler","time","streamhandler",",","hello","%","asctime",":","s","lineno","logfolder","warn","]","logging","suffix","setlevel","filehandler","-","stdout","while","join","dirname","[","30","¶","'","=","error","hackettyu","timedrotatingfilehandler","m","strftime","logfilename","debug","sys"," ","datetime","d","not",".","path","log","1","y%","realpath"],"title":"[hackettyu'snippets] Python logging","title_tokens":["snippets","]","logging"," ","[","python","'","hackettyu"]},{"location":"docs/snippets/python/python-logging/#hackettyusnippets-python-logging","text":"import logging import logging.handlers import sys import os import time import datetime __location__ = os . path . realpath ( os . path . join ( os . getcwd (), os . path . dirname ( __file__ ))) logFolder = os . path . join ( __location__ , 'logs' ) if not os . path . exists ( logFolder ): os . makedirs ( logFolder ) logFileName = os . path . join ( logFolder , datetime . datetime . now () . strftime ( '%Y%m %d %H%M.log' )) log = logging . getLogger ( logFileName ) log . setLevel ( logging . DEBUG ) fileHandler = logging . handlers . TimedRotatingFileHandler ( logFileName , 'D' , 1 , 30 ) fileHandler . suffix = \"%Y%m %d %H%M.log\" formatter = logging . Formatter ( ' %(asctime)s - %(module)s . %(funcName)s : %(lineno)d - %(levelname)s - %(message)s ' ) fileHandler . setFormatter ( formatter ) log . addHandler ( fileHandler ) handler = logging . StreamHandler ( sys . stdout ) handler . setLevel ( logging . DEBUG ) handler . setFormatter ( formatter ) log . addHandler ( handler ) while True : log . debug ( \"debug debug\" ) log . info ( \"hello\" ) log . warning ( \"warn info\" ) log . error ( \"error\" ) time . sleep ( 1 )","text_tokens":["sleep","location","info","file","funcname","getlogger","__","if","warning","formatter","message","h%","import","setformatter",")","\"","true","module","(","os","exists","handlers","getcwd","levelname","handler","makedirs","now","logs","addhandler","time","streamhandler",",","hello","%","asctime",":","s","lineno","logfolder","warn","while","logging","suffix","setlevel","filehandler","-","stdout","join","dirname","30","'","=","error","timedrotatingfilehandler","m","strftime","logfilename","debug","sys"," ","datetime","d","not",".","path","log","1","y%","realpath"],"title":"[hackettyu'snippets] Python logging","title_tokens":["snippets","]","logging"," ","[","python","'","hackettyu"]},{"location":"docs/snippets/python/python-mock/","text":"[hackettyu'snippets] Python Mock ¶ from unittest.mock import MagicMock","text_tokens":["snippets","]","mock"," ","[","python","unittest","¶","'",".","import","from","magicmock","hackettyu"],"title":"[hackettyu'snippets] Python Mock","title_tokens":["snippets","]","mock"," ","[","python","'","hackettyu"]},{"location":"docs/snippets/python/python-mock/#hackettyusnippets-python-mock","text":"from unittest.mock import MagicMock","text_tokens":["mock"," ","unittest","magicmock",".","import","from"],"title":"[hackettyu'snippets] Python Mock","title_tokens":["snippets","]","mock"," ","[","python","'","hackettyu"]},{"location":"docs/template/css/focus-cursor-move/","text":"[hackettyu'snippets] CSS光标下划线跟随效果 ¶ ul { display : flex ; position : absolute ; width : 800 px ; top : 50 % ; left : 50 % ; transform : translate ( -50 % , -50 % ); } li { position : relative ; padding : 20 px ; font-size : 24 px ; color : #000 ; line-height : 1 ; transition : 0.2 s all linear ; cursor : pointer ; } li :: before { content : \"\" ; position : absolute ; top : 0 ; left : 100 % ; width : 0 ; height : 100 % ; border-bottom : 2 px solid #000 ; transition : 0.2 s all linear ; } li : hover :: before { width : 100 % ; top : 0 ; left : 0 ; transition-delay : 0.1 s ; border-bottom-color : #000 ; z-index : -1 ; } li : hover ~ li :: before { left : 0 ; } li : active { background : #000 ; color : #fff ; }","text_tokens":["800","}","bottom","cursor",";","background","left","flex","size","css","transform",")","24","width","px","(","\"","效果","solid","fff","all","snippets","20","50","color","content","~","hover","border",",","%","linear","relative","s","划线","]","跟随","-","下划线","{","font","height","ul","top","active","[","光标","'","¶","display","下划","li","#","before","index","hackettyu","z","0","position","pointer","absolute","line","0.2"," ","100","2","0.1","1","000","padding","transition","delay",":","translate"],"title":"[hackettyu'snippets] CSS光标下划线跟随效果","title_tokens":["划线","效果","snippets","]","跟随","下划线"," ","[","css","'","光标","下划","hackettyu"]},{"location":"docs/template/css/focus-cursor-move/#hackettyusnippets-css","text":"ul { display : flex ; position : absolute ; width : 800 px ; top : 50 % ; left : 50 % ; transform : translate ( -50 % , -50 % ); } li { position : relative ; padding : 20 px ; font-size : 24 px ; color : #000 ; line-height : 1 ; transition : 0.2 s all linear ; cursor : pointer ; } li :: before { content : \"\" ; position : absolute ; top : 0 ; left : 100 % ; width : 0 ; height : 100 % ; border-bottom : 2 px solid #000 ; transition : 0.2 s all linear ; } li : hover :: before { width : 100 % ; top : 0 ; left : 0 ; transition-delay : 0.1 s ; border-bottom-color : #000 ; z-index : -1 ; } li : hover ~ li :: before { left : 0 ; } li : active { background : #000 ; color : #fff ; }","text_tokens":["800","}","bottom","cursor",";","background","left","flex","size","transform",")","24","px","width","(","\"","solid","fff","all","20","50","color","content","~","hover","border",",","%","linear","relative","s","-","{","font","height","ul","top","active","display","#","li","index","before","z","0","position","pointer","absolute","line","0.2"," ","100","2","0.1","1","000","padding","transition","delay",":","translate"],"title":"[hackettyu'snippets] CSS光标下划线跟随效果","title_tokens":["划线","效果","snippets","]","跟随","下划线"," ","[","css","'","光标","下划","hackettyu"]},{"location":"docs/template/javascript/fibonacci/","text":"[hackettyu'snippets] 菲波那切数列 ¶ const fibonacci = n => Array ( n ). fill ( 0 ). reduce (( acc , val , i ) => acc . concat ( i > 1 ? acc [ i - 1 ] + acc [ i - 2 ] : i ), []); // fibonacci(5) -> [0,1,1,2,3]","text_tokens":["?",";","n",">","acc","concat","数列",")","(","那切","5","snippets","i","const","array","reduce",",","]","菲波","-","[","¶","fibonacci","'","=","3","fill","hackettyu","0","val"," ","/","2",".","1","+",":"],"title":"[hackettyu'snippets] 菲波那切数列","title_tokens":["那切","snippets","]","菲波"," ","数列","[","'","hackettyu"]},{"location":"docs/template/javascript/fibonacci/#hackettyusnippets","text":"const fibonacci = n => Array ( n ). fill ( 0 ). reduce (( acc , val , i ) => acc . concat ( i > 1 ? acc [ i - 1 ] + acc [ i - 2 ] : i ), []); // fibonacci(5) -> [0,1,1,2,3]","text_tokens":["?",";","n",">","acc","concat",")","(","5","i","const","array","reduce",",","]","-","[","fibonacci","=","3","fill","0","val"," ","/","2",".","1","+",":"],"title":"[hackettyu'snippets] 菲波那切数列","title_tokens":["那切","snippets","]","菲波"," ","数列","[","'","hackettyu"]},{"location":"docs/template/javascript/jquery/","text":"[hackettyu'snippets] jquery ¶ 原生javascript方法： var a = document . getElementById ( \"dom\" ); del_space ( a ); //清理空格 var b = a . childNodes ; //获取a的全部子节点； var c = a . parentNode ; //获取a的父节点； var d = a . nextSibling ; //获取a的下一个兄弟节点 var e = a . previousSibling ; //获取a的上一个兄弟节点 var f = a . firstChild ; //获取a的第一个子节点 var g = a . lastChild ; //获取a的最后一个子节点 jQuery方法： jQuery . parent ( expr ) //找父亲节点，可以传入expr进行过滤，比如$(\"span\").parent()或者$(\"span\").parent(\".class\") jQuery . parents ( expr ) //类似于jQuery.parents(expr),但是是查找所有祖先元素，不限于父元素 jQuery . children ( expr ) //返回所有子节点，这个方法只会返回直接的孩子节点，不会返回所有的子孙节点 jQuery . contents () //返回下面的所有内容，包括节点和文本。这个方法和children()的区别就在于，包括空白文本，也会被作为一个jQuery对象返回，children()则只会返回节点 jQuery . prev () //返回上一个兄弟节点，不是所有的兄弟节点 jQuery . prevAll () //返回所有之前的兄弟节点 jQuery . next () //返回下一个兄弟节点，不是所有的兄弟节点 jQuery . nextAll () //返回所有之后的兄弟节点 jQuery . siblings () //返回兄弟姐妹节点，不分前后 jQuery . find ( expr ) //跟jQuery.filter(expr)完全不一样。jQuery.filter()是从初始的jQuery对象集合中筛选出一部分，而jQuery.find()的返回结果，不会有初始集","text_tokens":["直接","但是","不是","则","$","children","dom","第一","子孙","区别","del","这个","也","类似","空白","姐妹","最后","；",",","var","过滤","查找","文本","初始","子","parents","[","f","next","¶","c","出","=","，","span","比如","d"," ","下面","lastchild",".","下","space","是","筛选","find","部分","前后",")","\"","(","getelementbyid","只会","siblings","class","祖先","prevall","previoussibling","第一个","而","b","。","在于","分","或者","document","'","空格","_","作为","nextall","是从","结果","跟","/","限于","方法","包括","上",";","孩子","元素","一样","可以","返回","不会","就","的","snippets","会","nextsibling","：","之后","]","和","jquery","expr","获取","对象","中","hackettyu","a","filter","兄弟","父","javascript","之前","e","g","父亲","进行","parent","一部分","prev","childnodes","原生","兄弟姐妹","集","parentnode","所有","清理","完全","一部","内容","一个","全部","被","于","contents","有","不","集合","找","传入","firstchild","节点"],"title":"[hackettyu'snippets] jquery","title_tokens":["snippets","]","jquery"," ","[","'","hackettyu"]},{"location":"docs/template/javascript/jquery/#hackettyusnippets-jquery","text":"原生javascript方法： var a = document . getElementById ( \"dom\" ); del_space ( a ); //清理空格 var b = a . childNodes ; //获取a的全部子节点； var c = a . parentNode ; //获取a的父节点； var d = a . nextSibling ; //获取a的下一个兄弟节点 var e = a . previousSibling ; //获取a的上一个兄弟节点 var f = a . firstChild ; //获取a的第一个子节点 var g = a . lastChild ; //获取a的最后一个子节点 jQuery方法： jQuery . parent ( expr ) //找父亲节点，可以传入expr进行过滤，比如$(\"span\").parent()或者$(\"span\").parent(\".class\") jQuery . parents ( expr ) //类似于jQuery.parents(expr),但是是查找所有祖先元素，不限于父元素 jQuery . children ( expr ) //返回所有子节点，这个方法只会返回直接的孩子节点，不会返回所有的子孙节点 jQuery . contents () //返回下面的所有内容，包括节点和文本。这个方法和children()的区别就在于，包括空白文本，也会被作为一个jQuery对象返回，children()则只会返回节点 jQuery . prev () //返回上一个兄弟节点，不是所有的兄弟节点 jQuery . prevAll () //返回所有之前的兄弟节点 jQuery . next () //返回下一个兄弟节点，不是所有的兄弟节点 jQuery . nextAll () //返回所有之后的兄弟节点 jQuery . siblings () //返回兄弟姐妹节点，不分前后 jQuery . find ( expr ) //跟jQuery.filter(expr)完全不一样。jQuery.filter()是从初始的jQuery对象集合中筛选出一部分，而jQuery.find()的返回结果，不会有初始集","text_tokens":["直接","但是","不是","则","$","children","dom","第一","子孙","区别","del","这个","也","类似","空白","姐妹","最后","；",",","var","过滤","查找","文本","初始","子","parents","f","next","c","出","=","，","span","比如","d"," ","下面","lastchild",".","下","space","是","筛选","find","部分","前后",")","\"","(","getelementbyid","只会","siblings","class","祖先","prevall","previoussibling","第一个","而","b","。","在于","分","或者","document","空格","_","作为","nextall","是从","结果","跟","/","限于","方法","包括","上",";","孩子","元素","一样","可以","返回","不会","就","的","会","nextsibling","：","之后","和","jquery","expr","获取","对象","中","a","filter","兄弟","父","javascript","之前","e","g","父亲","进行","parent","一部分","prev","childnodes","原生","兄弟姐妹","集","parentnode","所有","清理","完全","一部","内容","一个","全部","被","于","contents","有","不","集合","找","传入","firstchild","节点"],"title":"[hackettyu'snippets] jquery","title_tokens":["snippets","]","jquery"," ","[","'","hackettyu"]},{"location":"docs/template/javascript/trim/","text":"[hackettyu'snippets] Javascript trim method ¶ 兼容的 trim() String . prototype . trim = function () { return this . replace ( /^\\s\\s*/ , '' ). replace ( /\\s\\s*$/ , '' ); }","text_tokens":["}",";","return","$",")","(","trim","的","function","snippets","兼容","method","this","^","prototype",",","s","]","\\","{","[","¶","'","=","*","hackettyu","replace","string"," ","/","javascript","."],"title":"[hackettyu'snippets] Javascript trim method","title_tokens":["trim","snippets","]"," ","method","[","javascript","'","hackettyu"]},{"location":"docs/template/javascript/trim/#hackettyusnippets-javascript-trim-method","text":"兼容的 trim() String . prototype . trim = function () { return this . replace ( /^\\s\\s*/ , '' ). replace ( /\\s\\s*$/ , '' ); }","text_tokens":["}",";","return","$",")","(","trim","的","function","兼容","this","^","prototype",",","s","\\","{","'","=","*","replace","string"," ","/","."],"title":"[hackettyu'snippets] Javascript trim method","title_tokens":["trim","snippets","]"," ","method","[","javascript","'","hackettyu"]},{"location":"docs/template/javascript/url/","text":"[hackettyu'snippets] Javascript 返回一个包含当前 URL 参数的对象 ¶ const getURLParameters = url => url . match ( /([^?=&]+)(=([^&]*))/g ). reduce ( ( a , v ) => ( a [ v . slice ( 0 , v . indexOf ( '=' ))] = v . slice ( v . indexOf ( '=' ) + 1 ), a ), {} ); // getURLParameters('http://url.com/page?name=Adam&surname=Smith') -> {name: 'Adam', surname: 'Smith'}","text_tokens":["}","?","g",";",">","surname","返回",")","(","的","snippets","adam","^","const","reduce",",","smith","url","]","-","当前","{","包含","一个","[","对象","indexof","¶","'","=","*","com","hackettyu","name","slice","0","v","&","http","a"," ","参数","match","/","geturlparameters","javascript",".","+","1",":","page"],"title":"[hackettyu'snippets] Javascript 返回一个包含当前 URL 参数的对象","title_tokens":["url","的","snippets","]","当前"," ","一个","包含","参数","[","对象","javascript","'","返回","hackettyu"]},{"location":"docs/template/javascript/url/#hackettyusnippets-javascript-url","text":"const getURLParameters = url => url . match ( /([^?=&]+)(=([^&]*))/g ). reduce ( ( a , v ) => ( a [ v . slice ( 0 , v . indexOf ( '=' ))] = v . slice ( v . indexOf ( '=' ) + 1 ), a ), {} ); // getURLParameters('http://url.com/page?name=Adam&surname=Smith') -> {name: 'Adam', surname: 'Smith'}","text_tokens":["}","?","g",";",">","surname",")","(","adam","^","const","reduce",",","smith","url","]","-","{","[","indexof","'","=","*","com","name","slice","0","v","&","http","a"," ","match","/","geturlparameters",".","1","+",":","page"],"title":"[hackettyu'snippets] Javascript 返回一个包含当前 URL 参数的对象","title_tokens":["url","的","snippets","]","当前"," ","一个","包含","参数","[","对象","javascript","'","返回","hackettyu"]},{"location":"docs/template/javascript/uuid/","text":"[hackettyu'snippets] Javascript 获取 UUID ¶ 生成 uuid const UUIDGenerator = () => ([ 1 e7 ] + - 1 e3 + - 4 e3 + - 8 e3 + - 1 e11 ). replace ( /[018]/g , c => ( c ^ crypto . getRandomValues ( new Uint8Array ( 1 ))[ 0 ] & 15 >> c / 4 ). toString ( 16 ) ); // UUIDGenerator() -> '7982fcfe-5721-4632-bede-6000885be57d'","text_tokens":["7982fcfe","g","getrandomvalues",";","uuid",">","16","6000885be57d","e11","018",")","(","snippets","生成","^","uint8array","const",",","bede","uuidgenerator","8","]","-","crypto","[","获取","¶","'","c","5721","=","tostring","hackettyu","0","replace","new","&"," ","15","/","4632","e3","javascript","1","+",".","e7","4"],"title":"[hackettyu'snippets] Javascript 获取 UUID","title_tokens":["snippets","]","uuid"," ","[","获取","javascript","'","hackettyu"]},{"location":"docs/template/javascript/uuid/#hackettyusnippets-javascript-uuid","text":"生成 uuid const UUIDGenerator = () => ([ 1 e7 ] + - 1 e3 + - 4 e3 + - 8 e3 + - 1 e11 ). replace ( /[018]/g , c => ( c ^ crypto . getRandomValues ( new Uint8Array ( 1 ))[ 0 ] & 15 >> c / 4 ). toString ( 16 ) ); // UUIDGenerator() -> '7982fcfe-5721-4632-bede-6000885be57d'","text_tokens":["7982fcfe","g","getrandomvalues",";","uuid",">","16","6000885be57d","e11","018",")","(","生成","^","uint8array","const",",","bede","uuidgenerator","8","]","-","crypto","[","c","'","5721","=","tostring","0","replace","new","&"," ","15","/","4632","e3","1",".","+","e7","4"],"title":"[hackettyu'snippets] Javascript 获取 UUID","title_tokens":["snippets","]","uuid"," ","[","获取","javascript","'","hackettyu"]},{"location":"docs/template/javascript/voice/","text":"[hackettyu'snippets] Javascirpt 语音合成 ¶ const speechSynthesis = message => { const msg = new SpeechSynthesisUtterance ( message ); msg . voice = window . speechSynthesis . getVoices ()[ 0 ]; window . speechSynthesis . speak ( msg ); }; // speechSynthesis('Hello, World') -> plays the message","text_tokens":["}","the",";","javascirpt",">","speak","message",")","(","snippets","world","speechsynthesisutterance","const","speechsynthesis","hello",",","合成","]","-","{","[","plays","语音","¶","'","=","hackettyu","msg","0","new"," ","getvoices","/",".","window","voice"],"title":"[hackettyu'snippets] Javascirpt 语音合成","title_tokens":["snippets","]","合成","javascirpt"," ","[","语音","'","hackettyu"]},{"location":"docs/template/javascript/voice/#hackettyusnippets-javascirpt","text":"const speechSynthesis = message => { const msg = new SpeechSynthesisUtterance ( message ); msg . voice = window . speechSynthesis . getVoices ()[ 0 ]; window . speechSynthesis . speak ( msg ); }; // speechSynthesis('Hello, World') -> plays the message","text_tokens":["}","the",";",">","speak","message",")","(","world","speechsynthesisutterance","const","speechsynthesis","hello",",","]","-","{","[","plays","'","=","msg","0","new"," ","getvoices","/",".","window","voice"],"title":"[hackettyu'snippets] Javascirpt 语音合成","title_tokens":["snippets","]","合成","javascirpt"," ","[","语音","'","hackettyu"]},{"location":"docs/template/sql/get-data-table-create-structure/","text":"[hackettyu'snippets] get-data-table-create-structure ¶ 获取数据表 create 结构 create PROCEDURE [ sp_gettext ] @ name VARCHAR ( max ) = NULL , @ identity BIT = 1 , @ index TINYINT = 2 -- 0不创建索引 1不创建表 2创建索引 , @ new BIT = 0 AS SET ARITHABORT ON ; SET CONCAT_NULL_YIELDS_NULL ON ; SET QUOTED_IDENTIFIER ON ; SET ANSI_NULLS ON ; SET ANSI_PADDING ON ; SET ANSI_WARNINGS ON ; SET NUMERIC_ROUNDABORT OFF ; DECLARE @ crlf CHAR ( 2 ); SET @ crlf = CHAR ( 13 ) + CHAR ( 10 ); DECLARE @ objid INT ; DECLARE @ results TABLE ( definition NVARCHAR ( max )) DECLARE @ objects TABLE ( id VARCHAR ( 100 ), type CHAR ( 2 )); WITH db1 ( dbname ) AS ( SELECT [ value ] AS dbname FROM Split ( @ name )), db2 AS ( SELECT --CASE WHEN CHARINDEX('.', dbname) = 0 AND CHARINDEX('[', dbname) = 0 THEN '[cn9c080].' + QUOTENAME(dbname) -- ELSE dbname -- END AS dbname CASE WHEN o .[ object_id ] IS NULL AND tt .[ name ] IS NULL THEN '%' ELSE LTRIM ( ISNULL ( o .[ object_id ], tt .[ type_table_object_id ])) END AS object_id , CASE [ db1 ].[ dbname ] WHEN 'tables' THEN 'U' WHEN 'procs' THEN 'P' else o .[ type ] END type FROM db1 left JOIN sys .[ objects ] o ON ( PARSENAME ( db1 .[ dbname ], 1 ) = o .[ name ] OR OBJECT_ID ( '[cn9c080].' + QUOTENAME ( dbname )) = o .[ object_id ]) LEFT JOIN sys . table_types tt ON db1 . dbname = tt . NAME ) INSERT INTO @ objects SELECT * FROM db2 ; --OPTION (MAXRECURSION 0); --SELECT TOP 100 * FROM @objects; WITH ColumnDefs AS ( SELECT TableObj = c .[ object_id ], ColSeq = c . column_id , ColumnDef = QUOTENAME ( c . name ) + ' ' + CASE WHEN c . is_computed = 1 THEN 'as ' + COALESCE ( k .[ definition ], '' ) + CASE WHEN k . is_persisted = 1 THEN ' PERSISTED' + CASE WHEN k . is_nullable = 0 THEN ' NOT NULL' ELSE '' END ELSE '' END ELSE DataType + CASE WHEN DataType IN ( 'decimal' , 'numeric' ) THEN '(' + CAST ( c . precision AS VARCHAR ( 10 )) + CASE WHEN c . scale <> 0 THEN ',' + CAST ( c . scale AS VARCHAR ( 10 )) ELSE '' END + ')' WHEN DataType IN ( 'char' , 'varchar' , 'nchar' , 'nvarchar' , 'binary' , 'varbinary' ) THEN '(' + CASE WHEN c . max_length = - 1 THEN 'max' ELSE CASE WHEN DataType IN ( 'nchar' , 'nvarchar' ) THEN CAST ( c . max_length / 2 AS VARCHAR ( 10 )) ELSE CAST ( c . max_length AS VARCHAR ( 10 )) END END + ')' WHEN DataType = 'float' AND c . precision <> 53 THEN '(' + CAST ( c . precision AS VARCHAR ( 10 )) + ')' WHEN DataType IN ( 'time' , 'datetime2' , 'datetimeoffset' ) AND c . scale <> 7 THEN '(' + CAST ( c . scale AS VARCHAR ( 10 )) + ')' ELSE '' END END + CASE WHEN c . is_identity = 1 AND @ identity = 1 THEN ' IDENTITY(' + CAST ( IDENT_SEED ( QUOTENAME ( OBJECT_SCHEMA_NAME ( c .[ object_id ])) + '.' + QUOTENAME ( OBJECT_NAME ( c .[ object_id ]))) AS VARCHAR ( 30 )) + ',' + CAST ( IDENT_INCR ( QUOTENAME ( OBJECT_SCHEMA_NAME ( c .[ object_id ])) + '.' + QUOTENAME ( OBJECT_NAME ( c .[ object_id ]))) AS VARCHAR ( 30 )) + ')' ELSE '' END + CASE WHEN c . is_rowguidcol = 1 THEN ' ROWGUIDCOL' ELSE '' END + CASE WHEN c . xml_collection_id > 0 THEN ' (CONTENT ' + QUOTENAME ( SCHEMA_NAME ( x . schema_id )) + '.' + QUOTENAME ( x . name ) + ')' ELSE '' END + CASE WHEN c . is_computed = 0 AND UserDefinedFlag = 0 THEN CASE WHEN c . collation_name <> CAST ( DATABASEPROPERTYEX ( DB_NAME (), 'collation' ) AS NVARCHAR ( 128 )) THEN ' COLLATE ' + c . collation_name ELSE '' END ELSE '' END + CASE WHEN c . is_computed = 0 THEN CASE WHEN c . is_nullable = 0 THEN ' NOT' ELSE '' END + ' NULL' ELSE '' END + CASE WHEN c . default_object_id > 0 AND ISNULL ( @ new , 0 ) = 0 THEN ' CONSTRAINT ' + QUOTENAME ( d . name ) + ' DEFAULT ' + COALESCE ( d .[ definition ], '' ) WHEN c . default_object_id > 0 AND ISNULL ( @ new , 0 ) = 1 THEN ' DEFAULT ' + COALESCE ( d .[ definition ], '' ) ELSE '' END FROM sys . columns c CROSS APPLY ( SELECT DataType = TYPE_NAME ( c . user_type_id ) , UserDefinedFlag = CASE WHEN c . system_type_id = c . user_type_id THEN 0 ELSE 1 END ) F1 LEFT JOIN sys . default_constraints d ON c . default_object_id = d .[ object_id ] LEFT JOIN sys . computed_columns k ON c .[ object_id ] = k .[ object_id ] AND c . column_id = k . column_id LEFT JOIN sys . xml_schema_collections x ON c . xml_collection_id = x . xml_collection_id ), IndexDefs AS ( SELECT TableObj = i .[ object_id ], IxName = QUOTENAME ( i . name + CASE WHEN @ new = 1 THEN '_' + LEFT ( NEWID (), 4 ) ELSE '' end ), IxPKFlag = i . is_primary_key , IxType = CASE WHEN i . is_primary_key = 1 THEN 'PRIMARY KEY ' WHEN i . is_unique = 1 THEN 'UNIQUE ' ELSE '' END + LOWER ( type_desc ), IxDef = '(' + IxColList + ')' + COALESCE ( ' INCLUDE (' + IxInclList + ')' , '' ), IxOpts = IxOptList FROM sys . indexes i LEFT JOIN sys . stats s ON i . index_id = s . stats_id AND i .[ object_id ] = s .[ object_id ] CROSS APPLY ( SELECT STUFF (( SELECT CASE WHEN i . is_padded = 1 THEN ', PAD_INDEX=ON' ELSE '' END + CASE WHEN i . fill_factor <> 0 THEN ', FILLFACTOR=' + CAST ( i . fill_factor AS VARCHAR ( 10 )) ELSE '' END + CASE WHEN i . ignore_dup_key = 1 THEN ', IGNORE_DUP_KEY=ON' ELSE '' END + CASE WHEN s . no_recompute = 1 THEN ', STATISTICS_RECOMPUTE=ON' ELSE '' END + CASE WHEN i . allow_row_locks = 0 THEN ', ALLOW_ROW_LOCKS=OFF' ELSE '' END + CASE WHEN i . allow_page_locks = 0 THEN ', ALLOW_PAGE_LOCKS=OFF' ELSE '' END ), 1 , 2 , '' )) F_IxOpts ( IxOptList ) CROSS APPLY ( SELECT STUFF (( SELECT ',' + QUOTENAME ( c . name ) + CASE WHEN ic . is_descending_key = 1 AND i . type <> 3 THEN ' DESC' WHEN ic . is_descending_key = 0 AND i . type <> 3 THEN ' ASC' ELSE '' END FROM sys . index_columns ic JOIN sys . columns c ON ic .[ object_id ] = c .[ object_id ] AND ic . column_id = c . column_id WHERE ic .[ object_id ] = i .[ object_id ] AND ic . index_id = i . index_id AND ic . is_included_column = 0 ORDER BY ic . key_ordinal FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 1 , '' )) F_IxCols ( IxColList ) CROSS APPLY ( SELECT STUFF (( SELECT ',' + QUOTENAME ( c . name ) FROM sys . index_columns ic JOIN sys . columns c ON ic .[ object_id ] = c .[ object_id ] AND ic . column_id = c . column_id WHERE ic .[ object_id ] = i .[ object_id ] AND ic . index_id = i . index_id AND ic . is_included_column = 1 ORDER BY ic . key_ordinal FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 1 , '' )) F_IxIncl ( IxInclList ) WHERE i . type_desc <> 'HEAP' ), FKDefs AS ( SELECT TableObj = f . parent_object_id , FKName = QUOTENAME ( f . name ), FKRef = QUOTENAME ( OBJECT_SCHEMA_NAME ( f . referenced_object_id )) + '.' + QUOTENAME ( OBJECT_NAME ( f . referenced_object_id )), FKColList = ParentColList , FKRefList = RefColList , FKDelOpt = CASE f . delete_referential_action WHEN 1 THEN 'CASCADE' WHEN 2 THEN 'SET NULL' WHEN 3 THEN 'SET DEFAULT' END , FKUpdOpt = CASE f . update_referential_action WHEN 1 THEN 'CASCADE' WHEN 2 THEN 'SET NULL' WHEN 3 THEN 'SET DEFAULT' END , FKNoRepl = f . is_not_for_replication FROM sys . foreign_keys f CROSS APPLY ( SELECT STUFF (( SELECT ',' + QUOTENAME ( c . name ) FROM sys . foreign_key_columns k JOIN sys . columns c ON k . parent_object_id = c .[ object_id ] AND k . parent_column_id = c . column_id WHERE k . constraint_object_id = f .[ object_id ] ORDER BY constraint_column_id FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 1 , '' )) F_Parent ( ParentColList ) CROSS APPLY ( SELECT STUFF (( SELECT ',' + QUOTENAME ( c . name ) FROM sys . foreign_key_columns k JOIN sys . columns c ON k . referenced_object_id = c .[ object_id ] AND k . referenced_column_id = c . column_id WHERE k . constraint_object_id = f .[ object_id ] ORDER BY constraint_column_id FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 1 , '' )) F_Ref ( RefColList )) INSERT INTO @ results ([ definition ]) SELECT --TableName, [ definition ] + CHAR ( 10 ) + 'GO' + CHAR ( 10 ) AS definition FROM sys . tables t INNER JOIN @ objects o ON ( t .[ object_id ] LIKE o .[ id ] AND o .[ type ] = 'U' ) CROSS APPLY ( SELECT TableName = QUOTENAME ( OBJECT_SCHEMA_NAME ( t .[ object_id ])) + '.' + QUOTENAME ( OBJECT_NAME ( t .[ object_id ]))) F_Name CROSS APPLY ( SELECT STUFF (( SELECT @ crlf + ' ,' + ColumnDef FROM ColumnDefs WHERE TableObj = t .[ object_id ] ORDER BY ColSeq FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 5 , '' )) F_Cols ( ColumnList ) CROSS APPLY ( SELECT STUFF (( SELECT @ crlf + ' ,CONSTRAINT ' + QUOTENAME ( name ) + ' CHECK ' + CASE WHEN is_not_for_replication = 1 THEN 'NOT FOR REPLICATION ' ELSE '' END + COALESCE ([ definition ], '' ) FROM sys . check_constraints WHERE parent_object_id = t .[ object_id ] FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 2 , '' )) F_Const ( ChkConstList ) CROSS APPLY ( SELECT STUFF (( SELECT @ crlf + ' ,CONSTRAINT ' + IxName + ' ' + IxType + ' ' + IxDef + COALESCE ( ' WITH (' + IxOpts + ')' , '' ) FROM IndexDefs WHERE TableObj = t .[ object_id ] AND IxPKFlag = 1 FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 2 , '' )) F_IxConst ( IxConstList ) CROSS APPLY ( SELECT STUFF (( SELECT @ crlf + ' ,CONSTRAINT ' + FKName + ' FOREIGN KEY ' + '(' + FKColList + ')' + ' REFERENCES ' + FKRef + ' (' + FKRefList + ')' + CASE WHEN FKDelOpt IS NOT NULL THEN ' ON DELETE ' + FKDelOpt ELSE '' END + CASE WHEN FKUpdOpt IS NOT NULL THEN ' ON UPDATE ' + FKUpdOpt ELSE '' END + CASE WHEN FKNoRepl = 1 THEN ' NOT FOR REPLICATION' ELSE '' END FROM FKDefs WHERE TableObj = t .[ object_id ] FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 2 , '' )) F_Keys ( FKConstList ) CROSS APPLY ( SELECT STUFF (( SELECT @ crlf + 'CREATE ' + IxType + ' INDEX ' + IxName + ' ON ' + TableName + ' ' + IxDef + COALESCE ( ' WITH (' + IxOpts + ')' , '' ) FROM IndexDefs WHERE TableObj = t .[ object_id ] AND IxPKFlag = 0 FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 2 , '' )) F_Indexes ( IndexList ) CROSS APPLY ( SELECT [ definition ] = ( SELECT CASE WHEN @ index <> 1 THEN 'CREATE TABLE ' + TableName + @ crlf + '(' + @ crlf + ' ' + ColumnList + COALESCE ( @ crlf + ChkConstList , '' ) + COALESCE ( @ crlf + IxConstList , '' ) + COALESCE ( @ crlf + FKConstList , '' ) + @ crlf + ')' + @ crlf ELSE '' END + CASE WHEN @ index <> 0 THEN COALESCE ( @ crlf + IndexList , '' ) ELSE '' END FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' )) F_Link WHERE t .[ is_ms_shipped ] = 0 AND [ definition ] <> '' ; -- 视图/过程/函数/触发器 INSERT INTO @ results ([ definition ]) SELECT --QUOTENAME(object_schema_name(m.object_id))+'.'+ QUOTENAME(object_name(m.object_id)) AS [name],o.type, m . definition + CHAR ( 10 ) + 'GO' + CHAR ( 10 ) AS definition FROM sys . sql_modules m INNER JOIN sys . objects o ON m . object_id = o . object_id INNER JOIN @ objects a ON ( m .[ object_id ] LIKE a .[ id ] AND a .[ type ] <> 'U' ); --houpeidong 2018-05-30 add 字段说明 insert into @ results ([ definition ]) select 'EXEC sys.sp_addextendedproperty @name=N''MS_Description'', @value=N''' + cast ( ep .[ value ] as varchar ( 100 )) + ''', @level0type=N''SCHEMA'',@level0name=N''' + schema_name ( schema_id ) + ''', @level1type=N''TABLE'',@level1name=N''' + t .[ name ] + ''', @level2type=N''COLUMN'',@level2name=N''' + c .[ name ] + '''' + CHAR ( 10 ) + 'GO' + CHAR ( 10 ) --,t.[name] AS 表名,c.[name] AS 字段名,cast(ep.[value] as varchar(100)) AS [字段说明] ,c.collation_name,t.create_date,t.modify_date,schema_name(schema_id),* FROM sys . tables AS t INNER JOIN sys . columns AS c ON t . object_id = c . object_id LEFT JOIN sys . extended_properties AS ep ON ep . major_id = c . object_id AND ep . minor_id = c . column_id INNER JOIN @ objects o ON ( t .[ object_id ] LIKE o .[ id ] AND o .[ type ] = 'U' ) WHERE ep . class = 1 --AND t.name='tbCertifyUserApply' SELECT * FROM @ results ; 数据拆分函数 create FUNCTION [ Split ]( @ text NVARCHAR ( max )) RETURNS @ tempTable TABLE ( value NVARCHAR ( 1000 )) AS BEGIN DECLARE @ StartIndex INT --开始查找的位置 DECLARE @ FindIndex INT --找到的位置 DECLARE @ Content VARCHAR ( 4000 ) --找到的值 --初始化一些变量 SET @ StartIndex = 1 --T-SQL中字符串的查找位置是从1开始的 SET @ FindIndex = 0 --开始循环查找字符串逗号 WHILE ( @ StartIndex <= LEN ( @ Text )) BEGIN --查找字符串函数 CHARINDEX 第一个参数是要找的字符串 -- 第二个参数是在哪里查找这个字符串 -- 第三个参数是开始查找的位置 --返回值是找到字符串的位置 SELECT @ FindIndex = CHARINDEX ( ',' , @ Text , @ StartIndex ) --判断有没找到 没找到返回0 IF ( @ FindIndex = 0 OR @ FindIndex IS NULL ) BEGIN --如果没有找到就表示找完了 SET @ FindIndex = LEN ( @ Text ) + 1 END --截取字符串函数 SUBSTRING 第一个参数是要截取的字符串 -- 第二个参数是开始的位置 -- 第三个参数是截取的长度 SET @ Content = SUBSTRING ( @ Text , @ StartIndex , @ FindIndex -@ StartIndex ) --初始化下次查找的位置 SET @ StartIndex = @ FindIndex + 1 --把找的的值插入到要返回的Table类型中 INSERT INTO @ tempTable ( Value ) VALUES ( @ Content ) END RETURN END","text_tokens":["unique","referenced","into","到","columnlist","order","objid","fkref","段","ltrim","触发器","level1name","7","初始","ordinal","charindex","13","f","startindex","identifier","include","allow","when","d"," ","houpeidong","1","pad","u","ixdef","2018","字","description","asc","coalesce","chkconstlist","column","function","create","time","10","%","user","ixtype","data","ixpkflag","level2name","shipped","表名","要","arithabort","t","varchar","类型","null","go","objects","max","ic","ixincllist","返回","字段名","numeric","nulls","fknorepl","delete","了","from","三个","identity","precision","check","获取","cascade","返回值","like","中","hackettyu","system","begin","new","a","path","@","字符串","seed","nchar","fkreflist","*","index","or","tbcertifyuserapply","视图","referential","newid","sys","results","date","warnings","找到","开始查找","第一","字段","这个","extended","columns","完",",","table","crlf","get","--","columndefs","replication","dbname","0","ref","parentcollist","表示","by","表","foreign",".","concat","indexdefs","values","(","128","default","class","yields","is","第一个","add","const","varbinary","_","db2","int","locks","是从","db1","modify","factor","incr","n","if","colseq","第二","的","i","exec","cast","sql","]","update","ixconst","fillfactor","拆分","row","float","select","ansi","没","parent","schema","len","collate","properties","temptable","references","userdefinedflag","datetime2","一个","modules","fill","m","ep","binary","找","4","page","case","ixoptlist","发器",">","heap","下次","插入","id","structure","ixname","link","scale","text","roundabort","第二个","substring","join","[","结构","逗号","insert","cross","isnull","fkupdopt","ixopts","types","findindex","位置",")","如果","procs","where","过程","length","while","descending","值","name","level0name","then","/","100","collection","procedure","ixcollist",";","在","就","ixconstlist","addextendedproperty","as","tables","ixincl","s","action","-","no","获取数据","and","minor","bit","refcollist","tableobj","变量","k","collections","+","fkdelopt","declare","ignore","end","datetimeoffset","left","indexes","tinyint","columndef","maxrecursion","第三个","5","ixcols","level2type","开始","persisted","参数","2","不","fkcollist","padding","definition","object","off","ms","53","keys","函数","split","循环","4000","for","computed","触发","stuff","查找","datatype","top","第三","nullable","¶","c","with","=","tablename","ident","option","stats","是","lower","p","recompute","dup","in","一些","数据","cn9c080","returns","type","char","included","说明","inner","parsename","'","padded","o","nvarchar","constraint","quoted","没有","level1type","desc","sp","f1","fkdefs","constraints","初始化","索引","decimal","snippets","fkname","长度","1000","gettext","on","statistics","set","quotename","<","3","value","x","key","major","哪里","创建","else","fkconstlist","primary","db","截取","二个","return","apply","cols","content","把","databasepropertyex","collation","判断","rowguidcol","字符","30","xml","indexlist","有","05","not","level0type","tt"],"title":"[hackettyu'snippets] get-data-table-create-structure","title_tokens":["structure","snippets","]","-","data","create"," ","get","[","'","table","hackettyu"]},{"location":"docs/template/sql/get-data-table-create-structure/#hackettyusnippets-get-data-table-create-structure","text":"获取数据表 create 结构 create PROCEDURE [ sp_gettext ] @ name VARCHAR ( max ) = NULL , @ identity BIT = 1 , @ index TINYINT = 2 -- 0不创建索引 1不创建表 2创建索引 , @ new BIT = 0 AS SET ARITHABORT ON ; SET CONCAT_NULL_YIELDS_NULL ON ; SET QUOTED_IDENTIFIER ON ; SET ANSI_NULLS ON ; SET ANSI_PADDING ON ; SET ANSI_WARNINGS ON ; SET NUMERIC_ROUNDABORT OFF ; DECLARE @ crlf CHAR ( 2 ); SET @ crlf = CHAR ( 13 ) + CHAR ( 10 ); DECLARE @ objid INT ; DECLARE @ results TABLE ( definition NVARCHAR ( max )) DECLARE @ objects TABLE ( id VARCHAR ( 100 ), type CHAR ( 2 )); WITH db1 ( dbname ) AS ( SELECT [ value ] AS dbname FROM Split ( @ name )), db2 AS ( SELECT --CASE WHEN CHARINDEX('.', dbname) = 0 AND CHARINDEX('[', dbname) = 0 THEN '[cn9c080].' + QUOTENAME(dbname) -- ELSE dbname -- END AS dbname CASE WHEN o .[ object_id ] IS NULL AND tt .[ name ] IS NULL THEN '%' ELSE LTRIM ( ISNULL ( o .[ object_id ], tt .[ type_table_object_id ])) END AS object_id , CASE [ db1 ].[ dbname ] WHEN 'tables' THEN 'U' WHEN 'procs' THEN 'P' else o .[ type ] END type FROM db1 left JOIN sys .[ objects ] o ON ( PARSENAME ( db1 .[ dbname ], 1 ) = o .[ name ] OR OBJECT_ID ( '[cn9c080].' + QUOTENAME ( dbname )) = o .[ object_id ]) LEFT JOIN sys . table_types tt ON db1 . dbname = tt . NAME ) INSERT INTO @ objects SELECT * FROM db2 ; --OPTION (MAXRECURSION 0); --SELECT TOP 100 * FROM @objects; WITH ColumnDefs AS ( SELECT TableObj = c .[ object_id ], ColSeq = c . column_id , ColumnDef = QUOTENAME ( c . name ) + ' ' + CASE WHEN c . is_computed = 1 THEN 'as ' + COALESCE ( k .[ definition ], '' ) + CASE WHEN k . is_persisted = 1 THEN ' PERSISTED' + CASE WHEN k . is_nullable = 0 THEN ' NOT NULL' ELSE '' END ELSE '' END ELSE DataType + CASE WHEN DataType IN ( 'decimal' , 'numeric' ) THEN '(' + CAST ( c . precision AS VARCHAR ( 10 )) + CASE WHEN c . scale <> 0 THEN ',' + CAST ( c . scale AS VARCHAR ( 10 )) ELSE '' END + ')' WHEN DataType IN ( 'char' , 'varchar' , 'nchar' , 'nvarchar' , 'binary' , 'varbinary' ) THEN '(' + CASE WHEN c . max_length = - 1 THEN 'max' ELSE CASE WHEN DataType IN ( 'nchar' , 'nvarchar' ) THEN CAST ( c . max_length / 2 AS VARCHAR ( 10 )) ELSE CAST ( c . max_length AS VARCHAR ( 10 )) END END + ')' WHEN DataType = 'float' AND c . precision <> 53 THEN '(' + CAST ( c . precision AS VARCHAR ( 10 )) + ')' WHEN DataType IN ( 'time' , 'datetime2' , 'datetimeoffset' ) AND c . scale <> 7 THEN '(' + CAST ( c . scale AS VARCHAR ( 10 )) + ')' ELSE '' END END + CASE WHEN c . is_identity = 1 AND @ identity = 1 THEN ' IDENTITY(' + CAST ( IDENT_SEED ( QUOTENAME ( OBJECT_SCHEMA_NAME ( c .[ object_id ])) + '.' + QUOTENAME ( OBJECT_NAME ( c .[ object_id ]))) AS VARCHAR ( 30 )) + ',' + CAST ( IDENT_INCR ( QUOTENAME ( OBJECT_SCHEMA_NAME ( c .[ object_id ])) + '.' + QUOTENAME ( OBJECT_NAME ( c .[ object_id ]))) AS VARCHAR ( 30 )) + ')' ELSE '' END + CASE WHEN c . is_rowguidcol = 1 THEN ' ROWGUIDCOL' ELSE '' END + CASE WHEN c . xml_collection_id > 0 THEN ' (CONTENT ' + QUOTENAME ( SCHEMA_NAME ( x . schema_id )) + '.' + QUOTENAME ( x . name ) + ')' ELSE '' END + CASE WHEN c . is_computed = 0 AND UserDefinedFlag = 0 THEN CASE WHEN c . collation_name <> CAST ( DATABASEPROPERTYEX ( DB_NAME (), 'collation' ) AS NVARCHAR ( 128 )) THEN ' COLLATE ' + c . collation_name ELSE '' END ELSE '' END + CASE WHEN c . is_computed = 0 THEN CASE WHEN c . is_nullable = 0 THEN ' NOT' ELSE '' END + ' NULL' ELSE '' END + CASE WHEN c . default_object_id > 0 AND ISNULL ( @ new , 0 ) = 0 THEN ' CONSTRAINT ' + QUOTENAME ( d . name ) + ' DEFAULT ' + COALESCE ( d .[ definition ], '' ) WHEN c . default_object_id > 0 AND ISNULL ( @ new , 0 ) = 1 THEN ' DEFAULT ' + COALESCE ( d .[ definition ], '' ) ELSE '' END FROM sys . columns c CROSS APPLY ( SELECT DataType = TYPE_NAME ( c . user_type_id ) , UserDefinedFlag = CASE WHEN c . system_type_id = c . user_type_id THEN 0 ELSE 1 END ) F1 LEFT JOIN sys . default_constraints d ON c . default_object_id = d .[ object_id ] LEFT JOIN sys . computed_columns k ON c .[ object_id ] = k .[ object_id ] AND c . column_id = k . column_id LEFT JOIN sys . xml_schema_collections x ON c . xml_collection_id = x . xml_collection_id ), IndexDefs AS ( SELECT TableObj = i .[ object_id ], IxName = QUOTENAME ( i . name + CASE WHEN @ new = 1 THEN '_' + LEFT ( NEWID (), 4 ) ELSE '' end ), IxPKFlag = i . is_primary_key , IxType = CASE WHEN i . is_primary_key = 1 THEN 'PRIMARY KEY ' WHEN i . is_unique = 1 THEN 'UNIQUE ' ELSE '' END + LOWER ( type_desc ), IxDef = '(' + IxColList + ')' + COALESCE ( ' INCLUDE (' + IxInclList + ')' , '' ), IxOpts = IxOptList FROM sys . indexes i LEFT JOIN sys . stats s ON i . index_id = s . stats_id AND i .[ object_id ] = s .[ object_id ] CROSS APPLY ( SELECT STUFF (( SELECT CASE WHEN i . is_padded = 1 THEN ', PAD_INDEX=ON' ELSE '' END + CASE WHEN i . fill_factor <> 0 THEN ', FILLFACTOR=' + CAST ( i . fill_factor AS VARCHAR ( 10 )) ELSE '' END + CASE WHEN i . ignore_dup_key = 1 THEN ', IGNORE_DUP_KEY=ON' ELSE '' END + CASE WHEN s . no_recompute = 1 THEN ', STATISTICS_RECOMPUTE=ON' ELSE '' END + CASE WHEN i . allow_row_locks = 0 THEN ', ALLOW_ROW_LOCKS=OFF' ELSE '' END + CASE WHEN i . allow_page_locks = 0 THEN ', ALLOW_PAGE_LOCKS=OFF' ELSE '' END ), 1 , 2 , '' )) F_IxOpts ( IxOptList ) CROSS APPLY ( SELECT STUFF (( SELECT ',' + QUOTENAME ( c . name ) + CASE WHEN ic . is_descending_key = 1 AND i . type <> 3 THEN ' DESC' WHEN ic . is_descending_key = 0 AND i . type <> 3 THEN ' ASC' ELSE '' END FROM sys . index_columns ic JOIN sys . columns c ON ic .[ object_id ] = c .[ object_id ] AND ic . column_id = c . column_id WHERE ic .[ object_id ] = i .[ object_id ] AND ic . index_id = i . index_id AND ic . is_included_column = 0 ORDER BY ic . key_ordinal FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 1 , '' )) F_IxCols ( IxColList ) CROSS APPLY ( SELECT STUFF (( SELECT ',' + QUOTENAME ( c . name ) FROM sys . index_columns ic JOIN sys . columns c ON ic .[ object_id ] = c .[ object_id ] AND ic . column_id = c . column_id WHERE ic .[ object_id ] = i .[ object_id ] AND ic . index_id = i . index_id AND ic . is_included_column = 1 ORDER BY ic . key_ordinal FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 1 , '' )) F_IxIncl ( IxInclList ) WHERE i . type_desc <> 'HEAP' ), FKDefs AS ( SELECT TableObj = f . parent_object_id , FKName = QUOTENAME ( f . name ), FKRef = QUOTENAME ( OBJECT_SCHEMA_NAME ( f . referenced_object_id )) + '.' + QUOTENAME ( OBJECT_NAME ( f . referenced_object_id )), FKColList = ParentColList , FKRefList = RefColList , FKDelOpt = CASE f . delete_referential_action WHEN 1 THEN 'CASCADE' WHEN 2 THEN 'SET NULL' WHEN 3 THEN 'SET DEFAULT' END , FKUpdOpt = CASE f . update_referential_action WHEN 1 THEN 'CASCADE' WHEN 2 THEN 'SET NULL' WHEN 3 THEN 'SET DEFAULT' END , FKNoRepl = f . is_not_for_replication FROM sys . foreign_keys f CROSS APPLY ( SELECT STUFF (( SELECT ',' + QUOTENAME ( c . name ) FROM sys . foreign_key_columns k JOIN sys . columns c ON k . parent_object_id = c .[ object_id ] AND k . parent_column_id = c . column_id WHERE k . constraint_object_id = f .[ object_id ] ORDER BY constraint_column_id FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 1 , '' )) F_Parent ( ParentColList ) CROSS APPLY ( SELECT STUFF (( SELECT ',' + QUOTENAME ( c . name ) FROM sys . foreign_key_columns k JOIN sys . columns c ON k . referenced_object_id = c .[ object_id ] AND k . referenced_column_id = c . column_id WHERE k . constraint_object_id = f .[ object_id ] ORDER BY constraint_column_id FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 1 , '' )) F_Ref ( RefColList )) INSERT INTO @ results ([ definition ]) SELECT --TableName, [ definition ] + CHAR ( 10 ) + 'GO' + CHAR ( 10 ) AS definition FROM sys . tables t INNER JOIN @ objects o ON ( t .[ object_id ] LIKE o .[ id ] AND o .[ type ] = 'U' ) CROSS APPLY ( SELECT TableName = QUOTENAME ( OBJECT_SCHEMA_NAME ( t .[ object_id ])) + '.' + QUOTENAME ( OBJECT_NAME ( t .[ object_id ]))) F_Name CROSS APPLY ( SELECT STUFF (( SELECT @ crlf + ' ,' + ColumnDef FROM ColumnDefs WHERE TableObj = t .[ object_id ] ORDER BY ColSeq FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 5 , '' )) F_Cols ( ColumnList ) CROSS APPLY ( SELECT STUFF (( SELECT @ crlf + ' ,CONSTRAINT ' + QUOTENAME ( name ) + ' CHECK ' + CASE WHEN is_not_for_replication = 1 THEN 'NOT FOR REPLICATION ' ELSE '' END + COALESCE ([ definition ], '' ) FROM sys . check_constraints WHERE parent_object_id = t .[ object_id ] FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 2 , '' )) F_Const ( ChkConstList ) CROSS APPLY ( SELECT STUFF (( SELECT @ crlf + ' ,CONSTRAINT ' + IxName + ' ' + IxType + ' ' + IxDef + COALESCE ( ' WITH (' + IxOpts + ')' , '' ) FROM IndexDefs WHERE TableObj = t .[ object_id ] AND IxPKFlag = 1 FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 2 , '' )) F_IxConst ( IxConstList ) CROSS APPLY ( SELECT STUFF (( SELECT @ crlf + ' ,CONSTRAINT ' + FKName + ' FOREIGN KEY ' + '(' + FKColList + ')' + ' REFERENCES ' + FKRef + ' (' + FKRefList + ')' + CASE WHEN FKDelOpt IS NOT NULL THEN ' ON DELETE ' + FKDelOpt ELSE '' END + CASE WHEN FKUpdOpt IS NOT NULL THEN ' ON UPDATE ' + FKUpdOpt ELSE '' END + CASE WHEN FKNoRepl = 1 THEN ' NOT FOR REPLICATION' ELSE '' END FROM FKDefs WHERE TableObj = t .[ object_id ] FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 2 , '' )) F_Keys ( FKConstList ) CROSS APPLY ( SELECT STUFF (( SELECT @ crlf + 'CREATE ' + IxType + ' INDEX ' + IxName + ' ON ' + TableName + ' ' + IxDef + COALESCE ( ' WITH (' + IxOpts + ')' , '' ) FROM IndexDefs WHERE TableObj = t .[ object_id ] AND IxPKFlag = 0 FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' ), 1 , 2 , '' )) F_Indexes ( IndexList ) CROSS APPLY ( SELECT [ definition ] = ( SELECT CASE WHEN @ index <> 1 THEN 'CREATE TABLE ' + TableName + @ crlf + '(' + @ crlf + ' ' + ColumnList + COALESCE ( @ crlf + ChkConstList , '' ) + COALESCE ( @ crlf + IxConstList , '' ) + COALESCE ( @ crlf + FKConstList , '' ) + @ crlf + ')' + @ crlf ELSE '' END + CASE WHEN @ index <> 0 THEN COALESCE ( @ crlf + IndexList , '' ) ELSE '' END FOR XML PATH ( '' ) , TYPE ). value ( '.' , 'nvarchar(max)' )) F_Link WHERE t .[ is_ms_shipped ] = 0 AND [ definition ] <> '' ; -- 视图/过程/函数/触发器 INSERT INTO @ results ([ definition ]) SELECT --QUOTENAME(object_schema_name(m.object_id))+'.'+ QUOTENAME(object_name(m.object_id)) AS [name],o.type, m . definition + CHAR ( 10 ) + 'GO' + CHAR ( 10 ) AS definition FROM sys . sql_modules m INNER JOIN sys . objects o ON m . object_id = o . object_id INNER JOIN @ objects a ON ( m .[ object_id ] LIKE a .[ id ] AND a .[ type ] <> 'U' ); --houpeidong 2018-05-30 add 字段说明 insert into @ results ([ definition ]) select 'EXEC sys.sp_addextendedproperty @name=N''MS_Description'', @value=N''' + cast ( ep .[ value ] as varchar ( 100 )) + ''', @level0type=N''SCHEMA'',@level0name=N''' + schema_name ( schema_id ) + ''', @level1type=N''TABLE'',@level1name=N''' + t .[ name ] + ''', @level2type=N''COLUMN'',@level2name=N''' + c .[ name ] + '''' + CHAR ( 10 ) + 'GO' + CHAR ( 10 ) --,t.[name] AS 表名,c.[name] AS 字段名,cast(ep.[value] as varchar(100)) AS [字段说明] ,c.collation_name,t.create_date,t.modify_date,schema_name(schema_id),* FROM sys . tables AS t INNER JOIN sys . columns AS c ON t . object_id = c . object_id LEFT JOIN sys . extended_properties AS ep ON ep . major_id = c . object_id AND ep . minor_id = c . column_id INNER JOIN @ objects o ON ( t .[ object_id ] LIKE o .[ id ] AND o .[ type ] = 'U' ) WHERE ep . class = 1 --AND t.name='tbCertifyUserApply' SELECT * FROM @ results ; 数据拆分函数 create FUNCTION [ Split ]( @ text NVARCHAR ( max )) RETURNS @ tempTable TABLE ( value NVARCHAR ( 1000 )) AS BEGIN DECLARE @ StartIndex INT --开始查找的位置 DECLARE @ FindIndex INT --找到的位置 DECLARE @ Content VARCHAR ( 4000 ) --找到的值 --初始化一些变量 SET @ StartIndex = 1 --T-SQL中字符串的查找位置是从1开始的 SET @ FindIndex = 0 --开始循环查找字符串逗号 WHILE ( @ StartIndex <= LEN ( @ Text )) BEGIN --查找字符串函数 CHARINDEX 第一个参数是要找的字符串 -- 第二个参数是在哪里查找这个字符串 -- 第三个参数是开始查找的位置 --返回值是找到字符串的位置 SELECT @ FindIndex = CHARINDEX ( ',' , @ Text , @ StartIndex ) --判断有没找到 没找到返回0 IF ( @ FindIndex = 0 OR @ FindIndex IS NULL ) BEGIN --如果没有找到就表示找完了 SET @ FindIndex = LEN ( @ Text ) + 1 END --截取字符串函数 SUBSTRING 第一个参数是要截取的字符串 -- 第二个参数是开始的位置 -- 第三个参数是截取的长度 SET @ Content = SUBSTRING ( @ Text , @ StartIndex , @ FindIndex -@ StartIndex ) --初始化下次查找的位置 SET @ StartIndex = @ FindIndex + 1 --把找的的值插入到要返回的Table类型中 INSERT INTO @ tempTable ( Value ) VALUES ( @ Content ) END RETURN END","text_tokens":["unique","referenced","into","到","columnlist","order","objid","fkref","段","ltrim","触发器","level1name","7","初始","ordinal","charindex","13","f","startindex","identifier","include","allow","when","d"," ","houpeidong","1","pad","u","ixdef","2018","字","description","asc","coalesce","chkconstlist","column","function","create","time","10","%","user","ixtype","ixpkflag","level2name","shipped","表名","要","arithabort","t","varchar","类型","null","go","objects","max","ic","ixincllist","返回","字段名","numeric","nulls","fknorepl","delete","了","from","三个","identity","precision","check","获取","cascade","返回值","like","中","system","begin","new","a","path","@","字符串","seed","nchar","fkreflist","*","index","or","tbcertifyuserapply","视图","referential","newid","sys","results","date","warnings","找到","开始查找","第一","字段","这个","extended","columns","完",",","table","crlf","--","columndefs","replication","dbname","0","ref","parentcollist","表示","by","表","foreign",".","concat","indexdefs","values","(","128","default","class","yields","is","第一个","add","const","varbinary","_","db2","int","locks","是从","db1","modify","factor","incr","n","if","colseq","第二","的","i","exec","cast","sql","]","update","ixconst","fillfactor","拆分","row","float","select","ansi","没","parent","schema","len","collate","properties","temptable","references","userdefinedflag","datetime2","一个","modules","fill","m","ep","binary","找","4","page","case","ixoptlist","发器",">","heap","下次","插入","id","ixname","link","scale","text","roundabort","第二个","substring","join","[","结构","逗号","insert","cross","isnull","fkupdopt","ixopts","types","findindex","位置",")","如果","procs","where","过程","length","while","descending","值","name","level0name","then","/","100","collection","procedure","ixcollist",";","在","就","ixconstlist","addextendedproperty","as","tables","ixincl","s","action","-","no","获取数据","and","minor","bit","refcollist","tableobj","变量","k","collections","+","fkdelopt","declare","ignore","end","datetimeoffset","left","indexes","tinyint","columndef","maxrecursion","第三个","5","ixcols","level2type","开始","persisted","参数","2","不","fkcollist","padding","definition","object","off","ms","53","keys","函数","split","循环","4000","for","computed","触发","stuff","查找","datatype","top","第三","nullable","c","with","=","tablename","ident","option","stats","是","lower","p","recompute","dup","in","一些","数据","cn9c080","returns","type","char","included","说明","inner","parsename","'","padded","o","nvarchar","constraint","quoted","没有","level1type","desc","sp","f1","fkdefs","constraints","初始化","索引","decimal","fkname","长度","1000","gettext","on","statistics","set","quotename","<","3","value","x","key","major","哪里","创建","else","fkconstlist","primary","db","截取","二个","return","apply","cols","content","把","databasepropertyex","collation","判断","rowguidcol","字符","30","xml","indexlist","有","05","not","level0type","tt"],"title":"[hackettyu'snippets] get-data-table-create-structure","title_tokens":["structure","snippets","]","-","data","create"," ","get","[","'","table","hackettyu"]},{"location":"docs/via/LGTM/","text":"[转载] LGTM ¶ VIA 请确保您熟悉 PR 修改的包。 确保您有足够的时间查看 PR，每小时使用 300 LOC 进行估算。 确保您可以在接下来的几天里关注 PR 的更新。 阅读 PR 的描述，如果不容易理解，请要求编码器对其进行改进。 对于 Bug 修复 PR，如果没有测试用例，请要求编码器添加测试。 对于性能 PR，如果未提供基准结果，请要求编码器添加基准结果。 审核过程中要检查的事项 我能否理解每个单元测试的目的？ 单元测试是否实际测试代码是否正在执行预期功能？ 单元测试覆盖所有重要的代码块和专门处理的错误吗？ 过程测试是否可以重写为表驱动的测试？ 代码是按照样式指南编写的吗？ 同一代码是否重复两次以上？ 注释是否存在并描述代码的意图？ 黑客、解决方法和临时修复程序是被评论的吗？ 此函数是否比名称建议执行的更多？ 是否可以用它的名称推断此函数的行为？ 测试是否存在，它们是全面的吗？ 单元测试覆盖所有重要的代码分支吗？ 测试代码是否可以提取到表驱动的测试中？ 撰写评论时要记住的事项 善待编码器，而不是代码。 提出问题，而不是发言。 以尊重、尊重和耐心对待比你少的人。 当代码质量超出您的预期时，请记住表扬。 如果编码器的解决方案与您的解决方案不同，则不一定是错误的。 必要时参考代码样式文档。 提交评论后要记住的事项 定期签出 Github 通知，以跟踪 PR 的更新。 更新 PR 后，开始新一轮审核或给它一个 LGTM。","text_tokens":["pr","重复","不是","则","处理","确保","以上","比","两次","签出","提取","函数","它们","时要","到表","注释","以","您","查看","添加","修改","必要","容易","它","当","理解","[","？","人","¶","300","接下来","时","指南","程序","每","，","少","重要"," ","足够","事项","更新","跟踪","审核","转载","是","驱动","测试代码","给","基准","我","要求","而","。","如果","每个","过程","建议","对待","via","loc","新一轮","定期","关注","提出","重写","确保您","按照","结果","修复","专门","使用","能否","块","单元测试","更","不同","为表","没有","方法","github","lgtm","编写","解决方案","单元","熟悉","功能","请","执行","码器","可以","在","问题","覆盖","其","同一","的","行为","超出","bug","黑客","全面","你","表扬","质量","性能","]","和","发言","通知","包","方案","代码","编码","中","里","检查","存在","阅读","提供","记住","改进","后","尊重","吗","时间","意图","或","下来","此","用","进行","估算","推断","目的","是否","后要","分支","一轮","一定","错误","多","提交","对","实际","、","文档","并","开始","所有","撰写","测试","与","小时","编码器","几天","对于","描述","样式","一个","正在","被","试用","有","解决","测试用例","未","预期","参考","评论","善待","不","接下","中要","名称","临时","耐心"],"title":"[转载] LGTM","title_tokens":["转载","]"," ","[","lgtm"]},{"location":"docs/via/LGTM/#lgtm","text":"VIA 请确保您熟悉 PR 修改的包。 确保您有足够的时间查看 PR，每小时使用 300 LOC 进行估算。 确保您可以在接下来的几天里关注 PR 的更新。 阅读 PR 的描述，如果不容易理解，请要求编码器对其进行改进。 对于 Bug 修复 PR，如果没有测试用例，请要求编码器添加测试。 对于性能 PR，如果未提供基准结果，请要求编码器添加基准结果。 审核过程中要检查的事项 我能否理解每个单元测试的目的？ 单元测试是否实际测试代码是否正在执行预期功能？ 单元测试覆盖所有重要的代码块和专门处理的错误吗？ 过程测试是否可以重写为表驱动的测试？ 代码是按照样式指南编写的吗？ 同一代码是否重复两次以上？ 注释是否存在并描述代码的意图？ 黑客、解决方法和临时修复程序是被评论的吗？ 此函数是否比名称建议执行的更多？ 是否可以用它的名称推断此函数的行为？ 测试是否存在，它们是全面的吗？ 单元测试覆盖所有重要的代码分支吗？ 测试代码是否可以提取到表驱动的测试中？ 撰写评论时要记住的事项 善待编码器，而不是代码。 提出问题，而不是发言。 以尊重、尊重和耐心对待比你少的人。 当代码质量超出您的预期时，请记住表扬。 如果编码器的解决方案与您的解决方案不同，则不一定是错误的。 必要时参考代码样式文档。 提交评论后要记住的事项 定期签出 Github 通知，以跟踪 PR 的更新。 更新 PR 后，开始新一轮审核或给它一个 LGTM。","text_tokens":["pr","重复","不是","则","处理","确保","以上","比","两次","签出","提取","函数","它们","时要","到表","注释","以","您","查看","添加","修改","必要","容易","它","当","理解","？","人","300","时","接下来","指南","程序","每","，","少","重要"," ","足够","事项","更新","跟踪","审核","是","驱动","测试代码","给","基准","我","要求","而","。","如果","每个","过程","建议","对待","via","loc","新一轮","定期","关注","提出","重写","确保您","按照","结果","修复","专门","使用","能否","块","单元测试","更","不同","为表","没有","方法","github","lgtm","编写","解决方案","单元","熟悉","功能","请","执行","码器","可以","在","问题","覆盖","其","同一","的","行为","超出","bug","黑客","全面","你","表扬","质量","性能","和","发言","通知","包","方案","代码","编码","中","里","检查","存在","阅读","提供","记住","改进","后","尊重","吗","时间","意图","或","下来","此","用","进行","估算","推断","目的","是否","后要","分支","一轮","一定","错误","多","提交","对","实际","、","文档","并","开始","所有","撰写","测试","与","小时","编码器","几天","对于","描述","样式","一个","正在","被","试用","有","解决","测试用例","未","预期","参考","评论","善待","不","接下","中要","名称","临时","耐心"],"title":"[转载] LGTM","title_tokens":["转载","]"," ","[","lgtm"]},{"location":"docs/via/bilibili-rex/","text":"[转载] bilibili 正则 ¶ VIA <filters> <!-- my ban list --> <item enabled= \"true\" > r=没那味儿 </item> <item enabled= \"true\" > r=^(.)\\1+$ </item> <!-- 111 aaa 哈哈哈 --> <item enabled= \"true\" > r=.+爱了.+ </item> <!-- 爱了 --> <item enabled= \"true\" > r=.+小姐姐.+ </item> <!-- 小姐姐 --> <item enabled= \"true\" > r=.+小哥哥.+ </item> <!-- 小哥哥 --> <item enabled= \"true\" > r=awsl </item> <!-- awsl --> <item enabled= \"true\" > r=加油 </item> <!-- 加油 --> <!-- INCLUDE VIA https://github.com/xmcp/bilibili-ban-list/blob/master/tv.bilibili.player.xml --> <!-- 无意义弹幕 --> <item enabled= \"true\" > r=.{50} </item> <!-- 超长弹幕 --> <item enabled= \"true\" > r=^[\\.。,，\\/\\?？!！~～@\\^、+=\\-_ ]+$ </item> <!-- 无意义符号 --> <item enabled= \"true\" > r=^[^\\u4E00-\\u9FA5]$ </item> <!-- 单个非中文字符 --> <!-- 建筑美 --> <item enabled= \"true\" > r=弹\\s*[屏幕][^护]*$ </item> <!-- 弹幕墙、弹幕测试…… 防止误伤弹幕护体 --> <item enabled= \"true\" > t=倍速 </item> <item enabled= \"true\" > r=[3３三立]\\s+[dDＤ体體] </item> <!-- 立 体 弹 幕 --> <item enabled= \"true\" > r=(^|是)..[红橙黄绿青蓝紫黑白灰].{0,2}$ </item> <!-- 颜色 --> <!-- 播放相关 --> <item enabled= \"true\" > r=^[第前]([0-9零一二两三四五六七八九十百千万亿].{0,6})?$ </item> <item enabled= \"true\" > r=^.{1,6}[天时点分钟秒]前 </item> <item enabled= \"true\" > r=^[0-9零一二两三四五六七八九十百千万亿nN]{1,4}(刷|周[木目])$ </item> <item enabled= \"true\" > r=破.*[wW万萬] </item> <item enabled= \"true\" > r=[wW万萬]助攻 </item> <item enabled= \"true\" > r=钟的?诅咒 </item> <item enabled= \"true\" > r=口[气氣].*[集级] </item> <item enabled= \"true\" > t=完结 </item> <item enabled= \"true\" > t=撒花 </item> <item enabled= \"true\" > t=从左到右 </item> <item enabled= \"true\" > r=[0-9万名].{1,6}[伴你们人友]($|.*[豪嚎号好]) </item> <!-- 12450个小伙伴好 --> <!-- 空降 --> <item enabled= \"true\" > r=降.{0,3}(成功|失败|完美) </item> <item enabled= \"true\" > t=完美空降 </item> <item enabled= \"true\" > r=空难(现场|$) </item> <!-- 漂移 --> <item enabled= \"true\" > r=[漂飘飄飙][移逸遗] </item> <item enabled= \"true\" > r=[左右][漂飘飄飙] </item> <item enabled= \"true\" > r=(\\s|^|[我怎来会].?)[漂飘飄飙]+($|.?[～~?？。，啊]|\\s) </item> <item enabled= \"true\" > r=\\s{5} </item> <!-- 跟风刷屏 --> <item enabled= \"true\" > r=入(宅|坑$) </item> <!-- xx（作品名）入宅 --> <item enabled= \"true\" > r=^什么[!\\?！？，,、~\\s] </item> <!-- 什么？xxxx了！？ --> <item enabled= \"true\" > r=^《.*》$ </item> <!-- 书名刷屏 --> <item enabled= \"true\" > r=^告诉.*[我还永] </item> <!-- 告诉xx我爱她 --> <item enabled= \"true\" > r=暴[露漏]((补番)?时间)?[了乐啦拉] </item> <!-- 我也暴露了 --> <item enabled= \"true\" > r=周目($|.*(我|回|起|报|人|过|来|此)) </item> <!-- N周目加我一个 --> <item enabled= \"true\" > r=つロ|[干肝乾]杯 </item> <!-- bilibili干杯 --> <item enabled= \"true\" > r=[马馬][冬东]|[冬东]梅|[马馬]什么梅 </item> <!-- <item enabled=\"true\">r=[拉啦雷蕾][姆母拇]</item> --> <!-- <item enabled=\"true\">r=170001</item> --> <!-- 无意义撕逼 --> <item enabled= \"true\" > r=[fF]{3}.*(真爱|百合|基|性恋) </item> <!-- 不烧真爱的FFF团不是真正的FFF团 --> <item enabled= \"true\" > r=豆腐.*[酸甜苦辣咸臭糖盐醋吃加] </item> <item enabled= \"true\" > r=[酸甜苦辣咸臭糖盐醋吃加].*豆腐 </item> <!-- 要是B站的正则支持负向零宽断言，其实是可以写在一行里的 --> <item enabled= \"true\" > r=我的?(床上|老婆) </item> <!-- 你们都错了，蕾姆其实在我床上 --> <item enabled= \"true\" > t=我选 </item> <!-- 说得好，我选择xxx --> <!-- 日期相关 --> <item enabled= \"true\" > r=(\\d{1,2}|十|十?[一二三四五六七八九十])([\\.,\\/:：、，；点\\-月。]|\\s+)(\\d{1,2}|[二三]?十|[二三]?十?[一二三四五六七八九]).{0,4}($|[日的过我别你上午夜晨]) </item> <!-- 1月11的路过 --> <item enabled= \"true\" > r=\\d\\d(\\d\\d)?([\\.,。，、\\/\\-年—*]|\\s+)\\d(\\d)?([\\.,。，、\\/\\-月—*]|\\s+)\\d </item> <!-- 2000.1.11路过 --> <item enabled= \"true\" > r=^(2([^3]\\d|3[^3])|6([^6]\\d|6[^6])|[^26]\\d{2})\\d{0,5}$ </item> <!-- ^(?!233|666)\\d{3,8}$，屏蔽20160101 --> <item enabled= \"true\" > r=(元旦|年|国庆|春|秋|圣诞).?快乐 </item> </filters>","text_tokens":["enabled","十","不是","还","小","爱","百千万","杯","３","include","nn","年","移逸遗","d"," ","一二三","1","圣诞","～","}","集级","12450","26","春","断言","八九十","诅咒","拇","我",".+","好","国庆","晨","幕","你们","快乐","名","》","8","青蓝紫","红橙","降","万亿","报","作品","t","二三","真爱","上","u9fa5","dd","可以","干肝乾","一二","无","~","会","了","露漏","蕾","u4e00","百千","点","写","老婆",":","刷","哈哈哈","黄绿","此","六七八九十","要是","加","冬东","（","@","伙伴","吃","拉","美","*","百合","她","?","支持","233","永","$","体體","灰","也","说得好",",","小伙","；","master","--","我选","0","ｄ","月","站","七八",".","三立","补番","体","bilibili","成功","(","万萬","伴","撒花","^","b","漂飘飄飙","醋","\\","{","梅","真","xmcp","姐姐","一二三四五","666","github","负向","n","播放","暴露","的","过","护体","]","xx","九十","现场","都","blob","秒","啦","没","《","六七","姆母","https","味儿","、","三","9","小姐姐","）","r","千万亿","一个","酸甜苦辣","什么","口","豆腐","4","一二三四五六七八九十","111",">","防止","倍速","酸甜","逼","ww","[","？","人","二两","护","item","，","ban","从左到右","list","八九","6","转载","空降",")","\"","立","入","小伙伴","来","黑白","日","回","非中文","com","团","/","那","前","坑","路过","助攻","|","在","盐","千万","符号","宅","170001","哈哈","s","怎来","-","单个","破","糖","四五","天时","颜色","三四","周目加","刷屏","雷蕾","+","true","时间","哥哥","书名","起","5","player","误伤","分钟","测试","！","跟风","基","2","弹","周","左右","完美","干杯","豪嚎","..","宽","屏蔽","超长","中文","一行","人友","awsl","aaa","告诉","号","百千万亿","失败","¶","=","气氣","日期","暴","tv","幕墙","建筑","是","意义","ロ","xxxx","ff","错","乐","-_","相关","。","via","姆","my","xxx","20160101","周目","第前","秋","啊","钟","入宅","元旦","屏幕","零","正则","弹幕","马馬","：","你","小姐","漂移","木目","—","选择","<","万名","3","我别","里","个","加油","!","つ","fff","…","撕","50","午夜","2000.1","真正","其实","性恋","不烧","完结","字符","11","咸臭","一二两","filters","空难","青蓝","xml","五六","床上"],"title":"[转载] bilibili 正则","title_tokens":["转载","]","正则"," ","[","bilibili"]},{"location":"docs/via/bilibili-rex/#bilibili","text":"VIA <filters> <!-- my ban list --> <item enabled= \"true\" > r=没那味儿 </item> <item enabled= \"true\" > r=^(.)\\1+$ </item> <!-- 111 aaa 哈哈哈 --> <item enabled= \"true\" > r=.+爱了.+ </item> <!-- 爱了 --> <item enabled= \"true\" > r=.+小姐姐.+ </item> <!-- 小姐姐 --> <item enabled= \"true\" > r=.+小哥哥.+ </item> <!-- 小哥哥 --> <item enabled= \"true\" > r=awsl </item> <!-- awsl --> <item enabled= \"true\" > r=加油 </item> <!-- 加油 --> <!-- INCLUDE VIA https://github.com/xmcp/bilibili-ban-list/blob/master/tv.bilibili.player.xml --> <!-- 无意义弹幕 --> <item enabled= \"true\" > r=.{50} </item> <!-- 超长弹幕 --> <item enabled= \"true\" > r=^[\\.。,，\\/\\?？!！~～@\\^、+=\\-_ ]+$ </item> <!-- 无意义符号 --> <item enabled= \"true\" > r=^[^\\u4E00-\\u9FA5]$ </item> <!-- 单个非中文字符 --> <!-- 建筑美 --> <item enabled= \"true\" > r=弹\\s*[屏幕][^护]*$ </item> <!-- 弹幕墙、弹幕测试…… 防止误伤弹幕护体 --> <item enabled= \"true\" > t=倍速 </item> <item enabled= \"true\" > r=[3３三立]\\s+[dDＤ体體] </item> <!-- 立 体 弹 幕 --> <item enabled= \"true\" > r=(^|是)..[红橙黄绿青蓝紫黑白灰].{0,2}$ </item> <!-- 颜色 --> <!-- 播放相关 --> <item enabled= \"true\" > r=^[第前]([0-9零一二两三四五六七八九十百千万亿].{0,6})?$ </item> <item enabled= \"true\" > r=^.{1,6}[天时点分钟秒]前 </item> <item enabled= \"true\" > r=^[0-9零一二两三四五六七八九十百千万亿nN]{1,4}(刷|周[木目])$ </item> <item enabled= \"true\" > r=破.*[wW万萬] </item> <item enabled= \"true\" > r=[wW万萬]助攻 </item> <item enabled= \"true\" > r=钟的?诅咒 </item> <item enabled= \"true\" > r=口[气氣].*[集级] </item> <item enabled= \"true\" > t=完结 </item> <item enabled= \"true\" > t=撒花 </item> <item enabled= \"true\" > t=从左到右 </item> <item enabled= \"true\" > r=[0-9万名].{1,6}[伴你们人友]($|.*[豪嚎号好]) </item> <!-- 12450个小伙伴好 --> <!-- 空降 --> <item enabled= \"true\" > r=降.{0,3}(成功|失败|完美) </item> <item enabled= \"true\" > t=完美空降 </item> <item enabled= \"true\" > r=空难(现场|$) </item> <!-- 漂移 --> <item enabled= \"true\" > r=[漂飘飄飙][移逸遗] </item> <item enabled= \"true\" > r=[左右][漂飘飄飙] </item> <item enabled= \"true\" > r=(\\s|^|[我怎来会].?)[漂飘飄飙]+($|.?[～~?？。，啊]|\\s) </item> <item enabled= \"true\" > r=\\s{5} </item> <!-- 跟风刷屏 --> <item enabled= \"true\" > r=入(宅|坑$) </item> <!-- xx（作品名）入宅 --> <item enabled= \"true\" > r=^什么[!\\?！？，,、~\\s] </item> <!-- 什么？xxxx了！？ --> <item enabled= \"true\" > r=^《.*》$ </item> <!-- 书名刷屏 --> <item enabled= \"true\" > r=^告诉.*[我还永] </item> <!-- 告诉xx我爱她 --> <item enabled= \"true\" > r=暴[露漏]((补番)?时间)?[了乐啦拉] </item> <!-- 我也暴露了 --> <item enabled= \"true\" > r=周目($|.*(我|回|起|报|人|过|来|此)) </item> <!-- N周目加我一个 --> <item enabled= \"true\" > r=つロ|[干肝乾]杯 </item> <!-- bilibili干杯 --> <item enabled= \"true\" > r=[马馬][冬东]|[冬东]梅|[马馬]什么梅 </item> <!-- <item enabled=\"true\">r=[拉啦雷蕾][姆母拇]</item> --> <!-- <item enabled=\"true\">r=170001</item> --> <!-- 无意义撕逼 --> <item enabled= \"true\" > r=[fF]{3}.*(真爱|百合|基|性恋) </item> <!-- 不烧真爱的FFF团不是真正的FFF团 --> <item enabled= \"true\" > r=豆腐.*[酸甜苦辣咸臭糖盐醋吃加] </item> <item enabled= \"true\" > r=[酸甜苦辣咸臭糖盐醋吃加].*豆腐 </item> <!-- 要是B站的正则支持负向零宽断言，其实是可以写在一行里的 --> <item enabled= \"true\" > r=我的?(床上|老婆) </item> <!-- 你们都错了，蕾姆其实在我床上 --> <item enabled= \"true\" > t=我选 </item> <!-- 说得好，我选择xxx --> <!-- 日期相关 --> <item enabled= \"true\" > r=(\\d{1,2}|十|十?[一二三四五六七八九十])([\\.,\\/:：、，；点\\-月。]|\\s+)(\\d{1,2}|[二三]?十|[二三]?十?[一二三四五六七八九]).{0,4}($|[日的过我别你上午夜晨]) </item> <!-- 1月11的路过 --> <item enabled= \"true\" > r=\\d\\d(\\d\\d)?([\\.,。，、\\/\\-年—*]|\\s+)\\d(\\d)?([\\.,。，、\\/\\-月—*]|\\s+)\\d </item> <!-- 2000.1.11路过 --> <item enabled= \"true\" > r=^(2([^3]\\d|3[^3])|6([^6]\\d|6[^6])|[^26]\\d{2})\\d{0,5}$ </item> <!-- ^(?!233|666)\\d{3,8}$，屏蔽20160101 --> <item enabled= \"true\" > r=(元旦|年|国庆|春|秋|圣诞).?快乐 </item> </filters>","text_tokens":["enabled","十","不是","还","小","爱","百千万","杯","３","include","nn","年","移逸遗","d"," ","一二三","1","圣诞","～","}","集级","12450","26","春","断言","八九十","诅咒","拇","我",".+","好","国庆","晨","幕","你们","快乐","名","》","8","青蓝紫","红橙","降","万亿","报","作品","t","二三","真爱","上","u9fa5","dd","可以","干肝乾","一二","无","~","会","了","露漏","蕾","u4e00","百千","点","写","老婆",":","刷","哈哈哈","黄绿","此","六七八九十","要是","加","冬东","（","@","伙伴","吃","拉","美","*","百合","她","?","支持","233","永","$","体體","灰","也","说得好",",","小伙","；","master","--","我选","0","ｄ","月","站","七八",".","三立","补番","体","bilibili","成功","(","万萬","伴","撒花","^","b","漂飘飄飙","醋","\\","{","梅","真","xmcp","姐姐","一二三四五","666","github","负向","n","播放","暴露","的","过","护体","]","xx","九十","现场","都","blob","秒","啦","没","《","六七","姆母","https","味儿","、","三","9","小姐姐","）","r","千万亿","一个","酸甜苦辣","什么","口","豆腐","4","一二三四五六七八九十","111",">","防止","倍速","酸甜","逼","ww","[","？","人","二两","护","item","，","ban","从左到右","list","八九","6","空降",")","\"","立","入","小伙伴","来","黑白","日","回","非中文","com","团","/","那","前","坑","路过","助攻","|","在","盐","千万","符号","宅","170001","哈哈","s","怎来","-","单个","破","糖","四五","天时","颜色","三四","周目加","刷屏","雷蕾","+","true","时间","哥哥","书名","起","5","player","误伤","分钟","测试","！","跟风","基","2","弹","周","左右","完美","干杯","豪嚎","..","宽","屏蔽","超长","中文","一行","人友","awsl","aaa","告诉","号","百千万亿","失败","=","气氣","日期","暴","tv","幕墙","建筑","是","意义","ロ","xxxx","ff","错","乐","-_","相关","。","via","姆","my","xxx","20160101","周目","第前","秋","啊","钟","入宅","元旦","屏幕","零","正则","弹幕","马馬","：","你","小姐","漂移","木目","—","选择","<","万名","3","我别","里","个","加油","!","つ","fff","…","撕","50","午夜","2000.1","真正","其实","性恋","不烧","完结","字符","11","咸臭","一二两","filters","空难","青蓝","xml","五六","床上"],"title":"[转载] bilibili 正则","title_tokens":["转载","]","正则"," ","[","bilibili"]},{"location":"docs/via/get_m3u8/","text":"[转载] 使用 Javascript 获取 m3u8 ¶ VIA: nilaoda.github.io/N_m3u8DL-CLI/GetM3u8.html 本页将提供一些JS代码，在您的浏览器运行这些代码有助于更快的获取到m3u8链接用以下载。 为了方便使用，最好将下面的JS代码存为书签。 注意： 所有代码仅供学习，请勿用于任何违法途径 本页Javascript代码更新于2019年9月21日，测试于360极速浏览器，其他浏览器不保证正常使用 腾讯视频 可直接将这个超链接拖入你的书签栏：腾讯视频 javascript : prompt ( PLAYER . _DownloadMonitor . context . dataset . title , PLAYER . _DownloadMonitor . context . dataset . currentVideoUrl ); 优酷视频 可直接将这个超链接拖入你的书签栏：优酷视频 javascript : var url ; var size = 0 ; Array . from ( videoPlayer . getData (). _playlistData . stream ). forEach ( function ( element , index , array ){ if ( element . audio_lang == videoPlayer . getConfig (). language && element . size > size ){ url = element . m3u8_url ; size = element . size }}); /*nilaoda*/ prompt ( videoPlayer . getData (). _videoData . title + \"_\" + videoPlayer . getConfig (). language + \"_\" + ( size / 1024 / 1024 ). toFixed ( 2 ) + \"MB\" , url ); 补充说明 (20191016)： 目前部分优酷视频使用了其自有DRM加密，下载器暂时无法解密。不过使用火狐浏览器的UA(Mozilla/5.0 (Windows NT 10.0; win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0)播放视频可以获取到 http : //pl-ali.youku.com/playlist/m3u8?vid=XNDMwMDI5MDE1Mg&type=…… 形式的m3u8的链接，此种格式的链接就可以使用本下载器正常下载。 爱奇艺/愛奇藝视频 可直接将这个超链接拖入你的书签栏：爱奇艺视频 javascript : try { var info = playerObject . _player . _core . _movieinfo . originalData . data . program . video ; info . forEach ( function ( item , index ){ if ( item . _selected ){ var m3u8Content = \"\" ; if ( item . m3u8 == undefined ){ try { if ( typeof ( eval ( cmd5x )) == \"function\" ){}} catch ( e ){ var req1 = new XMLHttpRequest (); req1 . open ( \"GET\" , \"https://static.iqiyi.com/js/common/f6a3054843de4645b34d205a9f377d25.js\" , false ); req1 . onload = function (){ var script = document . createElement ( \"script\" ); script . text = req1 . responseText ; document . getElementsByTagName ( \"head\" )[ 0 ]. appendChild ( script )}; req1 . send ( null )} var fs = item . fs ; var content = \"#EXTM3U\\n\" ; fs . forEach ( function ( fs_i , fs_index ){ var url = fs_i . l ; var prefix = \"https://data.video.iqiyi.com/videos\" ; var api = prefix + url ; try { var t = playerObject . _player . _core . _movieinfo . originalData . data . boss . data . t ; api = prefix + url + \"&cross-domain=1&t=\" + t + \"&QY00001=\" + /qd_uid=(\\d+)/g . exec ( url )[ 1 ] + \"&ib=4&ptime=0&ibt=\" + cmd5x ( t + /\\/(\\w{10,})/g . exec ( url )[ 1 ])} catch ( err ){} var req = new XMLHttpRequest (); req . overrideMimeType ( \"application/json\" ); req . open ( \"GET\" , api , false ); req . onload = function (){ var jsonResponse = JSON . parse ( req . responseText ); content += \"#EXTINF:0\\n\" + jsonResponse [ \"l\" ] + \"\\n\" }; req . send ( null )}); content += \"#EXT-X-ENDLIST\" ; m3u8Content = content } else { m3u8Content = item . m3u8 } var blob = new Blob ([ m3u8Content ],{ type : \"text/plain\" }); var url = URL . createObjectURL ( blob ); var title = ( document . title . indexOf ( \"-\" ) !=- 1 ? document . title . substring ( 0 , document . title . indexOf ( \"-\" )) : document . title . replace ( /\\s/ , \"\" )) + \"_\" + item . scrsz + \"_\" + ( item . code == 2 ? \"H264\" : \"H265\" ) + \"_\" + document . getElementsByClassName ( \"iqp-time-dur\" )[ 0 ]. innerText . replace ( /:/ , \".\" ) + \"_\" + ( item . vsize / 1024 / 1024 ). toFixed ( 2 ) + \"MB.m3u8\" ; var aLink = document . createElement ( \"a\" ); aLink . href = url ; aLink . download = title ; aLink . style . display = \"none\" ; var event ; if ( window . MouseEvent ){ event = new MouseEvent ( \"click\" )} else { event = document . createEvent ( \"MouseEvents\" ); event . initMouseEvent ( \"click\" , true , false , window , 0 , 0 , 0 , 0 , 0 , false , false , false , false , 0 , null )} aLink . dispatchEvent ( event )}})} catch ( err ){ var info1 = playerObject . _player . package . engine . adproxy . engine . movieinfo . vidl ; info1 . forEach ( function ( item1 , index1 ){ if ( item1 . responseData != undefined ){ var info = item1 . responseData . data . program . video ; info . forEach ( function ( item , index ){ if ( item . _selected ){ var m3u8Content = \"\" ; if ( item . m3u8 == undefined ){ try { if ( typeof ( eval ( cmd5x )) == \"function\" ){}} catch ( e ){ var req1 = new XMLHttpRequest (); req1 . open ( \"GET\" , \"https://static.iqiyi.com/js/common/f6a3054843de4645b34d205a9f377d25.js\" , false ); req1 . onload = function (){ var script = document . createElement ( \"script\" ); script . text = req1 . responseText ; document . getElementsByTagName ( \"head\" )[ 0 ]. appendChild ( script )}; req1 . send ( null )} var fs = item . fs ; var content = \"#EXTM3U\\n\" ; fs . forEach ( function ( fs_i , fs_index ){ var url = fs_i . l ; var prefix = \"https://data.video.iqiyi.com/videos\" ; var api = prefix + url ; try { var t = playerObject . _player . package . engine . adproxy . engine . movieinfo . current . boss . data . t ; api = prefix + url + \"&cross-domain=1&t=\" + t + \"&QY00001=\" + /qd_uid=(\\d+)/g . exec ( url )[ 1 ] + \"&ib=4&ptime=0&ibt=\" + cmd5x ( t + /\\/(\\w{10,})/g . exec ( url )[ 1 ])} catch ( err ){ console . error ( err )} var req = new XMLHttpRequest (); req . overrideMimeType ( \"application/json\" ); req . open ( \"GET\" , api , false ); req . onload = function (){ var jsonResponse = JSON . parse ( req . responseText ); content += \"#EXTINF:0\\n\" + jsonResponse [ \"l\" ] + \"\\n\" }; req . send ( null )}); content += \"#EXT-X-ENDLIST\" ; m3u8Content = content } else { m3u8Content = item . m3u8 } var blob = new Blob ([ m3u8Content ],{ type : \"text/plain\" }); var url = URL . createObjectURL ( blob ); var title = ( document . title . indexOf ( \"-\" ) !=- 1 ? document . title . substring ( 0 , document . title . indexOf ( \"-\" )) : document . title . replace ( /\\s/ , \"\" )) + \"_\" + item . scrsz + \"_\" + ( item . code == 2 ? \"H264\" : \"H265\" ) + \"_\" + document . getElementsByClassName ( \"iqp-time-dur\" )[ 0 ]. innerText . replace ( /:/ , \".\" ) + \"_\" + ( item . vsize / 1024 / 1024 ). toFixed ( 2 ) + \"MB.m3u8\" ; /*nilaoda*/ var aLink = document . createElement ( \"a\" ); aLink . href = url ; aLink . download = title ; aLink . style . display = \"none\" ; var event ; if ( window . MouseEvent ){ event = new MouseEvent ( \"click\" )} else { event = document . createEvent ( \"MouseEvents\" ); event . initMouseEvent ( \"click\" , true , false , window , 0 , 0 , 0 , 0 , 0 , false , false , false , false , 0 , null )} aLink . dispatchEvent ( event )}})}})} 爱奇艺/愛奇藝 杜比音轨 可直接将这个超链接拖入你的书签栏：爱奇艺杜比音轨 javascript : eval ( function ( p , a , c , k , e , r ){ e = function ( c ){ return ( c < a ? '' : e ( parseInt ( c / a ))) + (( c = c % a ) > 35 ? String . fromCharCode ( c + 29 ) : c . toString ( 36 ))}; if ( ! '' . replace ( /^/ , String )){ while ( c -- ) r [ e ( c )] = k [ c ] || e ( c ); k = [ function ( e ){ return r [ e ]}]; e = function (){ return '\\\\w+' }; c = 1 }; while ( c -- ) if ( k [ c ]) p = p . replace ( new RegExp ( '\\\\b' + e ( c ) + '\\\\b' , 'g' ), k [ c ]); return p }( '3 B=A 1k();B.1j(\"1h\",\"R://2I.M.C/1c/1Q/2b.1c\",9);B.1b=7(){3 a=6.Q(\"19\");a.1m=B.Z;6.V(\"U\")[0].S(a)};B.18(z);7 G(a){3 b=6.2S.14(\"; \");1K(3 i=0;i<b.1Y;i++){3 c=b[i].14(\"=\");J(a==c[0])K 1d(c[1])}K z}7 N(a,b){3 c=A 1U(\\'(^|&)\\'+a+\\'=([^&]*)(&|$)\\',\\'i\\');3 r=b.22(c);J(r!=z){K 1d(r[2])}K z}3 L=8.2T.15.O(\"1L.M.C\")!=-1?\"1M\":\"1O\";3 F=1R.1S.1T.1a.1X.1a.F;3 P=\"/1Z/20?1e=\"+F.1e+\"&24=26&27=28&D=\"+F.D+\"&L=\"+L+\"&2d=0&2e=1&2h=\"+G(\"2i\")+\"&2x=2y&2E=0&T=\"+G(\"2M\")+\"&2R=0&d=0&s=&1n=&1o=&1p=&1q=1&1r=0&1s=0&1t=\"+G(\"1u\")+\"&1v=1w&1x=0&1y=2&1z=\"+(A 2Z()).1B()+\"&1C=a&1D=0&1E=1F&1G=1H&1I=1&1J=W&Y=1&Y=5\";8.I=\"R://1N.11.M.C\"+P+\"&1P=\"+12(P);13(8.I);7 13(a){3 b=6.V(\"U\")[0];3 c=6.Q(\"19\");c.L=a;b.S(c)}7 W(e){3 x=e.H.1V.1W;3 y=0;x.17(7(m,n){J(m.21){3 o=m.23;3 p=\"#25\\\\n\";o.17(7(b,c){3 f=b.l;y+=b.b;3 h=\"R://H.11.M.C/29\";3 i=h+f;2a{3 t=e.H.2c.H.t;3 j=N(\"D\",8.I);3 k=N(\"T\",8.I);i=h+f+\"&t=\"+t+\"&D=\"+j+\"&2f=\"+/2g=(\\\\d+)/g.1f(f)[1]+\"&2j=\"+k+\"&2k=4&2l=\"+12(t+/\\\\/(\\\\w{10,})/g.1f(f)[1])+\"&2m=0\"}2n(2o){}3 l=A 1k();l.2p(\"2q/2r\");l.1j(\"1h\",i,9);l.1b=7(){3 a=2s.2t(l.Z);p+=\"#2u:0\\\\n\"+a[\"l\"]+\"\\\\n\"};l.18(z)});p+=\"#2v-X-2w\";1g=p;3 q=A 2z([1g],{2A:\"1m/2B\"});3 r=2C.2D(q);3 s=(6.E.O(\"-\")!=-1?6.E.2F(0,6.E.O(\"-\")):6.E.2G(/\\\\s/,\"\"))+\"2H\"+(y/1i/1i).2J(2)+\"2K.2L\";3 u=6.Q(\"a\");u.15=r;u.2N=s;u.2O.2P=\"2Q\";3 v;J(8.1l){v=A 1l(\"16\")}2U{v=6.2V(\"2W\");v.2X(\"16\",2Y,9,8,0,0,0,0,0,9,9,9,9,0,z)}u.1A(v)}})}' , 62 , 186 , '|||var|||document|function|window|false||||||||||||||||||||||||||null|new|req1|com|vid|title|movieinfo|getCookie|data|dashUrl|if|return|src|iqiyi|getQueryString|indexOf|params|createElement|https|appendChild|k_uid|head|getElementsByTagName|NILAODA||ut|responseText||video|cmd5x|loadScript|split|href|click|forEach|send|script|engine|onload|js|unescape|tvid|exec|m3u8Content|GET|1024|open|XMLHttpRequest|MouseEvent|text|lid|cf|ct|k_tag|ost|ppt|dfp|__dfp|locale|zh_cn|k_err_retries|qd_v|tm|dispatchEvent|getTime|qdy|qds|k_ft1|1354994433|k_ft4|8196|k_ft5|callback|for|tw|01010031010010000000|cache|01010031010000000000|vf|common|playerObject|_player|package|RegExp|program|audio|adproxy|length|jp|dash|_selected|match|fs|bid|EXTM3U|300|abid|500|videos|try|f6a3054843de4645b34d205a9f377d25|boss_ts|vt|rs|QY00001|qd_uid|uid|P00003|su|ib|ibt|ptime|catch|err|overrideMimeType|application|json|JSON|parse|EXTINF|EXT|ENDLIST|ori|pcw|Blob|type|plain|URL|createObjectURL|ps|substring|replace|_dolby_|static|toFixed|MB|m3u8|QC005|download|style|display|none|pt|cookie|location|else|createEvent|MouseEvents|initMouseEvent|true|Date' . split ( '|' ), 0 ,{})) 爱奇艺/愛奇藝 4K H264 可直接将这个超链接拖入你的书签栏：爱奇艺4K_H264 javascript : eval ( function ( p , a , c , k , e , r ){ e = function ( c ){ return ( c < a ? '' : e ( parseInt ( c / a ))) + (( c = c % a ) > 35 ? String . fromCharCode ( c + 29 ) : c . toString ( 36 ))}; if ( ! '' . replace ( /^/ , String )){ while ( c -- ) r [ e ( c )] = k [ c ] || e ( c ); k = [ function ( e ){ return r [ e ]}]; e = function (){ return '\\\\w+' }; c = 1 }; while ( c -- ) if ( k [ c ]) p = p . replace ( new RegExp ( '\\\\b' + e ( c ) + '\\\\b' , 'g' ), k [ c ]); return p }( '3 j=k 1e();j.1E(\"1J\",\"S://14.y.x/N/1K/1W.N\",7);j.11=6(){3 a=5.w(\"E\");a.z=j.2i;5.L(\"F\")[0].B(a)};j.1f(9);6 m(a){3 b=5.1P.G(\"; \");1Y(3 i=0;i<b.W;i++){3 c=b[i].G(\"=\");q(a==c[0])t R(c[1])}t 9}6 1g(a,b){3 c=k 1C(\\'(^|&)\\'+a+\\'=([^&]*)(&|$)\\',\\'i\\');3 r=b.1G(c);q(r!=9){t R(r[2])}t 9}3 p=8.1V.P.u(\"1Z.y.x\")!=-1?\"2a\":\"2d\";3 n=2j.2k.V.A.X.A.n;3 v=\"/Z/10?C=\"+n.C+\"&12=13&D=\"+n.D+\"&p=\"+p+\"&15=0&16=1&17=\"+m(\"18\")+\"&19=1a&1b=0&1c=\"+m(\"1d\")+\"&2q=0&d=0&s=&1h=&1i=&1j=&1k=1&1l=0&1m=0&1n=\"+m(\"1o\")+\"&1p=1q&1r=0&1s=2&1t=\"+(k 1u()).1v()+\"&1w=a&1x=0&1y=1z&1A=4&1B=H&1D=1\";8.I=\"S://1F.J.y.x\"+v+\"&1H=\"+1I(v);K(8.I);6 K(a){3 b=5.L(\"F\")[0];3 c=5.w(\"E\");c.p=a;b.B(c)}6 H(e){3 i=e.1L.1M.J;i.1N(6(a,b){q(a.1O){3 c=a.M;3 d=k 1Q([c],{1R:\"z/1S\"});3 e=1T.1U(d);3 f=(5.o.u(\"-\")!=-1?5.o.1X(0,5.o.u(\"-\")):5.o.O(/\\\\s/,\"\"))+\"l\"+a.20+\"l\"+(a.21==2?\"22\":\"23\")+\"l\"+5.24(\"25-26-27\")[0].28.O(/:/,\".\")+\"l\"+(a.29/Q/Q).2b(2)+\"2c.M\";3 g=5.w(\"a\");g.P=e;g.2e=f;g.2f.2g=\"2h\";3 h;q(8.T){h=k T(\"U\")}2l{h=5.2m(\"2n\");h.2o(\"U\",2p,7,8,0,0,0,0,0,7,7,7,7,0,9)}g.Y(h)}})}' , 62 , 151 , '|||var||document|function|false|window|null||||||||||req1|new|_|getCookie|movieinfo|title|src|if|||return|indexOf|params|createElement|com|iqiyi|text|engine|appendChild|tvid|vid|script|head|split|NILAODA|dashUrl|video|loadScript|getElementsByTagName|m3u8|js|replace|href|1024|unescape|https|MouseEvent|click|package|length|adproxy|dispatchEvent|jp|dash|onload|bid|800|static|vt|rs|uid|P00003|ori|pcw|ps|k_uid|QC005|XMLHttpRequest|send|getQueryString|lid|cf|ct|k_tag|ost|ppt|dfp|__dfp|locale|zh_cn|k_err_retries|qd_v|tm|Date|getTime|qdy|qds|k_ft2|8196|k_ft4|callback|RegExp|ut|open|cache|match|vf|cmd5x|GET|common|data|program|forEach|_selected|cookie|Blob|type|plain|URL|createObjectURL|location|f6a3054843de4645b34d205a9f377d25|substring|for|tw|scrsz|code|H264|H265|getElementsByClassName|iqp|time|dur|innerText|vsize|03020031010010000000|toFixed|MB|03020031010000000000|download|style|display|none|responseText|playerObject|_player|else|createEvent|MouseEvents|initMouseEvent|true|pt' . split ( '|' ), 0 ,{})) 爱奇艺/愛奇藝 4K H265 可直接将这个超链接拖入你的书签栏：爱奇艺4K_H265 javascript : eval ( function ( p , a , c , k , e , r ){ e = function ( c ){ return ( c < a ? '' : e ( parseInt ( c / a ))) + (( c = c % a ) > 35 ? String . fromCharCode ( c + 29 ) : c . toString ( 36 ))}; if ( ! '' . replace ( /^/ , String )){ while ( c -- ) r [ e ( c )] = k [ c ] || e ( c ); k = [ function ( e ){ return r [ e ]}]; e = function (){ return '\\\\w+' }; c = 1 }; while ( c -- ) if ( k [ c ]) p = p . replace ( new RegExp ( '\\\\b' + e ( c ) + '\\\\b' , 'g' ), k [ c ]); return p }( '3 9=j 1c();9.1C(\"1H\",\"R://13.x.w/M/1I/1U.M\",6);9.10=5(){3 a=4.v(\"D\");a.y=9.2g;4.K(\"E\")[0].A(a)};9.1e(8);5 l(a){3 b=4.1N.F(\"; \");1W(3 i=0;i<b.V;i++){3 c=b[i].F(\"=\");p(a==c[0])q Q(c[1])}q 8}5 1f(a,b){3 c=j 1A(\\'(^|&)\\'+a+\\'=([^&]*)(&|$)\\',\\'i\\');3 r=b.1E(c);p(r!=8){q Q(r[2])}q 8}3 o=7.1T.O.t(\"1X.x.w\")!=-1?\"28\":\"2b\";3 m=2h.2i.U.z.W.z.m;3 u=\"/Y/Z?B=\"+m.B+\"&11=12&C=\"+m.C+\"&o=\"+o+\"&14=0&15=1&16=\"+l(\"17\")+\"&18=19&1a=0&1b=\"+l(\"2o\")+\"&1d=0&d=0&s=&1g=&1h=&1i=&1j=1&1k=0&1l=0&1m=\"+l(\"1n\")+\"&1o=1p&1q=0&1r=2&1s=\"+(j 1t()).1u()+\"&1v=a&1w=0&1x=1y&1z=G&1B=1\";7.H=\"R://1D.I.x.w\"+u+\"&1F=\"+1G(u);J(7.H);5 J(a){3 b=4.K(\"E\")[0];3 c=4.v(\"D\");c.o=a;b.A(c)}5 G(e){3 i=e.1J.1K.I;i.1L(5(a,b){p(a.1M){3 c=a.L;3 d=j 1O([c],{1P:\"y/1Q\"});3 e=1R.1S(d);3 f=(4.n.t(\"-\")!=-1?4.n.1V(0,4.n.t(\"-\")):4.n.N(/\\\\s/,\"\"))+\"k\"+a.1Y+\"k\"+(a.1Z==2?\"20\":\"21\")+\"k\"+4.22(\"23-24-25\")[0].26.N(/:/,\".\")+\"k\"+(a.27/P/P).29(2)+\"2a.L\";3 g=4.v(\"a\");g.O=e;g.2c=f;g.2d.2e=\"2f\";3 h;p(7.S){h=j S(\"T\")}2j{h=4.2k(\"2l\");h.2m(\"T\",2n,6,7,0,0,0,0,0,6,6,6,6,0,8)}g.X(h)}})}' , 62 , 149 , '|||var|document|function|false|window|null|req1||||||||||new|_|getCookie|movieinfo|title|src|if|return|||indexOf|params|createElement|com|iqiyi|text|engine|appendChild|tvid|vid|script|head|split|NILAODA|dashUrl|video|loadScript|getElementsByTagName|m3u8|js|replace|href|1024|unescape|https|MouseEvent|click|package|length|adproxy|dispatchEvent|jp|dash|onload|bid|800|static|vt|rs|uid|P00003|ori|pcw|ps|k_uid|XMLHttpRequest|pt|send|getQueryString|lid|cf|ct|k_tag|ost|ppt|dfp|__dfp|locale|zh_cn|k_err_retries|qd_v|tm|Date|getTime|qdy|qds|k_ft2|8191|callback|RegExp|ut|open|cache|match|vf|cmd5x|GET|common|data|program|forEach|_selected|cookie|Blob|type|plain|URL|createObjectURL|location|f6a3054843de4645b34d205a9f377d25|substring|for|tw|scrsz|code|H264|H265|getElementsByClassName|iqp|time|dur|innerText|vsize|03020031010010000000|toFixed|MB|03020031010000000000|download|style|display|none|responseText|playerObject|_player|else|createEvent|MouseEvents|initMouseEvent|true|QC005' . split ( '|' ), 0 ,{})) 爱奇艺/愛奇藝 1080P H265 (低码) 可直接将这个超链接拖入你的书签栏：爱奇艺1080P_H265(低码) javascript : eval ( function ( p , a , c , k , e , r ){ e = function ( c ){ return ( c < a ? '' : e ( parseInt ( c / a ))) + (( c = c % a ) > 35 ? String . fromCharCode ( c + 29 ) : c . toString ( 36 ))}; if ( ! '' . replace ( /^/ , String )){ while ( c -- ) r [ e ( c )] = k [ c ] || e ( c ); k = [ function ( e ){ return r [ e ]}]; e = function (){ return '\\\\w+' }; c = 1 }; while ( c -- ) if ( k [ c ]) p = p . replace ( new RegExp ( '\\\\b' + e ( c ) + '\\\\b' , 'g' ), k [ c ]); return p }( '3 9=j 1c();9.1C(\"1H\",\"R://13.x.w/M/1I/1U.M\",6);9.10=5(){3 a=4.v(\"D\");a.y=9.2g;4.K(\"E\")[0].A(a)};9.1e(8);5 l(a){3 b=4.1N.F(\"; \");1W(3 i=0;i<b.V;i++){3 c=b[i].F(\"=\");p(a==c[0])q Q(c[1])}q 8}5 1f(a,b){3 c=j 1A(\\'(^|&)\\'+a+\\'=([^&]*)(&|$)\\',\\'i\\');3 r=b.1E(c);p(r!=8){q Q(r[2])}q 8}3 o=7.1T.O.t(\"1X.x.w\")!=-1?\"28\":\"2b\";3 m=2h.2i.U.z.W.z.m;3 u=\"/Y/Z?B=\"+m.B+\"&11=12&C=\"+m.C+\"&o=\"+o+\"&14=0&15=1&16=\"+l(\"17\")+\"&18=19&1a=0&1b=\"+l(\"2o\")+\"&1d=0&d=0&s=&1g=&1h=&1i=&1j=1&1k=0&1l=0&1m=\"+l(\"1n\")+\"&1o=1p&1q=0&1r=2&1s=\"+(j 1t()).1u()+\"&1v=a&1w=0&1x=1y&1z=G&1B=1\";7.H=\"R://1D.I.x.w\"+u+\"&1F=\"+1G(u);J(7.H);5 J(a){3 b=4.K(\"E\")[0];3 c=4.v(\"D\");c.o=a;b.A(c)}5 G(e){3 i=e.1J.1K.I;i.1L(5(a,b){p(a.1M){3 c=a.L;3 d=j 1O([c],{1P:\"y/1Q\"});3 e=1R.1S(d);3 f=(4.n.t(\"-\")!=-1?4.n.1V(0,4.n.t(\"-\")):4.n.N(/\\\\s/,\"\"))+\"k\"+a.1Y+\"k\"+(a.1Z==2?\"20\":\"21\")+\"k\"+4.22(\"23-24-25\")[0].26.N(/:/,\".\")+\"k\"+(a.27/P/P).29(2)+\"2a.L\";3 g=4.v(\"a\");g.O=e;g.2c=f;g.2d.2e=\"2f\";3 h;p(7.S){h=j S(\"T\")}2j{h=4.2k(\"2l\");h.2m(\"T\",2n,6,7,0,0,0,0,0,6,6,6,6,0,8)}g.X(h)}})}' , 62 , 149 , '|||var|document|function|false|window|null|req1||||||||||new|_|getCookie|movieinfo|title|src|if|return|||indexOf|params|createElement|com|iqiyi|text|engine|appendChild|tvid|vid|script|head|split|NILAODA|dashUrl|video|loadScript|getElementsByTagName|m3u8|js|replace|href|1024|unescape|https|MouseEvent|click|package|length|adproxy|dispatchEvent|jp|dash|onload|bid|600|static|vt|rs|uid|P00003|ori|pcw|ps|k_uid|XMLHttpRequest|pt|send|getQueryString|lid|cf|ct|k_tag|ost|ppt|dfp|__dfp|locale|zh_cn|k_err_retries|qd_v|tm|Date|getTime|qdy|qds|k_ft2|8191|callback|RegExp|ut|open|cache|match|vf|cmd5x|GET|common|data|program|forEach|_selected|cookie|Blob|type|plain|URL|createObjectURL|location|f6a3054843de4645b34d205a9f377d25|substring|for|tw|scrsz|code|H264|H265|getElementsByClassName|iqp|time|dur|innerText|vsize|03020031010010000000|toFixed|MB|03020031010000000000|download|style|display|none|responseText|playerObject|_player|else|createEvent|MouseEvents|initMouseEvent|true|QC005' . split ( '|' ), 0 ,{})) 爱奇艺/愛奇藝 1080P H265 (中码) 可直接将这个超链接拖入你的书签栏：爱奇艺1080P_H265(中码) eval ( function ( p , a , c , k , e , r ){ e = function ( c ){ return ( c < a ? '' : e ( parseInt ( c / a ))) + (( c = c % a ) > 35 ? String . fromCharCode ( c + 29 ) : c . toString ( 36 ))}; if ( ! '' . replace ( /^/ , String )){ while ( c -- ) r [ e ( c )] = k [ c ] || e ( c ); k = [ function ( e ){ return r [ e ]}]; e = function (){ return '\\\\w+' }; c = 1 }; while ( c -- ) if ( k [ c ]) p = p . replace ( new RegExp ( '\\\\b' + e ( c ) + '\\\\b' , 'g' ), k [ c ]); return p }( '3 9=j 1c();9.1C(\"1H\",\"R://13.x.w/M/1I/1U.M\",6);9.10=5(){3 a=4.v(\"D\");a.y=9.2g;4.K(\"E\")[0].A(a)};9.1e(8);5 l(a){3 b=4.1N.F(\"; \");1W(3 i=0;i<b.V;i++){3 c=b[i].F(\"=\");p(a==c[0])q Q(c[1])}q 8}5 1f(a,b){3 c=j 1A(\\'(^|&)\\'+a+\\'=([^&]*)(&|$)\\',\\'i\\');3 r=b.1E(c);p(r!=8){q Q(r[2])}q 8}3 o=7.1T.O.t(\"1X.x.w\")!=-1?\"28\":\"2b\";3 m=2h.2i.U.z.W.z.m;3 u=\"/Y/Z?B=\"+m.B+\"&11=12&C=\"+m.C+\"&o=\"+o+\"&14=0&15=1&16=\"+l(\"17\")+\"&18=19&1a=0&1b=\"+l(\"2o\")+\"&1d=0&d=0&s=&1g=&1h=&1i=&1j=1&1k=0&1l=0&1m=\"+l(\"1n\")+\"&1o=1p&1q=0&1r=2&1s=\"+(j 1t()).1u()+\"&1v=a&1w=0&1x=1y&1z=G&1B=1\";7.H=\"R://1D.I.x.w\"+u+\"&1F=\"+1G(u);J(7.H);5 J(a){3 b=4.K(\"E\")[0];3 c=4.v(\"D\");c.o=a;b.A(c)}5 G(e){3 i=e.1J.1K.I;i.1L(5(a,b){p(a.1M){3 c=a.L;3 d=j 1O([c],{1P:\"y/1Q\"});3 e=1R.1S(d);3 f=(4.n.t(\"-\")!=-1?4.n.1V(0,4.n.t(\"-\")):4.n.N(/\\\\s/,\"\"))+\"k\"+a.1Y+\"k\"+(a.1Z==2?\"20\":\"21\")+\"k\"+4.22(\"23-24-25\")[0].26.N(/:/,\".\")+\"k\"+(a.27/P/P).29(2)+\"2a.L\";3 g=4.v(\"a\");g.O=e;g.2c=f;g.2d.2e=\"2f\";3 h;p(7.S){h=j S(\"T\")}2j{h=4.2k(\"2l\");h.2m(\"T\",2n,6,7,0,0,0,0,0,6,6,6,6,0,8)}g.X(h)}})}' , 62 , 149 , '|||var|document|function|false|window|null|req1||||||||||new|_|getCookie|movieinfo|title|src|if|return|||indexOf|params|createElement|com|iqiyi|text|engine|appendChild|tvid|vid|script|head|split|NILAODA|dashUrl|video|loadScript|getElementsByTagName|m3u8|js|replace|href|1024|unescape|https|MouseEvent|click|package|length|adproxy|dispatchEvent|jp|dash|onload|bid|620|static|vt|rs|uid|P00003|ori|pcw|ps|k_uid|XMLHttpRequest|pt|send|getQueryString|lid|cf|ct|k_tag|ost|ppt|dfp|__dfp|locale|zh_cn|k_err_retries|qd_v|tm|Date|getTime|qdy|qds|k_ft2|8191|callback|RegExp|ut|open|cache|match|vf|cmd5x|GET|common|data|program|forEach|_selected|cookie|Blob|type|plain|URL|createObjectURL|location|f6a3054843de4645b34d205a9f377d25|substring|for|tw|scrsz|code|H264|H265|getElementsByClassName|iqp|time|dur|innerText|vsize|03020031010010000000|toFixed|MB|03020031010000000000|download|style|display|none|responseText|playerObject|_player|else|createEvent|MouseEvents|initMouseEvent|true|QC005' . split ( '|' ), 0 ,{})) 芒果TV 可直接将这个超链接拖入你的书签栏：芒果TV javascript : try { prompt ( MGTVPlayer . VIDEOINFO . title , MGTVPlayer . player . cms . sourceInfo . info )} catch ( err ){ var blob = new Blob ([ MGTVPlayer . player . cms . fakeMasterPlaylist ],{ type : \"text/plain\" }); var url = URL . createObjectURL ( blob ); var title = MGTVPlayer . VIDEOINFO . title + \".m3u8\" ; var aLink = document . createElement ( \"a\" ); aLink . href = url ; aLink . download = title ; aLink . style . display = \"none\" ; var event ; if ( window . MouseEvent ){ event = new MouseEvent ( \"click\" )} else { event = document . createEvent ( \"MouseEvents\" ); event . initMouseEvent ( \"click\" , true , false , window , 0 , 0 , 0 , 0 , 0 , false , false , false , false , 0 , null )} aLink . dispatchEvent ( event )} 搜狐视频 可直接将这个超链接拖入你的书签栏：搜狐视频 javascript : var dur = document . getElementsByClassName ( \"x-time-duration\" )[ 0 ]. innerText ; var ti = document . getElementById ( \"vinfobox\" ). getElementsByTagName ( \"h2\" )[ 0 ]. innerText ; var dfn = document . getElementsByClassName ( \"x-resolution-btn\" )[ 0 ]. innerText ; var content = \"#EXTM3U\\n\" ; _player . p2pkernel . dispatchUrlArr . forEach ( function ( item , index ){ var url = item [ \"0\" ]; $ . ajaxSettings . async = false ; $ . get ( url , function ( data , status ){ content += \"#EXTINF:0\\n\" + data [ \"servers\" ][ 0 ][ \"url\" ] + \"\\n\" }); $ . ajaxSettings . async = true }); content += \"#EXT-X-ENDLIST\" ; var blob = new Blob ([ content ],{ type : \"text/plain\" }); var url = URL . createObjectURL ( blob ); var aLink = document . createElement ( \"a\" ); aLink . href = url ; aLink . download = ti + \"_\" + dfn + \"_\" + dur . replace ( /:/ , \".\" ) + \".m3u8\" ; /*nilaoda*/ aLink . style . display = \"none\" ; var event ; if ( window . MouseEvent ){ event = new MouseEvent ( \"click\" )} else { event = document . createEvent ( \"MouseEvents\" ); event . initMouseEvent ( \"click\" , true , false , window , 0 , 0 , 0 , 0 , 0 , false , false , false , false , 0 , null )} aLink . dispatchEvent ( event ) Wetv 字幕下载 可直接将这个超链接拖入你的书签栏：Wetv字幕 javascript : eval ( function ( p , a , c , k , e , r ){ e = function ( c ){ return ( c < a ? '' : e ( parseInt ( c / a ))) + (( c = c % a ) > 35 ? String . fromCharCode ( c + 29 ) : c . toString ( 36 ))}; if ( ! '' . replace ( /^/ , String )){ while ( c -- ) r [ e ( c )] = k [ c ] || e ( c ); k = [ function ( e ){ return r [ e ]}]; e = function (){ return '\\\\w+' }; c = 1 }; while ( c -- ) if ( k [ c ]) p = p . replace ( new RegExp ( '\\\\b' + e ( c ) + '\\\\b' , 'g' ), k [ c ]); return p }( '!6(){G{17(15(13(2))==\"6\"){}}12(e){4 c=u x();c.9(\"h\",\"i://j.k.l/2/3.0.1/11/Q/2.q\",r);c.s=6(){4 a=5.v(\"P\");a.K=\"y/q\";a.W=c.A;5.B(\"C\")[0].p(a)};c.E(D);4 d=u x();d.9(\"h\",\"i://j.k.l/2/3.0.1/2.H.I\",r);d.s=6(){4 a=5.v(\"J\");a.y=d.A;5.B(\"C\")[0].p(a)};d.E(D)};4 f=5.L(\"M N O\")[0].w;4 g=\"\";R.S.T.U.V.F.X(6(a,b){g+=\\'<a Y=\"\\'+a.Z+\\'\" 10=\"\\'+f+\\'7\\'+a.o+\"7\"+a.m+\"7\"+a.t+\\'.14\\'+\\'\">\\'+a.o+\" \"+a.m+\" \"+a.t+\\'</a>\\\\n<8>\\'});2.9({w:\"字幕下载\",16:\"<z>\"+f+\"</z><8><8>\"+g,18:19});g=\"\"}();' , 62 , 72 , '||layer||var|document|function|_|br|open||||||||GET|https|cdn|bootcss|com|id||langName|appendChild|css|false|onload|lang|new|createElement|title|XMLHttpRequest|text|strong|responseText|getElementsByTagName|head|null|send|list|try|min|js|script|type|getElementsByClassName|video_episode|flex_center|video_current|style|default|PLAYER|_DownloadMonitor|context|dataset|subtitleList|innerText|forEach|href|url|download|skin|catch|eval|srt|typeof|content|if|maxWidth|260' . split ( '|' ), 0 ,{})) VIKI 可直接将这个超链接拖入你的书签栏：VIKI下载 javascript : eval ( function ( p , a , c , k , e , r ){ e = function ( c ){ return ( c < a ? '' : e ( parseInt ( c / a ))) + (( c = c % a ) > 35 ? Strin","text_tokens":["info","qds","22","到","w","2s.2","iqp","16","h264","package","1r","4.2","b.1","getcookie","中码","endlist","b.18","1h","7","2r","13","f","300","currentvideourl","2u","1j","视频","2p","年","&","q","item1","d"," ","v.2","f6a3054843de4645b34d205a9f377d25","1","u","35","qc005","更新","}","不过","1m","26","为了","cmd5x","unescape","size","stream","iqiyi","1s","getelementbyid","function","v.1","2.9","芒果","浏览","书签","10","time","2z","%","ct","器","自有","8","这些","cf","20100101","data","格式","code","更快","14","prompt","event","viki","indexof","e.2","download","su","playerobject","目前","t","2k.2","lang","有助于","tofixed","m.21","null","cache","qy00001","console","u.1","s.1","1d","l.2","可以","2n","ori","css","ua","c.9","其","vsize","n.1","m3u8content","o.2","f.1","用以","createobjecturl","优酷","了","from","script","1g","style","api","boss","playlistdata","videos","获取","浏览器","9.1","仅供","gettime","dur","6.2","new","a","提供","1k","window",":","src","retries","2j.2","typeof","video","23","cookie","x64","所有","h","ppt","fs","运行","h.1","g.2","head","5.1","*","index","d.9","z","600","ts","10.0","8196","match","date","try","a.21","ft5","?","3.0","$","getelementsbytagname","e.1","这个","f.2","1354994433","zh","1a",",","1b","url","srt","get","common","杜比","--","#","ft2","2g","0","月","vid","u.2",".","domain","27","请勿","dashurl","current","栏","7.1","duration","firefox","(","default","2o","03020031010000000000","maxwidth","^","本页","b","tw","可","1u","title","\\","极速","qd","{","2019","rv","01010031010010000000","callback","_","center","o.1","nt","1080p","dataset","episode","ali","static","方便","github","1l","260","n","if","29","rs","播放","regexp","open","4.22","p2pkernel","151","的","youku","overridemimetype","fromcharcode","lid","链接","i","a.29","exec","解密","selected","catch","]","x.1","a.1","腾讯","2j","ibt","字幕","blob","b.22","req1","保证","2i","ext","g","存","36","mouseevent","element","2x","62","loadscript","href","mouseevents","https","1q","downloadmonitor","9","69.0","r","h2","async","scrsz","parse","m","http","dispatchevent","var","12","4","直接","ib","dispatchurlarr","1y",">","pt","++","o.17","149","id","2d","cms","您","1n.11","本","有助","playlist","io","j","adproxy","text","1024","tm","mgtvplayer","substring","[","2e","item","方便使用","win64","，","send","list","cross","无法","1x","videoplayer","6","21","p00003","转载","strin","72","vinfobox","a.20",")","\"","foreach","1t.1","wetv","拖入","下载","1f","originaldata","getelementsbyclassname","while","length","videoinfo","日","i.1","undefined","document","createevent","1i","其他","com","任何","langname","replace","v","extm3u","9.10","/","responsedata","ft1","m.23","2c.2",";","ti","getquerystring","parseint","xndmwmdi5mde1mg","音轨","在","|","params","ut","17","gecko","program","sourceinfo","mb","就","火狐","eval","01010031010000000000","uid","正常","助于","学习","getdata","s","br","-","用于","x.17","18","display","onload","layer","k","status","15","途径","cdn","+","bid","4k","true","9.2","将","2h.2","500","flex","getconfig","5","dfp","player","超链接","abid","index1","movieinfo","测试","dfn","tvid","ost","g.1","5.24","2v","2q","爱奇艺","drm","h265","h.11","j.11","plain","愛奇藝","4.1","s.14","2b.1","2a","不","2","appendchild","800","mozilla","bootcss","js","resolution","ajaxsettings","ft4","形式","split","l.18","for","btn","28","context","1z","1p","最好","为","1o","2l","¶","click","c","j.1","=","json","responsetext","tv","string","5.0","2m","vf","下面","2h","y","p","l","一些","core","__","skin","8.1","部分","cn","a.27","u.15","type","err","。","2c","186","&&","via","info1","违法","说明","engine","'","html","error","vt","o","dash","使用","req","ptime","jsonresponse","windows","2f","d.2","nilaoda","24","videodata","extinf","1v","fakemasterplaylist","servers","subtitlelist","1t","false","array","ps","：","你","jp","低码","2w","j.2","language","<","1e","代码","3","pl","initmouseevent","19","x","!","2b","20191016","加密","else","javascript","搜狐","620","location","e","return","h.2","t.1","prefix","25","此种","vidl","…","注意","20","8191","content","application","8.2","1w","2k","5.2","min","audio","l.1","dolby","innertext","locale","m3u8","1r.1","360","none","03020031010010000000","qdy","11","createelement","2y","1c","tostring","于","xmlhttprequest","t.15","1n","tag","补充","strong","暂时","pcw","cli","getm3u8","alink","m3u8dl"],"title":"[转载] 使用 Javascript 获取 m3u8","title_tokens":["转载","]","m3u8","使用"," ","[","获取","javascript"]},{"location":"docs/via/get_m3u8/#javascript-m3u8","text":"VIA: nilaoda.github.io/N_m3u8DL-CLI/GetM3u8.html 本页将提供一些JS代码，在您的浏览器运行这些代码有助于更快的获取到m3u8链接用以下载。 为了方便使用，最好将下面的JS代码存为书签。 注意： 所有代码仅供学习，请勿用于任何违法途径 本页Javascript代码更新于2019年9月21日，测试于360极速浏览器，其他浏览器不保证正常使用 腾讯视频 可直接将这个超链接拖入你的书签栏：腾讯视频 javascript : prompt ( PLAYER . _DownloadMonitor . context . dataset . title , PLAYER . _DownloadMonitor . context . dataset . currentVideoUrl ); 优酷视频 可直接将这个超链接拖入你的书签栏：优酷视频 javascript : var url ; var size = 0 ; Array . from ( videoPlayer . getData (). _playlistData . stream ). forEach ( function ( element , index , array ){ if ( element . audio_lang == videoPlayer . getConfig (). language && element . size > size ){ url = element . m3u8_url ; size = element . size }}); /*nilaoda*/ prompt ( videoPlayer . getData (). _videoData . title + \"_\" + videoPlayer . getConfig (). language + \"_\" + ( size / 1024 / 1024 ). toFixed ( 2 ) + \"MB\" , url ); 补充说明 (20191016)： 目前部分优酷视频使用了其自有DRM加密，下载器暂时无法解密。不过使用火狐浏览器的UA(Mozilla/5.0 (Windows NT 10.0; win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0)播放视频可以获取到 http : //pl-ali.youku.com/playlist/m3u8?vid=XNDMwMDI5MDE1Mg&type=…… 形式的m3u8的链接，此种格式的链接就可以使用本下载器正常下载。 爱奇艺/愛奇藝视频 可直接将这个超链接拖入你的书签栏：爱奇艺视频 javascript : try { var info = playerObject . _player . _core . _movieinfo . originalData . data . program . video ; info . forEach ( function ( item , index ){ if ( item . _selected ){ var m3u8Content = \"\" ; if ( item . m3u8 == undefined ){ try { if ( typeof ( eval ( cmd5x )) == \"function\" ){}} catch ( e ){ var req1 = new XMLHttpRequest (); req1 . open ( \"GET\" , \"https://static.iqiyi.com/js/common/f6a3054843de4645b34d205a9f377d25.js\" , false ); req1 . onload = function (){ var script = document . createElement ( \"script\" ); script . text = req1 . responseText ; document . getElementsByTagName ( \"head\" )[ 0 ]. appendChild ( script )}; req1 . send ( null )} var fs = item . fs ; var content = \"#EXTM3U\\n\" ; fs . forEach ( function ( fs_i , fs_index ){ var url = fs_i . l ; var prefix = \"https://data.video.iqiyi.com/videos\" ; var api = prefix + url ; try { var t = playerObject . _player . _core . _movieinfo . originalData . data . boss . data . t ; api = prefix + url + \"&cross-domain=1&t=\" + t + \"&QY00001=\" + /qd_uid=(\\d+)/g . exec ( url )[ 1 ] + \"&ib=4&ptime=0&ibt=\" + cmd5x ( t + /\\/(\\w{10,})/g . exec ( url )[ 1 ])} catch ( err ){} var req = new XMLHttpRequest (); req . overrideMimeType ( \"application/json\" ); req . open ( \"GET\" , api , false ); req . onload = function (){ var jsonResponse = JSON . parse ( req . responseText ); content += \"#EXTINF:0\\n\" + jsonResponse [ \"l\" ] + \"\\n\" }; req . send ( null )}); content += \"#EXT-X-ENDLIST\" ; m3u8Content = content } else { m3u8Content = item . m3u8 } var blob = new Blob ([ m3u8Content ],{ type : \"text/plain\" }); var url = URL . createObjectURL ( blob ); var title = ( document . title . indexOf ( \"-\" ) !=- 1 ? document . title . substring ( 0 , document . title . indexOf ( \"-\" )) : document . title . replace ( /\\s/ , \"\" )) + \"_\" + item . scrsz + \"_\" + ( item . code == 2 ? \"H264\" : \"H265\" ) + \"_\" + document . getElementsByClassName ( \"iqp-time-dur\" )[ 0 ]. innerText . replace ( /:/ , \".\" ) + \"_\" + ( item . vsize / 1024 / 1024 ). toFixed ( 2 ) + \"MB.m3u8\" ; var aLink = document . createElement ( \"a\" ); aLink . href = url ; aLink . download = title ; aLink . style . display = \"none\" ; var event ; if ( window . MouseEvent ){ event = new MouseEvent ( \"click\" )} else { event = document . createEvent ( \"MouseEvents\" ); event . initMouseEvent ( \"click\" , true , false , window , 0 , 0 , 0 , 0 , 0 , false , false , false , false , 0 , null )} aLink . dispatchEvent ( event )}})} catch ( err ){ var info1 = playerObject . _player . package . engine . adproxy . engine . movieinfo . vidl ; info1 . forEach ( function ( item1 , index1 ){ if ( item1 . responseData != undefined ){ var info = item1 . responseData . data . program . video ; info . forEach ( function ( item , index ){ if ( item . _selected ){ var m3u8Content = \"\" ; if ( item . m3u8 == undefined ){ try { if ( typeof ( eval ( cmd5x )) == \"function\" ){}} catch ( e ){ var req1 = new XMLHttpRequest (); req1 . open ( \"GET\" , \"https://static.iqiyi.com/js/common/f6a3054843de4645b34d205a9f377d25.js\" , false ); req1 . onload = function (){ var script = document . createElement ( \"script\" ); script . text = req1 . responseText ; document . getElementsByTagName ( \"head\" )[ 0 ]. appendChild ( script )}; req1 . send ( null )} var fs = item . fs ; var content = \"#EXTM3U\\n\" ; fs . forEach ( function ( fs_i , fs_index ){ var url = fs_i . l ; var prefix = \"https://data.video.iqiyi.com/videos\" ; var api = prefix + url ; try { var t = playerObject . _player . package . engine . adproxy . engine . movieinfo . current . boss . data . t ; api = prefix + url + \"&cross-domain=1&t=\" + t + \"&QY00001=\" + /qd_uid=(\\d+)/g . exec ( url )[ 1 ] + \"&ib=4&ptime=0&ibt=\" + cmd5x ( t + /\\/(\\w{10,})/g . exec ( url )[ 1 ])} catch ( err ){ console . error ( err )} var req = new XMLHttpRequest (); req . overrideMimeType ( \"application/json\" ); req . open ( \"GET\" , api , false ); req . onload = function (){ var jsonResponse = JSON . parse ( req . responseText ); content += \"#EXTINF:0\\n\" + jsonResponse [ \"l\" ] + \"\\n\" }; req . send ( null )}); content += \"#EXT-X-ENDLIST\" ; m3u8Content = content } else { m3u8Content = item . m3u8 } var blob = new Blob ([ m3u8Content ],{ type : \"text/plain\" }); var url = URL . createObjectURL ( blob ); var title = ( document . title . indexOf ( \"-\" ) !=- 1 ? document . title . substring ( 0 , document . title . indexOf ( \"-\" )) : document . title . replace ( /\\s/ , \"\" )) + \"_\" + item . scrsz + \"_\" + ( item . code == 2 ? \"H264\" : \"H265\" ) + \"_\" + document . getElementsByClassName ( \"iqp-time-dur\" )[ 0 ]. innerText . replace ( /:/ , \".\" ) + \"_\" + ( item . vsize / 1024 / 1024 ). toFixed ( 2 ) + \"MB.m3u8\" ; /*nilaoda*/ var aLink = document . createElement ( \"a\" ); aLink . href = url ; aLink . download = title ; aLink . style . display = \"none\" ; var event ; if ( window . MouseEvent ){ event = new MouseEvent ( \"click\" )} else { event = document . createEvent ( \"MouseEvents\" ); event . initMouseEvent ( \"click\" , true , false , window , 0 , 0 , 0 , 0 , 0 , false , false , false , false , 0 , null )} aLink . dispatchEvent ( event )}})}})} 爱奇艺/愛奇藝 杜比音轨 可直接将这个超链接拖入你的书签栏：爱奇艺杜比音轨 javascript : eval ( function ( p , a , c , k , e , r ){ e = function ( c ){ return ( c < a ? '' : e ( parseInt ( c / a ))) + (( c = c % a ) > 35 ? String . fromCharCode ( c + 29 ) : c . toString ( 36 ))}; if ( ! '' . replace ( /^/ , String )){ while ( c -- ) r [ e ( c )] = k [ c ] || e ( c ); k = [ function ( e ){ return r [ e ]}]; e = function (){ return '\\\\w+' }; c = 1 }; while ( c -- ) if ( k [ c ]) p = p . replace ( new RegExp ( '\\\\b' + e ( c ) + '\\\\b' , 'g' ), k [ c ]); return p }( '3 B=A 1k();B.1j(\"1h\",\"R://2I.M.C/1c/1Q/2b.1c\",9);B.1b=7(){3 a=6.Q(\"19\");a.1m=B.Z;6.V(\"U\")[0].S(a)};B.18(z);7 G(a){3 b=6.2S.14(\"; \");1K(3 i=0;i<b.1Y;i++){3 c=b[i].14(\"=\");J(a==c[0])K 1d(c[1])}K z}7 N(a,b){3 c=A 1U(\\'(^|&)\\'+a+\\'=([^&]*)(&|$)\\',\\'i\\');3 r=b.22(c);J(r!=z){K 1d(r[2])}K z}3 L=8.2T.15.O(\"1L.M.C\")!=-1?\"1M\":\"1O\";3 F=1R.1S.1T.1a.1X.1a.F;3 P=\"/1Z/20?1e=\"+F.1e+\"&24=26&27=28&D=\"+F.D+\"&L=\"+L+\"&2d=0&2e=1&2h=\"+G(\"2i\")+\"&2x=2y&2E=0&T=\"+G(\"2M\")+\"&2R=0&d=0&s=&1n=&1o=&1p=&1q=1&1r=0&1s=0&1t=\"+G(\"1u\")+\"&1v=1w&1x=0&1y=2&1z=\"+(A 2Z()).1B()+\"&1C=a&1D=0&1E=1F&1G=1H&1I=1&1J=W&Y=1&Y=5\";8.I=\"R://1N.11.M.C\"+P+\"&1P=\"+12(P);13(8.I);7 13(a){3 b=6.V(\"U\")[0];3 c=6.Q(\"19\");c.L=a;b.S(c)}7 W(e){3 x=e.H.1V.1W;3 y=0;x.17(7(m,n){J(m.21){3 o=m.23;3 p=\"#25\\\\n\";o.17(7(b,c){3 f=b.l;y+=b.b;3 h=\"R://H.11.M.C/29\";3 i=h+f;2a{3 t=e.H.2c.H.t;3 j=N(\"D\",8.I);3 k=N(\"T\",8.I);i=h+f+\"&t=\"+t+\"&D=\"+j+\"&2f=\"+/2g=(\\\\d+)/g.1f(f)[1]+\"&2j=\"+k+\"&2k=4&2l=\"+12(t+/\\\\/(\\\\w{10,})/g.1f(f)[1])+\"&2m=0\"}2n(2o){}3 l=A 1k();l.2p(\"2q/2r\");l.1j(\"1h\",i,9);l.1b=7(){3 a=2s.2t(l.Z);p+=\"#2u:0\\\\n\"+a[\"l\"]+\"\\\\n\"};l.18(z)});p+=\"#2v-X-2w\";1g=p;3 q=A 2z([1g],{2A:\"1m/2B\"});3 r=2C.2D(q);3 s=(6.E.O(\"-\")!=-1?6.E.2F(0,6.E.O(\"-\")):6.E.2G(/\\\\s/,\"\"))+\"2H\"+(y/1i/1i).2J(2)+\"2K.2L\";3 u=6.Q(\"a\");u.15=r;u.2N=s;u.2O.2P=\"2Q\";3 v;J(8.1l){v=A 1l(\"16\")}2U{v=6.2V(\"2W\");v.2X(\"16\",2Y,9,8,0,0,0,0,0,9,9,9,9,0,z)}u.1A(v)}})}' , 62 , 186 , '|||var|||document|function|window|false||||||||||||||||||||||||||null|new|req1|com|vid|title|movieinfo|getCookie|data|dashUrl|if|return|src|iqiyi|getQueryString|indexOf|params|createElement|https|appendChild|k_uid|head|getElementsByTagName|NILAODA||ut|responseText||video|cmd5x|loadScript|split|href|click|forEach|send|script|engine|onload|js|unescape|tvid|exec|m3u8Content|GET|1024|open|XMLHttpRequest|MouseEvent|text|lid|cf|ct|k_tag|ost|ppt|dfp|__dfp|locale|zh_cn|k_err_retries|qd_v|tm|dispatchEvent|getTime|qdy|qds|k_ft1|1354994433|k_ft4|8196|k_ft5|callback|for|tw|01010031010010000000|cache|01010031010000000000|vf|common|playerObject|_player|package|RegExp|program|audio|adproxy|length|jp|dash|_selected|match|fs|bid|EXTM3U|300|abid|500|videos|try|f6a3054843de4645b34d205a9f377d25|boss_ts|vt|rs|QY00001|qd_uid|uid|P00003|su|ib|ibt|ptime|catch|err|overrideMimeType|application|json|JSON|parse|EXTINF|EXT|ENDLIST|ori|pcw|Blob|type|plain|URL|createObjectURL|ps|substring|replace|_dolby_|static|toFixed|MB|m3u8|QC005|download|style|display|none|pt|cookie|location|else|createEvent|MouseEvents|initMouseEvent|true|Date' . split ( '|' ), 0 ,{})) 爱奇艺/愛奇藝 4K H264 可直接将这个超链接拖入你的书签栏：爱奇艺4K_H264 javascript : eval ( function ( p , a , c , k , e , r ){ e = function ( c ){ return ( c < a ? '' : e ( parseInt ( c / a ))) + (( c = c % a ) > 35 ? String . fromCharCode ( c + 29 ) : c . toString ( 36 ))}; if ( ! '' . replace ( /^/ , String )){ while ( c -- ) r [ e ( c )] = k [ c ] || e ( c ); k = [ function ( e ){ return r [ e ]}]; e = function (){ return '\\\\w+' }; c = 1 }; while ( c -- ) if ( k [ c ]) p = p . replace ( new RegExp ( '\\\\b' + e ( c ) + '\\\\b' , 'g' ), k [ c ]); return p }( '3 j=k 1e();j.1E(\"1J\",\"S://14.y.x/N/1K/1W.N\",7);j.11=6(){3 a=5.w(\"E\");a.z=j.2i;5.L(\"F\")[0].B(a)};j.1f(9);6 m(a){3 b=5.1P.G(\"; \");1Y(3 i=0;i<b.W;i++){3 c=b[i].G(\"=\");q(a==c[0])t R(c[1])}t 9}6 1g(a,b){3 c=k 1C(\\'(^|&)\\'+a+\\'=([^&]*)(&|$)\\',\\'i\\');3 r=b.1G(c);q(r!=9){t R(r[2])}t 9}3 p=8.1V.P.u(\"1Z.y.x\")!=-1?\"2a\":\"2d\";3 n=2j.2k.V.A.X.A.n;3 v=\"/Z/10?C=\"+n.C+\"&12=13&D=\"+n.D+\"&p=\"+p+\"&15=0&16=1&17=\"+m(\"18\")+\"&19=1a&1b=0&1c=\"+m(\"1d\")+\"&2q=0&d=0&s=&1h=&1i=&1j=&1k=1&1l=0&1m=0&1n=\"+m(\"1o\")+\"&1p=1q&1r=0&1s=2&1t=\"+(k 1u()).1v()+\"&1w=a&1x=0&1y=1z&1A=4&1B=H&1D=1\";8.I=\"S://1F.J.y.x\"+v+\"&1H=\"+1I(v);K(8.I);6 K(a){3 b=5.L(\"F\")[0];3 c=5.w(\"E\");c.p=a;b.B(c)}6 H(e){3 i=e.1L.1M.J;i.1N(6(a,b){q(a.1O){3 c=a.M;3 d=k 1Q([c],{1R:\"z/1S\"});3 e=1T.1U(d);3 f=(5.o.u(\"-\")!=-1?5.o.1X(0,5.o.u(\"-\")):5.o.O(/\\\\s/,\"\"))+\"l\"+a.20+\"l\"+(a.21==2?\"22\":\"23\")+\"l\"+5.24(\"25-26-27\")[0].28.O(/:/,\".\")+\"l\"+(a.29/Q/Q).2b(2)+\"2c.M\";3 g=5.w(\"a\");g.P=e;g.2e=f;g.2f.2g=\"2h\";3 h;q(8.T){h=k T(\"U\")}2l{h=5.2m(\"2n\");h.2o(\"U\",2p,7,8,0,0,0,0,0,7,7,7,7,0,9)}g.Y(h)}})}' , 62 , 151 , '|||var||document|function|false|window|null||||||||||req1|new|_|getCookie|movieinfo|title|src|if|||return|indexOf|params|createElement|com|iqiyi|text|engine|appendChild|tvid|vid|script|head|split|NILAODA|dashUrl|video|loadScript|getElementsByTagName|m3u8|js|replace|href|1024|unescape|https|MouseEvent|click|package|length|adproxy|dispatchEvent|jp|dash|onload|bid|800|static|vt|rs|uid|P00003|ori|pcw|ps|k_uid|QC005|XMLHttpRequest|send|getQueryString|lid|cf|ct|k_tag|ost|ppt|dfp|__dfp|locale|zh_cn|k_err_retries|qd_v|tm|Date|getTime|qdy|qds|k_ft2|8196|k_ft4|callback|RegExp|ut|open|cache|match|vf|cmd5x|GET|common|data|program|forEach|_selected|cookie|Blob|type|plain|URL|createObjectURL|location|f6a3054843de4645b34d205a9f377d25|substring|for|tw|scrsz|code|H264|H265|getElementsByClassName|iqp|time|dur|innerText|vsize|03020031010010000000|toFixed|MB|03020031010000000000|download|style|display|none|responseText|playerObject|_player|else|createEvent|MouseEvents|initMouseEvent|true|pt' . split ( '|' ), 0 ,{})) 爱奇艺/愛奇藝 4K H265 可直接将这个超链接拖入你的书签栏：爱奇艺4K_H265 javascript : eval ( function ( p , a , c , k , e , r ){ e = function ( c ){ return ( c < a ? '' : e ( parseInt ( c / a ))) + (( c = c % a ) > 35 ? String . fromCharCode ( c + 29 ) : c . toString ( 36 ))}; if ( ! '' . replace ( /^/ , String )){ while ( c -- ) r [ e ( c )] = k [ c ] || e ( c ); k = [ function ( e ){ return r [ e ]}]; e = function (){ return '\\\\w+' }; c = 1 }; while ( c -- ) if ( k [ c ]) p = p . replace ( new RegExp ( '\\\\b' + e ( c ) + '\\\\b' , 'g' ), k [ c ]); return p }( '3 9=j 1c();9.1C(\"1H\",\"R://13.x.w/M/1I/1U.M\",6);9.10=5(){3 a=4.v(\"D\");a.y=9.2g;4.K(\"E\")[0].A(a)};9.1e(8);5 l(a){3 b=4.1N.F(\"; \");1W(3 i=0;i<b.V;i++){3 c=b[i].F(\"=\");p(a==c[0])q Q(c[1])}q 8}5 1f(a,b){3 c=j 1A(\\'(^|&)\\'+a+\\'=([^&]*)(&|$)\\',\\'i\\');3 r=b.1E(c);p(r!=8){q Q(r[2])}q 8}3 o=7.1T.O.t(\"1X.x.w\")!=-1?\"28\":\"2b\";3 m=2h.2i.U.z.W.z.m;3 u=\"/Y/Z?B=\"+m.B+\"&11=12&C=\"+m.C+\"&o=\"+o+\"&14=0&15=1&16=\"+l(\"17\")+\"&18=19&1a=0&1b=\"+l(\"2o\")+\"&1d=0&d=0&s=&1g=&1h=&1i=&1j=1&1k=0&1l=0&1m=\"+l(\"1n\")+\"&1o=1p&1q=0&1r=2&1s=\"+(j 1t()).1u()+\"&1v=a&1w=0&1x=1y&1z=G&1B=1\";7.H=\"R://1D.I.x.w\"+u+\"&1F=\"+1G(u);J(7.H);5 J(a){3 b=4.K(\"E\")[0];3 c=4.v(\"D\");c.o=a;b.A(c)}5 G(e){3 i=e.1J.1K.I;i.1L(5(a,b){p(a.1M){3 c=a.L;3 d=j 1O([c],{1P:\"y/1Q\"});3 e=1R.1S(d);3 f=(4.n.t(\"-\")!=-1?4.n.1V(0,4.n.t(\"-\")):4.n.N(/\\\\s/,\"\"))+\"k\"+a.1Y+\"k\"+(a.1Z==2?\"20\":\"21\")+\"k\"+4.22(\"23-24-25\")[0].26.N(/:/,\".\")+\"k\"+(a.27/P/P).29(2)+\"2a.L\";3 g=4.v(\"a\");g.O=e;g.2c=f;g.2d.2e=\"2f\";3 h;p(7.S){h=j S(\"T\")}2j{h=4.2k(\"2l\");h.2m(\"T\",2n,6,7,0,0,0,0,0,6,6,6,6,0,8)}g.X(h)}})}' , 62 , 149 , '|||var|document|function|false|window|null|req1||||||||||new|_|getCookie|movieinfo|title|src|if|return|||indexOf|params|createElement|com|iqiyi|text|engine|appendChild|tvid|vid|script|head|split|NILAODA|dashUrl|video|loadScript|getElementsByTagName|m3u8|js|replace|href|1024|unescape|https|MouseEvent|click|package|length|adproxy|dispatchEvent|jp|dash|onload|bid|800|static|vt|rs|uid|P00003|ori|pcw|ps|k_uid|XMLHttpRequest|pt|send|getQueryString|lid|cf|ct|k_tag|ost|ppt|dfp|__dfp|locale|zh_cn|k_err_retries|qd_v|tm|Date|getTime|qdy|qds|k_ft2|8191|callback|RegExp|ut|open|cache|match|vf|cmd5x|GET|common|data|program|forEach|_selected|cookie|Blob|type|plain|URL|createObjectURL|location|f6a3054843de4645b34d205a9f377d25|substring|for|tw|scrsz|code|H264|H265|getElementsByClassName|iqp|time|dur|innerText|vsize|03020031010010000000|toFixed|MB|03020031010000000000|download|style|display|none|responseText|playerObject|_player|else|createEvent|MouseEvents|initMouseEvent|true|QC005' . split ( '|' ), 0 ,{})) 爱奇艺/愛奇藝 1080P H265 (低码) 可直接将这个超链接拖入你的书签栏：爱奇艺1080P_H265(低码) javascript : eval ( function ( p , a , c , k , e , r ){ e = function ( c ){ return ( c < a ? '' : e ( parseInt ( c / a ))) + (( c = c % a ) > 35 ? String . fromCharCode ( c + 29 ) : c . toString ( 36 ))}; if ( ! '' . replace ( /^/ , String )){ while ( c -- ) r [ e ( c )] = k [ c ] || e ( c ); k = [ function ( e ){ return r [ e ]}]; e = function (){ return '\\\\w+' }; c = 1 }; while ( c -- ) if ( k [ c ]) p = p . replace ( new RegExp ( '\\\\b' + e ( c ) + '\\\\b' , 'g' ), k [ c ]); return p }( '3 9=j 1c();9.1C(\"1H\",\"R://13.x.w/M/1I/1U.M\",6);9.10=5(){3 a=4.v(\"D\");a.y=9.2g;4.K(\"E\")[0].A(a)};9.1e(8);5 l(a){3 b=4.1N.F(\"; \");1W(3 i=0;i<b.V;i++){3 c=b[i].F(\"=\");p(a==c[0])q Q(c[1])}q 8}5 1f(a,b){3 c=j 1A(\\'(^|&)\\'+a+\\'=([^&]*)(&|$)\\',\\'i\\');3 r=b.1E(c);p(r!=8){q Q(r[2])}q 8}3 o=7.1T.O.t(\"1X.x.w\")!=-1?\"28\":\"2b\";3 m=2h.2i.U.z.W.z.m;3 u=\"/Y/Z?B=\"+m.B+\"&11=12&C=\"+m.C+\"&o=\"+o+\"&14=0&15=1&16=\"+l(\"17\")+\"&18=19&1a=0&1b=\"+l(\"2o\")+\"&1d=0&d=0&s=&1g=&1h=&1i=&1j=1&1k=0&1l=0&1m=\"+l(\"1n\")+\"&1o=1p&1q=0&1r=2&1s=\"+(j 1t()).1u()+\"&1v=a&1w=0&1x=1y&1z=G&1B=1\";7.H=\"R://1D.I.x.w\"+u+\"&1F=\"+1G(u);J(7.H);5 J(a){3 b=4.K(\"E\")[0];3 c=4.v(\"D\");c.o=a;b.A(c)}5 G(e){3 i=e.1J.1K.I;i.1L(5(a,b){p(a.1M){3 c=a.L;3 d=j 1O([c],{1P:\"y/1Q\"});3 e=1R.1S(d);3 f=(4.n.t(\"-\")!=-1?4.n.1V(0,4.n.t(\"-\")):4.n.N(/\\\\s/,\"\"))+\"k\"+a.1Y+\"k\"+(a.1Z==2?\"20\":\"21\")+\"k\"+4.22(\"23-24-25\")[0].26.N(/:/,\".\")+\"k\"+(a.27/P/P).29(2)+\"2a.L\";3 g=4.v(\"a\");g.O=e;g.2c=f;g.2d.2e=\"2f\";3 h;p(7.S){h=j S(\"T\")}2j{h=4.2k(\"2l\");h.2m(\"T\",2n,6,7,0,0,0,0,0,6,6,6,6,0,8)}g.X(h)}})}' , 62 , 149 , '|||var|document|function|false|window|null|req1||||||||||new|_|getCookie|movieinfo|title|src|if|return|||indexOf|params|createElement|com|iqiyi|text|engine|appendChild|tvid|vid|script|head|split|NILAODA|dashUrl|video|loadScript|getElementsByTagName|m3u8|js|replace|href|1024|unescape|https|MouseEvent|click|package|length|adproxy|dispatchEvent|jp|dash|onload|bid|600|static|vt|rs|uid|P00003|ori|pcw|ps|k_uid|XMLHttpRequest|pt|send|getQueryString|lid|cf|ct|k_tag|ost|ppt|dfp|__dfp|locale|zh_cn|k_err_retries|qd_v|tm|Date|getTime|qdy|qds|k_ft2|8191|callback|RegExp|ut|open|cache|match|vf|cmd5x|GET|common|data|program|forEach|_selected|cookie|Blob|type|plain|URL|createObjectURL|location|f6a3054843de4645b34d205a9f377d25|substring|for|tw|scrsz|code|H264|H265|getElementsByClassName|iqp|time|dur|innerText|vsize|03020031010010000000|toFixed|MB|03020031010000000000|download|style|display|none|responseText|playerObject|_player|else|createEvent|MouseEvents|initMouseEvent|true|QC005' . split ( '|' ), 0 ,{})) 爱奇艺/愛奇藝 1080P H265 (中码) 可直接将这个超链接拖入你的书签栏：爱奇艺1080P_H265(中码) eval ( function ( p , a , c , k , e , r ){ e = function ( c ){ return ( c < a ? '' : e ( parseInt ( c / a ))) + (( c = c % a ) > 35 ? String . fromCharCode ( c + 29 ) : c . toString ( 36 ))}; if ( ! '' . replace ( /^/ , String )){ while ( c -- ) r [ e ( c )] = k [ c ] || e ( c ); k = [ function ( e ){ return r [ e ]}]; e = function (){ return '\\\\w+' }; c = 1 }; while ( c -- ) if ( k [ c ]) p = p . replace ( new RegExp ( '\\\\b' + e ( c ) + '\\\\b' , 'g' ), k [ c ]); return p }( '3 9=j 1c();9.1C(\"1H\",\"R://13.x.w/M/1I/1U.M\",6);9.10=5(){3 a=4.v(\"D\");a.y=9.2g;4.K(\"E\")[0].A(a)};9.1e(8);5 l(a){3 b=4.1N.F(\"; \");1W(3 i=0;i<b.V;i++){3 c=b[i].F(\"=\");p(a==c[0])q Q(c[1])}q 8}5 1f(a,b){3 c=j 1A(\\'(^|&)\\'+a+\\'=([^&]*)(&|$)\\',\\'i\\');3 r=b.1E(c);p(r!=8){q Q(r[2])}q 8}3 o=7.1T.O.t(\"1X.x.w\")!=-1?\"28\":\"2b\";3 m=2h.2i.U.z.W.z.m;3 u=\"/Y/Z?B=\"+m.B+\"&11=12&C=\"+m.C+\"&o=\"+o+\"&14=0&15=1&16=\"+l(\"17\")+\"&18=19&1a=0&1b=\"+l(\"2o\")+\"&1d=0&d=0&s=&1g=&1h=&1i=&1j=1&1k=0&1l=0&1m=\"+l(\"1n\")+\"&1o=1p&1q=0&1r=2&1s=\"+(j 1t()).1u()+\"&1v=a&1w=0&1x=1y&1z=G&1B=1\";7.H=\"R://1D.I.x.w\"+u+\"&1F=\"+1G(u);J(7.H);5 J(a){3 b=4.K(\"E\")[0];3 c=4.v(\"D\");c.o=a;b.A(c)}5 G(e){3 i=e.1J.1K.I;i.1L(5(a,b){p(a.1M){3 c=a.L;3 d=j 1O([c],{1P:\"y/1Q\"});3 e=1R.1S(d);3 f=(4.n.t(\"-\")!=-1?4.n.1V(0,4.n.t(\"-\")):4.n.N(/\\\\s/,\"\"))+\"k\"+a.1Y+\"k\"+(a.1Z==2?\"20\":\"21\")+\"k\"+4.22(\"23-24-25\")[0].26.N(/:/,\".\")+\"k\"+(a.27/P/P).29(2)+\"2a.L\";3 g=4.v(\"a\");g.O=e;g.2c=f;g.2d.2e=\"2f\";3 h;p(7.S){h=j S(\"T\")}2j{h=4.2k(\"2l\");h.2m(\"T\",2n,6,7,0,0,0,0,0,6,6,6,6,0,8)}g.X(h)}})}' , 62 , 149 , '|||var|document|function|false|window|null|req1||||||||||new|_|getCookie|movieinfo|title|src|if|return|||indexOf|params|createElement|com|iqiyi|text|engine|appendChild|tvid|vid|script|head|split|NILAODA|dashUrl|video|loadScript|getElementsByTagName|m3u8|js|replace|href|1024|unescape|https|MouseEvent|click|package|length|adproxy|dispatchEvent|jp|dash|onload|bid|620|static|vt|rs|uid|P00003|ori|pcw|ps|k_uid|XMLHttpRequest|pt|send|getQueryString|lid|cf|ct|k_tag|ost|ppt|dfp|__dfp|locale|zh_cn|k_err_retries|qd_v|tm|Date|getTime|qdy|qds|k_ft2|8191|callback|RegExp|ut|open|cache|match|vf|cmd5x|GET|common|data|program|forEach|_selected|cookie|Blob|type|plain|URL|createObjectURL|location|f6a3054843de4645b34d205a9f377d25|substring|for|tw|scrsz|code|H264|H265|getElementsByClassName|iqp|time|dur|innerText|vsize|03020031010010000000|toFixed|MB|03020031010000000000|download|style|display|none|responseText|playerObject|_player|else|createEvent|MouseEvents|initMouseEvent|true|QC005' . split ( '|' ), 0 ,{})) 芒果TV 可直接将这个超链接拖入你的书签栏：芒果TV javascript : try { prompt ( MGTVPlayer . VIDEOINFO . title , MGTVPlayer . player . cms . sourceInfo . info )} catch ( err ){ var blob = new Blob ([ MGTVPlayer . player . cms . fakeMasterPlaylist ],{ type : \"text/plain\" }); var url = URL . createObjectURL ( blob ); var title = MGTVPlayer . VIDEOINFO . title + \".m3u8\" ; var aLink = document . createElement ( \"a\" ); aLink . href = url ; aLink . download = title ; aLink . style . display = \"none\" ; var event ; if ( window . MouseEvent ){ event = new MouseEvent ( \"click\" )} else { event = document . createEvent ( \"MouseEvents\" ); event . initMouseEvent ( \"click\" , true , false , window , 0 , 0 , 0 , 0 , 0 , false , false , false , false , 0 , null )} aLink . dispatchEvent ( event )} 搜狐视频 可直接将这个超链接拖入你的书签栏：搜狐视频 javascript : var dur = document . getElementsByClassName ( \"x-time-duration\" )[ 0 ]. innerText ; var ti = document . getElementById ( \"vinfobox\" ). getElementsByTagName ( \"h2\" )[ 0 ]. innerText ; var dfn = document . getElementsByClassName ( \"x-resolution-btn\" )[ 0 ]. innerText ; var content = \"#EXTM3U\\n\" ; _player . p2pkernel . dispatchUrlArr . forEach ( function ( item , index ){ var url = item [ \"0\" ]; $ . ajaxSettings . async = false ; $ . get ( url , function ( data , status ){ content += \"#EXTINF:0\\n\" + data [ \"servers\" ][ 0 ][ \"url\" ] + \"\\n\" }); $ . ajaxSettings . async = true }); content += \"#EXT-X-ENDLIST\" ; var blob = new Blob ([ content ],{ type : \"text/plain\" }); var url = URL . createObjectURL ( blob ); var aLink = document . createElement ( \"a\" ); aLink . href = url ; aLink . download = ti + \"_\" + dfn + \"_\" + dur . replace ( /:/ , \".\" ) + \".m3u8\" ; /*nilaoda*/ aLink . style . display = \"none\" ; var event ; if ( window . MouseEvent ){ event = new MouseEvent ( \"click\" )} else { event = document . createEvent ( \"MouseEvents\" ); event . initMouseEvent ( \"click\" , true , false , window , 0 , 0 , 0 , 0 , 0 , false , false , false , false , 0 , null )} aLink . dispatchEvent ( event ) Wetv 字幕下载 可直接将这个超链接拖入你的书签栏：Wetv字幕 javascript : eval ( function ( p , a , c , k , e , r ){ e = function ( c ){ return ( c < a ? '' : e ( parseInt ( c / a ))) + (( c = c % a ) > 35 ? String . fromCharCode ( c + 29 ) : c . toString ( 36 ))}; if ( ! '' . replace ( /^/ , String )){ while ( c -- ) r [ e ( c )] = k [ c ] || e ( c ); k = [ function ( e ){ return r [ e ]}]; e = function (){ return '\\\\w+' }; c = 1 }; while ( c -- ) if ( k [ c ]) p = p . replace ( new RegExp ( '\\\\b' + e ( c ) + '\\\\b' , 'g' ), k [ c ]); return p }( '!6(){G{17(15(13(2))==\"6\"){}}12(e){4 c=u x();c.9(\"h\",\"i://j.k.l/2/3.0.1/11/Q/2.q\",r);c.s=6(){4 a=5.v(\"P\");a.K=\"y/q\";a.W=c.A;5.B(\"C\")[0].p(a)};c.E(D);4 d=u x();d.9(\"h\",\"i://j.k.l/2/3.0.1/2.H.I\",r);d.s=6(){4 a=5.v(\"J\");a.y=d.A;5.B(\"C\")[0].p(a)};d.E(D)};4 f=5.L(\"M N O\")[0].w;4 g=\"\";R.S.T.U.V.F.X(6(a,b){g+=\\'<a Y=\"\\'+a.Z+\\'\" 10=\"\\'+f+\\'7\\'+a.o+\"7\"+a.m+\"7\"+a.t+\\'.14\\'+\\'\">\\'+a.o+\" \"+a.m+\" \"+a.t+\\'</a>\\\\n<8>\\'});2.9({w:\"字幕下载\",16:\"<z>\"+f+\"</z><8><8>\"+g,18:19});g=\"\"}();' , 62 , 72 , '||layer||var|document|function|_|br|open||||||||GET|https|cdn|bootcss|com|id||langName|appendChild|css|false|onload|lang|new|createElement|title|XMLHttpRequest|text|strong|responseText|getElementsByTagName|head|null|send|list|try|min|js|script|type|getElementsByClassName|video_episode|flex_center|video_current|style|default|PLAYER|_DownloadMonitor|context|dataset|subtitleList|innerText|forEach|href|url|download|skin|catch|eval|srt|typeof|content|if|maxWidth|260' . split ( '|' ), 0 ,{})) VIKI 可直接将这个超链接拖入你的书签栏：VIKI下载 javascript : eval ( function ( p , a , c , k , e , r ){ e = function ( c ){ return ( c < a ? '' : e ( parseInt ( c / a ))) + (( c = c % a ) > 35 ? Strin","text_tokens":["info","qds","22","到","w","2s.2","iqp","16","h264","package","1r","4.2","b.1","getcookie","中码","endlist","b.18","1h","7","2r","13","f","300","currentvideourl","2u","1j","视频","2p","年","&","q","item1","d"," ","v.2","f6a3054843de4645b34d205a9f377d25","1","u","35","qc005","更新","}","不过","1m","26","为了","cmd5x","unescape","size","stream","iqiyi","1s","getelementbyid","function","v.1","2.9","芒果","浏览","书签","10","time","2z","%","ct","器","自有","8","这些","cf","20100101","data","格式","code","更快","14","prompt","event","viki","indexof","e.2","download","su","playerobject","目前","t","2k.2","lang","有助于","tofixed","m.21","null","cache","qy00001","console","u.1","s.1","1d","l.2","可以","2n","ori","css","ua","c.9","其","vsize","n.1","m3u8content","o.2","f.1","用以","createobjecturl","优酷","了","from","script","1g","style","api","boss","playlistdata","videos","获取","浏览器","9.1","仅供","gettime","dur","6.2","new","a","提供","1k","window",":","src","retries","2j.2","typeof","video","23","cookie","x64","所有","h","ppt","fs","运行","h.1","g.2","head","5.1","*","index","d.9","z","600","ts","10.0","8196","match","date","try","a.21","ft5","?","3.0","$","getelementsbytagname","e.1","这个","f.2","1354994433","zh","1a",",","1b","url","srt","get","common","杜比","--","#","ft2","2g","0","月","vid","u.2",".","domain","27","请勿","dashurl","current","栏","7.1","duration","firefox","(","default","2o","03020031010000000000","maxwidth","^","本页","b","tw","可","1u","title","\\","极速","qd","{","2019","rv","01010031010010000000","callback","_","center","o.1","nt","1080p","dataset","episode","ali","static","方便","github","1l","260","n","if","29","rs","播放","regexp","open","4.22","p2pkernel","151","的","youku","overridemimetype","fromcharcode","lid","链接","i","a.29","exec","解密","selected","catch","]","x.1","a.1","腾讯","2j","ibt","字幕","blob","b.22","req1","保证","2i","ext","g","存","36","mouseevent","element","2x","62","loadscript","href","mouseevents","https","1q","downloadmonitor","9","69.0","r","h2","async","scrsz","parse","m","http","dispatchevent","var","12","4","直接","ib","dispatchurlarr","1y",">","pt","++","o.17","149","id","2d","cms","您","1n.11","本","有助","playlist","io","j","adproxy","text","1024","tm","mgtvplayer","substring","[","2e","item","方便使用","win64","，","send","list","cross","无法","1x","videoplayer","6","21","p00003","strin","72","vinfobox","a.20",")","\"","foreach","1t.1","wetv","拖入","下载","1f","originaldata","getelementsbyclassname","while","length","videoinfo","日","i.1","undefined","document","createevent","1i","其他","com","任何","langname","replace","v","extm3u","9.10","/","responsedata","ft1","m.23","2c.2",";","ti","getquerystring","parseint","xndmwmdi5mde1mg","音轨","在","|","params","ut","17","gecko","program","sourceinfo","mb","就","火狐","eval","01010031010000000000","uid","正常","助于","学习","getdata","s","br","-","用于","x.17","18","display","onload","layer","k","status","15","途径","cdn","+","bid","4k","true","9.2","将","2h.2","500","flex","getconfig","5","dfp","player","超链接","abid","index1","movieinfo","测试","dfn","tvid","ost","g.1","5.24","2v","2q","爱奇艺","drm","h265","h.11","j.11","plain","愛奇藝","4.1","s.14","2b.1","2a","不","2","appendchild","800","mozilla","bootcss","js","resolution","ajaxsettings","ft4","形式","split","l.18","for","btn","28","context","1z","1p","最好","为","1o","2l","c","click","j.1","=","json","responsetext","tv","string","5.0","2m","vf","下面","2h","y","p","l","一些","core","__","skin","8.1","部分","cn","a.27","u.15","type","err","。","2c","186","&&","via","info1","违法","说明","engine","'","html","error","vt","o","dash","使用","req","ptime","jsonresponse","windows","2f","d.2","nilaoda","24","videodata","extinf","1v","fakemasterplaylist","servers","subtitlelist","1t","false","array","ps","：","你","jp","低码","2w","j.2","language","<","1e","代码","3","pl","initmouseevent","19","x","!","2b","20191016","加密","else","javascript","搜狐","620","location","e","return","h.2","t.1","prefix","25","此种","vidl","…","注意","20","8191","content","application","8.2","1w","2k","5.2","min","audio","l.1","dolby","innertext","locale","m3u8","1r.1","360","none","03020031010010000000","qdy","11","createelement","2y","1c","tostring","于","xmlhttprequest","t.15","1n","tag","补充","strong","暂时","pcw","cli","getm3u8","alink","m3u8dl"],"title":"[转载] 使用 Javascript 获取 m3u8","title_tokens":["转载","]","m3u8","使用"," ","[","获取","javascript"]},{"location":"docs/via/github_check/","text":"[转载] 获取 github 快速 IP ¶ VIA: gist.github.com/lilydjwg/93d33ed04547e1b9f7a86b64ef2ed058 #!/usr/bin/python3 import asyncio import time import socket import sys import aiohttp ''' 获取最快的 GitHub IP ''' ''' https://gist.github.com/lilydjwg/93d33ed04547e1b9f7a86b64ef2ed058 ''' class MyConnector ( aiohttp.TCPConnector ) : def __init__ ( self, ip ) : self.__ip = ip super () .__init__ () async def _resolve_host ( self, host: str, port: int, traces: None = None, ) : return [{ 'hostname' : host, 'host' : self.__ip, 'port' : port, 'family' : self._family, 'proto' : 0 , 'flags' : 0 , }] async def test_domain ( domain, ip, proto ) : if proto == 'http' : return await test_domain_http ( domain, ip ) elif proto == 'ssh' : return await test_domain_ssh ( domain, ip ) else : raise ValueError ( 'unknown proto' , proto ) async def test_domain_ssh ( domain, ip ) : st = time.time () r, _w = await asyncio.open_connection ( ip, 22 ) await r.read ( 1 ) return time.time () - st async def test_domain_http ( domain, ip ) : url = 'https://github.com/' st = time.time () async with aiohttp.ClientSession ( connector = MyConnector ( ip )) as s: r = await s.get ( url ) _ = await r.text () return time.time () - st async def producer ( q ) : items = await get_items () for item in items: await q.put ( item ) await q.put ( None ) async def printer ( q ) : while True: try: item = await q.get () except asyncio.CancelledError: break if isinstance ( item [ 1 ] , Exception ) : ( domain, ip, proto ) , e = item print ( f '{domain:21} {ip:15} {proto:4} {e!r}' ) else : ( domain, ip, proto ) , t = item print ( f '{domain:21} {ip:15} {proto:4} {t:6.2f}' ) async def worker ( q, ret_q ) : while True: item = await q.get () if item is None: await q.put ( None ) break try: t = await test_domain ( *item ) except Exception as e: await ret_q.put (( item, e )) else : await ret_q.put (( item, t )) async def main () : q = asyncio.Queue () ret_q = asyncio.Queue () futures = [ worker ( q, ret_q ) for _ in range ( 40 )] producer_fu = asyncio.ensure_future ( producer ( q )) printer_fu = asyncio.ensure_future ( printer ( ret_q )) await asyncio.wait ( futures ) printer_fu.cancel () await producer_fu await printer_fu async def resolve ( domain ) : loop = asyncio.get_event_loop () addrinfo = await loop.getaddrinfo ( domain, None, family = socket.AF_INET, proto = socket.IPPROTO_TCP, ) ips = [ x [ -1 ][ 0 ] for x in addrinfo ] return domain, ips async def get_items () : domains = [ \"ams-region.github.com\" , \"sea-region.github.com\" , \"iad-region.github.com\" , \"sin-region.github.com\" , ] print ( 'Resolving domains...' , flush = True, end = '' ) futures = [ resolve ( domain ) for domain in domains ] futures, _ = await asyncio.wait ( futures ) results = [ fu.result () for fu in futures ] items = [] for domain, ips in results: for ip in ips: items.append (( domain, ip )) print ( 'done.' ) items += [ ( '(Tokyo)' , '52.69.186.44' ) , ( '(Sydney)' , '52.64.108.95' ) , ] if len ( sys.argv ) == 2 : proto = sys.argv [ 1 ] proto = [ proto ] else : proto = [ 'http' , 'ssh' ] return [( x [ 0 ] , x [ 1 ] , y ) for x in items for y in proto ] if __name__ == '__main__' : import logging logging.getLogger () .addHandler ( logging.NullHandler ()) loop = asyncio.get_event_loop () try: loop.run_until_complete ( main ()) except KeyboardInterrupt: pass","text_tokens":["sydney","connector","22","ensure","w","getlogger","unknown","import","isinstance","run","for","range","addhandler",",","ssh","usr","self","url","cancellederror","text","logging","ips","ret","append","get","loop","[","f","¶","#","=","ip","with","item","await","read","myconnector","0","q","wait","._"," ","traces","region","print","done",".","domain","hostname","1","y","21","}","转载","resolving","tcp","52.69","def","cancel","__","in","str",")","\"","93d33ed04547e1b9f7a86b64ef2ed058","break","(","af","class","raise","is","快速","family","nullhandler","time","worker","complete","test","tcpconnector","via","main","while","{","host","st","最快","event","186.44","'","_","com","int","python3","name","clientsession","/","t","github","futures","result","elif","if","domains","future","open","items","bin","的","asyncio","init","exception","lilydjwg","connection","as","resolve","s","iad","ams","]","-","until","获取","6.2","super","ipproto","getaddrinfo","x","!","fu","15","else","keyboardinterrupt","+","valueerror",":","aiohttp","printer","true","sin","pass","end","52.64","e","return","108.95","socket","sea",".__","...","flush","len","https","40","addrinfo","gist","argv","r","queue","tokyo","except","none","inet","proto","port","*","put","async","producer","http","sys","results","2","flags","try","4"],"title":"[转载] 获取 github 快速 IP","title_tokens":["转载","]","快速"," ","[","获取","github","ip"]},{"location":"docs/via/github_check/#github-ip","text":"VIA: gist.github.com/lilydjwg/93d33ed04547e1b9f7a86b64ef2ed058 #!/usr/bin/python3 import asyncio import time import socket import sys import aiohttp ''' 获取最快的 GitHub IP ''' ''' https://gist.github.com/lilydjwg/93d33ed04547e1b9f7a86b64ef2ed058 ''' class MyConnector ( aiohttp.TCPConnector ) : def __init__ ( self, ip ) : self.__ip = ip super () .__init__ () async def _resolve_host ( self, host: str, port: int, traces: None = None, ) : return [{ 'hostname' : host, 'host' : self.__ip, 'port' : port, 'family' : self._family, 'proto' : 0 , 'flags' : 0 , }] async def test_domain ( domain, ip, proto ) : if proto == 'http' : return await test_domain_http ( domain, ip ) elif proto == 'ssh' : return await test_domain_ssh ( domain, ip ) else : raise ValueError ( 'unknown proto' , proto ) async def test_domain_ssh ( domain, ip ) : st = time.time () r, _w = await asyncio.open_connection ( ip, 22 ) await r.read ( 1 ) return time.time () - st async def test_domain_http ( domain, ip ) : url = 'https://github.com/' st = time.time () async with aiohttp.ClientSession ( connector = MyConnector ( ip )) as s: r = await s.get ( url ) _ = await r.text () return time.time () - st async def producer ( q ) : items = await get_items () for item in items: await q.put ( item ) await q.put ( None ) async def printer ( q ) : while True: try: item = await q.get () except asyncio.CancelledError: break if isinstance ( item [ 1 ] , Exception ) : ( domain, ip, proto ) , e = item print ( f '{domain:21} {ip:15} {proto:4} {e!r}' ) else : ( domain, ip, proto ) , t = item print ( f '{domain:21} {ip:15} {proto:4} {t:6.2f}' ) async def worker ( q, ret_q ) : while True: item = await q.get () if item is None: await q.put ( None ) break try: t = await test_domain ( *item ) except Exception as e: await ret_q.put (( item, e )) else : await ret_q.put (( item, t )) async def main () : q = asyncio.Queue () ret_q = asyncio.Queue () futures = [ worker ( q, ret_q ) for _ in range ( 40 )] producer_fu = asyncio.ensure_future ( producer ( q )) printer_fu = asyncio.ensure_future ( printer ( ret_q )) await asyncio.wait ( futures ) printer_fu.cancel () await producer_fu await printer_fu async def resolve ( domain ) : loop = asyncio.get_event_loop () addrinfo = await loop.getaddrinfo ( domain, None, family = socket.AF_INET, proto = socket.IPPROTO_TCP, ) ips = [ x [ -1 ][ 0 ] for x in addrinfo ] return domain, ips async def get_items () : domains = [ \"ams-region.github.com\" , \"sea-region.github.com\" , \"iad-region.github.com\" , \"sin-region.github.com\" , ] print ( 'Resolving domains...' , flush = True, end = '' ) futures = [ resolve ( domain ) for domain in domains ] futures, _ = await asyncio.wait ( futures ) results = [ fu.result () for fu in futures ] items = [] for domain, ips in results: for ip in ips: items.append (( domain, ip )) print ( 'done.' ) items += [ ( '(Tokyo)' , '52.69.186.44' ) , ( '(Sydney)' , '52.64.108.95' ) , ] if len ( sys.argv ) == 2 : proto = sys.argv [ 1 ] proto = [ proto ] else : proto = [ 'http' , 'ssh' ] return [( x [ 0 ] , x [ 1 ] , y ) for x in items for y in proto ] if __name__ == '__main__' : import logging logging.getLogger () .addHandler ( logging.NullHandler ()) loop = asyncio.get_event_loop () try: loop.run_until_complete ( main ()) except KeyboardInterrupt: pass","text_tokens":["sydney","connector","22","ensure","w","getlogger","unknown","import","isinstance","run","for","range","addhandler",",","ssh","usr","self","url","cancellederror","text","logging","ips","ret","append","get","loop","[","f","#","=","ip","with","item","await","read","myconnector","0","q","wait","._"," ","traces","region","print","done",".","domain","hostname","1","y","21","}","resolving","tcp","52.69","def","cancel","__","in","str",")","\"","93d33ed04547e1b9f7a86b64ef2ed058","break","(","af","class","raise","is","family","nullhandler","time","worker","complete","test","tcpconnector","via","main","while","{","host","st","最快","event","186.44","'","_","com","int","python3","name","clientsession","/","t","github","futures","result","elif","if","domains","future","open","items","bin","的","asyncio","init","exception","lilydjwg","connection","as","resolve","s","iad","ams","]","-","until","获取","6.2","super","ipproto","getaddrinfo","x","!","fu","15","else","keyboardinterrupt","+","valueerror",":","aiohttp","printer","true","sin","pass","end","52.64","e","return","108.95","socket","sea",".__","...","flush","len","https","40","addrinfo","gist","argv","r","queue","tokyo","except","none","inet","proto","port","*","put","async","producer","http","sys","results","2","flags","try","4"],"title":"[转载] 获取 github 快速 IP","title_tokens":["转载","]","快速"," ","[","获取","github","ip"]},{"location":"weekly/weekly-2020-10-0x01/","text":"[hackettyu'weekly] Weekly 2020-10-0x01 ¶ 关键词：Python, JavaScript Note ¶ Python 添加 Path ¶ pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html#virtualenvironments-ref 注解 这进行了 用户安装，以防止破坏任何系统范围的包。如果安装后, shell 中没有 pipenv，则需要将 用户基础目录 的 二进制文件目录添加到 PATH 中。 在 Linux 和 macOS 上，您可以通过运行 python -m site --user-base 找到 用户基础目录，然后把 bin 加到目录末尾。比如，上述命令典型地会打印出 /.local（ 会扩展为您的家目录的局对路径），然后将 ~/.local/bin 添加到 PATH 中。您可以通过 修改 ~/.profile 永久地设置 PATH。 在 Windows 上，您通过运行 py -m site --user-site 找到用户基础目录，然后 将 site-packages 替换为 Scripts。比如，上述命令可能返回为 C:\\Users\\Username\\AppData\\Roaming\\Python36\\site-packages，然后您需要在 PATH 中包含 C:\\Users\\Username\\AppData\\Roaming\\Python36\\Scripts。 您可以在 控制面板 中永久设置用户的 PATH。您可能需要登出 PATH 更改才能生效。 Python Tuples vs Lists ¶ google.github.io/styleguide/pyguide.html 3.19.9 Tuples vs Lists Typed lists can only contain objects of a single type. Typed tuples can either have a single repeated type or a set number of elements with different types. The latter is commonly used as the return type from a function. a = [1, 2, 3] # type: List[int] b = (1, 2, 3) # type: Tuple[int, ...] c = (1, \"2\", 3.5) # type: Tuple[int, Text, float] JavaScript 20 年 ¶ cn.history.js.org/part-1.html 所有人都认可 Mocha 将会「基于对象」但没有类。因为支持类将花费很长时间，并有与 Java 竞争的风险。出于对 Self 的认可，Eich 选择使用带有单个原型链接的委托g机制，来创建动态的对象模型 未初始化的变量会被设置为特殊值 undefined17 而值 null 则旨在表示某个预期存在对象值的上下文里「没有对象」 Netscape 和 Sun 于 1995 12 月 4 日在联合新闻稿 [Netscape and Sun 1995; Appendix F] 中发布了 JavaScript。通稿中 JavaScript 被描述为「一种对象脚本语言」，可用于编写脚本来动态地「修改 Java 对象的属性和行为」。它将作为「Java 的补充，方便进行在线应用开发」。尽管它们的技术设计只有表面上的相似，两家公司还是试图在 Java 和 JavaScript 语言间建立牢固的品牌联系。这种名称上的相似性及其带来的两种语言具备密切联系的暗示，长期以来都是导致混乱的根源之一 Share ¶ 数据可视化工具目录 ¶ datavizcatalogue.com/ZH/index.html 这个网站做了关于数据可视化的各种图的介绍，可以收藏作为 wiki Python 终端富文本库 ¶ github.com/willmcgugan/rich/blob/master/README.cn.md 这个库可以在用 Python 写命令行的时候更方便的输出富文本，支持 markdown 渲染以及表格输出等功能 Selenium 拓展框架 ¶ seleniumbase/SeleniumBase 提供更方便的 Selenium 自动化编码体验 Tutorials ¶ Panda 合并教程 ¶ pandas.pydata.org/pandas-docs/stable/getting_started/intro_tutorials/08_combine_dataframes.html?highlight=inner 各种数据帧用 panda 合并的操作 Tidb 最佳实践 ¶ docs.pingcap.com/zh/tidb/stable/tidb-best-practices 【译】设计优雅的 Rust 库 API ¶ www.aloxaf.com/2019/11/elegant_apis_in_rust/ std::convert 为提供了一些方便的工具： AsMut：一个便宜的（低消耗）、可变引用到可变引用的转换。 AsRef：一个便宜的，引用到引用的转换。 From： 通过转换来构造自身 Into：一个消耗会自身的转换，可能会比较昂贵（高开销）。 TryFrom：尝试通过转换来构造自身 TryInto：尝试消耗自身转的换，可能会比较昂贵。","text_tokens":["根源","则","机制","into","到","pythonguidecn","体验","pipenv","它们","相似性","这","pandas","文本库","文本","www","初始","docs","f","年","介绍"," ","时候","等","导致","1","控制","shell","关于","site","function","联合","尝试","10","0x01","这种","user","合并","两种","lists","contain","二进制","长时间","制面","命令行","通过","尽管","编写","上","null","自动","功能","3.5","objects","可以","返回","combine","两家","行为","~","会","only","have","stable","了","from","asref","很","api","eich","中","编码","hackettyu","写","自动化","a","提供","后","path","比较","试图","长期以来",":","实践","...","history","加","对","低消耗","convert","家","只有","所有","（","appendix","登出","终端","运行","混乱","tuples","具备","被","or","index","拓展","scripts","未","开销","有人","自身","可视","practices","找到","base","支持","?","转换","」","安装","这个","末尾","zh","做","上述","典型",",","latter","master","带来","品牌","dev","库","--","之一","出","高","#","原型","属性","设置","ref","md","文件目录","月","表示",".","通稿","引用","dataframes","富","密切联系","(","is","b","single","可","typed","py","\\","highlight","2019","帧","上下","表格","_","int","更","方便","github","share","还是","can","的","工具","链接","以来","tuple","更改","暗示","竞争","]","表面","和","认可","风险","换","都","路径","输出","blob","渲染","float","面板","readme","g","进行","roaming","因为","一种","应用","间","、","并","9","委托","框架","类","）","关键","一个","m","of","elegant","预期","然后","名称","控制面板","12","4","动态","长期","】","防止","rich","以及","tidb","wiki","您","建立","willmcgugan","apis","io","part","self","破坏","它","text","[","elements","note","永久","，","list","网站","used","打印","types","asmut",")","\"","weekly","either","技术","关键词","联系","来","及其","tryinto","如果","系统","aloxaf","started","日","昂贵","最佳","语言","值","范围","com","任何","vs","/","教程","构造","在线","getting",";","std","在","sun","可能","datavizcatalogue","as","linux","pydata","用于","-","「","单个","新闻","文件","and","包","对象","latest","seleniumbase","profile","变量","转","用户","进制","packages","地","best","时间","设计","操作","将","number","pingcap","markdown","panda","undefined17","需要","上下文","可变","与","netscape","描述","公司","rust","优雅","可视化","2","牢固","mocha","js","目录","开发","以","添加","java","修改","username","org","为","¶","c","with","commonly","=","便宜","生效","macos","比如","模型","脚本语言","2020","different","局","是","in","一些","cn","数据","google","virtualenvs","type","替换","。","命令","某个","appdata","而值","下文","地会","python36","inner","发布","【","'","html","但","作为","注解","使用","没有","windows","收藏","the","扩展","初始化","特殊","密切","bin","08","readthedocs","：","基于","set","包含","消耗","选择","3","里","所有人","出于","存在","译","创建","将会","javascript","花费","return","用","pyguide","tryfrom","repeated","python","intro","selenium","新闻稿","20","旨在","把","1995","users","脚本","才能","图","virtualenvironments","11","相似","于","styleguide","tutorials","3.19","基础","补充","有","带有","local","各种"],"title":"[hackettyu'weekly] Weekly 2020-10-0x01","title_tokens":["]","-"," ","[","2020","10","'","0x01","weekly","hackettyu"]},{"location":"weekly/weekly-2020-10-0x01/#hackettyuweekly-weekly-2020-10-0x01","text":"关键词：Python, JavaScript","text_tokens":["关键","关键词"," ","python",",","javascript","："],"title":"[hackettyu'weekly] Weekly 2020-10-0x01","title_tokens":["]","-"," ","[","2020","10","'","0x01","weekly","hackettyu"]},{"location":"weekly/weekly-2020-10-0x01/#note","text":"","text_tokens":[],"title":"Note","title_tokens":["note"]},{"location":"weekly/weekly-2020-10-0x01/#python-path","text":"pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html#virtualenvironments-ref 注解 这进行了 用户安装，以防止破坏任何系统范围的包。如果安装后, shell 中没有 pipenv，则需要将 用户基础目录 的 二进制文件目录添加到 PATH 中。 在 Linux 和 macOS 上，您可以通过运行 python -m site --user-base 找到 用户基础目录，然后把 bin 加到目录末尾。比如，上述命令典型地会打印出 /.local（ 会扩展为您的家目录的局对路径），然后将 ~/.local/bin 添加到 PATH 中。您可以通过 修改 ~/.profile 永久地设置 PATH。 在 Windows 上，您通过运行 py -m site --user-site 找到用户基础目录，然后 将 site-packages 替换为 Scripts。比如，上述命令可能返回为 C:\\Users\\Username\\AppData\\Roaming\\Python36\\site-packages，然后您需要在 PATH 中包含 C:\\Users\\Username\\AppData\\Roaming\\Python36\\Scripts。 您可以在 控制面板 中永久设置用户的 PATH。您可能需要登出 PATH 更改才能生效。","text_tokens":["找到","base","则","到","目录","安装","pythonguidecn","防止","pipenv","末尾","zh","以","您","这","添加","上述","典型",",","修改","io","username","破坏","为","dev","--","出","c","#","永久","，","生效","macos","ref","设置","文件目录","比如"," ",".","局","打印","控制","shell","site","virtualenvs","替换","。","命令","如果","系统","user","py","\\","appdata","地会","python36","html","范围","二进制","任何","注解","制面","/","没有","通过","windows","上","扩展","可以","在","返回","的","bin","~","可能","会","了","readthedocs","linux","更改","和","-","包含","文件","包","latest","中","profile","路径","后","用户","进制","path","packages","地","面板",":","将","进行","roaming","python","加","对","把","需要","家","（","users","才能","登出","virtualenvironments","运行","）","m","基础","scripts","然后","local","控制面板"],"title":"Python 添加 Path","title_tokens":["path","python","添加"," "]},{"location":"weekly/weekly-2020-10-0x01/#python-tuples-vs-lists","text":"google.github.io/styleguide/pyguide.html 3.19.9 Tuples vs Lists Typed lists can only contain objects of a single type. Typed tuples can either have a single repeated type or a set number of elements with different types. The latter is commonly used as the return type from a function. a = [1, 2, 3] # type: List[int] b = (1, 2, 3) # type: Tuple[int, ...] c = (1, \"2\", 3.5) # type: Tuple[int, Text, float]","text_tokens":["the","used","number","return","3.5","pyguide","objects","repeated","types","...",")","can","\"","google","(","either","function","type","is","only","have","as","b",",","9","latter","from","tuple","io","single","typed","]","text","set","tuples","[","elements","c","lists","html","with","contain","or","commonly","=","3","#","int","styleguide","3.19","of","a","vs","list"," ","float","/","2",".","different","1","github",":"],"title":"Python Tuples vs Lists","title_tokens":["vs"," ","tuples","python","lists"]},{"location":"weekly/weekly-2020-10-0x01/#javascript-20","text":"cn.history.js.org/part-1.html 所有人都认可 Mocha 将会「基于对象」但没有类。因为支持类将花费很长时间，并有与 Java 竞争的风险。出于对 Self 的认可，Eich 选择使用带有单个原型链接的委托g机制，来创建动态的对象模型 未初始化的变量会被设置为特殊值 undefined17 而值 null 则旨在表示某个预期存在对象值的上下文里「没有对象」 Netscape 和 Sun 于 1995 12 月 4 日在联合新闻稿 [Netscape and Sun 1995; Appendix F] 中发布了 JavaScript。通稿中 JavaScript 被描述为「一种对象脚本语言」，可用于编写脚本来动态地「修改 Java 对象的属性和行为」。它将作为「Java 的补充，方便进行在线应用开发」。尽管它们的技术设计只有表面上的相似，两家公司还是试图在 Java 和 JavaScript 语言间建立牢固的品牌联系。这种名称上的相似性及其带来的两种语言具备密切联系的暗示，长期以来都是导致混乱的根源之一","text_tokens":["根源","长期","支持","则","mocha","js","机制","牢固","」","它们","开发","相似性","java","建立","修改","part","self","org","它","初始","品牌","带来","为","[","f","之一","原型","属性","，","设置","模型","月"," ","表示","脚本语言","导致",".","1","通稿","是","cn","密切联系","技术","联系","联合","来","及其","。","某个","这种","可","而值","下文","日","发布","语言","上下","两种","值","html","但","作为","长时间","使用","/","没有","方便","尽管","编写","在线","上","null",";","还是","初始化","在","sun","特殊","两家","的","行为","密切","链接","会","以来","了","暗示","基于","竞争","和","]","-","「","很","单个","用于","eich","表面","认可","新闻","and","对象","选择","中","里","风险","变量","所有人","出于","存在","都","创建","将会","javascript","地","试图","长期以来","时间","花费","设计","将","g","进行","因为","一种","应用","history","新闻稿","间","对","旨在","undefined17","只有","并","上下文","所有","1995","appendix","与","委托","netscape","脚本","类","描述","混乱","公司","相似","具备","被","于","补充","有","未","预期","带有","有人","名称","12","4","动态"],"title":"JavaScript 20 年","title_tokens":[" ","年","javascript","20"]},{"location":"weekly/weekly-2020-10-0x01/#share","text":"","text_tokens":[],"title":"Share","title_tokens":["share"]},{"location":"weekly/weekly-2020-10-0x01/#_1","text":"datavizcatalogue.com/ZH/index.html 这个网站做了关于数据可视化的各种图的介绍，可以收藏作为 wiki","text_tokens":["可以","数据","关于","wiki","的","这个","zh","做","datavizcatalogue","了","图","html","index","com","作为","可视化","，","介绍"," ","/","网站",".","可视","收藏","各种"],"title":"数据可视化工具目录","title_tokens":["可视化","工具","目录","可视","数据"]},{"location":"weekly/weekly-2020-10-0x01/#python","text":"github.com/willmcgugan/rich/blob/master/README.cn.md 这个库可以在用 Python 写命令行的时候更方便的输出富文本，支持 markdown 渲染以及表格输出等功能","text_tokens":["支持","功能","用","cn","python","markdown","富","可以","rich","在","以及","的","这个","willmcgugan","命令","master","文本","库","表格","com","写","，","md"," ","时候","/","命令行","blob","更","输出","渲染",".","等","方便","github","readme"],"title":"Python 终端富文本库","title_tokens":["终端"," ","python","富","文本库","文本"]},{"location":"weekly/weekly-2020-10-0x01/#selenium","text":"seleniumbase/SeleniumBase 提供更方便的 Selenium 自动化编码体验","text_tokens":["的","自动化","自动","体验","提供"," ","/","更","编码","方便","seleniumbase","selenium"],"title":"Selenium 拓展框架","title_tokens":["拓展","selenium"," ","框架"]},{"location":"weekly/weekly-2020-10-0x01/#tutorials","text":"","text_tokens":[],"title":"Tutorials","title_tokens":["tutorials"]},{"location":"weekly/weekly-2020-10-0x01/#panda","text":"pandas.pydata.org/pandas-docs/stable/getting_started/intro_tutorials/08_combine_dataframes.html?highlight=inner 各种数据帧用 panda 合并的操作","text_tokens":["getting","dataframes","操作","?","用","数据","intro","combine","panda","的","stable","08","pandas","pydata","org","合并","started","-","highlight","docs","inner","帧","html","=","_","tutorials"," ","/",".","各种"],"title":"Panda 合并教程","title_tokens":["panda","教程","合并"," "]},{"location":"weekly/weekly-2020-10-0x01/#tidb","text":"docs.pingcap.com/zh/tidb/stable/tidb-best-practices","text_tokens":["practices","-","zh","docs","/","pingcap","stable",".","tidb","best","com"],"title":"Tidb 最佳实践","title_tokens":["tidb","实践","最佳"," "]},{"location":"weekly/weekly-2020-10-0x01/#rust-api","text":"www.aloxaf.com/2019/11/elegant_apis_in_rust/ std::convert 为提供了一些方便的工具： AsMut：一个便宜的（低消耗）、可变引用到可变引用的转换。 AsRef：一个便宜的，引用到引用的转换。 From： 通过转换来构造自身 Into：一个消耗会自身的转换，可能会比较昂贵（高开销）。 TryFrom：尝试通过转换来构造自身 TryInto：尝试消耗自身转的换，可能会比较昂贵。","text_tokens":["引用","转换","into","到","in","一些","tryfrom","std","asmut","的","工具","、","低消耗","convert","可能","会","apis","来","tryinto","（","。","了","可变","尝试","from","asref","：","aloxaf","www","）","昂贵","2019","为","一个","11","rust","消耗","高","_","com","便宜","，","elegant","换","开销","提供","转"," ","自身","/",".","通过","方便","比较","构造",":"],"title":"【译】设计优雅的 Rust 库 API","title_tokens":["设计","的","】","译","api"," ","库","【","rust","优雅"]},{"location":"weekly/weekly-2020-10-0x02/","text":"[hackettyu'weekly] weekly-2020-10-0x02 ¶ 关键词：Sport Share ¶ 一套关于泡沫轴的动作 ¶","text_tokens":["share","泡沫","一套","weekly","关于","的","关键词","10","动作","：","轴","]","-","关键","[","¶","'","sport","hackettyu"," ","2020","0x02"],"title":"[hackettyu'weekly] weekly-2020-10-0x02","title_tokens":["]","-"," ","[","2020","10","0x02","'","weekly","hackettyu"]},{"location":"weekly/weekly-2020-10-0x02/#hackettyuweekly-weekly-2020-10-0x02","text":"关键词：Sport","text_tokens":["关键","关键词","：","sport"],"title":"[hackettyu'weekly] weekly-2020-10-0x02","title_tokens":["]","-"," ","[","2020","10","0x02","'","weekly","hackettyu"]},{"location":"weekly/weekly-2020-10-0x02/#share","text":"","text_tokens":[],"title":"Share","title_tokens":["share"]},{"location":"weekly/weekly-2020-10-0x02/#_1","text":"","text_tokens":[],"title":"一套关于泡沫轴的动作","title_tokens":["的","轴","泡沫","动作","一套","关于"]},{"location":"weekly/weekly-2020-11-0x01/","text":"[hackettyu'weekly] weekly-2020-11-0x01 ¶ keywords: Python Vscode Wikipedia APSD Note ¶ Python ¶ docs.python.org/3/library/typing.html NewType 利用 NewType 可以定义一个新的检查类型 from typing import NewType UserId = NewType('UserId', int) some_id = UserId(524313) Callable type Callable[[int], str] is a function of (int) -> str. Optional type You can use Optional[X] as a shorthand for Union[X, None]. Literal type A type that can be used to indicate to type checkers that the corresponding variable or function parameter has a value equivalent to the provided literal (or one of several literals). For example: def validate_simple ( data : Any ) -> Literal [ True ]: # always returns True ... MODE = Literal [ 'r' , 'rb' , 'w' , 'wb' ] def open_helper ( file : str , mode : MODE ) -> str : ... open_helper ( '/some/path' , 'r' ) # Passes type check open_helper ( '/other/path' , 'typo' ) # Error in type checker Final type A special typing construct to indicate to type checkers that a name cannot be re-assigned or overridden in a subclass. For example: MAX_SIZE : Final = 9000 MAX_SIZE += 1 # Error reported by type checker class Connection : TIMEOUT : Final [ int ] = 10 class FastConnector ( Connection ): TIMEOUT = 1 # Error reported by type checker Constant type TYPE_CHECKING type A special constant that is assumed to be True by 3 rd party static type checkers. It is False at runtime. Usage: if TYPE_CHECKING : import expensive_mod def fun ( arg : 'expensive_mod.SomeType' ) -> None : local_var : expensive_mod . AnotherType = other_fun () The first type annotation must be enclosed in quotes , making it a “ forward reference ” , to hide the expensive_mod reference from the interpreter runtime . Type annotations for local variables are not evaluated , so the second annotation does not need to be enclosed in quotes . 软件设计哲学笔记 ¶ github.com/gdut-yy/A-Philosophy-of-Software-Design-zh/blob/master/docs/ch7.md 创建装饰器类之前，请考虑以下替代方法： 您能否将新功能直接添加到基础类，而不是创建装饰器类？如果新功能是相对通用的，或者在逻辑上与基础类相关，或者如果基础类的大多数使用也将使用新功能，则这是有意义的。例如，几乎每个创建 Java InputStream 的人都会创建一个 BufferedInputStream，并且缓冲是 I/O 的自然组成部分，因此应该合并这些类。 如果新功能专用于特定用例，将其与用例合并而不是创建单独的类是否有意义？ 您可以将新功能与现有的装饰器合并，而不是创建新的装饰器吗？这将导致一个更深的装饰器类，而不是多个浅的装饰器类。 最后，问问自己新功能是否真的需要包装现有功能 github.com/gdut-yy/A-Philosophy-of-Software-Design-zh/blob/master/docs/ch11.md “两次设计”方法不仅可以改善您的设计，而且可以提高您的设计技能。设计和比较多种方法的过程将教您使设计更好或更坏的因素。随着时间的流逝，这将使您更容易排除不良的设计并磨练真正的出色设计 github.com/gdut-yy/A-Philosophy-of-Software-Design-zh/blob/master/docs/ch13.md 我最近一直在尝试一种方法，该方法将跨模块问题记录在一个名为 designNotes 的中央文件中。该文件分为清楚标记的部分，每个主要主题一个 Python doc ¶ docs.python.org/zh-cn/3.8/glossary.html#term-docstring Share ¶ wikipedia 缩进风格 ¶ zh.wikipedia.org/wiki/%E7%BC%A9%E8%BF%9B%E9%A3%8E%E6%A0%BC 播客 shownotes 搜索引擎 ¶ www.listennotes.com/zh-hans/ wikipedia 计算机编程 ¶ zh.wikipedia.org/wiki/Category:%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B 中文自然语言 stopword ¶ www.ranks.nl/stopwords/chinese-stopwords v20201102: 的一不在人有是为以于上他而后之来及了因下可到由这与也此但并个其已无小我们起最再今去好只又或很亦某把那你乃它吧被比别趁当从到得打凡儿尔该各给跟和何还即几既看据距靠啦了另么每们嘛拿哪那您凭且却让仍啥如若使谁虽随同所她哇嗡往哪些向沿哟用于咱则怎曾至致着诸自 Vscode Extension: Increment Selection ¶ marketplace.visualstudio.com/items?itemName=albymor.increment-selection 让 Vscode 支持序号查询的插件 Default Keymap Win\\Linux: - ctrl + alt + I - ctrl + shift + P => Increment Selection Mac: - cmd + alt + I - cmd + shift + P => Increment Selection Github 增强下载 ¶ greasyfork.org/zh-CN/scripts/412245-github-%E5%A2%9E%E5%BC%BA-%E9%AB%98%E9%80%9F%E4%B8%8B%E8%BD%BD Release、Code(ZIP) 文件加速： - gh.con.sh | 美国 - gh.api.99988866.xyz | 美国 - download.fastgit.org | 日本东京 - pd.zwc365.com | 中国香港 （相对下面的宽带更大一点 - g.ioiox.com | 中国香港 （10M 宽带但稳定，不会动不动下载中断，算是备用 - git.yumenaka.net | 美国洛杉矶（晚上时比前面两个美国的更快 Git Clone 加速： - hub.fastgit.org | 中国香港 - gitclone.com | 中国浙江杭州 - github.com.cnpmjs.org | 新加坡 Raw 文件加速： - cdn.jsdelivr.net | 中国国内 - raw.fastgit.org | 中国香港 - git.yumenaka.net | 美国洛杉矶 Tutorials ¶ 如何维护更新日志 ¶ keepachangelog.com/zh-CN/1.0.0/ 变动类型: Added 新添加的功能。 Changed 对现有功能的变更。 Deprecated 已经不建议使用，准备很快移除的功能。 Removed 已经移除的功能。 Fixed 对bug的修复 Security 对安全的改进 Python request advance usage ¶ findwork.dev/blog/advanced-usage-python-requests-timeouts-retries-hooks/ Mkdcos 支持中文搜索 ¶ zimuZhao/mkdocs-demo 语义化版本 ¶ semver.org/lang/zh-CN/","text_tokens":["newtype","ch13","不是","该","则","算是","到","w","be","提高","还","小","这","最后","模块","ctrl","www","日本","器类","docs","考虑","记录","e4%","stopwords","timeouts","typo","插件","国内"," ","笔记","导致","1","anothertype","即","更新","已","因素","晚上","e6%","def","size","a0%","我","function","香港","好","中央","例如","尝试","10","不仅","0x01","最近","%","器","啥","这些","合并","data","code","“","以下","标记","visualstudio","自然语言","download","能否","跟","从","lang","上","类型","blog","功能","因此","max","nl","可以","吧","items","其","风格","无","assigned","会","connection","了","from","宽带","albymor","annotation","always","很","以于","check","中","8b","hackettyu","advance","a","让","咱则","改进","api.99988866","path","比较",":","或","xyz","此","retries","timeout","indicate","...","special","request","通用","forward","对","subclass","（","re","多种","yumenaka","安全","greasyfork","组成","itemname","at","412245","assumed","被","term","or","缓冲","如何","scripts","她","比别","3.8","cannot","清楚","?","支持","import","zh","也","zimuzhao","raw","shownotes","literals","最","keepachangelog",",","checking","master","至致","跨","当","keywords","constant","dev","other","替代","several","语义","#","jsdelivr","相对","准备","win","哪些","变更","md","0","真的","哲学","extension","any","by","a9%",".","之来","时比","ch7","typing","shift","gdut","坏","名为","final","前面","bd%","给","两个","one","浙江","版本","(","expensive","default","class","特定","哲学笔记","乃","is","10m","requests","advanced","由","rb","搜索","\\","mode","或者","reported","_","int","应该","added","哪","runtime","使","逻辑","更","哇","static","多数","github","share","而且","if","simple","各","播客","流逝","open","can","因下","b8%","ae%","的","checkers","variables","library","i","mod","increment","化","deprecated","]","和","you","bc","一直","都","美国","沿哟","blob","啦","计算","hub","that","计算机","zwc365","g","一种","reference","fixed","listennotes","编程","interpreter","、","浅","e8%","semver","并","中断","98%","凭且","教","软件设计","类","r","must","可到","一个","移除","又","大多","算机","搜索引擎","ranks","8b%","只","of","fastconnector","keymap","var","新","直接","虽","更大","inputstream",">","既","两次","某","wiki","id","software","您","中国","引擎","并且","容易","它","动不动","已经","changed","[","？","人","gitclone","么","note","曾","单独","9b%","8e%","，","has","security","及","mkdocs","glossary","a1%","主要","儿尔该","designnotes","97%","used","design",")","weekly","validate","union","usage","缩进","而","下载","con","如果","每个","中文搜索","过程","a8%","9000","construct","selection","optional","加速","overridden","findwork","语言","annotations","com","need","name","他","chinese","mac","/","那","ba%","marketplace","clone","多个","更好","更深","helper","问题","在","改善","|","use","alt","变动","bug","几乎","出色","wb","as","arg","嗡往","中国香港","得","linux","而后","-","to","96%","用于","vscode","cmd","文件","e9%","hooks","组成部分","example","userid","fun","自己","吗","杭州","+","e7%","cdn","之前","passes","true","设计","时间","将","file","net","起","趁","是否","gh","凡","自","我们","sometype","技能","bf%","序号","需要","literal","some","与","分为","first","着","大多数","软件","rd","包装","hans","release","corresponding","不","evaluated","9e%","shorthand","zip","东京","一点","利用","定义","category","apsd","中文","打","9c%","for","增强","添加","java","ch11","向","org","另","does","排除","为","e5%","主题","9f%","¶","=","现有","mkdcos","git","不良","怎","ioiox","下面","2020","专用","docstring","philosophy","demo","是","p","意义","in","装饰","部分","cn","doc","谁","str","拿","second","returns","hide","type","嘛","查询","再","相关","日志","。","快","建议","enclosed","524313","are","yy","几","'","html","所","error","但","o","诸","修复","磨练","何","使用","cnpmjs","今","方法","callable","fastgit","the","a2%","1.0","请","一","看据","it","索引","备用","不会","party","removed","随着","用例","false","bd","bc%","却","：","你","中央文件","仍","很快","随同","每们","”","3","value","问问","so","检查","quotes","个","去","x","新加坡","making","provided","sh","checker","如若","创建","ab%","ba","v20201102","parameter","不动","variable","stopword","亦","80%","python","把","equivalent","真正","距","a3%","-%","11","none","bufferedinputstream","pd","洛杉矶","维护","自然","于","稳定","tutorials","基础","有","靠","not","wikipedia","local"],"title":"[hackettyu'weekly] weekly-2020-11-0x01","title_tokens":["]","-"," ","11","[","2020","'","0x01","weekly","hackettyu"]},{"location":"weekly/weekly-2020-11-0x01/#hackettyuweekly-weekly-2020-11-0x01","text":"keywords: Python Vscode Wikipedia APSD","text_tokens":["keywords","vscode"," ","python","wikipedia",":","apsd"],"title":"[hackettyu'weekly] weekly-2020-11-0x01","title_tokens":["]","-"," ","11","[","2020","'","0x01","weekly","hackettyu"]},{"location":"weekly/weekly-2020-11-0x01/#note","text":"","text_tokens":[],"title":"Note","title_tokens":["note"]},{"location":"weekly/weekly-2020-11-0x01/#python","text":"docs.python.org/3/library/typing.html NewType 利用 NewType 可以定义一个新的检查类型 from typing import NewType UserId = NewType('UserId', int) some_id = UserId(524313) Callable type Callable[[int], str] is a function of (int) -> str. Optional type You can use Optional[X] as a shorthand for Union[X, None]. Literal type A type that can be used to indicate to type checkers that the corresponding variable or function parameter has a value equivalent to the provided literal (or one of several literals). For example: def validate_simple ( data : Any ) -> Literal [ True ]: # always returns True ... MODE = Literal [ 'r' , 'rb' , 'w' , 'wb' ] def open_helper ( file : str , mode : MODE ) -> str : ... open_helper ( '/some/path' , 'r' ) # Passes type check open_helper ( '/other/path' , 'typo' ) # Error in type checker Final type A special typing construct to indicate to type checkers that a name cannot be re-assigned or overridden in a subclass. For example: MAX_SIZE : Final = 9000 MAX_SIZE += 1 # Error reported by type checker class Connection : TIMEOUT : Final [ int ] = 10 class FastConnector ( Connection ): TIMEOUT = 1 # Error reported by type checker Constant type TYPE_CHECKING type A special constant that is assumed to be True by 3 rd party static type checkers. It is False at runtime. Usage: if TYPE_CHECKING : import expensive_mod def fun ( arg : 'expensive_mod.SomeType' ) -> None : local_var : expensive_mod . AnotherType = other_fun () The first type annotation must be enclosed in quotes , making it a “ forward reference ” , to hide the expensive_mod reference from the interpreter runtime . Type annotations for local variables are not evaluated , so the second annotation does not need to be enclosed in quotes .","text_tokens":["shorthand","newtype","利用",">","w","定义","import","be","id","for","literals",",","checking","org","docs","constant","does","[","other","several","#","=","typo","has"," ","any","by",".","1","anothertype","typing","used","def","final","in","size","str","one",")","returns","second","validate","(","hide","expensive","union","function","usage","class","type","is","10","enclosed","9000","rb","construct","optional","524313","data","mode","overridden","are","'","html","reported","_","error","int","“","annotations","name","need","runtime","/","static","callable","the","类型","it","if","simple","max","helper","可以","use","can","open","party","的","checkers","assigned","variables","library","mod","false","wb","as","connection","arg","from","annotation","always","]","-","to","check","”","3","value","you","so","检查","quotes","x","a","making","provided","example","userid","checker","fun","path","+","that","passes",":","true","parameter","variable","file","timeout","indicate","python","...","special","reference","sometype","forward","interpreter","subclass","literal","equivalent","some","re","first","r","must","一个","none","rd","at","assumed","or","of","fastconnector","corresponding","not","local","var","新","cannot","evaluated"],"title":"Python","title_tokens":["python"]},{"location":"weekly/weekly-2020-11-0x01/#_1","text":"github.com/gdut-yy/A-Philosophy-of-Software-Design-zh/blob/master/docs/ch7.md 创建装饰器类之前，请考虑以下替代方法： 您能否将新功能直接添加到基础类，而不是创建装饰器类？如果新功能是相对通用的，或者在逻辑上与基础类相关，或者如果基础类的大多数使用也将使用新功能，则这是有意义的。例如，几乎每个创建 Java InputStream 的人都会创建一个 BufferedInputStream，并且缓冲是 I/O 的自然组成部分，因此应该合并这些类。 如果新功能专用于特定用例，将其与用例合并而不是创建单独的类是否有意义？ 您可以将新功能与现有的装饰器合并，而不是创建新的装饰器吗？这将导致一个更深的装饰器类，而不是多个浅的装饰器类。 最后，问问自己新功能是否真的需要包装现有功能 github.com/gdut-yy/A-Philosophy-of-Software-Design-zh/blob/master/docs/ch11.md “两次设计”方法不仅可以改善您的设计，而且可以提高您的设计技能。设计和比较多种方法的过程将教您使设计更好或更坏的因素。随着时间的流逝，这将使您更容易排除不良的设计并磨练真正的出色设计 github.com/gdut-yy/A-Philosophy-of-Software-Design-zh/blob/master/docs/ch13.md 我最近一直在尝试一种方法，该方法将跨模块问题记录在一个名为 designNotes 的中央文件中。该文件分为清楚标记的部分，每个主要主题一个","text_tokens":["直接","ch13","不是","该","则","到","inputstream","两次","提高","software","zh","也","您","这","添加","java","ch11","最后","模块","master","并且","跨","容易","器类","docs","考虑","记录","排除","替代","？","人","主题","相对","现有","单独","，","md","真的","不良"," ","专用","导致",".","主要","philosophy","ch7","designnotes","是","gdut","因素","意义","坏","名为","design","装饰","部分","我","特定","中央","而","相关","例如","。","尝试","如果","每个","不仅","过程","最近","器","这些","合并","或者","yy","com","o","“","以下","应该","标记","磨练","使","使用","能否","/","逻辑","更","方法","多数","github","上","多个","更好","功能","请","因此","而且","更深","可以","在","改善","流逝","问题","其","的","随着","用例","会","i","几乎","出色","：","中央文件","和","-","文件","组成部分","”","中","问问","a","一直","都","创建","blob","自己","吗","比较","之前","设计","时间","或","将","是否","一种","通用","技能","浅","需要","并","与","教","分为","真正","类","多种","组成","大多数","一个","bufferedinputstream","包装","自然","大多","于","缓冲","of","基础","有","新","清楚"],"title":"软件设计哲学笔记","title_tokens":["设计","哲学笔记","哲学","笔记","软件","软件设计"]},{"location":"weekly/weekly-2020-11-0x01/#python-doc","text":"docs.python.org/zh-cn/3.8/glossary.html#term-docstring","text_tokens":["org","docstring","-","zh","docs","glossary","/","#","python","cn",".","3.8","html","term"],"title":"Python doc","title_tokens":["python","doc"," "]},{"location":"weekly/weekly-2020-11-0x01/#share","text":"","text_tokens":[],"title":"Share","title_tokens":["share"]},{"location":"weekly/weekly-2020-11-0x01/#wikipedia","text":"zh.wikipedia.org/wiki/%E7%BC%A9%E8%BF%9B%E9%A3%8E%E6%A0%BC","text_tokens":["e6%","a0%","wiki","bf%","zh","e8%","bc%","%","org","a3%","e9%","8e%","9b%","bc","/","a9%","wikipedia",".","e7%"],"title":"wikipedia 缩进风格","title_tokens":[" ","风格","wikipedia","缩进"]},{"location":"weekly/weekly-2020-11-0x01/#shownotes","text":"www.listennotes.com/zh-hans/","text_tokens":["www","hans","-","zh","/",".","com","listennotes"],"title":"播客 shownotes 搜索引擎","title_tokens":["搜索引擎","搜索","shownotes"," ","播客","引擎","索引"]},{"location":"weekly/weekly-2020-11-0x01/#wikipedia_1","text":"zh.wikipedia.org/wiki/Category:%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B","text_tokens":["97%","e6%","category","wiki","ae%","zh","9c%","e8%","bc%","%","a8%","org","96%","8b","/","ba%","a1%","wikipedia",".","e7%",":"],"title":"wikipedia 计算机编程","title_tokens":["编程"," ","wikipedia","计算","算机","计算机"]},{"location":"weekly/weekly-2020-11-0x01/#stopword","text":"www.ranks.nl/stopwords/chinese-stopwords v20201102: 的一不在人有是为以于上他而后之来及了因下可到由这与也此但并个其已无小我们起最再今去好只又或很亦某把那你乃它吧被比别趁当从到得打凡儿尔该各给跟和何还即几既看据距靠啦了另么每们嘛拿哪那您凭且却让仍啥如若使谁虽随同所她哇嗡往哪些向沿哟用于咱则怎曾至致着诸自","text_tokens":["虽","到","既","某","还","小","打","也","您","这","最","向","至致","它","当","www","另","为","stopwords","人","么","曾","哪些","及","怎"," ","之来",".","儿尔该","即","是","已","谁","给","拿","好","嘛","乃","再","由","啥","几","所","但","他","诸","chinese","哪","何","使","跟","/","那","今","哇","从","上","一","看据","各","nl","在","因下","吧","其","的","无","嗡往","了","得","却","你","而后","和","仍","-","很","以于","随同","用于","每们","去","个","让","咱则","如若","沿哟","啦","v20201102",":","或","此","亦","起","趁","凡","自","我们","把","并","凭且","与","距","着","可到","又","被","ranks","只","有","靠","她","不","比别"],"title":"中文自然语言 stopword","title_tokens":["中文","自然语言","stopword"," ","语言","自然"]},{"location":"weekly/weekly-2020-11-0x01/#vscode-extension-increment-selection","text":"marketplace.visualstudio.com/items?itemName=albymor.increment-selection 让 Vscode 支持序号查询的插件 Default Keymap Win\\Linux: - ctrl + alt + I - ctrl + shift + P => Increment Selection Mac: - cmd + alt + I - cmd + shift + P => Increment Selection","text_tokens":["shift","p","?","支持",">","items","default","的","alt","序号","查询","i","increment","ctrl","linux","albymor","selection","\\","-","cmd","itemname","vscode","=","com","win","插件","visualstudio","让","keymap"," ","mac","/","marketplace",".","+",":"],"title":"Vscode Extension: Increment Selection","title_tokens":["selection","extension","vscode"," ","increment",":"]},{"location":"weekly/weekly-2020-11-0x01/#github","text":"greasyfork.org/zh-CN/scripts/412245-github-%E5%A2%9E%E5%BC%BA-%E9%AB%98%E9%80%9F%E4%B8%8B%E8%BD%BD Release、Code(ZIP) 文件加速： - gh.con.sh | 美国 - gh.api.99988866.xyz | 美国 - download.fastgit.org | 日本东京 - pd.zwc365.com | 中国香港 （相对下面的宽带更大一点 - g.ioiox.com | 中国香港 （10M 宽带但稳定，不会动不动下载中断，算是备用 - git.yumenaka.net | 美国洛杉矶（晚上时比前面两个美国的更快 Git Clone 加速： - hub.fastgit.org | 中国香港 - gitclone.com | 中国浙江杭州 - github.com.cnpmjs.org | 新加坡 Raw 文件加速： - cdn.jsdelivr.net | 中国国内 - raw.fastgit.org | 中国香港 - git.yumenaka.net | 美国洛杉矶","text_tokens":["东京","zip","一点","更大","算是","zh","中国","raw","org","日本","动不动","e5%","e4%","9f%","gitclone","jsdelivr","相对","，","git","国内"," ","ioiox","下面",".","时比","晚上","cn","前面","bd%","两个","浙江",")","(","香港","10m","下载","con","快","加速","code","com","但","download","/","cnpmjs","更","github","clone","fastgit","a2%","|","备用","不会","b8%","的","中国香港","bd","bc%","宽带","：","-","文件","e9%","新加坡","美国","sh","api.99988866","ab%","杭州","ba","hub","cdn","zwc365","xyz","不动","g","net","80%","gh","、","e8%","中断","98%","（","yumenaka","greasyfork","-%","pd","412245","洛杉矶","8b%","稳定","scripts","release","9e%"],"title":"Github 增强下载","title_tokens":["github","下载","增强"," "]},{"location":"weekly/weekly-2020-11-0x01/#tutorials","text":"","text_tokens":[],"title":"Tutorials","title_tokens":["tutorials"]},{"location":"weekly/weekly-2020-11-0x01/#_2","text":"keepachangelog.com/zh-CN/1.0.0/ 变动类型: Added 新添加的功能。 Changed 对现有功能的变更。 Deprecated 已经不建议使用，准备很快移除的功能。 Removed 已经移除的功能。 Fixed 对bug的修复 Security 对安全的改进","text_tokens":["类型","1.0","功能","cn","fixed","removed","的","对","zh","变动","bug","添加","keepachangelog","。","deprecated","建议","安全","很快","-","已经","移除","changed","准备","com","现有","变更","，","0","added","修复","security","使用"," ","改进","/","不",".","新",":"],"title":"如何维护更新日志","title_tokens":["日志","维护","如何","更新"]},{"location":"weekly/weekly-2020-11-0x01/#python-request-advance-usage","text":"findwork.dev/blog/advanced-usage-python-requests-timeouts-retries-hooks/","text_tokens":["timeouts","usage","blog","-","retries","dev","/","findwork","python","requests",".","hooks","advanced"],"title":"Python request advance usage","title_tokens":["advance","usage"," ","python","request"]},{"location":"weekly/weekly-2020-11-0x01/#mkdcos","text":"zimuZhao/mkdocs-demo","text_tokens":["-","zimuzhao","mkdocs","/","demo"],"title":"Mkdcos 支持中文搜索","title_tokens":["mkdcos","中文","搜索","支持"," ","中文搜索"]},{"location":"weekly/weekly-2020-11-0x01/#_3","text":"semver.org/lang/zh-CN/","text_tokens":["org","-","zh","semver","/","cn",".","lang"],"title":"语义化版本","title_tokens":["版本","化","语义"]},{"location":"weekly/weekly-2020-11-0x02/","text":"[hackettyu'weekly] weekly-2020-11-0x02 ¶ Keywords: Python leancloud ABAP Share ¶ leancloud 薪酬体系 ¶ open.leancloud.cn/salary-2018/ ABAP OO 教程 ¶ JeremyChabert/ABAP-OO 关于 Python 导入的小故事 ¶ github.com/piglei/one-python-craftsman/blob/master/zh_CN/9-a-story-on-cyclic-imports.md 之前关于我对 Python 模块管理的一大疑惑 Tools ¶ Web Framework Benchmarks ¶ www.techempower.com/benchmarks/#section=data- Pyhton web 框架对比 Code Snippets ¶ Note ¶ 团队职责 ¶ 来源网络 one-python-craftsman ¶ github.com/piglei/one-python-craftsman/blob/master/zh_CN/10-a-good-player-know-the-rules.mds 定义了 str 方法的对象，就可以使用 str() 函数来返回可读名称 定义了 next 和 iter 方法的对象，就可以被循环迭代 定义了 bool 方法的对象，在进行布尔判断时就会使用自定义的逻辑 使用 dataclass 简化代码 故事到这里并没有结束。在上面的代码里，我们手动定义了自己的 数据类 VisitRecord，实现了 init 、 eq 等初始化方法。但其实还有更简单的做法。 因为定义数据类这种需求在 Python 中实在太常见了，所以在 3.7 版本中，标准库中新增了 dataclasses 模块，专门帮你简化这类工作。 如果使用 dataclasses 提供的特性，我们的代码可以最终简化成下面这样： @dataclass ( unsafe_hash = True ) class VisitRecordDC : first_name : str last_name : str phone_number : str # 跳过“访问时间”字段，不作为任何对比条件 date_visited : str = field ( hash = False , compare = False ) def find_potential_customers_v4 (): return set ( VisitRecordDC ( ** r ) for r in users_visited_phuket ) - \\ set ( VisitRecordDC ( ** r ) for r in users_visited_nz ) 不用干任何脏活累活，只要不到十行代码就完成了工作。 class Student: def __init__(self, name, age): self.name = name self.age = age def __format__(self, format_spec): if format_spec == 'long': return f'{self.name} is {self.age} years old.' elif format_spec == 'simple': return f'{self.name}({self.age})' raise ValueError('invalid format spec') piglei = Student('piglei', '18') print('{0:simple}'.format(piglei)) print('{0:long}'.format(piglei)) 让我们看看，上面的代码一共用到了哪些与文件处理相关的函数： os . listdir ( path ) ： 列出 path 目录下的所有文件 * （ 含文件夹 ） * os . path . splitext ( filename ) ： 切分文件名里面的基础名称和后缀部分 os . path . join ( path , filename ) ： 组合需要操作的文件名为绝对路径 os . rename ( ... ) ： 重命名某个文件 使用 pathlib 模块改写代码 为了让文件处理变得更简单，Python 在 3.4 版本引入了一个新的标准库模块：pathlib。它基于面向对象思想设计，封装了非常多与文件操作相关的功能。如果使用它来改写上面的代码，结果会大不相同。 使用 pathlib 模块后的代码： from pathlib import Path def unify_ext_with_pathlib ( path ): for fpath in Path ( path ) . glob ( '*.txt' ): fpath . rename ( fpath . with_suffix ( '.csv' )) 和旧代码相比，新函数只需要两行代码就完成了工作。而这两行代码主要做了这么几件事： 首先使用 Path(path) 将字符串路径转换为 Path 对象 调用 .glob('*.txt') 对路径下所有内容进行模式匹配并以生成器方式返回，结果仍然是 Path 对象，所以我们可以接着做后面的操作 使用 .with_suffix('.csv') 直接获取使用新后缀名的文件全路径 调用 .rename(target) 完成重命名 相比 os 和 os.path，引入 pathlib 模块后的代码明显更精简，也更有整体统一感。所有文件相关的操作都是一站式完成。 其他用法 除此之外，pathlib 模块还提供了很多有趣的用法。比如使用 / 运算符来组合文件路径： # 😑 旧朋友：使用 os.path 模块 >>> import os.path >>> os.path.join ( '/tmp' , 'foo.txt' ) '/tmp/foo.txt' # ✨ 新潮流：使用 / 运算符 >>> from pathlib import Path >>> Path ( '/tmp' ) / 'foo.txt' PosixPath ( '/tmp/foo.txt' ) 或者使用 .read_text () 来快速读取文件内容： # 标准做法，使用 with open(...) 打开文件 >>> with open ( 'foo.txt' ) as file: ... print ( file.read ()) ... foo # 使用 pathlib 可以让这件事情变得更简单 >>> from pathlib import Path >>> print ( Path ( 'foo.txt' ) .read_text ()) foo 除了我在文章里介绍的这些，pathlib 模块还提供了非常多有用的方法，强烈建议去 官方文档 详细了解一下。 如果上面这些都不足以让你动心，那么我再多给你一个使用 pathlib 的理由：PEP-519 里定义了一个专门用于“文件路径”的新对象协议，这意味着从该 PEP 生效后的 Python 3.6 版本起，pathlib 里的 Path 对象，可以和以前绝大多数只接受字符串路径的标准库函数兼容使用： >>> p = Path ( '/tmp' ) # 可以直接对 Path 类型对象 p 进行 join >>> os.path.join ( p, 'foo.txt' ) '/tmp/foo.txt' 所以，无需犹豫，赶紧把 pathlib 模块用起来吧。 使用 callable 可以检测某个对象是否“可被调用” 它还会引诱你不断往阵内塞入越来越多的代码，包括过滤掉无效元素、预处理数据、打印日志等等。甚至一些原本不属于同一抽象的内容，也会被塞入到同一片黑魔法阵内。 但是在 Python 3.5 以后的版本，你可以直接用 ** 运算符来快速完成字典的合并操作： user = { ** { \"name\" : \"piglei\" }, ** { \"movies\" : [ \"Fight Club\" ]}} 19 : 00","text_tokens":["该","到","算符","piglei","一下","还","小","这里","用到","兼容","访问","这","段","文件夹","模块","引入","www","初始","suffix","网络","有用","f","介绍","visitrecord","✨"," ","等","student","动心","2018","字","}","def","无需","find","为了","fpath","old","面向","关于","对比","我","10","这种","这些","user","合并","data","code","方式","cyclic","“","结果","变得","从","这件","类型","519","实现","功能","3.5","潮流","可以","管理","返回","吧","age","会","了","from","掉","dataclass","获取","pathlib","中","imports","hackettyu","手动","a","让","提供","后","读取","抽象","csv","path","一站","nz",":","薪酬","同","模式匹配","...","越来","库中","os","官方","对","之外","story","所有","（","黑魔法","@","字符串","自定义","target","被","读","*","魔法","足以","布尔","hash","date","phone","生成器","club","但是","转换","大不相同","跳过","import","上面","实在","含","zh","也","做","以后",",","模式","master","field","3.6","keywords","库","一大","next","时","属于","#","哪些","md","0","所以","做法",".","详细","不足以","visited","导入","团队","版本","给","one","故事","(","class","is","运算符","几件事","customers","干","接着","自定","可","rules","\\","{","或者","不断","_","专门","事情","逻辑","全","更","首先","多数","github","包括","一片","最终","share","elif","if","simple","元素","open","unify","只要","的","需求","旧","不到","封装","init","成","这么","v4","里面","文章","字典","]","和","完成","fight","赶紧","😑","都","路径","blob","疑惑","ext","迭代","后缀","进行","因为","理由","多","相比","、","原本","并","9","简单","leancloud","框架","类","txt","）","r","一个","大多","只","预处理","0x02","名称","新","直接","特性","用法",">","处理","那么","很多","新潮","tmp","定义数据","dataclasses","接受","过滤","section","self","know","它","text","join","非常","[","note","craftsman","，","相同","统一","主要","意味","朋友","打印",")","后缀名","weekly","\"","太","foo","快速","而","compare","来","listdir","如果","几件","iter","techempower","除此","绝对","unsafe","com","其他","任何","framework","name","条件","spec","/","面向对象","一共","明显","教程","强烈建议","感","pyhton","精简","在","就","同一","生成","as","不足","组合","-","用于","3.7","塞入","18","文件","对象","打开","glob","自己","之前","仍然","true","看看","时间","设计","操作","将","file","number","起","是否","我们","player","需要","文档","posixpath","累活","invalid","引诱","与","tools","内容","first","大多数","mds","good","long","一站式","来源","结束","工作","不","成器","新潮流","pep","目录","整体","定义","00","函数","列出","循环","绝对路径","运算","以","这样","salary","for","有趣","帮","协议","除此之外","脏活","等等","为","¶","phuket","with","=","splitext","职责","read","生效","调用","比如","下面","2020","print","下","是","p","__","in","一些","cn","部分","str","数据","十行","切分","jeremychabert","简化","重命名","raise","往","再","相关","越来越","无效","日志","。","某个","建议","还有","movies","'","标准","但","作为","了解","阵内","filename","体系","使用","rename","visitrecorddc","方法","没有","常见","callable","the","起来","绝大","库函数","检测","初始化","命名","snippets","eq","文件名","false","bool","：","你","两行","基于","绝大多数","犹豫","oo","on","set","新增","改写","思想","代码","”","匹配","去","里","19","意味着","强烈","valueerror","后面","return","用","python","potential","除了","甚至","3.4","件夹","format","把","users","判断","其实","benchmarks","11","字符","years","基础","有","abap","last","不用","以前","web"],"title":"[hackettyu'weekly] weekly-2020-11-0x02","title_tokens":["]","-"," ","11","[","2020","0x02","'","weekly","hackettyu"]},{"location":"weekly/weekly-2020-11-0x02/#hackettyuweekly-weekly-2020-11-0x02","text":"Keywords: Python leancloud ABAP","text_tokens":["keywords","abap"," ","python",":","leancloud"],"title":"[hackettyu'weekly] weekly-2020-11-0x02","title_tokens":["]","-"," ","11","[","2020","0x02","'","weekly","hackettyu"]},{"location":"weekly/weekly-2020-11-0x02/#share","text":"","text_tokens":[],"title":"Share","title_tokens":["share"]},{"location":"weekly/weekly-2020-11-0x02/#leancloud","text":"open.leancloud.cn/salary-2018/","text_tokens":["-","salary","2018","/","cn",".","open","leancloud"],"title":"leancloud 薪酬体系","title_tokens":["体系"," ","leancloud","薪酬"]},{"location":"weekly/weekly-2020-11-0x02/#abap-oo","text":"JeremyChabert/ABAP-OO","text_tokens":["oo","-","abap","/","jeremychabert"],"title":"ABAP OO 教程","title_tokens":["oo","abap","教程"," "]},{"location":"weekly/weekly-2020-11-0x02/#python","text":"github.com/piglei/one-python-craftsman/blob/master/zh_CN/9-a-story-on-cyclic-imports.md 之前关于我对 Python 模块管理的一大疑惑","text_tokens":["python","cn","piglei","管理","one","关于","我","的","对","zh","story","模块","9","master","on","-","cyclic","一大","_","com","craftsman","imports","md","a"," ","/","blob",".","疑惑","github","之前"],"title":"关于 Python 导入的小故事","title_tokens":["小","的"," ","导入","python","故事","关于"]},{"location":"weekly/weekly-2020-11-0x02/#tools","text":"","text_tokens":[],"title":"Tools","title_tokens":["tools"]},{"location":"weekly/weekly-2020-11-0x02/#web-framework-benchmarks","text":"www.techempower.com/benchmarks/#section=data- Pyhton web 框架对比","text_tokens":["section","对比","www","data","-","benchmarks","techempower"," ","/","pyhton",".","#","=","com","web","框架"],"title":"Web Framework Benchmarks","title_tokens":["framework"," ","benchmarks","web"]},{"location":"weekly/weekly-2020-11-0x02/#code-snippets","text":"","text_tokens":[],"title":"Code Snippets","title_tokens":["code","snippets"," "]},{"location":"weekly/weekly-2020-11-0x02/#note","text":"","text_tokens":[],"title":"Note","title_tokens":["note"]},{"location":"weekly/weekly-2020-11-0x02/#_1","text":"来源网络","text_tokens":["来源","网络"],"title":"团队职责","title_tokens":["职责","团队"]},{"location":"weekly/weekly-2020-11-0x02/#one-python-craftsman","text":"github.com/piglei/one-python-craftsman/blob/master/zh_CN/10-a-good-player-know-the-rules.mds 定义了 str 方法的对象，就可以使用 str() 函数来返回可读名称 定义了 next 和 iter 方法的对象，就可以被循环迭代 定义了 bool 方法的对象，在进行布尔判断时就会使用自定义的逻辑 使用 dataclass 简化代码 故事到这里并没有结束。在上面的代码里，我们手动定义了自己的 数据类 VisitRecord，实现了 init 、 eq 等初始化方法。但其实还有更简单的做法。 因为定义数据类这种需求在 Python 中实在太常见了，所以在 3.7 版本中，标准库中新增了 dataclasses 模块，专门帮你简化这类工作。 如果使用 dataclasses 提供的特性，我们的代码可以最终简化成下面这样： @dataclass ( unsafe_hash = True ) class VisitRecordDC : first_name : str last_name : str phone_number : str # 跳过“访问时间”字段，不作为任何对比条件 date_visited : str = field ( hash = False , compare = False ) def find_potential_customers_v4 (): return set ( VisitRecordDC ( ** r ) for r in users_visited_phuket ) - \\ set ( VisitRecordDC ( ** r ) for r in users_visited_nz ) 不用干任何脏活累活，只要不到十行代码就完成了工作。 class Student: def __init__(self, name, age): self.name = name self.age = age def __format__(self, format_spec): if format_spec == 'long': return f'{self.name} is {self.age} years old.' elif format_spec == 'simple': return f'{self.name}({self.age})' raise ValueError('invalid format spec') piglei = Student('piglei', '18') print('{0:simple}'.format(piglei)) print('{0:long}'.format(piglei)) 让我们看看，上面的代码一共用到了哪些与文件处理相关的函数： os . listdir ( path ) ： 列出 path 目录下的所有文件 * （ 含文件夹 ） * os . path . splitext ( filename ) ： 切分文件名里面的基础名称和后缀部分 os . path . join ( path , filename ) ： 组合需要操作的文件名为绝对路径 os . rename ( ... ) ： 重命名某个文件 使用 pathlib 模块改写代码 为了让文件处理变得更简单，Python 在 3.4 版本引入了一个新的标准库模块：pathlib。它基于面向对象思想设计，封装了非常多与文件操作相关的功能。如果使用它来改写上面的代码，结果会大不相同。 使用 pathlib 模块后的代码： from pathlib import Path def unify_ext_with_pathlib ( path ): for fpath in Path ( path ) . glob ( '*.txt' ): fpath . rename ( fpath . with_suffix ( '.csv' )) 和旧代码相比，新函数只需要两行代码就完成了工作。而这两行代码主要做了这么几件事： 首先使用 Path(path) 将字符串路径转换为 Path 对象 调用 .glob('*.txt') 对路径下所有内容进行模式匹配并以生成器方式返回，结果仍然是 Path 对象，所以我们可以接着做后面的操作 使用 .with_suffix('.csv') 直接获取使用新后缀名的文件全路径 调用 .rename(target) 完成重命名 相比 os 和 os.path，引入 pathlib 模块后的代码明显更精简，也更有整体统一感。所有文件相关的操作都是一站式完成。 其他用法 除此之外，pathlib 模块还提供了很多有趣的用法。比如使用 / 运算符来组合文件路径： # 😑 旧朋友：使用 os.path 模块 >>> import os.path >>> os.path.join ( '/tmp' , 'foo.txt' ) '/tmp/foo.txt' # ✨ 新潮流：使用 / 运算符 >>> from pathlib import Path >>> Path ( '/tmp' ) / 'foo.txt' PosixPath ( '/tmp/foo.txt' ) 或者使用 .read_text () 来快速读取文件内容： # 标准做法，使用 with open(...) 打开文件 >>> with open ( 'foo.txt' ) as file: ... print ( file.read ()) ... foo # 使用 pathlib 可以让这件事情变得更简单 >>> from pathlib import Path >>> print ( Path ( 'foo.txt' ) .read_text ()) foo 除了我在文章里介绍的这些，pathlib 模块还提供了非常多有用的方法，强烈建议去 官方文档 详细了解一下。 如果上面这些都不足以让你动心，那么我再多给你一个使用 pathlib 的理由：PEP-519 里定义了一个专门用于“文件路径”的新对象协议，这意味着从该 PEP 生效后的 Python 3.6 版本起，pathlib 里的 Path 对象，可以和以前绝大多数只接受字符串路径的标准库函数兼容使用： >>> p = Path ( '/tmp' ) # 可以直接对 Path 类型对象 p 进行 join >>> os.path.join ( p, 'foo.txt' ) '/tmp/foo.txt' 所以，无需犹豫，赶紧把 pathlib 模块用起来吧。 使用 callable 可以检测某个对象是否“可被调用” 它还会引诱你不断往阵内塞入越来越多的代码，包括过滤掉无效元素、预处理数据、打印日志等等。甚至一些原本不属于同一抽象的内容，也会被塞入到同一片黑魔法阵内。 但是在 Python 3.5 以后的版本，你可以直接用 ** 运算符来快速完成字典的合并操作： user = { ** { \"name\" : \"piglei\" }, ** { \"movies\" : [ \"Fight Club\" ]}} 19 : 00","text_tokens":["该","到","算符","piglei","一下","还","这里","用到","兼容","访问","这","段","文件夹","模块","引入","初始","suffix","有用","f","介绍","visitrecord","✨"," ","等","student","动心","字","}","def","无需","find","为了","fpath","old","面向","对比","我","10","这种","这些","user","合并","方式","“","结果","变得","从","这件","类型","519","实现","功能","3.5","潮流","可以","返回","吧","age","会","了","from","掉","dataclass","获取","pathlib","中","手动","a","让","提供","后","读取","抽象","csv","path","一站","nz",":","同","模式匹配","...","越来","库中","os","官方","对","之外","所有","（","黑魔法","@","字符串","自定义","target","被","读","*","魔法","足以","布尔","hash","date","phone","生成器","club","但是","转换","大不相同","跳过","import","上面","实在","含","zh","也","做","以后",",","模式","master","field","3.6","库","next","时","属于","#","哪些","0","所以","做法",".","详细","不足以","visited","版本","给","one","故事","(","class","is","运算符","几件事","customers","干","接着","自定","可","rules","\\","{","或者","不断","_","专门","事情","逻辑","全","更","首先","多数","github","包括","一片","最终","elif","if","simple","元素","open","unify","只要","的","需求","旧","不到","封装","init","成","这么","v4","里面","文章","字典","和","]","完成","fight","赶紧","😑","都","路径","blob","ext","迭代","后缀","进行","因为","理由","多","相比","、","原本","并","简单","类","txt","）","r","一个","大多","只","预处理","名称","新","直接","特性","用法",">","处理","那么","很多","新潮","tmp","定义数据","dataclasses","接受","过滤","self","它","know","text","join","非常","[","craftsman","，","相同","统一","主要","意味","朋友","打印",")","后缀名","\"","太","foo","快速","而","compare","来","listdir","如果","几件","iter","除此","绝对","unsafe","com","其他","任何","name","条件","spec","/","面向对象","一共","明显","强烈建议","感","精简","在","就","同一","生成","as","不足","组合","-","用于","3.7","塞入","18","文件","对象","打开","glob","自己","仍然","true","看看","时间","设计","操作","将","file","number","起","是否","我们","player","需要","文档","posixpath","累活","invalid","引诱","与","内容","first","大多数","mds","good","long","一站式","结束","工作","不","成器","新潮流","pep","目录","整体","定义","00","函数","列出","循环","绝对路径","运算","以","这样","for","有趣","帮","协议","除此之外","脏活","等等","为","phuket","with","=","splitext","read","生效","调用","比如","下面","print","下","是","p","__","in","一些","cn","部分","str","数据","十行","切分","简化","重命名","raise","往","再","相关","越来越","无效","日志","。","某个","建议","还有","movies","标准","'","但","作为","了解","阵内","filename","使用","rename","visitrecorddc","方法","没有","常见","callable","the","起来","绝大","库函数","检测","初始化","命名","eq","文件名","false","bool","：","你","两行","基于","绝大多数","犹豫","set","新增","改写","思想","代码","”","匹配","去","里","19","意味着","强烈","valueerror","后面","return","用","python","potential","除了","甚至","3.4","件夹","format","把","users","判断","其实","字符","years","基础","有","last","不用","以前"],"title":"one-python-craftsman","title_tokens":["-","one","python","craftsman"]}]}